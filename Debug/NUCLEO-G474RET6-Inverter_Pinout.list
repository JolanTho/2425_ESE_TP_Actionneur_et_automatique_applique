
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  0800abd8  0800abd8  0000bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd8  0800afd8  0000c124  2**0
                  CONTENTS
  4 .ARM          00000008  0800afd8  0800afd8  0000bfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afe0  0800afe0  0000c124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afe0  0800afe0  0000bfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe4  0800afe4  0000bfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800afe8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000124  0800b10c  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800b10c  0000c708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c410  00000000  00000000  0000c154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1b  00000000  00000000  00028564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0002bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001173  00000000  00000000  0002d620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7b1  00000000  00000000  0002e793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c931  00000000  00000000  00058f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114ac2  00000000  00000000  00075875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006af0  00000000  00000000  0018a37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00190e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800abc0 	.word	0x0800abc0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	0800abc0 	.word	0x0800abc0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f009 fa34 	bl	8009a66 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b3a      	ldr	r3, [pc, #232]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b38      	ldr	r3, [pc, #224]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b36      	ldr	r3, [pc, #216]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b34      	ldr	r3, [pc, #208]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b33      	ldr	r3, [pc, #204]	@ (80006e8 <MX_ADC1_Init+0x108>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000620:	4b31      	ldr	r3, [pc, #196]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000622:	2201      	movs	r2, #1
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b30      	ldr	r3, [pc, #192]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <MX_ADC1_Init+0x108>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000632:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000634:	2201      	movs	r2, #1
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000638:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <MX_ADC1_Init+0x108>)
 800063a:	2202      	movs	r2, #2
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000648:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000656:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000658:	2201      	movs	r2, #1
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	481e      	ldr	r0, [pc, #120]	@ (80006e8 <MX_ADC1_Init+0x108>)
 800066e:	f001 fe83 	bl	8002378 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000678:	f000 fb88 	bl	8000d8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	4818      	ldr	r0, [pc, #96]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000688:	f003 fa34 	bl	8003af4 <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000692:	f000 fb7b 	bl	8000d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_ADC1_Init+0x10c>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800069e:	2307      	movs	r3, #7
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	@ 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <MX_ADC1_Init+0x108>)
 80006b4:	f002 fb6e 	bl	8002d94 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006be:	f000 fb65 	bl	8000d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_ADC1_Init+0x110>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c6:	230c      	movs	r3, #12
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <MX_ADC1_Init+0x108>)
 80006d0:	f002 fb60 	bl	8002d94 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006da:	f000 fb57 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3730      	adds	r7, #48	@ 0x30
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000140 	.word	0x20000140
 80006ec:	08600004 	.word	0x08600004
 80006f0:	32601000 	.word	0x32601000

080006f4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2220      	movs	r2, #32
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f009 f9b0 	bl	8009a66 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000706:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000708:	4a2c      	ldr	r2, [pc, #176]	@ (80007bc <MX_ADC2_Init+0xc8>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b2a      	ldr	r3, [pc, #168]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800070e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000712:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071a:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000720:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000726:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b22      	ldr	r3, [pc, #136]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800072e:	2204      	movs	r2, #4
 8000730:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000732:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000734:	2200      	movs	r2, #0
 8000736:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000738:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800073a:	2201      	movs	r2, #1
 800073c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800073e:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000740:	2201      	movs	r2, #1
 8000742:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800074c:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800074e:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000756:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800075a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800075c:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800075e:	2201      	movs	r2, #1
 8000760:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000772:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000774:	f001 fe00 	bl	8002378 <HAL_ADC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800077e:	f000 fb05 	bl	8000d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_ADC2_Init+0xcc>)
 8000784:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000786:	2306      	movs	r3, #6
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800078a:	2307      	movs	r3, #7
 800078c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078e:	237f      	movs	r3, #127	@ 0x7f
 8000790:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000792:	2304      	movs	r3, #4
 8000794:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 80007a0:	f002 faf8 	bl	8002d94 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80007aa:	f000 faef 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200001ac 	.word	0x200001ac
 80007bc:	50000100 	.word	0x50000100
 80007c0:	04300002 	.word	0x04300002

080007c4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0a4      	sub	sp, #144	@ 0x90
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e0:	2254      	movs	r2, #84	@ 0x54
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f009 f93e 	bl	8009a66 <memset>
  if(adcHandle->Instance==ADC1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007f2:	f040 80a8 	bne.w	8000946 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007fc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000800:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000806:	4618      	mov	r0, r3
 8000808:	f004 fe7a 	bl	8005500 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000812:	f000 fabb 	bl	8000d8c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000816:	4b97      	ldr	r3, [pc, #604]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a95      	ldr	r2, [pc, #596]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 800081e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000820:	4b94      	ldr	r3, [pc, #592]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10b      	bne.n	8000840 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000828:	4b93      	ldr	r3, [pc, #588]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082c:	4a92      	ldr	r2, [pc, #584]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800082e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000834:	4b90      	ldr	r3, [pc, #576]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
 800083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000840:	4b8d      	ldr	r3, [pc, #564]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000844:	4a8c      	ldr	r2, [pc, #560]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084c:	4b8a      	ldr	r3, [pc, #552]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	623b      	str	r3, [r7, #32]
 8000856:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b87      	ldr	r3, [pc, #540]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085c:	4a86      	ldr	r2, [pc, #536]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000864:	4b84      	ldr	r3, [pc, #528]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
 800086e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000870:	4b81      	ldr	r3, [pc, #516]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000874:	4a80      	ldr	r2, [pc, #512]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
 8000886:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000888:	2304      	movs	r3, #4
 800088a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800089c:	4619      	mov	r1, r3
 800089e:	4877      	ldr	r0, [pc, #476]	@ (8000a7c <HAL_ADC_MspInit+0x2b8>)
 80008a0:	f003 fe42 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80008a4:	2302      	movs	r3, #2
 80008a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f003 fe33 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008c2:	2303      	movs	r3, #3
 80008c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c6:	2303      	movs	r3, #3
 80008c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008d6:	4619      	mov	r1, r3
 80008d8:	4869      	ldr	r0, [pc, #420]	@ (8000a80 <HAL_ADC_MspInit+0x2bc>)
 80008da:	f003 fe25 	bl	8004528 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008de:	4b69      	ldr	r3, [pc, #420]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008e0:	4a69      	ldr	r2, [pc, #420]	@ (8000a88 <HAL_ADC_MspInit+0x2c4>)
 80008e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008e4:	4b67      	ldr	r3, [pc, #412]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008e6:	2205      	movs	r2, #5
 80008e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ea:	4b66      	ldr	r3, [pc, #408]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f0:	4b64      	ldr	r3, [pc, #400]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008f6:	4b63      	ldr	r3, [pc, #396]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008f8:	2280      	movs	r2, #128	@ 0x80
 80008fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008fc:	4b61      	ldr	r3, [pc, #388]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000902:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000904:	4b5f      	ldr	r3, [pc, #380]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 8000906:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800090a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800090c:	4b5d      	ldr	r3, [pc, #372]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 800090e:	2220      	movs	r2, #32
 8000910:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000912:	4b5c      	ldr	r3, [pc, #368]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000918:	485a      	ldr	r0, [pc, #360]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 800091a:	f003 fad3 	bl	8003ec4 <HAL_DMA_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8000924:	f000 fa32 	bl	8000d8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a56      	ldr	r2, [pc, #344]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 800092c:	655a      	str	r2, [r3, #84]	@ 0x54
 800092e:	4a55      	ldr	r2, [pc, #340]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2012      	movs	r0, #18
 800093a:	f003 fa9b 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800093e:	2012      	movs	r0, #18
 8000940:	f003 fab2 	bl	8003ea8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000944:	e092      	b.n	8000a6c <HAL_ADC_MspInit+0x2a8>
  else if(adcHandle->Instance==ADC2)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a50      	ldr	r2, [pc, #320]	@ (8000a8c <HAL_ADC_MspInit+0x2c8>)
 800094c:	4293      	cmp	r3, r2
 800094e:	f040 808d 	bne.w	8000a6c <HAL_ADC_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000958:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800095c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000962:	4618      	mov	r0, r3
 8000964:	f004 fdcc 	bl	8005500 <HAL_RCCEx_PeriphCLKConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 800096e:	f000 fa0d 	bl	8000d8c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000972:	4b40      	ldr	r3, [pc, #256]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a3e      	ldr	r2, [pc, #248]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 800097a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800097c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d10b      	bne.n	800099c <HAL_ADC_MspInit+0x1d8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000984:	4b3c      	ldr	r3, [pc, #240]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000988:	4a3b      	ldr	r2, [pc, #236]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800098a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800098e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000990:	4b39      	ldr	r3, [pc, #228]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	4b36      	ldr	r3, [pc, #216]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a0:	4a35      	ldr	r2, [pc, #212]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a8:	4b33      	ldr	r3, [pc, #204]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b30      	ldr	r3, [pc, #192]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80009cc:	230b      	movs	r3, #11
 80009ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d0:	2303      	movs	r3, #3
 80009d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009e0:	4619      	mov	r1, r3
 80009e2:	4826      	ldr	r0, [pc, #152]	@ (8000a7c <HAL_ADC_MspInit+0x2b8>)
 80009e4:	f003 fda0 	bl	8004528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80009e8:	2301      	movs	r3, #1
 80009ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009fc:	4619      	mov	r1, r3
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a02:	f003 fd91 	bl	8004528 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000a06:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a08:	4a22      	ldr	r2, [pc, #136]	@ (8000a94 <HAL_ADC_MspInit+0x2d0>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a0e:	2224      	movs	r2, #36	@ 0x24
 8000a10:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a20:	2280      	movs	r2, #128	@ 0x80
 8000a22:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a2a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a32:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a36:	2220      	movs	r2, #32
 8000a38:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a40:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a42:	f003 fa3f 	bl	8003ec4 <HAL_DMA_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_ADC_MspInit+0x28c>
      Error_Handler();
 8000a4c:	f000 f99e 	bl	8000d8c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a54:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a56:	4a0e      	ldr	r2, [pc, #56]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2012      	movs	r0, #18
 8000a62:	f003 fa07 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a66:	2012      	movs	r0, #18
 8000a68:	f003 fa1e 	bl	8003ea8 <HAL_NVIC_EnableIRQ>
}
 8000a6c:	bf00      	nop
 8000a6e:	3790      	adds	r7, #144	@ 0x90
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200002d8 	.word	0x200002d8
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	48000400 	.word	0x48000400
 8000a84:	20000218 	.word	0x20000218
 8000a88:	40020008 	.word	0x40020008
 8000a8c:	50000100 	.word	0x50000100
 8000a90:	20000278 	.word	0x20000278
 8000a94:	4002001c 	.word	0x4002001c

08000a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aa2:	4a15      	ldr	r2, [pc, #84]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000aaa:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aba:	4a0f      	ldr	r2, [pc, #60]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	200b      	movs	r0, #11
 8000ad4:	f003 f9ce 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ad8:	200b      	movs	r0, #11
 8000ada:	f003 f9e5 	bl	8003ea8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f003 f9c6 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ae8:	200c      	movs	r0, #12
 8000aea:	f003 f9dd 	bl	8003ea8 <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	@ 0x28
 8000b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b3f      	ldr	r3, [pc, #252]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a3e      	ldr	r2, [pc, #248]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2a:	4b39      	ldr	r3, [pc, #228]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a38      	ldr	r2, [pc, #224]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b30:	f043 0320 	orr.w	r3, r3, #32
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b36      	ldr	r3, [pc, #216]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0320 	and.w	r3, r3, #32
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b33      	ldr	r3, [pc, #204]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a32      	ldr	r2, [pc, #200]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a26      	ldr	r2, [pc, #152]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f003 fe4b 	bl	800482c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2104      	movs	r1, #4
 8000b9a:	481e      	ldr	r0, [pc, #120]	@ (8000c14 <MX_GPIO_Init+0x118>)
 8000b9c:	f003 fe46 	bl	800482c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4818      	ldr	r0, [pc, #96]	@ (8000c18 <MX_GPIO_Init+0x11c>)
 8000bb8:	f003 fcb6 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000bbc:	2320      	movs	r3, #32
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd6:	f003 fca7 	bl	8004528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4808      	ldr	r0, [pc, #32]	@ (8000c14 <MX_GPIO_Init+0x118>)
 8000bf2:	f003 fc99 	bl	8004528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2028      	movs	r0, #40	@ 0x28
 8000bfc:	f003 f93a 	bl	8003e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c00:	2028      	movs	r0, #40	@ 0x28
 8000c02:	f003 f951 	bl	8003ea8 <HAL_NVIC_EnableIRQ>

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	@ 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000c00 	.word	0x48000c00
 8000c18:	48000800 	.word	0x48000800

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f001 f8eb 	bl	8001dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f832 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f7ff ff68 	bl	8000afc <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2c:	f7ff ff34 	bl	8000a98 <MX_DMA_Init>
  MX_ADC2_Init();
 8000c30:	f7ff fd60 	bl	80006f4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000c34:	f7ff fcd4 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c38:	f000 fa98 	bl	800116c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c3c:	f000 fb4c 	bl	80012d8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 fc88 	bl	8001554 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c44:	f000 fcd2 	bl	80015ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8000c48:	f000 fe5a 	bl	8001900 <Shell_Init>

	pwm_start();
 8000c4c:	f000 fdc2 	bl	80017d4 <pwm_start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c50:	217f      	movs	r1, #127	@ 0x7f
 8000c52:	480a      	ldr	r0, [pc, #40]	@ (8000c7c <main+0x60>)
 8000c54:	f002 feba 	bl	80039cc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint16_t*)&value_adc1,2);
 8000c58:	2202      	movs	r2, #2
 8000c5a:	4909      	ldr	r1, [pc, #36]	@ (8000c80 <main+0x64>)
 8000c5c:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <main+0x60>)
 8000c5e:	f001 fd47 	bl	80026f0 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000c62:	217f      	movs	r1, #127	@ 0x7f
 8000c64:	4807      	ldr	r0, [pc, #28]	@ (8000c84 <main+0x68>)
 8000c66:	f002 feb1 	bl	80039cc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2,(uint16_t*)&value_adc2,1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4906      	ldr	r1, [pc, #24]	@ (8000c88 <main+0x6c>)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <main+0x68>)
 8000c70:	f001 fd3e 	bl	80026f0 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000c74:	f000 fe84 	bl	8001980 <Shell_Loop>
 8000c78:	e7fc      	b.n	8000c74 <main+0x58>
 8000c7a:	bf00      	nop
 8000c7c:	20000140 	.word	0x20000140
 8000c80:	200002dc 	.word	0x200002dc
 8000c84:	200001ac 	.word	0x200001ac
 8000c88:	200002e0 	.word	0x200002e0

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	@ 0x50
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0318 	add.w	r3, r7, #24
 8000c96:	2238      	movs	r2, #56	@ 0x38
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f008 fee3 	bl	8009a66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f003 fe12 	bl	80048d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cbc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cca:	2355      	movs	r3, #85	@ 0x55
 8000ccc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 feae 	bl	8004a40 <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000cea:	f000 f84f 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2104      	movs	r1, #4
 8000d06:	4618      	mov	r0, r3
 8000d08:	f004 f9ac 	bl	8005064 <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d12:	f000 f83b 	bl	8000d8c <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3750      	adds	r7, #80	@ 0x50
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	cpt = (cpt + 1)%20000;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <HAL_ADC_ConvCpltCallback+0x44>)
 8000d30:	fba3 1302 	umull	r1, r3, r3, r2
 8000d34:	0b9b      	lsrs	r3, r3, #14
 8000d36:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000d3a:	fb01 f303 	mul.w	r3, r1, r3
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	4a07      	ldr	r2, [pc, #28]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x40>)
 8000d42:	6013      	str	r3, [r2, #0]
	if(cpt == 0) HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d104      	bne.n	8000d56 <HAL_ADC_ConvCpltCallback+0x36>
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d52:	f003 fd83 	bl	800485c <HAL_GPIO_TogglePin>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200002e4 	.word	0x200002e4
 8000d64:	d1b71759 	.word	0xd1b71759

08000d68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d7a:	f001 f857 	bl	8001e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40001000 	.word	0x40001000

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <Error_Handler+0x8>

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <HAL_MspInit+0x44>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ddc <HAL_MspInit+0x44>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <HAL_MspInit+0x44>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <HAL_MspInit+0x44>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dba:	4a08      	ldr	r2, [pc, #32]	@ (8000ddc <HAL_MspInit+0x44>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_MspInit+0x44>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dce:	f003 fe27 	bl	8004a20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	@ 0x30
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <HAL_InitTick+0xc4>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df4:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea4 <HAL_InitTick+0xc4>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <HAL_InitTick+0xc4>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 020c 	add.w	r2, r7, #12
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f004 fafc 	bl	8005410 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e18:	f004 face 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 8000e1c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e20:	4a21      	ldr	r2, [pc, #132]	@ (8000ea8 <HAL_InitTick+0xc8>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9b      	lsrs	r3, r3, #18
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e2e:	4a20      	ldr	r2, [pc, #128]	@ (8000eb0 <HAL_InitTick+0xd0>)
 8000e30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e4c:	4817      	ldr	r0, [pc, #92]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e4e:	f004 fda5 	bl	800599c <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d11b      	bne.n	8000e98 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e60:	4812      	ldr	r0, [pc, #72]	@ (8000eac <HAL_InitTick+0xcc>)
 8000e62:	f004 fdfd 	bl	8005a60 <HAL_TIM_Base_Start_IT>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d111      	bne.n	8000e98 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e74:	2036      	movs	r0, #54	@ 0x36
 8000e76:	f003 f817 	bl	8003ea8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d808      	bhi.n	8000e92 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2036      	movs	r0, #54	@ 0x36
 8000e86:	f002 fff5 	bl	8003e74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_InitTick+0xd4>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e002      	b.n	8000e98 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3730      	adds	r7, #48	@ 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	431bde83 	.word	0x431bde83
 8000eac:	200002e8 	.word	0x200002e8
 8000eb0:	40001000 	.word	0x40001000
 8000eb4:	200000c0 	.word	0x200000c0

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <DMA1_Channel1_IRQHandler+0x10>)
 8000f1e:	f003 f9b4 	bl	800428a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000218 	.word	0x20000218

08000f2c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000f30:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <DMA1_Channel2_IRQHandler+0x10>)
 8000f32:	f003 f9aa 	bl	800428a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000278 	.word	0x20000278

08000f40 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f44:	4803      	ldr	r0, [pc, #12]	@ (8000f54 <ADC1_2_IRQHandler+0x14>)
 8000f46:	f001 fca7 	bl	8002898 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f4a:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <ADC1_2_IRQHandler+0x18>)
 8000f4c:	f001 fca4 	bl	8002898 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000140 	.word	0x20000140
 8000f58:	200001ac 	.word	0x200001ac

08000f5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <TIM3_IRQHandler+0x10>)
 8000f62:	f004 fffb 	bl	8005f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000384 	.word	0x20000384

08000f70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <USART2_IRQHandler+0x10>)
 8000f76:	f006 fb95 	bl	80076a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200003d0 	.word	0x200003d0

08000f84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <USART3_IRQHandler+0x10>)
 8000f8a:	f006 fb8b 	bl	80076a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000464 	.word	0x20000464

08000f98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000f9c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fa0:	f003 fc76 	bl	8004890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <TIM6_DAC_IRQHandler+0x10>)
 8000fae:	f004 ffd5 	bl	8005f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002e8 	.word	0x200002e8

08000fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_kill>:

int _kill(int pid, int sig)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fd6:	f008 fdf1 	bl	8009bbc <__errno>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2216      	movs	r2, #22
 8000fde:	601a      	str	r2, [r3, #0]
  return -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_exit>:

void _exit (int status)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffe7 	bl	8000fcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ffe:	bf00      	nop
 8001000:	e7fd      	b.n	8000ffe <_exit+0x12>

08001002 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e00a      	b.n	800102a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001014:	f3af 8000 	nop.w
 8001018:	4601      	mov	r1, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	60ba      	str	r2, [r7, #8]
 8001020:	b2ca      	uxtb	r2, r1
 8001022:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	429a      	cmp	r2, r3
 8001030:	dbf0      	blt.n	8001014 <_read+0x12>
  }

  return len;
 8001032:	687b      	ldr	r3, [r7, #4]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e009      	b.n	8001062 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	60ba      	str	r2, [r7, #8]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	dbf1      	blt.n	800104e <_write+0x12>
  }
  return len;
 800106a:	687b      	ldr	r3, [r7, #4]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_close>:

int _close(int file)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800109c:	605a      	str	r2, [r3, #4]
  return 0;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_isatty>:

int _isatty(int file)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f008 fd56 	bl	8009bbc <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20020000 	.word	0x20020000
 800113c:	00000400 	.word	0x00000400
 8001140:	20000334 	.word	0x20000334
 8001144:	20000708 	.word	0x20000708

08001148 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b098      	sub	sp, #96	@ 0x60
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001172:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]
 8001190:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2234      	movs	r2, #52	@ 0x34
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f008 fc64 	bl	8009a66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800119e:	4b4c      	ldr	r3, [pc, #304]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80011a0:	4a4c      	ldr	r2, [pc, #304]	@ (80012d4 <MX_TIM1_Init+0x168>)
 80011a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a4:	4b4a      	ldr	r3, [pc, #296]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80011aa:	4b49      	ldr	r3, [pc, #292]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80011ac:	2220      	movs	r2, #32
 80011ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 80011b0:	4b47      	ldr	r3, [pc, #284]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80011b2:	f242 1233 	movw	r2, #8499	@ 0x2133
 80011b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b45      	ldr	r3, [pc, #276]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011be:	4b44      	ldr	r3, [pc, #272]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b42      	ldr	r3, [pc, #264]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ca:	4841      	ldr	r0, [pc, #260]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80011cc:	f004 fcc0 	bl	8005b50 <HAL_TIM_PWM_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f7ff fdd9 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011da:	2320      	movs	r3, #32
 80011dc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80011de:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ec:	4619      	mov	r1, r3
 80011ee:	4838      	ldr	r0, [pc, #224]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80011f0:	f005 ff86 	bl	8007100 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011fa:	f7ff fdc7 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fe:	2360      	movs	r3, #96	@ 0x60
 8001200:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5100;
 8001202:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8001206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001208:	2300      	movs	r3, #0
 800120a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800120c:	2300      	movs	r3, #0
 800120e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	482a      	ldr	r0, [pc, #168]	@ (80012d0 <MX_TIM1_Init+0x164>)
 8001226:	f004 ffe9 	bl	80061fc <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001230:	f7ff fdac 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.Pulse = 3400;
 8001234:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001238:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800123e:	2204      	movs	r2, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4823      	ldr	r0, [pc, #140]	@ (80012d0 <MX_TIM1_Init+0x164>)
 8001244:	f004 ffda 	bl	80061fc <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 800124e:	f7ff fd9d 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.Pulse = 5100;
 8001252:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8001256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001258:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800125c:	2208      	movs	r2, #8
 800125e:	4619      	mov	r1, r3
 8001260:	481b      	ldr	r0, [pc, #108]	@ (80012d0 <MX_TIM1_Init+0x164>)
 8001262:	f004 ffcb 	bl	80061fc <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800126c:	f7ff fd8e 	bl	8000d8c <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001270:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <MX_TIM1_Init+0x164>)
 8001272:	f006 f86f 	bl	8007354 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 8001282:	2311      	movs	r3, #17
 8001284:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800128a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800129c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80012b4:	f005 ffba 	bl	800722c <HAL_TIMEx_ConfigBreakDeadTime>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 80012be:	f7ff fd65 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c2:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <MX_TIM1_Init+0x164>)
 80012c4:	f000 f8de 	bl	8001484 <HAL_TIM_MspPostInit>

}
 80012c8:	bf00      	nop
 80012ca:	3760      	adds	r7, #96	@ 0x60
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000338 	.word	0x20000338
 80012d4:	40012c00 	.word	0x40012c00

080012d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <MX_TIM3_Init+0x90>)
 80012f8:	4a1c      	ldr	r2, [pc, #112]	@ (800136c <MX_TIM3_Init+0x94>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <MX_TIM3_Init+0x90>)
 80012fe:	2204      	movs	r2, #4
 8001300:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <MX_TIM3_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33999;
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_TIM3_Init+0x90>)
 800130a:	f248 42cf 	movw	r2, #33999	@ 0x84cf
 800130e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <MX_TIM3_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_TIM3_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	480d      	ldr	r0, [pc, #52]	@ (8001368 <MX_TIM3_Init+0x90>)
 8001334:	f005 fd15 	bl	8006d62 <HAL_TIMEx_HallSensor_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800133e:	f7ff fd25 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001342:	2350      	movs	r3, #80	@ 0x50
 8001344:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	@ (8001368 <MX_TIM3_Init+0x90>)
 8001350:	f005 fed6 	bl	8007100 <HAL_TIMEx_MasterConfigSynchronization>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800135a:	f7ff fd17 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000384 	.word	0x20000384
 800136c:	40000400 	.word	0x40000400

08001370 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <HAL_TIM_PWM_MspInit+0x38>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10b      	bne.n	800139a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001386:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001388:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800138c:	6613      	str	r3, [r2, #96]	@ 0x60
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001392:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001478 <HAL_TIMEx_HallSensor_MspInit+0xc8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d14d      	bne.n	800146e <HAL_TIMEx_HallSensor_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d2:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <HAL_TIMEx_HallSensor_MspInit+0xcc>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	4a29      	ldr	r2, [pc, #164]	@ (800147c <HAL_TIMEx_HallSensor_MspInit+0xcc>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013de:	4b27      	ldr	r3, [pc, #156]	@ (800147c <HAL_TIMEx_HallSensor_MspInit+0xcc>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_TIMEx_HallSensor_MspInit+0xcc>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a23      	ldr	r2, [pc, #140]	@ (800147c <HAL_TIMEx_HallSensor_MspInit+0xcc>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b21      	ldr	r3, [pc, #132]	@ (800147c <HAL_TIMEx_HallSensor_MspInit+0xcc>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <HAL_TIMEx_HallSensor_MspInit+0xcc>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a1d      	ldr	r2, [pc, #116]	@ (800147c <HAL_TIMEx_HallSensor_MspInit+0xcc>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <HAL_TIMEx_HallSensor_MspInit+0xcc>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800141a:	2350      	movs	r3, #80	@ 0x50
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800142a:	2302      	movs	r3, #2
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f003 f876 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800143c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800144e:	2302      	movs	r3, #2
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4809      	ldr	r0, [pc, #36]	@ (8001480 <HAL_TIMEx_HallSensor_MspInit+0xd0>)
 800145a:	f003 f865 	bl	8004528 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	201d      	movs	r0, #29
 8001464:	f002 fd06 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001468:	201d      	movs	r0, #29
 800146a:	f002 fd1d 	bl	8003ea8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	@ 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40000400 	.word	0x40000400
 800147c:	40021000 	.word	0x40021000
 8001480:	48000800 	.word	0x48000800

08001484 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a29      	ldr	r2, [pc, #164]	@ (8001548 <HAL_TIM_MspPostInit+0xc4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d14b      	bne.n	800153e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b29      	ldr	r3, [pc, #164]	@ (800154c <HAL_TIM_MspPostInit+0xc8>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	4a28      	ldr	r2, [pc, #160]	@ (800154c <HAL_TIM_MspPostInit+0xc8>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b2:	4b26      	ldr	r3, [pc, #152]	@ (800154c <HAL_TIM_MspPostInit+0xc8>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b23      	ldr	r3, [pc, #140]	@ (800154c <HAL_TIM_MspPostInit+0xc8>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a22      	ldr	r2, [pc, #136]	@ (800154c <HAL_TIM_MspPostInit+0xc8>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_TIM_MspPostInit+0xc8>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80014d6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014e8:	2306      	movs	r3, #6
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4817      	ldr	r0, [pc, #92]	@ (8001550 <HAL_TIM_MspPostInit+0xcc>)
 80014f4:	f003 f818 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80014f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800150a:	2304      	movs	r3, #4
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	480e      	ldr	r0, [pc, #56]	@ (8001550 <HAL_TIM_MspPostInit+0xcc>)
 8001516:	f003 f807 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800151a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800151e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800152c:	2306      	movs	r3, #6
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153a:	f002 fff5 	bl	8004528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	@ 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40012c00 	.word	0x40012c00
 800154c:	40021000 	.word	0x40021000
 8001550:	48000400 	.word	0x48000400

08001554 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001558:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 800155a:	4a23      	ldr	r2, [pc, #140]	@ (80015e8 <MX_USART2_UART_Init+0x94>)
 800155c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800155e:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001596:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159c:	4811      	ldr	r0, [pc, #68]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 800159e:	f005 ff57 	bl	8007450 <HAL_UART_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015a8:	f7ff fbf0 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ac:	2100      	movs	r1, #0
 80015ae:	480d      	ldr	r0, [pc, #52]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 80015b0:	f007 ffcd 	bl	800954e <HAL_UARTEx_SetTxFifoThreshold>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015ba:	f7ff fbe7 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015be:	2100      	movs	r1, #0
 80015c0:	4808      	ldr	r0, [pc, #32]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 80015c2:	f008 f802 	bl	80095ca <HAL_UARTEx_SetRxFifoThreshold>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015cc:	f7ff fbde 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_USART2_UART_Init+0x90>)
 80015d2:	f007 ff83 	bl	80094dc <HAL_UARTEx_DisableFifoMode>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015dc:	f7ff fbd6 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200003d0 	.word	0x200003d0
 80015e8:	40004400 	.word	0x40004400

080015ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <MX_USART3_UART_Init+0x90>)
 80015f2:	4a23      	ldr	r2, [pc, #140]	@ (8001680 <MX_USART3_UART_Init+0x94>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015f6:	4b21      	ldr	r3, [pc, #132]	@ (800167c <MX_USART3_UART_Init+0x90>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <MX_USART3_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <MX_USART3_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <MX_USART3_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <MX_USART3_UART_Init+0x90>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <MX_USART3_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b17      	ldr	r3, [pc, #92]	@ (800167c <MX_USART3_UART_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <MX_USART3_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <MX_USART3_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162e:	4b13      	ldr	r3, [pc, #76]	@ (800167c <MX_USART3_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001634:	4811      	ldr	r0, [pc, #68]	@ (800167c <MX_USART3_UART_Init+0x90>)
 8001636:	f005 ff0b 	bl	8007450 <HAL_UART_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001640:	f7ff fba4 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001644:	2100      	movs	r1, #0
 8001646:	480d      	ldr	r0, [pc, #52]	@ (800167c <MX_USART3_UART_Init+0x90>)
 8001648:	f007 ff81 	bl	800954e <HAL_UARTEx_SetTxFifoThreshold>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001652:	f7ff fb9b 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4808      	ldr	r0, [pc, #32]	@ (800167c <MX_USART3_UART_Init+0x90>)
 800165a:	f007 ffb6 	bl	80095ca <HAL_UARTEx_SetRxFifoThreshold>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001664:	f7ff fb92 	bl	8000d8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	@ (800167c <MX_USART3_UART_Init+0x90>)
 800166a:	f007 ff37 	bl	80094dc <HAL_UARTEx_DisableFifoMode>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001674:	f7ff fb8a 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000464 	.word	0x20000464
 8001680:	40004800 	.word	0x40004800

08001684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b0a0      	sub	sp, #128	@ 0x80
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	2254      	movs	r2, #84	@ 0x54
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f008 f9de 	bl	8009a66 <memset>
  if(uartHandle->Instance==USART2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a45      	ldr	r2, [pc, #276]	@ (80017c4 <HAL_UART_MspInit+0x140>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d13f      	bne.n	8001734 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 ff1d 	bl	8005500 <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016cc:	f7ff fb5e 	bl	8000d8c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d0:	4b3d      	ldr	r3, [pc, #244]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d4:	4a3c      	ldr	r2, [pc, #240]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 80016d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016da:	6593      	str	r3, [r2, #88]	@ 0x58
 80016dc:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ec:	4a36      	ldr	r2, [pc, #216]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f4:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001700:	230c      	movs	r3, #12
 8001702:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001710:	2307      	movs	r3, #7
 8001712:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171e:	f002 ff03 	bl	8004528 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2026      	movs	r0, #38	@ 0x26
 8001728:	f002 fba4 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800172c:	2026      	movs	r0, #38	@ 0x26
 800172e:	f002 fbbb 	bl	8003ea8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001732:	e043      	b.n	80017bc <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a24      	ldr	r2, [pc, #144]	@ (80017cc <HAL_UART_MspInit+0x148>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d13e      	bne.n	80017bc <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800173e:	2304      	movs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fed8 	bl	8005500 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001756:	f7ff fb19 	bl	8000d8c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800175a:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	4a1a      	ldr	r2, [pc, #104]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001764:	6593      	str	r3, [r2, #88]	@ 0x58
 8001766:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177e:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_UART_MspInit+0x144>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800178a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800178e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800179c:	2307      	movs	r3, #7
 800179e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017a4:	4619      	mov	r1, r3
 80017a6:	480a      	ldr	r0, [pc, #40]	@ (80017d0 <HAL_UART_MspInit+0x14c>)
 80017a8:	f002 febe 	bl	8004528 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2027      	movs	r0, #39	@ 0x27
 80017b2:	f002 fb5f 	bl	8003e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017b6:	2027      	movs	r0, #39	@ 0x27
 80017b8:	f002 fb76 	bl	8003ea8 <HAL_NVIC_EnableIRQ>
}
 80017bc:	bf00      	nop
 80017be:	3780      	adds	r7, #128	@ 0x80
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40004400 	.word	0x40004400
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40004800 	.word	0x40004800
 80017d0:	48000800 	.word	0x48000800

080017d4 <pwm_start>:
#include "mylibs/pwm.h"
#include "tim.h"

int aTemp;

void pwm_start(void){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

	aTemp=50;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <pwm_start+0x30>)
 80017da:	2232      	movs	r2, #50	@ 0x32
 80017dc:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017de:	2100      	movs	r1, #0
 80017e0:	4809      	ldr	r0, [pc, #36]	@ (8001808 <pwm_start+0x34>)
 80017e2:	f004 fa0d 	bl	8005c00 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80017e6:	2100      	movs	r1, #0
 80017e8:	4807      	ldr	r0, [pc, #28]	@ (8001808 <pwm_start+0x34>)
 80017ea:	f005 fb69 	bl	8006ec0 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017ee:	2104      	movs	r1, #4
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <pwm_start+0x34>)
 80017f2:	f004 fa05 	bl	8005c00 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80017f6:	2104      	movs	r1, #4
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <pwm_start+0x34>)
 80017fa:	f005 fb61 	bl	8006ec0 <HAL_TIMEx_PWMN_Start>


}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200004f8 	.word	0x200004f8
 8001808:	20000338 	.word	0x20000338

0800180c <pwm_stop>:


void pwm_stop(void){
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	set_pwm_alpha(50);
 8001810:	2032      	movs	r0, #50	@ 0x32
 8001812:	f000 f815 	bl	8001840 <set_pwm_alpha>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001816:	2100      	movs	r1, #0
 8001818:	4808      	ldr	r0, [pc, #32]	@ (800183c <pwm_stop+0x30>)
 800181a:	f004 fb03 	bl	8005e24 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800181e:	2100      	movs	r1, #0
 8001820:	4806      	ldr	r0, [pc, #24]	@ (800183c <pwm_stop+0x30>)
 8001822:	f005 fc0f 	bl	8007044 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001826:	2104      	movs	r1, #4
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <pwm_stop+0x30>)
 800182a:	f004 fafb 	bl	8005e24 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800182e:	2104      	movs	r1, #4
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <pwm_stop+0x30>)
 8001832:	f005 fc07 	bl	8007044 <HAL_TIMEx_PWMN_Stop>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000338 	.word	0x20000338

08001840 <set_pwm_alpha>:

/*
 * TP2
 */

void set_pwm_alpha(int alpha){
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	int a1;
	int a2;
	int aTransi=aTemp;
 8001848:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <set_pwm_alpha+0xb8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	617b      	str	r3, [r7, #20]

	if (alpha > aTransi){
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	dd22      	ble.n	800189c <set_pwm_alpha+0x5c>
		while(aTransi != alpha){
 8001856:	e01d      	b.n	8001894 <set_pwm_alpha+0x54>

			aTransi++;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	011a      	lsls	r2, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	011a      	lsls	r2, r3, #4
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 800187e:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <set_pwm_alpha+0xbc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 8001886:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <set_pwm_alpha+0xbc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(100);
 800188e:	2064      	movs	r0, #100	@ 0x64
 8001890:	f000 faea 	bl	8001e68 <HAL_Delay>
		while(aTransi != alpha){
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d1dd      	bne.n	8001858 <set_pwm_alpha+0x18>
		}
	}

	if (alpha < aTransi){
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	da22      	bge.n	80018ea <set_pwm_alpha+0xaa>
		while(aTransi != alpha){
 80018a4:	e01d      	b.n	80018e2 <set_pwm_alpha+0xa2>

			aTransi--;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	011a      	lsls	r2, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	011a      	lsls	r2, r3, #4
 80018c8:	4413      	add	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <set_pwm_alpha+0xbc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <set_pwm_alpha+0xbc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	639a      	str	r2, [r3, #56]	@ 0x38

			HAL_Delay(100);
 80018dc:	2064      	movs	r0, #100	@ 0x64
 80018de:	f000 fac3 	bl	8001e68 <HAL_Delay>
		while(aTransi != alpha){
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d1dd      	bne.n	80018a6 <set_pwm_alpha+0x66>
		}
	}
	aTemp = alpha;
 80018ea:	4a03      	ldr	r2, [pc, #12]	@ (80018f8 <set_pwm_alpha+0xb8>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200004f8 	.word	0x200004f8
 80018fc:	20000338 	.word	0x20000338

08001900 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001904:	2224      	movs	r2, #36	@ 0x24
 8001906:	2100      	movs	r1, #0
 8001908:	4816      	ldr	r0, [pc, #88]	@ (8001964 <Shell_Init+0x64>)
 800190a:	f008 f8ac 	bl	8009a66 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 800190e:	2240      	movs	r2, #64	@ 0x40
 8001910:	2100      	movs	r1, #0
 8001912:	4815      	ldr	r0, [pc, #84]	@ (8001968 <Shell_Init+0x68>)
 8001914:	f008 f8a7 	bl	8009a66 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <Shell_Init+0x6c>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800191e:	2240      	movs	r2, #64	@ 0x40
 8001920:	2100      	movs	r1, #0
 8001922:	4813      	ldr	r0, [pc, #76]	@ (8001970 <Shell_Init+0x70>)
 8001924:	f008 f89f 	bl	8009a66 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001928:	2201      	movs	r2, #1
 800192a:	4910      	ldr	r1, [pc, #64]	@ (800196c <Shell_Init+0x6c>)
 800192c:	4811      	ldr	r0, [pc, #68]	@ (8001974 <Shell_Init+0x74>)
 800192e:	f005 fe6d 	bl	800760c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001932:	4811      	ldr	r0, [pc, #68]	@ (8001978 <Shell_Init+0x78>)
 8001934:	f7fe fc7e 	bl	8000234 <strlen>
 8001938:	4603      	mov	r3, r0
 800193a:	b29a      	uxth	r2, r3
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	490d      	ldr	r1, [pc, #52]	@ (8001978 <Shell_Init+0x78>)
 8001942:	480c      	ldr	r0, [pc, #48]	@ (8001974 <Shell_Init+0x74>)
 8001944:	f005 fdd4 	bl	80074f0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <Shell_Init+0x7c>)
 800194a:	f7fe fc73 	bl	8000234 <strlen>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	4909      	ldr	r1, [pc, #36]	@ (800197c <Shell_Init+0x7c>)
 8001958:	4806      	ldr	r0, [pc, #24]	@ (8001974 <Shell_Init+0x74>)
 800195a:	f005 fdc9 	bl	80074f0 <HAL_UART_Transmit>
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000588 	.word	0x20000588
 8001968:	20000544 	.word	0x20000544
 800196c:	20000500 	.word	0x20000500
 8001970:	20000504 	.word	0x20000504
 8001974:	200003d0 	.word	0x200003d0
 8001978:	20000020 	.word	0x20000020
 800197c:	20000004 	.word	0x20000004

08001980 <Shell_Loop>:

void Shell_Loop(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

	int uartTxStringLength;

	if(uartRxReceived){
 8001986:	4ba6      	ldr	r3, [pc, #664]	@ (8001c20 <Shell_Loop+0x2a0>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d05b      	beq.n	8001a46 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 800198e:	4ba5      	ldr	r3, [pc, #660]	@ (8001c24 <Shell_Loop+0x2a4>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b08      	cmp	r3, #8
 8001994:	d034      	beq.n	8001a00 <Shell_Loop+0x80>
 8001996:	2b0d      	cmp	r3, #13
 8001998:	d142      	bne.n	8001a20 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	2203      	movs	r2, #3
 80019a0:	49a1      	ldr	r1, [pc, #644]	@ (8001c28 <Shell_Loop+0x2a8>)
 80019a2:	48a2      	ldr	r0, [pc, #648]	@ (8001c2c <Shell_Loop+0x2ac>)
 80019a4:	f005 fda4 	bl	80074f0 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80019a8:	4ba1      	ldr	r3, [pc, #644]	@ (8001c30 <Shell_Loop+0x2b0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4aa1      	ldr	r2, [pc, #644]	@ (8001c34 <Shell_Loop+0x2b4>)
 80019ae:	2100      	movs	r1, #0
 80019b0:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80019b2:	4ba1      	ldr	r3, [pc, #644]	@ (8001c38 <Shell_Loop+0x2b8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80019b8:	49a0      	ldr	r1, [pc, #640]	@ (8001c3c <Shell_Loop+0x2bc>)
 80019ba:	489e      	ldr	r0, [pc, #632]	@ (8001c34 <Shell_Loop+0x2b4>)
 80019bc:	f008 f85c 	bl	8009a78 <strtok>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a9f      	ldr	r2, [pc, #636]	@ (8001c40 <Shell_Loop+0x2c0>)
 80019c4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80019c6:	e010      	b.n	80019ea <Shell_Loop+0x6a>
				argv[argc++] = token;
 80019c8:	4b9b      	ldr	r3, [pc, #620]	@ (8001c38 <Shell_Loop+0x2b8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	499a      	ldr	r1, [pc, #616]	@ (8001c38 <Shell_Loop+0x2b8>)
 80019d0:	600a      	str	r2, [r1, #0]
 80019d2:	4a9b      	ldr	r2, [pc, #620]	@ (8001c40 <Shell_Loop+0x2c0>)
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	499b      	ldr	r1, [pc, #620]	@ (8001c44 <Shell_Loop+0x2c4>)
 80019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80019dc:	4997      	ldr	r1, [pc, #604]	@ (8001c3c <Shell_Loop+0x2bc>)
 80019de:	2000      	movs	r0, #0
 80019e0:	f008 f84a 	bl	8009a78 <strtok>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a96      	ldr	r2, [pc, #600]	@ (8001c40 <Shell_Loop+0x2c0>)
 80019e8:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80019ea:	4b95      	ldr	r3, [pc, #596]	@ (8001c40 <Shell_Loop+0x2c0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ea      	bne.n	80019c8 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80019f2:	4b8f      	ldr	r3, [pc, #572]	@ (8001c30 <Shell_Loop+0x2b0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80019f8:	4b93      	ldr	r3, [pc, #588]	@ (8001c48 <Shell_Loop+0x2c8>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
			break;
 80019fe:	e01f      	b.n	8001a40 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001a00:	4b8b      	ldr	r3, [pc, #556]	@ (8001c30 <Shell_Loop+0x2b0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	1e5a      	subs	r2, r3, #1
 8001a06:	498a      	ldr	r1, [pc, #552]	@ (8001c30 <Shell_Loop+0x2b0>)
 8001a08:	600a      	str	r2, [r1, #0]
 8001a0a:	4a8a      	ldr	r2, [pc, #552]	@ (8001c34 <Shell_Loop+0x2b4>)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	2204      	movs	r2, #4
 8001a16:	498d      	ldr	r1, [pc, #564]	@ (8001c4c <Shell_Loop+0x2cc>)
 8001a18:	4884      	ldr	r0, [pc, #528]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001a1a:	f005 fd69 	bl	80074f0 <HAL_UART_Transmit>
			break;
 8001a1e:	e00f      	b.n	8001a40 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001a20:	4b83      	ldr	r3, [pc, #524]	@ (8001c30 <Shell_Loop+0x2b0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	4982      	ldr	r1, [pc, #520]	@ (8001c30 <Shell_Loop+0x2b0>)
 8001a28:	600a      	str	r2, [r1, #0]
 8001a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8001c24 <Shell_Loop+0x2a4>)
 8001a2c:	7811      	ldrb	r1, [r2, #0]
 8001a2e:	4a81      	ldr	r2, [pc, #516]	@ (8001c34 <Shell_Loop+0x2b4>)
 8001a30:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	2201      	movs	r2, #1
 8001a38:	497a      	ldr	r1, [pc, #488]	@ (8001c24 <Shell_Loop+0x2a4>)
 8001a3a:	487c      	ldr	r0, [pc, #496]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001a3c:	f005 fd58 	bl	80074f0 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001a40:	4b77      	ldr	r3, [pc, #476]	@ (8001c20 <Shell_Loop+0x2a0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8001a46:	4b80      	ldr	r3, [pc, #512]	@ (8001c48 <Shell_Loop+0x2c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8177 	beq.w	8001d3e <Shell_Loop+0x3be>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8001a50:	4b7c      	ldr	r3, [pc, #496]	@ (8001c44 <Shell_Loop+0x2c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	497e      	ldr	r1, [pc, #504]	@ (8001c50 <Shell_Loop+0x2d0>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fbe2 	bl	8000220 <strcmp>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	221a      	movs	r2, #26
 8001a68:	497a      	ldr	r1, [pc, #488]	@ (8001c54 <Shell_Loop+0x2d4>)
 8001a6a:	4870      	ldr	r0, [pc, #448]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001a6c:	f005 fd40 	bl	80074f0 <HAL_UART_Transmit>
 8001a70:	e15b      	b.n	8001d2a <Shell_Loop+0x3aa>
		}
		else if(strcmp(argv[0],"help")==0){
 8001a72:	4b74      	ldr	r3, [pc, #464]	@ (8001c44 <Shell_Loop+0x2c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4978      	ldr	r1, [pc, #480]	@ (8001c58 <Shell_Loop+0x2d8>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fbd1 	bl	8000220 <strcmp>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d162      	bne.n	8001b4a <Shell_Loop+0x1ca>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8001a84:	4a75      	ldr	r2, [pc, #468]	@ (8001c5c <Shell_Loop+0x2dc>)
 8001a86:	2140      	movs	r1, #64	@ 0x40
 8001a88:	4875      	ldr	r0, [pc, #468]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001a8a:	f007 ff75 	bl	8009978 <sniprintf>
 8001a8e:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	4971      	ldr	r1, [pc, #452]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001a9a:	4864      	ldr	r0, [pc, #400]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001a9c:	f005 fd28 	bl	80074f0 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "help : Donne les fonctions disponibles\r\n");
 8001aa0:	4a70      	ldr	r2, [pc, #448]	@ (8001c64 <Shell_Loop+0x2e4>)
 8001aa2:	2140      	movs	r1, #64	@ 0x40
 8001aa4:	486e      	ldr	r0, [pc, #440]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001aa6:	f007 ff67 	bl	8009978 <sniprintf>
 8001aaa:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	496a      	ldr	r1, [pc, #424]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001ab6:	485d      	ldr	r0, [pc, #372]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001ab8:	f005 fd1a 	bl	80074f0 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "WhereisBrian? : dit ou se situe Brian\r\n");
 8001abc:	4a6a      	ldr	r2, [pc, #424]	@ (8001c68 <Shell_Loop+0x2e8>)
 8001abe:	2140      	movs	r1, #64	@ 0x40
 8001ac0:	4867      	ldr	r0, [pc, #412]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001ac2:	f007 ff59 	bl	8009978 <sniprintf>
 8001ac6:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	4963      	ldr	r1, [pc, #396]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001ad2:	4856      	ldr	r0, [pc, #344]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001ad4:	f005 fd0c 	bl	80074f0 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speed XXX : Set la speed\r\n");
 8001ad8:	4a64      	ldr	r2, [pc, #400]	@ (8001c6c <Shell_Loop+0x2ec>)
 8001ada:	2140      	movs	r1, #64	@ 0x40
 8001adc:	4860      	ldr	r0, [pc, #384]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001ade:	f007 ff4b 	bl	8009978 <sniprintf>
 8001ae2:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	495c      	ldr	r1, [pc, #368]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001aee:	484f      	ldr	r0, [pc, #316]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001af0:	f005 fcfe 	bl	80074f0 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speedStart : Start les PWM\r\n");
 8001af4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c70 <Shell_Loop+0x2f0>)
 8001af6:	2140      	movs	r1, #64	@ 0x40
 8001af8:	4859      	ldr	r0, [pc, #356]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001afa:	f007 ff3d 	bl	8009978 <sniprintf>
 8001afe:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
 8001b08:	4955      	ldr	r1, [pc, #340]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001b0a:	4848      	ldr	r0, [pc, #288]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001b0c:	f005 fcf0 	bl	80074f0 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speedStop : Stop les PWM\r\n");
 8001b10:	4a58      	ldr	r2, [pc, #352]	@ (8001c74 <Shell_Loop+0x2f4>)
 8001b12:	2140      	movs	r1, #64	@ 0x40
 8001b14:	4852      	ldr	r0, [pc, #328]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001b16:	f007 ff2f 	bl	8009978 <sniprintf>
 8001b1a:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
 8001b24:	494e      	ldr	r1, [pc, #312]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001b26:	4841      	ldr	r0, [pc, #260]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001b28:	f005 fce2 	bl	80074f0 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "adcValue : Recupere la valeure de l'adc\r\n");
 8001b2c:	4a52      	ldr	r2, [pc, #328]	@ (8001c78 <Shell_Loop+0x2f8>)
 8001b2e:	2140      	movs	r1, #64	@ 0x40
 8001b30:	484b      	ldr	r0, [pc, #300]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001b32:	f007 ff21 	bl	8009978 <sniprintf>
 8001b36:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	4947      	ldr	r1, [pc, #284]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001b42:	483a      	ldr	r0, [pc, #232]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001b44:	f005 fcd4 	bl	80074f0 <HAL_UART_Transmit>
 8001b48:	e0ef      	b.n	8001d2a <Shell_Loop+0x3aa>
		}
		else if(strcmp(argv[0],"speed")==0){
 8001b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c44 <Shell_Loop+0x2c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	494b      	ldr	r1, [pc, #300]	@ (8001c7c <Shell_Loop+0x2fc>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fb65 	bl	8000220 <strcmp>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d154      	bne.n	8001c06 <Shell_Loop+0x286>
			if(atoi(argv[1])>=0){
 8001b5c:	4b39      	ldr	r3, [pc, #228]	@ (8001c44 <Shell_Loop+0x2c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f007 fdbf 	bl	80096e4 <atoi>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db37      	blt.n	8001bdc <Shell_Loop+0x25c>
				if(atoi(argv[1])<=100){
 8001b6c:	4b35      	ldr	r3, [pc, #212]	@ (8001c44 <Shell_Loop+0x2c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f007 fdb7 	bl	80096e4 <atoi>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b64      	cmp	r3, #100	@ 0x64
 8001b7a:	dc1d      	bgt.n	8001bb8 <Shell_Loop+0x238>
					set_pwm_alpha(atoi(argv[1]));
 8001b7c:	4b31      	ldr	r3, [pc, #196]	@ (8001c44 <Shell_Loop+0x2c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f007 fdaf 	bl	80096e4 <atoi>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fe59 	bl	8001840 <set_pwm_alpha>
					uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = %d\r\n",atoi(argv[1]));
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <Shell_Loop+0x2c4>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f007 fda6 	bl	80096e4 <atoi>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4a39      	ldr	r2, [pc, #228]	@ (8001c80 <Shell_Loop+0x300>)
 8001b9c:	2140      	movs	r1, #64	@ 0x40
 8001b9e:	4830      	ldr	r0, [pc, #192]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001ba0:	f007 feea 	bl	8009978 <sniprintf>
 8001ba4:	6078      	str	r0, [r7, #4]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	492c      	ldr	r1, [pc, #176]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001bb0:	481e      	ldr	r0, [pc, #120]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001bb2:	f005 fc9d 	bl	80074f0 <HAL_UART_Transmit>
 8001bb6:	e0b8      	b.n	8001d2a <Shell_Loop+0x3aa>
				}else{
					set_pwm_alpha(100);
 8001bb8:	2064      	movs	r0, #100	@ 0x64
 8001bba:	f7ff fe41 	bl	8001840 <set_pwm_alpha>
					uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = 100\r\n");
 8001bbe:	4a31      	ldr	r2, [pc, #196]	@ (8001c84 <Shell_Loop+0x304>)
 8001bc0:	2140      	movs	r1, #64	@ 0x40
 8001bc2:	4827      	ldr	r0, [pc, #156]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001bc4:	f007 fed8 	bl	8009978 <sniprintf>
 8001bc8:	6078      	str	r0, [r7, #4]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	4923      	ldr	r1, [pc, #140]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001bd4:	4815      	ldr	r0, [pc, #84]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001bd6:	f005 fc8b 	bl	80074f0 <HAL_UART_Transmit>
 8001bda:	e0a6      	b.n	8001d2a <Shell_Loop+0x3aa>
				}
			}else{
				uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur alpha est pas entre 0 et 100\r\n",atoi(argv[1]));
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <Shell_Loop+0x2c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f007 fd7f 	bl	80096e4 <atoi>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4a27      	ldr	r2, [pc, #156]	@ (8001c88 <Shell_Loop+0x308>)
 8001bea:	2140      	movs	r1, #64	@ 0x40
 8001bec:	481c      	ldr	r0, [pc, #112]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001bee:	f007 fec3 	bl	8009978 <sniprintf>
 8001bf2:	6078      	str	r0, [r7, #4]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfc:	4918      	ldr	r1, [pc, #96]	@ (8001c60 <Shell_Loop+0x2e0>)
 8001bfe:	480b      	ldr	r0, [pc, #44]	@ (8001c2c <Shell_Loop+0x2ac>)
 8001c00:	f005 fc76 	bl	80074f0 <HAL_UART_Transmit>
 8001c04:	e091      	b.n	8001d2a <Shell_Loop+0x3aa>
			}
		}else if(strcmp(argv[0],"speedStart")==0){
 8001c06:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <Shell_Loop+0x2c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4920      	ldr	r1, [pc, #128]	@ (8001c8c <Shell_Loop+0x30c>)
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fb07 	bl	8000220 <strcmp>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d13b      	bne.n	8001c90 <Shell_Loop+0x310>
			pwm_start();
 8001c18:	f7ff fddc 	bl	80017d4 <pwm_start>
 8001c1c:	e085      	b.n	8001d2a <Shell_Loop+0x3aa>
 8001c1e:	bf00      	nop
 8001c20:	200004fc 	.word	0x200004fc
 8001c24:	20000500 	.word	0x20000500
 8001c28:	20000088 	.word	0x20000088
 8001c2c:	200003d0 	.word	0x200003d0
 8001c30:	20000584 	.word	0x20000584
 8001c34:	20000544 	.word	0x20000544
 8001c38:	200005ac 	.word	0x200005ac
 8001c3c:	0800abd8 	.word	0x0800abd8
 8001c40:	200005b0 	.word	0x200005b0
 8001c44:	20000588 	.word	0x20000588
 8001c48:	200005b4 	.word	0x200005b4
 8001c4c:	2000008c 	.word	0x2000008c
 8001c50:	0800abdc 	.word	0x0800abdc
 8001c54:	200000a4 	.word	0x200000a4
 8001c58:	0800abec 	.word	0x0800abec
 8001c5c:	0800abf4 	.word	0x0800abf4
 8001c60:	20000504 	.word	0x20000504
 8001c64:	0800ac1c 	.word	0x0800ac1c
 8001c68:	0800ac48 	.word	0x0800ac48
 8001c6c:	0800ac70 	.word	0x0800ac70
 8001c70:	0800ac8c 	.word	0x0800ac8c
 8001c74:	0800acac 	.word	0x0800acac
 8001c78:	0800acc8 	.word	0x0800acc8
 8001c7c:	0800acf4 	.word	0x0800acf4
 8001c80:	0800acfc 	.word	0x0800acfc
 8001c84:	0800ad14 	.word	0x0800ad14
 8001c88:	0800ad2c 	.word	0x0800ad2c
 8001c8c:	0800ad54 	.word	0x0800ad54
		}else if(strcmp(argv[0],"speedStop")==0){
 8001c90:	4b2d      	ldr	r3, [pc, #180]	@ (8001d48 <Shell_Loop+0x3c8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	492d      	ldr	r1, [pc, #180]	@ (8001d4c <Shell_Loop+0x3cc>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fac2 	bl	8000220 <strcmp>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <Shell_Loop+0x328>
			pwm_stop();
 8001ca2:	f7ff fdb3 	bl	800180c <pwm_stop>
 8001ca6:	e040      	b.n	8001d2a <Shell_Loop+0x3aa>
		}else if(strcmp(argv[0],"adcValue")==0){
 8001ca8:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <Shell_Loop+0x3c8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4928      	ldr	r1, [pc, #160]	@ (8001d50 <Shell_Loop+0x3d0>)
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fab6 	bl	8000220 <strcmp>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d130      	bne.n	8001d1c <Shell_Loop+0x39c>

			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur Source: %d \r\n", value_adc1[0]);
 8001cba:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <Shell_Loop+0x3d4>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	4a26      	ldr	r2, [pc, #152]	@ (8001d58 <Shell_Loop+0x3d8>)
 8001cc0:	2140      	movs	r1, #64	@ 0x40
 8001cc2:	4826      	ldr	r0, [pc, #152]	@ (8001d5c <Shell_Loop+0x3dc>)
 8001cc4:	f007 fe58 	bl	8009978 <sniprintf>
 8001cc8:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	4922      	ldr	r1, [pc, #136]	@ (8001d5c <Shell_Loop+0x3dc>)
 8001cd4:	4822      	ldr	r0, [pc, #136]	@ (8001d60 <Shell_Loop+0x3e0>)
 8001cd6:	f005 fc0b 	bl	80074f0 <HAL_UART_Transmit>

			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur V: %d \r\n", value_adc1[1]);
 8001cda:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <Shell_Loop+0x3d4>)
 8001cdc:	885b      	ldrh	r3, [r3, #2]
 8001cde:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <Shell_Loop+0x3e4>)
 8001ce0:	2140      	movs	r1, #64	@ 0x40
 8001ce2:	481e      	ldr	r0, [pc, #120]	@ (8001d5c <Shell_Loop+0x3dc>)
 8001ce4:	f007 fe48 	bl	8009978 <sniprintf>
 8001ce8:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	491a      	ldr	r1, [pc, #104]	@ (8001d5c <Shell_Loop+0x3dc>)
 8001cf4:	481a      	ldr	r0, [pc, #104]	@ (8001d60 <Shell_Loop+0x3e0>)
 8001cf6:	f005 fbfb 	bl	80074f0 <HAL_UART_Transmit>

			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur de U: %d \r\n", value_adc2);
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <Shell_Loop+0x3e8>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001d6c <Shell_Loop+0x3ec>)
 8001d00:	2140      	movs	r1, #64	@ 0x40
 8001d02:	4816      	ldr	r0, [pc, #88]	@ (8001d5c <Shell_Loop+0x3dc>)
 8001d04:	f007 fe38 	bl	8009978 <sniprintf>
 8001d08:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	4912      	ldr	r1, [pc, #72]	@ (8001d5c <Shell_Loop+0x3dc>)
 8001d14:	4812      	ldr	r0, [pc, #72]	@ (8001d60 <Shell_Loop+0x3e0>)
 8001d16:	f005 fbeb 	bl	80074f0 <HAL_UART_Transmit>
 8001d1a:	e006      	b.n	8001d2a <Shell_Loop+0x3aa>

		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	2214      	movs	r2, #20
 8001d22:	4913      	ldr	r1, [pc, #76]	@ (8001d70 <Shell_Loop+0x3f0>)
 8001d24:	480e      	ldr	r0, [pc, #56]	@ (8001d60 <Shell_Loop+0x3e0>)
 8001d26:	f005 fbe3 	bl	80074f0 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	221c      	movs	r2, #28
 8001d30:	4910      	ldr	r1, [pc, #64]	@ (8001d74 <Shell_Loop+0x3f4>)
 8001d32:	480b      	ldr	r0, [pc, #44]	@ (8001d60 <Shell_Loop+0x3e0>)
 8001d34:	f005 fbdc 	bl	80074f0 <HAL_UART_Transmit>
		newCmdReady = 0;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <Shell_Loop+0x3f8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
	}
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000588 	.word	0x20000588
 8001d4c:	0800ad60 	.word	0x0800ad60
 8001d50:	0800ad6c 	.word	0x0800ad6c
 8001d54:	200002dc 	.word	0x200002dc
 8001d58:	0800ad78 	.word	0x0800ad78
 8001d5c:	20000504 	.word	0x20000504
 8001d60:	200003d0 	.word	0x200003d0
 8001d64:	0800ad90 	.word	0x0800ad90
 8001d68:	200002e0 	.word	0x200002e0
 8001d6c:	0800ada0 	.word	0x0800ada0
 8001d70:	20000090 	.word	0x20000090
 8001d74:	20000004 	.word	0x20000004
 8001d78:	200005b4 	.word	0x200005b4

08001d7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_UART_RxCpltCallback+0x20>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4904      	ldr	r1, [pc, #16]	@ (8001da0 <HAL_UART_RxCpltCallback+0x24>)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <HAL_UART_RxCpltCallback+0x28>)
 8001d90:	f005 fc3c 	bl	800760c <HAL_UART_Receive_IT>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200004fc 	.word	0x200004fc
 8001da0:	20000500 	.word	0x20000500
 8001da4:	200003d0 	.word	0x200003d0

08001da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001da8:	480d      	ldr	r0, [pc, #52]	@ (8001de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001daa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dac:	480d      	ldr	r0, [pc, #52]	@ (8001de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dae:	490e      	ldr	r1, [pc, #56]	@ (8001de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db0:	4a0e      	ldr	r2, [pc, #56]	@ (8001dec <LoopForever+0xe>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc4:	4c0b      	ldr	r4, [pc, #44]	@ (8001df4 <LoopForever+0x16>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dd2:	f7ff f9b9 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd6:	f007 fef7 	bl	8009bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dda:	f7fe ff1f 	bl	8000c1c <main>

08001dde <LoopForever>:

LoopForever:
    b LoopForever
 8001dde:	e7fe      	b.n	8001dde <LoopForever>
  ldr   r0, =_estack
 8001de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001dec:	0800afe8 	.word	0x0800afe8
  ldr r2, =_sbss
 8001df0:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8001df4:	20000708 	.word	0x20000708

08001df8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC3_IRQHandler>

08001dfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f002 f82a 	bl	8003e5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e0a:	200f      	movs	r0, #15
 8001e0c:	f7fe ffe8 	bl	8000de0 <HAL_InitTick>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	e001      	b.n	8001e20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e1c:	f7fe ffbc 	bl	8000d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e20:	79fb      	ldrb	r3, [r7, #7]

}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_IncTick+0x1c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_IncTick+0x20>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a03      	ldr	r2, [pc, #12]	@ (8001e48 <HAL_IncTick+0x1c>)
 8001e3c:	6013      	str	r3, [r2, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	200005b8 	.word	0x200005b8
 8001e4c:	200000c4 	.word	0x200000c4

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	200005b8 	.word	0x200005b8

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d004      	beq.n	8001e8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_Delay+0x40>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4413      	add	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8c:	bf00      	nop
 8001e8e:	f7ff ffdf 	bl	8001e50 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d8f7      	bhi.n	8001e8e <HAL_Delay+0x26>
  {
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200000c4 	.word	0x200000c4

08001eac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	609a      	str	r2, [r3, #8]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3360      	adds	r3, #96	@ 0x60
 8001f26:	461a      	mov	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <LL_ADC_SetOffset+0x44>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f4c:	bf00      	nop
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	03fff000 	.word	0x03fff000

08001f5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3360      	adds	r3, #96	@ 0x60
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3360      	adds	r3, #96	@ 0x60
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fb2:	bf00      	nop
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b087      	sub	sp, #28
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3360      	adds	r3, #96	@ 0x60
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fe8:	bf00      	nop
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3360      	adds	r3, #96	@ 0x60
 8002004:	461a      	mov	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	431a      	orrs	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	615a      	str	r2, [r3, #20]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002076:	b480      	push	{r7}
 8002078:	b087      	sub	sp, #28
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3330      	adds	r3, #48	@ 0x30
 8002086:	461a      	mov	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	4413      	add	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	211f      	movs	r1, #31
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0e9b      	lsrs	r3, r3, #26
 80020ae:	f003 011f 	and.w	r1, r3, #31
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	431a      	orrs	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020c2:	bf00      	nop
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3314      	adds	r3, #20
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	0e5b      	lsrs	r3, r3, #25
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	4413      	add	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	0d1b      	lsrs	r3, r3, #20
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2107      	movs	r1, #7
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	401a      	ands	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	0d1b      	lsrs	r3, r3, #20
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800213e:	bf00      	nop
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002164:	43db      	mvns	r3, r3
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0318 	and.w	r3, r3, #24
 800216e:	4908      	ldr	r1, [pc, #32]	@ (8002190 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002170:	40d9      	lsrs	r1, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	400b      	ands	r3, r1
 8002176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217a:	431a      	orrs	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	0007ffff 	.word	0x0007ffff

08002194 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 031f 	and.w	r3, r3, #31
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6093      	str	r3, [r2, #8]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002204:	d101      	bne.n	800220a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800222c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002254:	d101      	bne.n	800225a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002278:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022a4:	f043 0202 	orr.w	r2, r3, #2
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <LL_ADC_IsEnabled+0x18>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <LL_ADC_IsEnabled+0x1a>
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d101      	bne.n	80022f6 <LL_ADC_IsDisableOngoing+0x18>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <LL_ADC_IsDisableOngoing+0x1a>
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002314:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002318:	f043 0204 	orr.w	r2, r3, #4
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b04      	cmp	r3, #4
 800233e:	d101      	bne.n	8002344 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	d101      	bne.n	800236a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e1a9      	b.n	80026e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7fe fa0f 	bl	80007c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff19 	bl	80021f0 <LL_ADC_IsDeepPowerDownEnabled>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff feff 	bl	80021cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ff34 	bl	8002240 <LL_ADC_IsInternalRegulatorEnabled>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d115      	bne.n	800240a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff18 	bl	8002218 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e8:	4b9c      	ldr	r3, [pc, #624]	@ (800265c <HAL_ADC_Init+0x2e4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	4a9c      	ldr	r2, [pc, #624]	@ (8002660 <HAL_ADC_Init+0x2e8>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	099b      	lsrs	r3, r3, #6
 80023f6:	3301      	adds	r3, #1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023fc:	e002      	b.n	8002404 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3b01      	subs	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f9      	bne.n	80023fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff16 	bl	8002240 <LL_ADC_IsInternalRegulatorEnabled>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff76 	bl	800232c <LL_ADC_REG_IsConversionOngoing>
 8002440:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 8142 	bne.w	80026d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 813e 	bne.w	80026d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002460:	f043 0202 	orr.w	r2, r3, #2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff23 	bl	80022b8 <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d141      	bne.n	80024fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002480:	d004      	beq.n	800248c <HAL_ADC_Init+0x114>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a77      	ldr	r2, [pc, #476]	@ (8002664 <HAL_ADC_Init+0x2ec>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d10f      	bne.n	80024ac <HAL_ADC_Init+0x134>
 800248c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002490:	f7ff ff12 	bl	80022b8 <LL_ADC_IsEnabled>
 8002494:	4604      	mov	r4, r0
 8002496:	4873      	ldr	r0, [pc, #460]	@ (8002664 <HAL_ADC_Init+0x2ec>)
 8002498:	f7ff ff0e 	bl	80022b8 <LL_ADC_IsEnabled>
 800249c:	4603      	mov	r3, r0
 800249e:	4323      	orrs	r3, r4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e012      	b.n	80024d2 <HAL_ADC_Init+0x15a>
 80024ac:	486e      	ldr	r0, [pc, #440]	@ (8002668 <HAL_ADC_Init+0x2f0>)
 80024ae:	f7ff ff03 	bl	80022b8 <LL_ADC_IsEnabled>
 80024b2:	4604      	mov	r4, r0
 80024b4:	486d      	ldr	r0, [pc, #436]	@ (800266c <HAL_ADC_Init+0x2f4>)
 80024b6:	f7ff feff 	bl	80022b8 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	431c      	orrs	r4, r3
 80024be:	486c      	ldr	r0, [pc, #432]	@ (8002670 <HAL_ADC_Init+0x2f8>)
 80024c0:	f7ff fefa 	bl	80022b8 <LL_ADC_IsEnabled>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4323      	orrs	r3, r4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d012      	beq.n	80024fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024de:	d004      	beq.n	80024ea <HAL_ADC_Init+0x172>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a5f      	ldr	r2, [pc, #380]	@ (8002664 <HAL_ADC_Init+0x2ec>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_ADC_Init+0x176>
 80024ea:	4a62      	ldr	r2, [pc, #392]	@ (8002674 <HAL_ADC_Init+0x2fc>)
 80024ec:	e000      	b.n	80024f0 <HAL_ADC_Init+0x178>
 80024ee:	4a62      	ldr	r2, [pc, #392]	@ (8002678 <HAL_ADC_Init+0x300>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f7ff fcd8 	bl	8001eac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7f5b      	ldrb	r3, [r3, #29]
 8002500:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002506:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800250c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002512:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800251a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002526:	2b01      	cmp	r3, #1
 8002528:	d106      	bne.n	8002538 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252e:	3b01      	subs	r3, #1
 8002530:	045b      	lsls	r3, r3, #17
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	4b48      	ldr	r3, [pc, #288]	@ (800267c <HAL_ADC_Init+0x304>)
 800255c:	4013      	ands	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	430b      	orrs	r3, r1
 8002566:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fee5 	bl	8002352 <LL_ADC_INJ_IsConversionOngoing>
 8002588:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d17f      	bne.n	8002690 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d17c      	bne.n	8002690 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800259a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025b2:	f023 0302 	bic.w	r3, r3, #2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	430b      	orrs	r3, r1
 80025be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d017      	beq.n	80025f8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6911      	ldr	r1, [r2, #16]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80025f6:	e013      	b.n	8002620 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002606:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002618:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800261c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002626:	2b01      	cmp	r3, #1
 8002628:	d12a      	bne.n	8002680 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800264c:	430a      	orrs	r2, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	e019      	b.n	8002690 <HAL_ADC_Init+0x318>
 800265c:	20000000 	.word	0x20000000
 8002660:	053e2d63 	.word	0x053e2d63
 8002664:	50000100 	.word	0x50000100
 8002668:	50000400 	.word	0x50000400
 800266c:	50000500 	.word	0x50000500
 8002670:	50000600 	.word	0x50000600
 8002674:	50000300 	.word	0x50000300
 8002678:	50000700 	.word	0x50000700
 800267c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10c      	bne.n	80026b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f023 010f 	bic.w	r1, r3, #15
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	1e5a      	subs	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80026b0:	e007      	b.n	80026c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 020f 	bic.w	r2, r2, #15
 80026c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026d2:	e007      	b.n	80026e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d8:	f043 0210 	orr.w	r2, r3, #16
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3724      	adds	r7, #36	@ 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	bf00      	nop

080026f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002704:	d004      	beq.n	8002710 <HAL_ADC_Start_DMA+0x20>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a5a      	ldr	r2, [pc, #360]	@ (8002874 <HAL_ADC_Start_DMA+0x184>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_ADC_Start_DMA+0x24>
 8002710:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <HAL_ADC_Start_DMA+0x188>)
 8002712:	e000      	b.n	8002716 <HAL_ADC_Start_DMA+0x26>
 8002714:	4b59      	ldr	r3, [pc, #356]	@ (800287c <HAL_ADC_Start_DMA+0x18c>)
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fd3c 	bl	8002194 <LL_ADC_GetMultimode>
 800271c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fe02 	bl	800232c <LL_ADC_REG_IsConversionOngoing>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 809b 	bne.w	8002866 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_ADC_Start_DMA+0x4e>
 800273a:	2302      	movs	r3, #2
 800273c:	e096      	b.n	800286c <HAL_ADC_Start_DMA+0x17c>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a4d      	ldr	r2, [pc, #308]	@ (8002880 <HAL_ADC_Start_DMA+0x190>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d008      	beq.n	8002762 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d002      	beq.n	8002762 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b09      	cmp	r3, #9
 8002760:	d17a      	bne.n	8002858 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 ff56 	bl	8003614 <ADC_Enable>
 8002768:	4603      	mov	r3, r0
 800276a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800276c:	7dfb      	ldrb	r3, [r7, #23]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d16d      	bne.n	800284e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002776:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a3a      	ldr	r2, [pc, #232]	@ (8002874 <HAL_ADC_Start_DMA+0x184>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d009      	beq.n	80027a4 <HAL_ADC_Start_DMA+0xb4>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a3b      	ldr	r2, [pc, #236]	@ (8002884 <HAL_ADC_Start_DMA+0x194>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d002      	beq.n	80027a0 <HAL_ADC_Start_DMA+0xb0>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	e003      	b.n	80027a8 <HAL_ADC_Start_DMA+0xb8>
 80027a0:	4b39      	ldr	r3, [pc, #228]	@ (8002888 <HAL_ADC_Start_DMA+0x198>)
 80027a2:	e001      	b.n	80027a8 <HAL_ADC_Start_DMA+0xb8>
 80027a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d002      	beq.n	80027b6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d105      	bne.n	80027c2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d2:	f023 0206 	bic.w	r2, r3, #6
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80027da:	e002      	b.n	80027e2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	4a29      	ldr	r2, [pc, #164]	@ (800288c <HAL_ADC_Start_DMA+0x19c>)
 80027e8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ee:	4a28      	ldr	r2, [pc, #160]	@ (8002890 <HAL_ADC_Start_DMA+0x1a0>)
 80027f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f6:	4a27      	ldr	r2, [pc, #156]	@ (8002894 <HAL_ADC_Start_DMA+0x1a4>)
 80027f8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	221c      	movs	r2, #28
 8002800:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0210 	orr.w	r2, r2, #16
 8002818:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3340      	adds	r3, #64	@ 0x40
 8002834:	4619      	mov	r1, r3
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f001 fbeb 	bl	8004014 <HAL_DMA_Start_IT>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fd5c 	bl	8002304 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800284c:	e00d      	b.n	800286a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002856:	e008      	b.n	800286a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002864:	e001      	b.n	800286a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002866:	2302      	movs	r3, #2
 8002868:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800286a:	7dfb      	ldrb	r3, [r7, #23]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	50000100 	.word	0x50000100
 8002878:	50000300 	.word	0x50000300
 800287c:	50000700 	.word	0x50000700
 8002880:	50000600 	.word	0x50000600
 8002884:	50000500 	.word	0x50000500
 8002888:	50000400 	.word	0x50000400
 800288c:	080037ff 	.word	0x080037ff
 8002890:	080038d7 	.word	0x080038d7
 8002894:	080038f3 	.word	0x080038f3

08002898 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	@ 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028bc:	d004      	beq.n	80028c8 <HAL_ADC_IRQHandler+0x30>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a8e      	ldr	r2, [pc, #568]	@ (8002afc <HAL_ADC_IRQHandler+0x264>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_IRQHandler+0x34>
 80028c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002b00 <HAL_ADC_IRQHandler+0x268>)
 80028ca:	e000      	b.n	80028ce <HAL_ADC_IRQHandler+0x36>
 80028cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002b04 <HAL_ADC_IRQHandler+0x26c>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fc60 	bl	8002194 <LL_ADC_GetMultimode>
 80028d4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d017      	beq.n	8002910 <HAL_ADC_IRQHandler+0x78>
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d012      	beq.n	8002910 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f001 f8ec 	bl	8003ae0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2202      	movs	r2, #2
 800290e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_ADC_IRQHandler+0x8c>
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8094 	beq.w	8002a58 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 808e 	beq.w	8002a58 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fb79 	bl	8002050 <LL_ADC_REG_IsTriggerSourceSWStart>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d072      	beq.n	8002a4a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a64      	ldr	r2, [pc, #400]	@ (8002afc <HAL_ADC_IRQHandler+0x264>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_ADC_IRQHandler+0xea>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a65      	ldr	r2, [pc, #404]	@ (8002b08 <HAL_ADC_IRQHandler+0x270>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d002      	beq.n	800297e <HAL_ADC_IRQHandler+0xe6>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	e003      	b.n	8002986 <HAL_ADC_IRQHandler+0xee>
 800297e:	4b63      	ldr	r3, [pc, #396]	@ (8002b0c <HAL_ADC_IRQHandler+0x274>)
 8002980:	e001      	b.n	8002986 <HAL_ADC_IRQHandler+0xee>
 8002982:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	4293      	cmp	r3, r2
 800298c:	d008      	beq.n	80029a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d002      	beq.n	80029a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b09      	cmp	r3, #9
 800299e:	d104      	bne.n	80029aa <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	623b      	str	r3, [r7, #32]
 80029a8:	e014      	b.n	80029d4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a53      	ldr	r2, [pc, #332]	@ (8002afc <HAL_ADC_IRQHandler+0x264>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x130>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a53      	ldr	r2, [pc, #332]	@ (8002b08 <HAL_ADC_IRQHandler+0x270>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d002      	beq.n	80029c4 <HAL_ADC_IRQHandler+0x12c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	e003      	b.n	80029cc <HAL_ADC_IRQHandler+0x134>
 80029c4:	4b51      	ldr	r3, [pc, #324]	@ (8002b0c <HAL_ADC_IRQHandler+0x274>)
 80029c6:	e001      	b.n	80029cc <HAL_ADC_IRQHandler+0x134>
 80029c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029cc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d135      	bne.n	8002a4a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d12e      	bne.n	8002a4a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fc9b 	bl	800232c <LL_ADC_REG_IsConversionOngoing>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11a      	bne.n	8002a32 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 020c 	bic.w	r2, r2, #12
 8002a0a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d112      	bne.n	8002a4a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a30:	e00b      	b.n	8002a4a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a36:	f043 0210 	orr.w	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe f968 	bl	8000d20 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	220c      	movs	r2, #12
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_IRQHandler+0x1d4>
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80b3 	beq.w	8002bde <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80ad 	beq.w	8002bde <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a94:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fb14 	bl	80020ce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002aa6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff facf 	bl	8002050 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ab2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a10      	ldr	r2, [pc, #64]	@ (8002afc <HAL_ADC_IRQHandler+0x264>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d009      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x23a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a11      	ldr	r2, [pc, #68]	@ (8002b08 <HAL_ADC_IRQHandler+0x270>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d002      	beq.n	8002ace <HAL_ADC_IRQHandler+0x236>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	e003      	b.n	8002ad6 <HAL_ADC_IRQHandler+0x23e>
 8002ace:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <HAL_ADC_IRQHandler+0x274>)
 8002ad0:	e001      	b.n	8002ad6 <HAL_ADC_IRQHandler+0x23e>
 8002ad2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d008      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d002      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b07      	cmp	r3, #7
 8002aee:	d10f      	bne.n	8002b10 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	e01f      	b.n	8002b3a <HAL_ADC_IRQHandler+0x2a2>
 8002afa:	bf00      	nop
 8002afc:	50000100 	.word	0x50000100
 8002b00:	50000300 	.word	0x50000300
 8002b04:	50000700 	.word	0x50000700
 8002b08:	50000500 	.word	0x50000500
 8002b0c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a8b      	ldr	r2, [pc, #556]	@ (8002d44 <HAL_ADC_IRQHandler+0x4ac>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x296>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a8a      	ldr	r2, [pc, #552]	@ (8002d48 <HAL_ADC_IRQHandler+0x4b0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d002      	beq.n	8002b2a <HAL_ADC_IRQHandler+0x292>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	e003      	b.n	8002b32 <HAL_ADC_IRQHandler+0x29a>
 8002b2a:	4b88      	ldr	r3, [pc, #544]	@ (8002d4c <HAL_ADC_IRQHandler+0x4b4>)
 8002b2c:	e001      	b.n	8002b32 <HAL_ADC_IRQHandler+0x29a>
 8002b2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b32:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d047      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <HAL_ADC_IRQHandler+0x2c2>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d03f      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d13a      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b64:	2b40      	cmp	r3, #64	@ 0x40
 8002b66:	d133      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d12e      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fbeb 	bl	8002352 <LL_ADC_INJ_IsConversionOngoing>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11a      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b90:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d112      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bb6:	e00b      	b.n	8002bd0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbc:	f043 0210 	orr.w	r2, r3, #16
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 ff5d 	bl	8003a90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2260      	movs	r2, #96	@ 0x60
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d011      	beq.n	8002c0c <HAL_ADC_IRQHandler+0x374>
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8b4 	bl	8002d6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2280      	movs	r2, #128	@ 0x80
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x3a4>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 ff43 	bl	8003ab8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d012      	beq.n	8002c6c <HAL_ADC_IRQHandler+0x3d4>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 ff35 	bl	8003acc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d043      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x466>
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d03e      	beq.n	8002cfe <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8c:	e021      	b.n	8002cd2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d015      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c9c:	d004      	beq.n	8002ca8 <HAL_ADC_IRQHandler+0x410>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a28      	ldr	r2, [pc, #160]	@ (8002d44 <HAL_ADC_IRQHandler+0x4ac>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_IRQHandler+0x414>
 8002ca8:	4b29      	ldr	r3, [pc, #164]	@ (8002d50 <HAL_ADC_IRQHandler+0x4b8>)
 8002caa:	e000      	b.n	8002cae <HAL_ADC_IRQHandler+0x416>
 8002cac:	4b29      	ldr	r3, [pc, #164]	@ (8002d54 <HAL_ADC_IRQHandler+0x4bc>)
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fa7e 	bl	80021b0 <LL_ADC_GetMultiDMATransfer>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cbe:	e008      	b.n	8002cd2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10e      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cdc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce8:	f043 0202 	orr.w	r2, r3, #2
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f845 	bl	8002d80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d018      	beq.n	8002d3a <HAL_ADC_IRQHandler+0x4a2>
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d013      	beq.n	8002d3a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d16:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d22:	f043 0208 	orr.w	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d32:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 feb5 	bl	8003aa4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d3a:	bf00      	nop
 8002d3c:	3728      	adds	r7, #40	@ 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	50000100 	.word	0x50000100
 8002d48:	50000500 	.word	0x50000500
 8002d4c:	50000400 	.word	0x50000400
 8002d50:	50000300 	.word	0x50000300
 8002d54:	50000700 	.word	0x50000700

08002d58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b0b6      	sub	sp, #216	@ 0xd8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d102      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x24>
 8002db2:	2302      	movs	r3, #2
 8002db4:	f000 bc13 	b.w	80035de <HAL_ADC_ConfigChannel+0x84a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fab1 	bl	800232c <LL_ADC_REG_IsConversionOngoing>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 83f3 	bne.w	80035b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f7ff f949 	bl	8002076 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fa9f 	bl	800232c <LL_ADC_REG_IsConversionOngoing>
 8002dee:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff faab 	bl	8002352 <LL_ADC_INJ_IsConversionOngoing>
 8002dfc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 81d9 	bne.w	80031bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 81d4 	bne.w	80031bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e1c:	d10f      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2200      	movs	r2, #0
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f7ff f963 	bl	80020f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff f8f7 	bl	800202a <LL_ADC_SetSamplingTimeCommonConfig>
 8002e3c:	e00e      	b.n	8002e5c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f7ff f952 	bl	80020f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f8e7 	bl	800202a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	08db      	lsrs	r3, r3, #3
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d022      	beq.n	8002ec4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6919      	ldr	r1, [r3, #16]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e8e:	f7ff f841 	bl	8001f14 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6919      	ldr	r1, [r3, #16]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f7ff f88d 	bl	8001fbe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x126>
 8002eb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eb8:	e000      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x128>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f7ff f899 	bl	8001ff4 <LL_ADC_SetOffsetSaturation>
 8002ec2:	e17b      	b.n	80031bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff f846 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x15c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff f83b 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	f003 021f 	and.w	r2, r3, #31
 8002eee:	e01e      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x19a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff f830 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e004      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d105      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x1b2>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	e018      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x1e4>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	e004      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002f6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d106      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe ffff 	bl	8001f88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2101      	movs	r1, #1
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe ffe3 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x222>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe ffd8 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002fac:	4603      	mov	r3, r0
 8002fae:	0e9b      	lsrs	r3, r3, #26
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	e01e      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x260>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe ffcd 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002fd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e004      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_ADC_ConfigChannel+0x278>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	e018      	b.n	800303e <HAL_ADC_ConfigChannel+0x2aa>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003020:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003024:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003028:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003030:	2320      	movs	r3, #32
 8003032:	e004      	b.n	800303e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003034:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800303e:	429a      	cmp	r2, r3
 8003040:	d106      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2200      	movs	r2, #0
 8003048:	2101      	movs	r1, #1
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe ff9c 	bl	8001f88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2102      	movs	r1, #2
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe ff80 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_ADC_ConfigChannel+0x2e8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2102      	movs	r1, #2
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe ff75 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	f003 021f 	and.w	r2, r3, #31
 800307a:	e01e      	b.n	80030ba <HAL_ADC_ConfigChannel+0x326>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2102      	movs	r1, #2
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe ff6a 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8003088:	4603      	mov	r3, r0
 800308a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800309a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800309e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80030a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e004      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80030ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d105      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x33e>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0e9b      	lsrs	r3, r3, #26
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	e016      	b.n	8003100 <HAL_ADC_ConfigChannel+0x36c>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80030e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80030ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e004      	b.n	8003100 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80030f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003100:	429a      	cmp	r2, r3
 8003102:	d106      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2200      	movs	r2, #0
 800310a:	2102      	movs	r1, #2
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe ff3b 	bl	8001f88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2103      	movs	r1, #3
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe ff1f 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 800311e:	4603      	mov	r3, r0
 8003120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <HAL_ADC_ConfigChannel+0x3aa>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2103      	movs	r1, #3
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe ff14 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 8003134:	4603      	mov	r3, r0
 8003136:	0e9b      	lsrs	r3, r3, #26
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	e017      	b.n	800316e <HAL_ADC_ConfigChannel+0x3da>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2103      	movs	r1, #3
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe ff09 	bl	8001f5c <LL_ADC_GetOffsetChannel>
 800314a:	4603      	mov	r3, r0
 800314c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003158:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800315a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003160:	2320      	movs	r3, #32
 8003162:	e003      	b.n	800316c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x3f2>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	0e9b      	lsrs	r3, r3, #26
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	e011      	b.n	80031aa <HAL_ADC_ConfigChannel+0x416>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003196:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800319e:	2320      	movs	r3, #32
 80031a0:	e003      	b.n	80031aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80031a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d106      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	2103      	movs	r1, #3
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fee6 	bl	8001f88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f879 	bl	80022b8 <LL_ADC_IsEnabled>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 813d 	bne.w	8003448 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	461a      	mov	r2, r3
 80031dc:	f7fe ffb6 	bl	800214c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4aa2      	ldr	r2, [pc, #648]	@ (8003470 <HAL_ADC_ConfigChannel+0x6dc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	f040 812e 	bne.w	8003448 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10b      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x480>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	0e9b      	lsrs	r3, r3, #26
 8003202:	3301      	adds	r3, #1
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2b09      	cmp	r3, #9
 800320a:	bf94      	ite	ls
 800320c:	2301      	movls	r3, #1
 800320e:	2300      	movhi	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e019      	b.n	8003248 <HAL_ADC_ConfigChannel+0x4b4>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003224:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003226:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800322c:	2320      	movs	r3, #32
 800322e:	e003      	b.n	8003238 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003230:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	2b09      	cmp	r3, #9
 8003240:	bf94      	ite	ls
 8003242:	2301      	movls	r3, #1
 8003244:	2300      	movhi	r3, #0
 8003246:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003248:	2b00      	cmp	r3, #0
 800324a:	d079      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x4d4>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	3301      	adds	r3, #1
 8003260:	069b      	lsls	r3, r3, #26
 8003262:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003266:	e015      	b.n	8003294 <HAL_ADC_ConfigChannel+0x500>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003278:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800327a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e003      	b.n	800328c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	3301      	adds	r3, #1
 800328e:	069b      	lsls	r3, r3, #26
 8003290:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x520>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	e017      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x550>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80032c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80032c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80032cc:	2320      	movs	r3, #32
 80032ce:	e003      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80032d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	3301      	adds	r3, #1
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2101      	movs	r1, #1
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	ea42 0103 	orr.w	r1, r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <HAL_ADC_ConfigChannel+0x576>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	3301      	adds	r3, #1
 80032fc:	f003 021f 	and.w	r2, r3, #31
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	051b      	lsls	r3, r3, #20
 8003308:	e018      	b.n	800333c <HAL_ADC_ConfigChannel+0x5a8>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800331c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e003      	b.n	800332e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800333c:	430b      	orrs	r3, r1
 800333e:	e07e      	b.n	800343e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_ADC_ConfigChannel+0x5c8>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0e9b      	lsrs	r3, r3, #26
 8003352:	3301      	adds	r3, #1
 8003354:	069b      	lsls	r3, r3, #26
 8003356:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800335a:	e015      	b.n	8003388 <HAL_ADC_ConfigChannel+0x5f4>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800336a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003374:	2320      	movs	r3, #32
 8003376:	e003      	b.n	8003380 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	3301      	adds	r3, #1
 8003382:	069b      	lsls	r3, r3, #26
 8003384:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x614>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	3301      	adds	r3, #1
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	e017      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x644>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	61fb      	str	r3, [r7, #28]
  return result;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80033c0:	2320      	movs	r3, #32
 80033c2:	e003      	b.n	80033cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	ea42 0103 	orr.w	r1, r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10d      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x670>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0e9b      	lsrs	r3, r3, #26
 80033ee:	3301      	adds	r3, #1
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	3b1e      	subs	r3, #30
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003402:	e01b      	b.n	800343c <HAL_ADC_ConfigChannel+0x6a8>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	613b      	str	r3, [r7, #16]
  return result;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e003      	b.n	8003428 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f003 021f 	and.w	r2, r3, #31
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	3b1e      	subs	r3, #30
 8003436:	051b      	lsls	r3, r3, #20
 8003438:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800343c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003442:	4619      	mov	r1, r3
 8003444:	f7fe fe56 	bl	80020f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_ADC_ConfigChannel+0x6e0>)
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80be 	beq.w	80035d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800345e:	d004      	beq.n	800346a <HAL_ADC_ConfigChannel+0x6d6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a04      	ldr	r2, [pc, #16]	@ (8003478 <HAL_ADC_ConfigChannel+0x6e4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10a      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x6ec>
 800346a:	4b04      	ldr	r3, [pc, #16]	@ (800347c <HAL_ADC_ConfigChannel+0x6e8>)
 800346c:	e009      	b.n	8003482 <HAL_ADC_ConfigChannel+0x6ee>
 800346e:	bf00      	nop
 8003470:	407f0000 	.word	0x407f0000
 8003474:	80080000 	.word	0x80080000
 8003478:	50000100 	.word	0x50000100
 800347c:	50000300 	.word	0x50000300
 8003480:	4b59      	ldr	r3, [pc, #356]	@ (80035e8 <HAL_ADC_ConfigChannel+0x854>)
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fd38 	bl	8001ef8 <LL_ADC_GetCommonPathInternalCh>
 8003488:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a56      	ldr	r2, [pc, #344]	@ (80035ec <HAL_ADC_ConfigChannel+0x858>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d004      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x70c>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a55      	ldr	r2, [pc, #340]	@ (80035f0 <HAL_ADC_ConfigChannel+0x85c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d13a      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d134      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b4:	d005      	beq.n	80034c2 <HAL_ADC_ConfigChannel+0x72e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a4e      	ldr	r2, [pc, #312]	@ (80035f4 <HAL_ADC_ConfigChannel+0x860>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	f040 8085 	bne.w	80035cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ca:	d004      	beq.n	80034d6 <HAL_ADC_ConfigChannel+0x742>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a49      	ldr	r2, [pc, #292]	@ (80035f8 <HAL_ADC_ConfigChannel+0x864>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_ADC_ConfigChannel+0x746>
 80034d6:	4a49      	ldr	r2, [pc, #292]	@ (80035fc <HAL_ADC_ConfigChannel+0x868>)
 80034d8:	e000      	b.n	80034dc <HAL_ADC_ConfigChannel+0x748>
 80034da:	4a43      	ldr	r2, [pc, #268]	@ (80035e8 <HAL_ADC_ConfigChannel+0x854>)
 80034dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f7fe fcf3 	bl	8001ed2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034ec:	4b44      	ldr	r3, [pc, #272]	@ (8003600 <HAL_ADC_ConfigChannel+0x86c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	4a44      	ldr	r2, [pc, #272]	@ (8003604 <HAL_ADC_ConfigChannel+0x870>)
 80034f4:	fba2 2303 	umull	r2, r3, r2, r3
 80034f8:	099b      	lsrs	r3, r3, #6
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003506:	e002      	b.n	800350e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3b01      	subs	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f9      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003514:	e05a      	b.n	80035cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3b      	ldr	r2, [pc, #236]	@ (8003608 <HAL_ADC_ConfigChannel+0x874>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d125      	bne.n	800356c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11f      	bne.n	800356c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a31      	ldr	r2, [pc, #196]	@ (80035f8 <HAL_ADC_ConfigChannel+0x864>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d104      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x7ac>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a34      	ldr	r2, [pc, #208]	@ (800360c <HAL_ADC_ConfigChannel+0x878>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d047      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003548:	d004      	beq.n	8003554 <HAL_ADC_ConfigChannel+0x7c0>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2a      	ldr	r2, [pc, #168]	@ (80035f8 <HAL_ADC_ConfigChannel+0x864>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x7c4>
 8003554:	4a29      	ldr	r2, [pc, #164]	@ (80035fc <HAL_ADC_ConfigChannel+0x868>)
 8003556:	e000      	b.n	800355a <HAL_ADC_ConfigChannel+0x7c6>
 8003558:	4a23      	ldr	r2, [pc, #140]	@ (80035e8 <HAL_ADC_ConfigChannel+0x854>)
 800355a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800355e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003562:	4619      	mov	r1, r3
 8003564:	4610      	mov	r0, r2
 8003566:	f7fe fcb4 	bl	8001ed2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800356a:	e031      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a27      	ldr	r2, [pc, #156]	@ (8003610 <HAL_ADC_ConfigChannel+0x87c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d12d      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800357a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d127      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1c      	ldr	r2, [pc, #112]	@ (80035f8 <HAL_ADC_ConfigChannel+0x864>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d022      	beq.n	80035d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003594:	d004      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0x80c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a17      	ldr	r2, [pc, #92]	@ (80035f8 <HAL_ADC_ConfigChannel+0x864>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x810>
 80035a0:	4a16      	ldr	r2, [pc, #88]	@ (80035fc <HAL_ADC_ConfigChannel+0x868>)
 80035a2:	e000      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x812>
 80035a4:	4a10      	ldr	r2, [pc, #64]	@ (80035e8 <HAL_ADC_ConfigChannel+0x854>)
 80035a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f7fe fc8e 	bl	8001ed2 <LL_ADC_SetCommonPathInternalCh>
 80035b6:	e00c      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80035ca:	e002      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035cc:	bf00      	nop
 80035ce:	e000      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80035de:	4618      	mov	r0, r3
 80035e0:	37d8      	adds	r7, #216	@ 0xd8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	50000700 	.word	0x50000700
 80035ec:	c3210000 	.word	0xc3210000
 80035f0:	90c00010 	.word	0x90c00010
 80035f4:	50000600 	.word	0x50000600
 80035f8:	50000100 	.word	0x50000100
 80035fc:	50000300 	.word	0x50000300
 8003600:	20000000 	.word	0x20000000
 8003604:	053e2d63 	.word	0x053e2d63
 8003608:	c7520000 	.word	0xc7520000
 800360c:	50000500 	.word	0x50000500
 8003610:	cb840000 	.word	0xcb840000

08003614 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe fe47 	bl	80022b8 <LL_ADC_IsEnabled>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d176      	bne.n	800371e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	4b3c      	ldr	r3, [pc, #240]	@ (8003728 <ADC_Enable+0x114>)
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003642:	f043 0210 	orr.w	r2, r3, #16
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e062      	b.n	8003720 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fe02 	bl	8002268 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800366c:	d004      	beq.n	8003678 <ADC_Enable+0x64>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2e      	ldr	r2, [pc, #184]	@ (800372c <ADC_Enable+0x118>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <ADC_Enable+0x68>
 8003678:	4b2d      	ldr	r3, [pc, #180]	@ (8003730 <ADC_Enable+0x11c>)
 800367a:	e000      	b.n	800367e <ADC_Enable+0x6a>
 800367c:	4b2d      	ldr	r3, [pc, #180]	@ (8003734 <ADC_Enable+0x120>)
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fc3a 	bl	8001ef8 <LL_ADC_GetCommonPathInternalCh>
 8003684:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800368a:	2b00      	cmp	r3, #0
 800368c:	d013      	beq.n	80036b6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800368e:	4b2a      	ldr	r3, [pc, #168]	@ (8003738 <ADC_Enable+0x124>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	4a29      	ldr	r2, [pc, #164]	@ (800373c <ADC_Enable+0x128>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036a8:	e002      	b.n	80036b0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f9      	bne.n	80036aa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036b6:	f7fe fbcb 	bl	8001e50 <HAL_GetTick>
 80036ba:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036bc:	e028      	b.n	8003710 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fdf8 	bl	80022b8 <LL_ADC_IsEnabled>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe fdc8 	bl	8002268 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036d8:	f7fe fbba 	bl	8001e50 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d914      	bls.n	8003710 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d00d      	beq.n	8003710 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f8:	f043 0210 	orr.w	r2, r3, #16
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e007      	b.n	8003720 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d1cf      	bne.n	80036be <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	8000003f 	.word	0x8000003f
 800372c:	50000100 	.word	0x50000100
 8003730:	50000300 	.word	0x50000300
 8003734:	50000700 	.word	0x50000700
 8003738:	20000000 	.word	0x20000000
 800373c:	053e2d63 	.word	0x053e2d63

08003740 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fdc6 	bl	80022de <LL_ADC_IsDisableOngoing>
 8003752:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fdad 	bl	80022b8 <LL_ADC_IsEnabled>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d047      	beq.n	80037f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d144      	bne.n	80037f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030d 	and.w	r3, r3, #13
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10c      	bne.n	8003792 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe fd87 	bl	8002290 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2203      	movs	r2, #3
 8003788:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800378a:	f7fe fb61 	bl	8001e50 <HAL_GetTick>
 800378e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003790:	e029      	b.n	80037e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003796:	f043 0210 	orr.w	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e023      	b.n	80037f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037ae:	f7fe fb4f 	bl	8001e50 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d914      	bls.n	80037e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00d      	beq.n	80037e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	f043 0210 	orr.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e007      	b.n	80037f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1dc      	bne.n	80037ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003810:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003814:	2b00      	cmp	r3, #0
 8003816:	d14b      	bne.n	80038b0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d021      	beq.n	8003876 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe fc0a 	bl	8002050 <LL_ADC_REG_IsTriggerSourceSWStart>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d032      	beq.n	80038a8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d12b      	bne.n	80038a8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003854:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d11f      	bne.n	80038a8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003874:	e018      	b.n	80038a8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d111      	bne.n	80038a8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d105      	bne.n	80038a8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7fd fa39 	bl	8000d20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038ae:	e00e      	b.n	80038ce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7ff fa5f 	bl	8002d80 <HAL_ADC_ErrorCallback>
}
 80038c2:	e004      	b.n	80038ce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff fa37 	bl	8002d58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003904:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003910:	f043 0204 	orr.w	r2, r3, #4
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f7ff fa31 	bl	8002d80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <LL_ADC_IsEnabled>:
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <LL_ADC_IsEnabled+0x18>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <LL_ADC_IsEnabled+0x1a>
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_ADC_StartCalibration>:
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800395e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003968:	4313      	orrs	r3, r2
 800396a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	609a      	str	r2, [r3, #8]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <LL_ADC_IsCalibrationOnGoing>:
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800398e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003992:	d101      	bne.n	8003998 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d101      	bne.n	80039be <LL_ADC_REG_IsConversionOngoing+0x18>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_ADCEx_Calibration_Start+0x1c>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e04d      	b.n	8003a84 <HAL_ADCEx_Calibration_Start+0xb8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fea5 	bl	8003740 <ADC_Disable>
 80039f6:	4603      	mov	r3, r0
 80039f8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d136      	bne.n	8003a6e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a08:	f023 0302 	bic.w	r3, r3, #2
 8003a0c:	f043 0202 	orr.w	r2, r3, #2
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6839      	ldr	r1, [r7, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ff96 	bl	800394c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a20:	e014      	b.n	8003a4c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3301      	adds	r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4a18      	ldr	r2, [pc, #96]	@ (8003a8c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d90d      	bls.n	8003a4c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	f023 0312 	bic.w	r3, r3, #18
 8003a38:	f043 0210 	orr.w	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e01b      	b.n	8003a84 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff94 	bl	800397e <LL_ADC_IsCalibrationOnGoing>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e2      	bne.n	8003a22 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a60:	f023 0303 	bic.w	r3, r3, #3
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a6c:	e005      	b.n	8003a7a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a72:	f043 0210 	orr.w	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	0004de01 	.word	0x0004de01

08003a90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003af4:	b590      	push	{r4, r7, lr}
 8003af6:	b0a1      	sub	sp, #132	@ 0x84
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e0e7      	b.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b2a:	d102      	bne.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	e009      	b.n	8003b46 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6e      	ldr	r2, [pc, #440]	@ (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d102      	bne.n	8003b42 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003b3c:	4b6d      	ldr	r3, [pc, #436]	@ (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	e001      	b.n	8003b46 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0be      	b.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ff1d 	bl	80039a6 <LL_ADC_REG_IsConversionOngoing>
 8003b6c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff ff17 	bl	80039a6 <LL_ADC_REG_IsConversionOngoing>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 80a0 	bne.w	8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f040 809c 	bne.w	8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b90:	d004      	beq.n	8003b9c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a55      	ldr	r2, [pc, #340]	@ (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003b9c:	4b56      	ldr	r3, [pc, #344]	@ (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003b9e:	e000      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ba0:	4b56      	ldr	r3, [pc, #344]	@ (8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003ba2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d04b      	beq.n	8003c44 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bbe:	035b      	lsls	r3, r3, #13
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd0:	d004      	beq.n	8003bdc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a45      	ldr	r2, [pc, #276]	@ (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10f      	bne.n	8003bfc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003bdc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003be0:	f7ff fea1 	bl	8003926 <LL_ADC_IsEnabled>
 8003be4:	4604      	mov	r4, r0
 8003be6:	4841      	ldr	r0, [pc, #260]	@ (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003be8:	f7ff fe9d 	bl	8003926 <LL_ADC_IsEnabled>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4323      	orrs	r3, r4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e012      	b.n	8003c22 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003bfc:	483c      	ldr	r0, [pc, #240]	@ (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003bfe:	f7ff fe92 	bl	8003926 <LL_ADC_IsEnabled>
 8003c02:	4604      	mov	r4, r0
 8003c04:	483b      	ldr	r0, [pc, #236]	@ (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c06:	f7ff fe8e 	bl	8003926 <LL_ADC_IsEnabled>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	431c      	orrs	r4, r3
 8003c0e:	483c      	ldr	r0, [pc, #240]	@ (8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c10:	f7ff fe89 	bl	8003926 <LL_ADC_IsEnabled>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4323      	orrs	r3, r4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d056      	beq.n	8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c2e:	f023 030f 	bic.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	6811      	ldr	r1, [r2, #0]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	6892      	ldr	r2, [r2, #8]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c40:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c42:	e047      	b.n	8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c4e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c58:	d004      	beq.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a23      	ldr	r2, [pc, #140]	@ (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d10f      	bne.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003c64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c68:	f7ff fe5d 	bl	8003926 <LL_ADC_IsEnabled>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	481f      	ldr	r0, [pc, #124]	@ (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c70:	f7ff fe59 	bl	8003926 <LL_ADC_IsEnabled>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4323      	orrs	r3, r4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e012      	b.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c84:	481a      	ldr	r0, [pc, #104]	@ (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c86:	f7ff fe4e 	bl	8003926 <LL_ADC_IsEnabled>
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	4819      	ldr	r0, [pc, #100]	@ (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c8e:	f7ff fe4a 	bl	8003926 <LL_ADC_IsEnabled>
 8003c92:	4603      	mov	r3, r0
 8003c94:	431c      	orrs	r4, r3
 8003c96:	481a      	ldr	r0, [pc, #104]	@ (8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c98:	f7ff fe45 	bl	8003926 <LL_ADC_IsEnabled>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4323      	orrs	r3, r4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d012      	beq.n	8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003cb6:	f023 030f 	bic.w	r3, r3, #15
 8003cba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003cbc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cbe:	e009      	b.n	8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003cd2:	e000      	b.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cde:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3784      	adds	r7, #132	@ 0x84
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd90      	pop	{r4, r7, pc}
 8003cea:	bf00      	nop
 8003cec:	50000100 	.word	0x50000100
 8003cf0:	50000400 	.word	0x50000400
 8003cf4:	50000500 	.word	0x50000500
 8003cf8:	50000300 	.word	0x50000300
 8003cfc:	50000700 	.word	0x50000700
 8003d00:	50000600 	.word	0x50000600

08003d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d14:	4b0c      	ldr	r3, [pc, #48]	@ (8003d48 <__NVIC_SetPriorityGrouping+0x44>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d20:	4013      	ands	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d36:	4a04      	ldr	r2, [pc, #16]	@ (8003d48 <__NVIC_SetPriorityGrouping+0x44>)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	60d3      	str	r3, [r2, #12]
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d50:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <__NVIC_GetPriorityGrouping+0x18>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	0a1b      	lsrs	r3, r3, #8
 8003d56:	f003 0307 	and.w	r3, r3, #7
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	db0b      	blt.n	8003d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	f003 021f 	and.w	r2, r3, #31
 8003d80:	4907      	ldr	r1, [pc, #28]	@ (8003da0 <__NVIC_EnableIRQ+0x38>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2001      	movs	r0, #1
 8003d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	e000e100 	.word	0xe000e100

08003da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	6039      	str	r1, [r7, #0]
 8003dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	db0a      	blt.n	8003dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	490c      	ldr	r1, [pc, #48]	@ (8003df0 <__NVIC_SetPriority+0x4c>)
 8003dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc2:	0112      	lsls	r2, r2, #4
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dcc:	e00a      	b.n	8003de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	4908      	ldr	r1, [pc, #32]	@ (8003df4 <__NVIC_SetPriority+0x50>)
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	3b04      	subs	r3, #4
 8003ddc:	0112      	lsls	r2, r2, #4
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	440b      	add	r3, r1
 8003de2:	761a      	strb	r2, [r3, #24]
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000e100 	.word	0xe000e100
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b089      	sub	sp, #36	@ 0x24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f1c3 0307 	rsb	r3, r3, #7
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	bf28      	it	cs
 8003e16:	2304      	movcs	r3, #4
 8003e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d902      	bls.n	8003e28 <NVIC_EncodePriority+0x30>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3b03      	subs	r3, #3
 8003e26:	e000      	b.n	8003e2a <NVIC_EncodePriority+0x32>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43da      	mvns	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e40:	f04f 31ff 	mov.w	r1, #4294967295
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	43d9      	mvns	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e50:	4313      	orrs	r3, r2
         );
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3724      	adds	r7, #36	@ 0x24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ff4c 	bl	8003d04 <__NVIC_SetPriorityGrouping>
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e82:	f7ff ff63 	bl	8003d4c <__NVIC_GetPriorityGrouping>
 8003e86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	6978      	ldr	r0, [r7, #20]
 8003e8e:	f7ff ffb3 	bl	8003df8 <NVIC_EncodePriority>
 8003e92:	4602      	mov	r2, r0
 8003e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff ff82 	bl	8003da4 <__NVIC_SetPriority>
}
 8003ea0:	bf00      	nop
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ff56 	bl	8003d68 <__NVIC_EnableIRQ>
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e08d      	b.n	8003ff2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b47      	ldr	r3, [pc, #284]	@ (8003ffc <HAL_DMA_Init+0x138>)
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d80f      	bhi.n	8003f02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b45      	ldr	r3, [pc, #276]	@ (8004000 <HAL_DMA_Init+0x13c>)
 8003eea:	4413      	add	r3, r2
 8003eec:	4a45      	ldr	r2, [pc, #276]	@ (8004004 <HAL_DMA_Init+0x140>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	009a      	lsls	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a42      	ldr	r2, [pc, #264]	@ (8004008 <HAL_DMA_Init+0x144>)
 8003efe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f00:	e00e      	b.n	8003f20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b40      	ldr	r3, [pc, #256]	@ (800400c <HAL_DMA_Init+0x148>)
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a3d      	ldr	r2, [pc, #244]	@ (8004004 <HAL_DMA_Init+0x140>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	009a      	lsls	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8004010 <HAL_DMA_Init+0x14c>)
 8003f1e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fa76 	bl	8004464 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f80:	d102      	bne.n	8003f88 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f9c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d010      	beq.n	8003fc8 <HAL_DMA_Init+0x104>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d80c      	bhi.n	8003fc8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa96 	bl	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	e008      	b.n	8003fda <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40020407 	.word	0x40020407
 8004000:	bffdfff8 	.word	0xbffdfff8
 8004004:	cccccccd 	.word	0xcccccccd
 8004008:	40020000 	.word	0x40020000
 800400c:	bffdfbf8 	.word	0xbffdfbf8
 8004010:	40020400 	.word	0x40020400

08004014 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_DMA_Start_IT+0x20>
 8004030:	2302      	movs	r3, #2
 8004032:	e066      	b.n	8004102 <HAL_DMA_Start_IT+0xee>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d155      	bne.n	80040f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f9bb 	bl	80043e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 020e 	orr.w	r2, r2, #14
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e00f      	b.n	80040ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0204 	bic.w	r2, r2, #4
 800409a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 020a 	orr.w	r2, r2, #10
 80040aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0201 	orr.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e005      	b.n	8004100 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
 80040fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004100:	7dfb      	ldrb	r3, [r7, #23]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d005      	beq.n	800412e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2204      	movs	r2, #4
 8004126:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
 800412c:	e037      	b.n	800419e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 020e 	bic.w	r2, r2, #14
 800413c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004148:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800414c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	f003 021f 	and.w	r2, r3, #31
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	2101      	movs	r1, #1
 800416c:	fa01 f202 	lsl.w	r2, r1, r2
 8004170:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800417a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00c      	beq.n	800419e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004192:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800419c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d00d      	beq.n	80041f0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2204      	movs	r2, #4
 80041d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	e047      	b.n	8004280 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 020e 	bic.w	r2, r2, #14
 80041fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0201 	bic.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800421e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004224:	f003 021f 	and.w	r2, r3, #31
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f202 	lsl.w	r2, r1, r2
 8004232:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800423c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004250:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004254:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800425e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
    }
  }
  return status;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2204      	movs	r2, #4
 80042ac:	409a      	lsls	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d026      	beq.n	8004304 <HAL_DMA_IRQHandler+0x7a>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d021      	beq.n	8004304 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0204 	bic.w	r2, r2, #4
 80042dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	f003 021f 	and.w	r2, r3, #31
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	2104      	movs	r1, #4
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d071      	beq.n	80043de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004302:	e06c      	b.n	80043de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	2202      	movs	r2, #2
 800430e:	409a      	lsls	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d02e      	beq.n	8004376 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d029      	beq.n	8004376 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 020a 	bic.w	r2, r2, #10
 800433e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	2102      	movs	r1, #2
 8004356:	fa01 f202 	lsl.w	r2, r1, r2
 800435a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d038      	beq.n	80043de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004374:	e033      	b.n	80043de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	2208      	movs	r2, #8
 8004380:	409a      	lsls	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d02a      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d025      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 020e 	bic.w	r2, r2, #14
 80043a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a8:	f003 021f 	and.w	r2, r3, #31
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f202 	lsl.w	r2, r1, r2
 80043b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
}
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004410:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004416:	f003 021f 	and.w	r2, r3, #31
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	2101      	movs	r1, #1
 8004420:	fa01 f202 	lsl.w	r2, r1, r2
 8004424:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b10      	cmp	r3, #16
 8004434:	d108      	bne.n	8004448 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004446:	e007      	b.n	8004458 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	60da      	str	r2, [r3, #12]
}
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	4b16      	ldr	r3, [pc, #88]	@ (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d802      	bhi.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004478:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e001      	b.n	8004482 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800447e:	4b15      	ldr	r3, [pc, #84]	@ (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004480:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3b08      	subs	r3, #8
 800448e:	4a12      	ldr	r2, [pc, #72]	@ (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	089b      	lsrs	r3, r3, #2
 800449e:	009a      	lsls	r2, r3, #2
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a0b      	ldr	r2, [pc, #44]	@ (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2201      	movs	r2, #1
 80044b8:	409a      	lsls	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40020407 	.word	0x40020407
 80044d0:	40020800 	.word	0x40020800
 80044d4:	40020820 	.word	0x40020820
 80044d8:	cccccccd 	.word	0xcccccccd
 80044dc:	40020880 	.word	0x40020880

080044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	461a      	mov	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a08      	ldr	r2, [pc, #32]	@ (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004502:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3b01      	subs	r3, #1
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2201      	movs	r2, #1
 800450e:	409a      	lsls	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	1000823f 	.word	0x1000823f
 8004524:	40020940 	.word	0x40020940

08004528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004536:	e15a      	b.n	80047ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	2101      	movs	r1, #1
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	4013      	ands	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 814c 	beq.w	80047e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d005      	beq.n	8004568 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004564:	2b02      	cmp	r3, #2
 8004566:	d130      	bne.n	80045ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	2203      	movs	r2, #3
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800459e:	2201      	movs	r2, #1
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	f003 0201 	and.w	r2, r3, #1
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d017      	beq.n	8004606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	2203      	movs	r2, #3
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d123      	bne.n	800465a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	08da      	lsrs	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3208      	adds	r2, #8
 800461a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	220f      	movs	r2, #15
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	08da      	lsrs	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3208      	adds	r2, #8
 8004654:	6939      	ldr	r1, [r7, #16]
 8004656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2203      	movs	r2, #3
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0203 	and.w	r2, r3, #3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80a6 	beq.w	80047e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800469c:	4b5b      	ldr	r3, [pc, #364]	@ (800480c <HAL_GPIO_Init+0x2e4>)
 800469e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a0:	4a5a      	ldr	r2, [pc, #360]	@ (800480c <HAL_GPIO_Init+0x2e4>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80046a8:	4b58      	ldr	r3, [pc, #352]	@ (800480c <HAL_GPIO_Init+0x2e4>)
 80046aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b4:	4a56      	ldr	r2, [pc, #344]	@ (8004810 <HAL_GPIO_Init+0x2e8>)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	089b      	lsrs	r3, r3, #2
 80046ba:	3302      	adds	r3, #2
 80046bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	220f      	movs	r2, #15
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046de:	d01f      	beq.n	8004720 <HAL_GPIO_Init+0x1f8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004814 <HAL_GPIO_Init+0x2ec>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d019      	beq.n	800471c <HAL_GPIO_Init+0x1f4>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004818 <HAL_GPIO_Init+0x2f0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <HAL_GPIO_Init+0x1f0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a4a      	ldr	r2, [pc, #296]	@ (800481c <HAL_GPIO_Init+0x2f4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00d      	beq.n	8004714 <HAL_GPIO_Init+0x1ec>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a49      	ldr	r2, [pc, #292]	@ (8004820 <HAL_GPIO_Init+0x2f8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d007      	beq.n	8004710 <HAL_GPIO_Init+0x1e8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a48      	ldr	r2, [pc, #288]	@ (8004824 <HAL_GPIO_Init+0x2fc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d101      	bne.n	800470c <HAL_GPIO_Init+0x1e4>
 8004708:	2305      	movs	r3, #5
 800470a:	e00a      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 800470c:	2306      	movs	r3, #6
 800470e:	e008      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 8004710:	2304      	movs	r3, #4
 8004712:	e006      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 8004714:	2303      	movs	r3, #3
 8004716:	e004      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 8004718:	2302      	movs	r3, #2
 800471a:	e002      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <HAL_GPIO_Init+0x1fa>
 8004720:	2300      	movs	r3, #0
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	f002 0203 	and.w	r2, r2, #3
 8004728:	0092      	lsls	r2, r2, #2
 800472a:	4093      	lsls	r3, r2
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004732:	4937      	ldr	r1, [pc, #220]	@ (8004810 <HAL_GPIO_Init+0x2e8>)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	089b      	lsrs	r3, r3, #2
 8004738:	3302      	adds	r3, #2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004740:	4b39      	ldr	r3, [pc, #228]	@ (8004828 <HAL_GPIO_Init+0x300>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	43db      	mvns	r3, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004764:	4a30      	ldr	r2, [pc, #192]	@ (8004828 <HAL_GPIO_Init+0x300>)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800476a:	4b2f      	ldr	r3, [pc, #188]	@ (8004828 <HAL_GPIO_Init+0x300>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	43db      	mvns	r3, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800478e:	4a26      	ldr	r2, [pc, #152]	@ (8004828 <HAL_GPIO_Init+0x300>)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004794:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <HAL_GPIO_Init+0x300>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	43db      	mvns	r3, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004828 <HAL_GPIO_Init+0x300>)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047be:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <HAL_GPIO_Init+0x300>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4013      	ands	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047e2:	4a11      	ldr	r2, [pc, #68]	@ (8004828 <HAL_GPIO_Init+0x300>)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3301      	adds	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f47f ae9d 	bne.w	8004538 <HAL_GPIO_Init+0x10>
  }
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	40021000 	.word	0x40021000
 8004810:	40010000 	.word	0x40010000
 8004814:	48000400 	.word	0x48000400
 8004818:	48000800 	.word	0x48000800
 800481c:	48000c00 	.word	0x48000c00
 8004820:	48001000 	.word	0x48001000
 8004824:	48001400 	.word	0x48001400
 8004828:	40010400 	.word	0x40010400

0800482c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	807b      	strh	r3, [r7, #2]
 8004838:	4613      	mov	r3, r2
 800483a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800483c:	787b      	ldrb	r3, [r7, #1]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004842:	887a      	ldrh	r2, [r7, #2]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004848:	e002      	b.n	8004850 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800484a:	887a      	ldrh	r2, [r7, #2]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4013      	ands	r3, r2
 8004874:	041a      	lsls	r2, r3, #16
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	43d9      	mvns	r1, r3
 800487a:	887b      	ldrh	r3, [r7, #2]
 800487c:	400b      	ands	r3, r1
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	619a      	str	r2, [r3, #24]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800489a:	4b08      	ldr	r3, [pc, #32]	@ (80048bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048a6:	4a05      	ldr	r2, [pc, #20]	@ (80048bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f806 	bl	80048c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40010400 	.word	0x40010400

080048c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d141      	bne.n	800496a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f2:	d131      	bne.n	8004958 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048f4:	4b47      	ldr	r3, [pc, #284]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048fa:	4a46      	ldr	r2, [pc, #280]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004900:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004904:	4b43      	ldr	r3, [pc, #268]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800490c:	4a41      	ldr	r2, [pc, #260]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004912:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004914:	4b40      	ldr	r3, [pc, #256]	@ (8004a18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2232      	movs	r2, #50	@ 0x32
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	4a3f      	ldr	r2, [pc, #252]	@ (8004a1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	0c9b      	lsrs	r3, r3, #18
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800492a:	e002      	b.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3b01      	subs	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004932:	4b38      	ldr	r3, [pc, #224]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800493a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493e:	d102      	bne.n	8004946 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f2      	bne.n	800492c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004946:	4b33      	ldr	r3, [pc, #204]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004952:	d158      	bne.n	8004a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e057      	b.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004958:	4b2e      	ldr	r3, [pc, #184]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800495e:	4a2d      	ldr	r2, [pc, #180]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004964:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004968:	e04d      	b.n	8004a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004970:	d141      	bne.n	80049f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004972:	4b28      	ldr	r3, [pc, #160]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497e:	d131      	bne.n	80049e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004980:	4b24      	ldr	r3, [pc, #144]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004986:	4a23      	ldr	r2, [pc, #140]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800498c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004990:	4b20      	ldr	r3, [pc, #128]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004998:	4a1e      	ldr	r2, [pc, #120]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800499e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2232      	movs	r2, #50	@ 0x32
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	0c9b      	lsrs	r3, r3, #18
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049b6:	e002      	b.n	80049be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049be:	4b15      	ldr	r3, [pc, #84]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ca:	d102      	bne.n	80049d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f2      	bne.n	80049b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049d2:	4b10      	ldr	r3, [pc, #64]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049de:	d112      	bne.n	8004a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e011      	b.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049f4:	e007      	b.n	8004a06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049f6:	4b07      	ldr	r3, [pc, #28]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049fe:	4a05      	ldr	r2, [pc, #20]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40007000 	.word	0x40007000
 8004a18:	20000000 	.word	0x20000000
 8004a1c:	431bde83 	.word	0x431bde83

08004a20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a24:	4b05      	ldr	r3, [pc, #20]	@ (8004a3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a04      	ldr	r2, [pc, #16]	@ (8004a3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a2e:	6093      	str	r3, [r2, #8]
}
 8004a30:	bf00      	nop
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40007000 	.word	0x40007000

08004a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e2fe      	b.n	8005050 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d075      	beq.n	8004b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5e:	4b97      	ldr	r3, [pc, #604]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a68:	4b94      	ldr	r3, [pc, #592]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0303 	and.w	r3, r3, #3
 8004a70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d102      	bne.n	8004a7e <HAL_RCC_OscConfig+0x3e>
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d002      	beq.n	8004a84 <HAL_RCC_OscConfig+0x44>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d10b      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a84:	4b8d      	ldr	r3, [pc, #564]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d05b      	beq.n	8004b48 <HAL_RCC_OscConfig+0x108>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d157      	bne.n	8004b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e2d9      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x74>
 8004aa6:	4b85      	ldr	r3, [pc, #532]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a84      	ldr	r2, [pc, #528]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e01d      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x98>
 8004abe:	4b7f      	ldr	r3, [pc, #508]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	4b7c      	ldr	r3, [pc, #496]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a7b      	ldr	r2, [pc, #492]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e00b      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
 8004ad8:	4b78      	ldr	r3, [pc, #480]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a77      	ldr	r2, [pc, #476]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4b75      	ldr	r3, [pc, #468]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a74      	ldr	r2, [pc, #464]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af8:	f7fd f9aa 	bl	8001e50 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b00:	f7fd f9a6 	bl	8001e50 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	@ 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e29e      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b12:	4b6a      	ldr	r3, [pc, #424]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0xc0>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fd f996 	bl	8001e50 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd f992 	bl	8001e50 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	@ 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e28a      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b3a:	4b60      	ldr	r3, [pc, #384]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0xe8>
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d075      	beq.n	8004c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b56:	4b59      	ldr	r3, [pc, #356]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b60:	4b56      	ldr	r3, [pc, #344]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	d102      	bne.n	8004b76 <HAL_RCC_OscConfig+0x136>
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d002      	beq.n	8004b7c <HAL_RCC_OscConfig+0x13c>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d11f      	bne.n	8004bbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_OscConfig+0x154>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e25d      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b94:	4b49      	ldr	r3, [pc, #292]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	4946      	ldr	r1, [pc, #280]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ba8:	4b45      	ldr	r3, [pc, #276]	@ (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fc f917 	bl	8000de0 <HAL_InitTick>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d043      	beq.n	8004c40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e249      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d023      	beq.n	8004c0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fd f93e 	bl	8001e50 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd8:	f7fd f93a 	bl	8001e50 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e232      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bea:	4b34      	ldr	r3, [pc, #208]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf6:	4b31      	ldr	r3, [pc, #196]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	061b      	lsls	r3, r3, #24
 8004c04:	492d      	ldr	r1, [pc, #180]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	604b      	str	r3, [r1, #4]
 8004c0a:	e01a      	b.n	8004c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a2a      	ldr	r2, [pc, #168]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004c12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd f91a 	bl	8001e50 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c20:	f7fd f916 	bl	8001e50 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e20e      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c32:	4b22      	ldr	r3, [pc, #136]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x1e0>
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d041      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01c      	beq.n	8004c90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c56:	4b19      	ldr	r3, [pc, #100]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c5c:	4a17      	ldr	r2, [pc, #92]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fd f8f3 	bl	8001e50 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6e:	f7fd f8ef 	bl	8001e50 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e1e7      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c80:	4b0e      	ldr	r3, [pc, #56]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0ef      	beq.n	8004c6e <HAL_RCC_OscConfig+0x22e>
 8004c8e:	e020      	b.n	8004cd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c90:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c96:	4a09      	ldr	r2, [pc, #36]	@ (8004cbc <HAL_RCC_OscConfig+0x27c>)
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fd f8d6 	bl	8001e50 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ca6:	e00d      	b.n	8004cc4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca8:	f7fd f8d2 	bl	8001e50 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d906      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e1ca      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1ea      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80a6 	beq.w	8004e2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ce4:	4b84      	ldr	r3, [pc, #528]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x2b4>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCC_OscConfig+0x2b6>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00d      	beq.n	8004d16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d06:	4b7c      	ldr	r3, [pc, #496]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d12:	2301      	movs	r3, #1
 8004d14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d16:	4b79      	ldr	r3, [pc, #484]	@ (8004efc <HAL_RCC_OscConfig+0x4bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d118      	bne.n	8004d54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d22:	4b76      	ldr	r3, [pc, #472]	@ (8004efc <HAL_RCC_OscConfig+0x4bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a75      	ldr	r2, [pc, #468]	@ (8004efc <HAL_RCC_OscConfig+0x4bc>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2e:	f7fd f88f 	bl	8001e50 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d36:	f7fd f88b 	bl	8001e50 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e183      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d48:	4b6c      	ldr	r3, [pc, #432]	@ (8004efc <HAL_RCC_OscConfig+0x4bc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d108      	bne.n	8004d6e <HAL_RCC_OscConfig+0x32e>
 8004d5c:	4b66      	ldr	r3, [pc, #408]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d62:	4a65      	ldr	r2, [pc, #404]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d6c:	e024      	b.n	8004db8 <HAL_RCC_OscConfig+0x378>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	d110      	bne.n	8004d98 <HAL_RCC_OscConfig+0x358>
 8004d76:	4b60      	ldr	r3, [pc, #384]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004d7e:	f043 0304 	orr.w	r3, r3, #4
 8004d82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d86:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d96:	e00f      	b.n	8004db8 <HAL_RCC_OscConfig+0x378>
 8004d98:	4b57      	ldr	r3, [pc, #348]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d9e:	4a56      	ldr	r2, [pc, #344]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004da8:	4b53      	ldr	r3, [pc, #332]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dae:	4a52      	ldr	r2, [pc, #328]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004db0:	f023 0304 	bic.w	r3, r3, #4
 8004db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d016      	beq.n	8004dee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7fd f846 	bl	8001e50 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc8:	f7fd f842 	bl	8001e50 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e138      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dde:	4b46      	ldr	r3, [pc, #280]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0ed      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x388>
 8004dec:	e015      	b.n	8004e1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dee:	f7fd f82f 	bl	8001e50 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004df4:	e00a      	b.n	8004e0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fd f82b 	bl	8001e50 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e121      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ed      	bne.n	8004df6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e1a:	7ffb      	ldrb	r3, [r7, #31]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d105      	bne.n	8004e2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e20:	4b35      	ldr	r3, [pc, #212]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e24:	4a34      	ldr	r2, [pc, #208]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d03c      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01c      	beq.n	8004e7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e40:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e46:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e50:	f7fc fffe 	bl	8001e50 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e58:	f7fc fffa 	bl	8001e50 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e0f2      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e6a:	4b23      	ldr	r3, [pc, #140]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ef      	beq.n	8004e58 <HAL_RCC_OscConfig+0x418>
 8004e78:	e01b      	b.n	8004eb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e80:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8a:	f7fc ffe1 	bl	8001e50 <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e92:	f7fc ffdd 	bl	8001e50 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e0d5      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ea4:	4b14      	ldr	r3, [pc, #80]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1ef      	bne.n	8004e92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80c9 	beq.w	800504e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b0c      	cmp	r3, #12
 8004ec6:	f000 8083 	beq.w	8004fd0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d15e      	bne.n	8004f90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a08      	ldr	r2, [pc, #32]	@ (8004ef8 <HAL_RCC_OscConfig+0x4b8>)
 8004ed8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7fc ffb7 	bl	8001e50 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee4:	e00c      	b.n	8004f00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7fc ffb3 	bl	8001e50 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d905      	bls.n	8004f00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e0ab      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f00:	4b55      	ldr	r3, [pc, #340]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1ec      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f0c:	4b52      	ldr	r3, [pc, #328]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	4b52      	ldr	r3, [pc, #328]	@ (800505c <HAL_RCC_OscConfig+0x61c>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6a11      	ldr	r1, [r2, #32]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f1c:	3a01      	subs	r2, #1
 8004f1e:	0112      	lsls	r2, r2, #4
 8004f20:	4311      	orrs	r1, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f26:	0212      	lsls	r2, r2, #8
 8004f28:	4311      	orrs	r1, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f2e:	0852      	lsrs	r2, r2, #1
 8004f30:	3a01      	subs	r2, #1
 8004f32:	0552      	lsls	r2, r2, #21
 8004f34:	4311      	orrs	r1, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f3a:	0852      	lsrs	r2, r2, #1
 8004f3c:	3a01      	subs	r2, #1
 8004f3e:	0652      	lsls	r2, r2, #25
 8004f40:	4311      	orrs	r1, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f46:	06d2      	lsls	r2, r2, #27
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	4943      	ldr	r1, [pc, #268]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f50:	4b41      	ldr	r3, [pc, #260]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a40      	ldr	r2, [pc, #256]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004f56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4a3d      	ldr	r2, [pc, #244]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004f62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f68:	f7fc ff72 	bl	8001e50 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f70:	f7fc ff6e 	bl	8001e50 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e066      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f82:	4b35      	ldr	r3, [pc, #212]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x530>
 8004f8e:	e05e      	b.n	800504e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f90:	4b31      	ldr	r3, [pc, #196]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a30      	ldr	r2, [pc, #192]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fc ff58 	bl	8001e50 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa4:	f7fc ff54 	bl	8001e50 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e04c      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb6:	4b28      	ldr	r3, [pc, #160]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004fc2:	4b25      	ldr	r3, [pc, #148]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	4924      	ldr	r1, [pc, #144]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004fc8:	4b25      	ldr	r3, [pc, #148]	@ (8005060 <HAL_RCC_OscConfig+0x620>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	60cb      	str	r3, [r1, #12]
 8004fce:	e03e      	b.n	800504e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e039      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8005058 <HAL_RCC_OscConfig+0x618>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f003 0203 	and.w	r2, r3, #3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d12c      	bne.n	800504a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d123      	bne.n	800504a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d11b      	bne.n	800504a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d113      	bne.n	800504a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	3b01      	subs	r3, #1
 8005030:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d109      	bne.n	800504a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	3b01      	subs	r3, #1
 8005044:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005046:	429a      	cmp	r2, r3
 8005048:	d001      	beq.n	800504e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40021000 	.word	0x40021000
 800505c:	019f800c 	.word	0x019f800c
 8005060:	feeefffc 	.word	0xfeeefffc

08005064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e11e      	b.n	80052ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800507c:	4b91      	ldr	r3, [pc, #580]	@ (80052c4 <HAL_RCC_ClockConfig+0x260>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d910      	bls.n	80050ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508a:	4b8e      	ldr	r3, [pc, #568]	@ (80052c4 <HAL_RCC_ClockConfig+0x260>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 020f 	bic.w	r2, r3, #15
 8005092:	498c      	ldr	r1, [pc, #560]	@ (80052c4 <HAL_RCC_ClockConfig+0x260>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509a:	4b8a      	ldr	r3, [pc, #552]	@ (80052c4 <HAL_RCC_ClockConfig+0x260>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e106      	b.n	80052ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d073      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d129      	bne.n	8005114 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c0:	4b81      	ldr	r3, [pc, #516]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0f4      	b.n	80052ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80050d0:	f000 f9d0 	bl	8005474 <RCC_GetSysClockFreqFromPLLSource>
 80050d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4a7c      	ldr	r2, [pc, #496]	@ (80052cc <HAL_RCC_ClockConfig+0x268>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d93f      	bls.n	800515e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050de:	4b7a      	ldr	r3, [pc, #488]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d033      	beq.n	800515e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d12f      	bne.n	800515e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050fe:	4b72      	ldr	r3, [pc, #456]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005106:	4a70      	ldr	r2, [pc, #448]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 8005108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800510c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800510e:	2380      	movs	r3, #128	@ 0x80
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	e024      	b.n	800515e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d107      	bne.n	800512c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800511c:	4b6a      	ldr	r3, [pc, #424]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0c6      	b.n	80052ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800512c:	4b66      	ldr	r3, [pc, #408]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e0be      	b.n	80052ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800513c:	f000 f8ce 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8005140:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4a61      	ldr	r2, [pc, #388]	@ (80052cc <HAL_RCC_ClockConfig+0x268>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d909      	bls.n	800515e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800514a:	4b5f      	ldr	r3, [pc, #380]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005152:	4a5d      	ldr	r2, [pc, #372]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 8005154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005158:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800515a:	2380      	movs	r3, #128	@ 0x80
 800515c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800515e:	4b5a      	ldr	r3, [pc, #360]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f023 0203 	bic.w	r2, r3, #3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4957      	ldr	r1, [pc, #348]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 800516c:	4313      	orrs	r3, r2
 800516e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005170:	f7fc fe6e 	bl	8001e50 <HAL_GetTick>
 8005174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005176:	e00a      	b.n	800518e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005178:	f7fc fe6a 	bl	8001e50 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d901      	bls.n	800518e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e095      	b.n	80052ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518e:	4b4e      	ldr	r3, [pc, #312]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 020c 	and.w	r2, r3, #12
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	429a      	cmp	r2, r3
 800519e:	d1eb      	bne.n	8005178 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d023      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051b8:	4b43      	ldr	r3, [pc, #268]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a42      	ldr	r2, [pc, #264]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 80051be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80051d0:	4b3d      	ldr	r3, [pc, #244]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051d8:	4a3b      	ldr	r2, [pc, #236]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 80051da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e0:	4b39      	ldr	r3, [pc, #228]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4936      	ldr	r1, [pc, #216]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
 80051f2:	e008      	b.n	8005206 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2b80      	cmp	r3, #128	@ 0x80
 80051f8:	d105      	bne.n	8005206 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051fa:	4b33      	ldr	r3, [pc, #204]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	4a32      	ldr	r2, [pc, #200]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 8005200:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005204:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005206:	4b2f      	ldr	r3, [pc, #188]	@ (80052c4 <HAL_RCC_ClockConfig+0x260>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d21d      	bcs.n	8005250 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005214:	4b2b      	ldr	r3, [pc, #172]	@ (80052c4 <HAL_RCC_ClockConfig+0x260>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 020f 	bic.w	r2, r3, #15
 800521c:	4929      	ldr	r1, [pc, #164]	@ (80052c4 <HAL_RCC_ClockConfig+0x260>)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005224:	f7fc fe14 	bl	8001e50 <HAL_GetTick>
 8005228:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	e00a      	b.n	8005242 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800522c:	f7fc fe10 	bl	8001e50 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e03b      	b.n	80052ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b20      	ldr	r3, [pc, #128]	@ (80052c4 <HAL_RCC_ClockConfig+0x260>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d1ed      	bne.n	800522c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800525c:	4b1a      	ldr	r3, [pc, #104]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4917      	ldr	r1, [pc, #92]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 800526a:	4313      	orrs	r3, r2
 800526c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800527a:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	490f      	ldr	r1, [pc, #60]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 800528a:	4313      	orrs	r3, r2
 800528c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800528e:	f000 f825 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8005292:	4602      	mov	r2, r0
 8005294:	4b0c      	ldr	r3, [pc, #48]	@ (80052c8 <HAL_RCC_ClockConfig+0x264>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	490c      	ldr	r1, [pc, #48]	@ (80052d0 <HAL_RCC_ClockConfig+0x26c>)
 80052a0:	5ccb      	ldrb	r3, [r1, r3]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	4a0a      	ldr	r2, [pc, #40]	@ (80052d4 <HAL_RCC_ClockConfig+0x270>)
 80052ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052ae:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <HAL_RCC_ClockConfig+0x274>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb fd94 	bl	8000de0 <HAL_InitTick>
 80052b8:	4603      	mov	r3, r0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40022000 	.word	0x40022000
 80052c8:	40021000 	.word	0x40021000
 80052cc:	04c4b400 	.word	0x04c4b400
 80052d0:	0800adb4 	.word	0x0800adb4
 80052d4:	20000000 	.word	0x20000000
 80052d8:	200000c0 	.word	0x200000c0

080052dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005394 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d102      	bne.n	80052f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005398 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e047      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052f4:	4b27      	ldr	r3, [pc, #156]	@ (8005394 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 030c 	and.w	r3, r3, #12
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d102      	bne.n	8005306 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005300:	4b26      	ldr	r3, [pc, #152]	@ (800539c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	e03e      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005306:	4b23      	ldr	r3, [pc, #140]	@ (8005394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 030c 	and.w	r3, r3, #12
 800530e:	2b0c      	cmp	r3, #12
 8005310:	d136      	bne.n	8005380 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005312:	4b20      	ldr	r3, [pc, #128]	@ (8005394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800531c:	4b1d      	ldr	r3, [pc, #116]	@ (8005394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	3301      	adds	r3, #1
 8005328:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b03      	cmp	r3, #3
 800532e:	d10c      	bne.n	800534a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005330:	4a1a      	ldr	r2, [pc, #104]	@ (800539c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	4a16      	ldr	r2, [pc, #88]	@ (8005394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800533a:	68d2      	ldr	r2, [r2, #12]
 800533c:	0a12      	lsrs	r2, r2, #8
 800533e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005342:	fb02 f303 	mul.w	r3, r2, r3
 8005346:	617b      	str	r3, [r7, #20]
      break;
 8005348:	e00c      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800534a:	4a13      	ldr	r2, [pc, #76]	@ (8005398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005352:	4a10      	ldr	r2, [pc, #64]	@ (8005394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005354:	68d2      	ldr	r2, [r2, #12]
 8005356:	0a12      	lsrs	r2, r2, #8
 8005358:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800535c:	fb02 f303 	mul.w	r3, r2, r3
 8005360:	617b      	str	r3, [r7, #20]
      break;
 8005362:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005364:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	0e5b      	lsrs	r3, r3, #25
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	3301      	adds	r3, #1
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	fbb2 f3f3 	udiv	r3, r2, r3
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	e001      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005384:	693b      	ldr	r3, [r7, #16]
}
 8005386:	4618      	mov	r0, r3
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000
 8005398:	00f42400 	.word	0x00f42400
 800539c:	016e3600 	.word	0x016e3600

080053a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a4:	4b03      	ldr	r3, [pc, #12]	@ (80053b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053a6:	681b      	ldr	r3, [r3, #0]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000000 	.word	0x20000000

080053b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053bc:	f7ff fff0 	bl	80053a0 <HAL_RCC_GetHCLKFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4904      	ldr	r1, [pc, #16]	@ (80053e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800adc4 	.word	0x0800adc4

080053e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053e8:	f7ff ffda 	bl	80053a0 <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	0adb      	lsrs	r3, r3, #11
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4904      	ldr	r1, [pc, #16]	@ (800540c <HAL_RCC_GetPCLK2Freq+0x28>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005404:	4618      	mov	r0, r3
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40021000 	.word	0x40021000
 800540c:	0800adc4 	.word	0x0800adc4

08005410 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	220f      	movs	r2, #15
 800541e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005420:	4b12      	ldr	r3, [pc, #72]	@ (800546c <HAL_RCC_GetClockConfig+0x5c>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 0203 	and.w	r2, r3, #3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800542c:	4b0f      	ldr	r3, [pc, #60]	@ (800546c <HAL_RCC_GetClockConfig+0x5c>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005438:	4b0c      	ldr	r3, [pc, #48]	@ (800546c <HAL_RCC_GetClockConfig+0x5c>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005444:	4b09      	ldr	r3, [pc, #36]	@ (800546c <HAL_RCC_GetClockConfig+0x5c>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	08db      	lsrs	r3, r3, #3
 800544a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005452:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <HAL_RCC_GetClockConfig+0x60>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 020f 	and.w	r2, r3, #15
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	601a      	str	r2, [r3, #0]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40021000 	.word	0x40021000
 8005470:	40022000 	.word	0x40022000

08005474 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800547a:	4b1e      	ldr	r3, [pc, #120]	@ (80054f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005484:	4b1b      	ldr	r3, [pc, #108]	@ (80054f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b03      	cmp	r3, #3
 8005496:	d10c      	bne.n	80054b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005498:	4a17      	ldr	r2, [pc, #92]	@ (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	4a14      	ldr	r2, [pc, #80]	@ (80054f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054a2:	68d2      	ldr	r2, [r2, #12]
 80054a4:	0a12      	lsrs	r2, r2, #8
 80054a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
 80054ae:	617b      	str	r3, [r7, #20]
    break;
 80054b0:	e00c      	b.n	80054cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054b2:	4a12      	ldr	r2, [pc, #72]	@ (80054fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ba:	4a0e      	ldr	r2, [pc, #56]	@ (80054f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054bc:	68d2      	ldr	r2, [r2, #12]
 80054be:	0a12      	lsrs	r2, r2, #8
 80054c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054c4:	fb02 f303 	mul.w	r3, r2, r3
 80054c8:	617b      	str	r3, [r7, #20]
    break;
 80054ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054cc:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	0e5b      	lsrs	r3, r3, #25
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	3301      	adds	r3, #1
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80054e6:	687b      	ldr	r3, [r7, #4]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	40021000 	.word	0x40021000
 80054f8:	016e3600 	.word	0x016e3600
 80054fc:	00f42400 	.word	0x00f42400

08005500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005508:	2300      	movs	r3, #0
 800550a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800550c:	2300      	movs	r3, #0
 800550e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8098 	beq.w	800564e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800551e:	2300      	movs	r3, #0
 8005520:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005522:	4b43      	ldr	r3, [pc, #268]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10d      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800552e:	4b40      	ldr	r3, [pc, #256]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005532:	4a3f      	ldr	r2, [pc, #252]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005538:	6593      	str	r3, [r2, #88]	@ 0x58
 800553a:	4b3d      	ldr	r3, [pc, #244]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800553c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005546:	2301      	movs	r3, #1
 8005548:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800554a:	4b3a      	ldr	r3, [pc, #232]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a39      	ldr	r2, [pc, #228]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005554:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005556:	f7fc fc7b 	bl	8001e50 <HAL_GetTick>
 800555a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800555c:	e009      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555e:	f7fc fc77 	bl	8001e50 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d902      	bls.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	74fb      	strb	r3, [r7, #19]
        break;
 8005570:	e005      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005572:	4b30      	ldr	r3, [pc, #192]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0ef      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d159      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005584:	4b2a      	ldr	r3, [pc, #168]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01e      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	429a      	cmp	r2, r3
 800559e:	d019      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055a0:	4b23      	ldr	r3, [pc, #140]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ac:	4b20      	ldr	r3, [pc, #128]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055cc:	4a18      	ldr	r2, [pc, #96]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d016      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055de:	f7fc fc37 	bl	8001e50 <HAL_GetTick>
 80055e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e4:	e00b      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e6:	f7fc fc33 	bl	8001e50 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d902      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	74fb      	strb	r3, [r7, #19]
            break;
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0ec      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10b      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005612:	4b07      	ldr	r3, [pc, #28]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005618:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005620:	4903      	ldr	r1, [pc, #12]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005628:	e008      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800562a:	7cfb      	ldrb	r3, [r7, #19]
 800562c:	74bb      	strb	r3, [r7, #18]
 800562e:	e005      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005630:	40021000 	.word	0x40021000
 8005634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800563c:	7c7b      	ldrb	r3, [r7, #17]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d105      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005642:	4ba7      	ldr	r3, [pc, #668]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005646:	4aa6      	ldr	r2, [pc, #664]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005648:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800564c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800565a:	4ba1      	ldr	r3, [pc, #644]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005660:	f023 0203 	bic.w	r2, r3, #3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	499d      	ldr	r1, [pc, #628]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800567c:	4b98      	ldr	r3, [pc, #608]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005682:	f023 020c 	bic.w	r2, r3, #12
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	4995      	ldr	r1, [pc, #596]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800569e:	4b90      	ldr	r3, [pc, #576]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	498c      	ldr	r1, [pc, #560]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056c0:	4b87      	ldr	r3, [pc, #540]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	4984      	ldr	r1, [pc, #528]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056e2:	4b7f      	ldr	r3, [pc, #508]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	497b      	ldr	r1, [pc, #492]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005704:	4b76      	ldr	r3, [pc, #472]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	4973      	ldr	r1, [pc, #460]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005726:	4b6e      	ldr	r3, [pc, #440]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	496a      	ldr	r1, [pc, #424]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005748:	4b65      	ldr	r3, [pc, #404]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	4962      	ldr	r1, [pc, #392]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800576a:	4b5d      	ldr	r3, [pc, #372]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005770:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	4959      	ldr	r1, [pc, #356]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800578c:	4b54      	ldr	r3, [pc, #336]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005792:	f023 0203 	bic.w	r2, r3, #3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579a:	4951      	ldr	r1, [pc, #324]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ae:	4b4c      	ldr	r3, [pc, #304]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057bc:	4948      	ldr	r1, [pc, #288]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d015      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057d0:	4b43      	ldr	r3, [pc, #268]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057de:	4940      	ldr	r1, [pc, #256]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057ee:	d105      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f0:	4b3b      	ldr	r3, [pc, #236]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a3a      	ldr	r2, [pc, #232]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057fa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005804:	2b00      	cmp	r3, #0
 8005806:	d015      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005808:	4b35      	ldr	r3, [pc, #212]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005816:	4932      	ldr	r1, [pc, #200]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005822:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005826:	d105      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005828:	4b2d      	ldr	r3, [pc, #180]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	4a2c      	ldr	r2, [pc, #176]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005832:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d015      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005840:	4b27      	ldr	r3, [pc, #156]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005846:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584e:	4924      	ldr	r1, [pc, #144]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800585e:	d105      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005860:	4b1f      	ldr	r3, [pc, #124]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4a1e      	ldr	r2, [pc, #120]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800586a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d015      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005878:	4b19      	ldr	r3, [pc, #100]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005886:	4916      	ldr	r1, [pc, #88]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005896:	d105      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005898:	4b11      	ldr	r3, [pc, #68]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4a10      	ldr	r2, [pc, #64]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d019      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058b0:	4b0b      	ldr	r3, [pc, #44]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	4908      	ldr	r1, [pc, #32]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058ce:	d109      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d0:	4b03      	ldr	r3, [pc, #12]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	4a02      	ldr	r2, [pc, #8]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058da:	60d3      	str	r3, [r2, #12]
 80058dc:	e002      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d015      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058f0:	4b29      	ldr	r3, [pc, #164]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fe:	4926      	ldr	r1, [pc, #152]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800590e:	d105      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005910:	4b21      	ldr	r3, [pc, #132]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4a20      	ldr	r2, [pc, #128]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800591a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d015      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005928:	4b1b      	ldr	r3, [pc, #108]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800592a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005936:	4918      	ldr	r1, [pc, #96]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005946:	d105      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005948:	4b13      	ldr	r3, [pc, #76]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800594e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005952:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d015      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005960:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005962:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005966:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596e:	490a      	ldr	r1, [pc, #40]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800597a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800597e:	d105      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005980:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a04      	ldr	r2, [pc, #16]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800598a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800598c:	7cbb      	ldrb	r3, [r7, #18]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40021000 	.word	0x40021000

0800599c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e049      	b.n	8005a42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f841 	bl	8005a4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f000 fd4a 	bl	8006474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d001      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e054      	b.n	8005b22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a26      	ldr	r2, [pc, #152]	@ (8005b30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d022      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a22      	ldr	r2, [pc, #136]	@ (8005b34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a21      	ldr	r2, [pc, #132]	@ (8005b38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1f      	ldr	r2, [pc, #124]	@ (8005b3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b40 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b44 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x80>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1b      	ldr	r2, [pc, #108]	@ (8005b48 <HAL_TIM_Base_Start_IT+0xe8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d115      	bne.n	8005b0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	4b19      	ldr	r3, [pc, #100]	@ (8005b4c <HAL_TIM_Base_Start_IT+0xec>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b06      	cmp	r3, #6
 8005af0:	d015      	beq.n	8005b1e <HAL_TIM_Base_Start_IT+0xbe>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af8:	d011      	beq.n	8005b1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0a:	e008      	b.n	8005b1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e000      	b.n	8005b20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40013400 	.word	0x40013400
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40015000 	.word	0x40015000
 8005b4c:	00010007 	.word	0x00010007

08005b50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e049      	b.n	8005bf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb fbfa 	bl	8001370 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f000 fc70 	bl	8006474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d109      	bne.n	8005c24 <HAL_TIM_PWM_Start+0x24>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	bf14      	ite	ne
 8005c1c:	2301      	movne	r3, #1
 8005c1e:	2300      	moveq	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	e03c      	b.n	8005c9e <HAL_TIM_PWM_Start+0x9e>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d109      	bne.n	8005c3e <HAL_TIM_PWM_Start+0x3e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	bf14      	ite	ne
 8005c36:	2301      	movne	r3, #1
 8005c38:	2300      	moveq	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	e02f      	b.n	8005c9e <HAL_TIM_PWM_Start+0x9e>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d109      	bne.n	8005c58 <HAL_TIM_PWM_Start+0x58>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	e022      	b.n	8005c9e <HAL_TIM_PWM_Start+0x9e>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b0c      	cmp	r3, #12
 8005c5c:	d109      	bne.n	8005c72 <HAL_TIM_PWM_Start+0x72>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	bf14      	ite	ne
 8005c6a:	2301      	movne	r3, #1
 8005c6c:	2300      	moveq	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	e015      	b.n	8005c9e <HAL_TIM_PWM_Start+0x9e>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d109      	bne.n	8005c8c <HAL_TIM_PWM_Start+0x8c>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	bf14      	ite	ne
 8005c84:	2301      	movne	r3, #1
 8005c86:	2300      	moveq	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	e008      	b.n	8005c9e <HAL_TIM_PWM_Start+0x9e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	bf14      	ite	ne
 8005c98:	2301      	movne	r3, #1
 8005c9a:	2300      	moveq	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0a6      	b.n	8005df4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0xb6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cb4:	e023      	b.n	8005cfe <HAL_TIM_PWM_Start+0xfe>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0xc6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc4:	e01b      	b.n	8005cfe <HAL_TIM_PWM_Start+0xfe>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_PWM_Start+0xd6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cd4:	e013      	b.n	8005cfe <HAL_TIM_PWM_Start+0xfe>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b0c      	cmp	r3, #12
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_PWM_Start+0xe6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ce4:	e00b      	b.n	8005cfe <HAL_TIM_PWM_Start+0xfe>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0xf6>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cf4:	e003      	b.n	8005cfe <HAL_TIM_PWM_Start+0xfe>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2201      	movs	r2, #1
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 f806 	bl	8006d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a3a      	ldr	r2, [pc, #232]	@ (8005dfc <HAL_TIM_PWM_Start+0x1fc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d018      	beq.n	8005d48 <HAL_TIM_PWM_Start+0x148>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a39      	ldr	r2, [pc, #228]	@ (8005e00 <HAL_TIM_PWM_Start+0x200>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d013      	beq.n	8005d48 <HAL_TIM_PWM_Start+0x148>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a37      	ldr	r2, [pc, #220]	@ (8005e04 <HAL_TIM_PWM_Start+0x204>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00e      	beq.n	8005d48 <HAL_TIM_PWM_Start+0x148>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a36      	ldr	r2, [pc, #216]	@ (8005e08 <HAL_TIM_PWM_Start+0x208>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d009      	beq.n	8005d48 <HAL_TIM_PWM_Start+0x148>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a34      	ldr	r2, [pc, #208]	@ (8005e0c <HAL_TIM_PWM_Start+0x20c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIM_PWM_Start+0x148>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a33      	ldr	r2, [pc, #204]	@ (8005e10 <HAL_TIM_PWM_Start+0x210>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d101      	bne.n	8005d4c <HAL_TIM_PWM_Start+0x14c>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_TIM_PWM_Start+0x14e>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a25      	ldr	r2, [pc, #148]	@ (8005dfc <HAL_TIM_PWM_Start+0x1fc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x1b2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d74:	d01d      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x1b2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a26      	ldr	r2, [pc, #152]	@ (8005e14 <HAL_TIM_PWM_Start+0x214>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x1b2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a24      	ldr	r2, [pc, #144]	@ (8005e18 <HAL_TIM_PWM_Start+0x218>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x1b2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a23      	ldr	r2, [pc, #140]	@ (8005e1c <HAL_TIM_PWM_Start+0x21c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x1b2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a19      	ldr	r2, [pc, #100]	@ (8005e00 <HAL_TIM_PWM_Start+0x200>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x1b2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a18      	ldr	r2, [pc, #96]	@ (8005e04 <HAL_TIM_PWM_Start+0x204>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x1b2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a18      	ldr	r2, [pc, #96]	@ (8005e10 <HAL_TIM_PWM_Start+0x210>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d115      	bne.n	8005dde <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	4b19      	ldr	r3, [pc, #100]	@ (8005e20 <HAL_TIM_PWM_Start+0x220>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b06      	cmp	r3, #6
 8005dc2:	d015      	beq.n	8005df0 <HAL_TIM_PWM_Start+0x1f0>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dca:	d011      	beq.n	8005df0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ddc:	e008      	b.n	8005df0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e000      	b.n	8005df2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40013400 	.word	0x40013400
 8005e04:	40014000 	.word	0x40014000
 8005e08:	40014400 	.word	0x40014400
 8005e0c:	40014800 	.word	0x40014800
 8005e10:	40015000 	.word	0x40015000
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	00010007 	.word	0x00010007

08005e24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 ff6e 	bl	8006d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a40      	ldr	r2, [pc, #256]	@ (8005f44 <HAL_TIM_PWM_Stop+0x120>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d018      	beq.n	8005e78 <HAL_TIM_PWM_Stop+0x54>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f48 <HAL_TIM_PWM_Stop+0x124>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <HAL_TIM_PWM_Stop+0x54>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a3d      	ldr	r2, [pc, #244]	@ (8005f4c <HAL_TIM_PWM_Stop+0x128>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00e      	beq.n	8005e78 <HAL_TIM_PWM_Stop+0x54>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a3c      	ldr	r2, [pc, #240]	@ (8005f50 <HAL_TIM_PWM_Stop+0x12c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d009      	beq.n	8005e78 <HAL_TIM_PWM_Stop+0x54>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a3a      	ldr	r2, [pc, #232]	@ (8005f54 <HAL_TIM_PWM_Stop+0x130>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d004      	beq.n	8005e78 <HAL_TIM_PWM_Stop+0x54>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a39      	ldr	r2, [pc, #228]	@ (8005f58 <HAL_TIM_PWM_Stop+0x134>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d101      	bne.n	8005e7c <HAL_TIM_PWM_Stop+0x58>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <HAL_TIM_PWM_Stop+0x5a>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d017      	beq.n	8005eb2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6a1a      	ldr	r2, [r3, #32]
 8005e88:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10f      	bne.n	8005eb2 <HAL_TIM_PWM_Stop+0x8e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6a1a      	ldr	r2, [r3, #32]
 8005e98:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d107      	bne.n	8005eb2 <HAL_TIM_PWM_Stop+0x8e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a1a      	ldr	r2, [r3, #32]
 8005eb8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10f      	bne.n	8005ee2 <HAL_TIM_PWM_Stop+0xbe>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a1a      	ldr	r2, [r3, #32]
 8005ec8:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d107      	bne.n	8005ee2 <HAL_TIM_PWM_Stop+0xbe>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_PWM_Stop+0xce>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ef0:	e023      	b.n	8005f3a <HAL_TIM_PWM_Stop+0x116>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIM_PWM_Stop+0xde>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f00:	e01b      	b.n	8005f3a <HAL_TIM_PWM_Stop+0x116>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d104      	bne.n	8005f12 <HAL_TIM_PWM_Stop+0xee>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f10:	e013      	b.n	8005f3a <HAL_TIM_PWM_Stop+0x116>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b0c      	cmp	r3, #12
 8005f16:	d104      	bne.n	8005f22 <HAL_TIM_PWM_Stop+0xfe>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f20:	e00b      	b.n	8005f3a <HAL_TIM_PWM_Stop+0x116>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_PWM_Stop+0x10e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f30:	e003      	b.n	8005f3a <HAL_TIM_PWM_Stop+0x116>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40012c00 	.word	0x40012c00
 8005f48:	40013400 	.word	0x40013400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800
 8005f58:	40015000 	.word	0x40015000

08005f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d020      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01b      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0202 	mvn.w	r2, #2
 8005f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fa46 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa38 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa49 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d020      	beq.n	800600c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01b      	beq.n	800600c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0204 	mvn.w	r2, #4
 8005fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa20 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8005ff8:	e005      	b.n	8006006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa12 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fa23 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d020      	beq.n	8006058 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01b      	beq.n	8006058 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0208 	mvn.w	r2, #8
 8006028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2204      	movs	r2, #4
 800602e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f9fa 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8006044:	e005      	b.n	8006052 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f9ec 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f9fd 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	d020      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01b      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0210 	mvn.w	r2, #16
 8006074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2208      	movs	r2, #8
 800607a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9d4 	bl	8006438 <HAL_TIM_IC_CaptureCallback>
 8006090:	e005      	b.n	800609e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9c6 	bl	8006424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f9d7 	bl	800644c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0201 	mvn.w	r2, #1
 80060c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fa fe50 	bl	8000d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d104      	bne.n	80060dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00c      	beq.n	80060f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80060ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 f94c 	bl	800738e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00c      	beq.n	800611a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 f944 	bl	80073a2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00c      	beq.n	800613e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f991 	bl	8006460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00c      	beq.n	8006162 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f06f 0220 	mvn.w	r2, #32
 800615a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 f90c 	bl	800737a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 f918 	bl	80073b6 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00c      	beq.n	80061aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80061a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 f910 	bl	80073ca <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 f908 	bl	80073de <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00c      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80061ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 f900 	bl	80073f2 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006216:	2302      	movs	r3, #2
 8006218:	e0ff      	b.n	800641a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b14      	cmp	r3, #20
 8006226:	f200 80f0 	bhi.w	800640a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800622a:	a201      	add	r2, pc, #4	@ (adr r2, 8006230 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	08006285 	.word	0x08006285
 8006234:	0800640b 	.word	0x0800640b
 8006238:	0800640b 	.word	0x0800640b
 800623c:	0800640b 	.word	0x0800640b
 8006240:	080062c5 	.word	0x080062c5
 8006244:	0800640b 	.word	0x0800640b
 8006248:	0800640b 	.word	0x0800640b
 800624c:	0800640b 	.word	0x0800640b
 8006250:	08006307 	.word	0x08006307
 8006254:	0800640b 	.word	0x0800640b
 8006258:	0800640b 	.word	0x0800640b
 800625c:	0800640b 	.word	0x0800640b
 8006260:	08006347 	.word	0x08006347
 8006264:	0800640b 	.word	0x0800640b
 8006268:	0800640b 	.word	0x0800640b
 800626c:	0800640b 	.word	0x0800640b
 8006270:	08006389 	.word	0x08006389
 8006274:	0800640b 	.word	0x0800640b
 8006278:	0800640b 	.word	0x0800640b
 800627c:	0800640b 	.word	0x0800640b
 8006280:	080063c9 	.word	0x080063c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f9a6 	bl	80065dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0208 	orr.w	r2, r2, #8
 800629e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0204 	bic.w	r2, r2, #4
 80062ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6999      	ldr	r1, [r3, #24]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	691a      	ldr	r2, [r3, #16]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	619a      	str	r2, [r3, #24]
      break;
 80062c2:	e0a5      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fa20 	bl	8006710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6999      	ldr	r1, [r3, #24]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	021a      	lsls	r2, r3, #8
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	619a      	str	r2, [r3, #24]
      break;
 8006304:	e084      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fa93 	bl	8006838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0208 	orr.w	r2, r2, #8
 8006320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0204 	bic.w	r2, r2, #4
 8006330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69d9      	ldr	r1, [r3, #28]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	61da      	str	r2, [r3, #28]
      break;
 8006344:	e064      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	4618      	mov	r0, r3
 800634e:	f000 fb05 	bl	800695c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69d9      	ldr	r1, [r3, #28]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	021a      	lsls	r2, r3, #8
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	61da      	str	r2, [r3, #28]
      break;
 8006386:	e043      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fb78 	bl	8006a84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0208 	orr.w	r2, r2, #8
 80063a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0204 	bic.w	r2, r2, #4
 80063b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80063c6:	e023      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fbc2 	bl	8006b58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	021a      	lsls	r2, r3, #8
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006408:	e002      	b.n	8006410 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	75fb      	strb	r3, [r7, #23]
      break;
 800640e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006418:	7dfb      	ldrb	r3, [r7, #23]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop

08006424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a4c      	ldr	r2, [pc, #304]	@ (80065b8 <TIM_Base_SetConfig+0x144>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d017      	beq.n	80064bc <TIM_Base_SetConfig+0x48>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006492:	d013      	beq.n	80064bc <TIM_Base_SetConfig+0x48>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a49      	ldr	r2, [pc, #292]	@ (80065bc <TIM_Base_SetConfig+0x148>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00f      	beq.n	80064bc <TIM_Base_SetConfig+0x48>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a48      	ldr	r2, [pc, #288]	@ (80065c0 <TIM_Base_SetConfig+0x14c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_Base_SetConfig+0x48>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a47      	ldr	r2, [pc, #284]	@ (80065c4 <TIM_Base_SetConfig+0x150>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_Base_SetConfig+0x48>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a46      	ldr	r2, [pc, #280]	@ (80065c8 <TIM_Base_SetConfig+0x154>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_Base_SetConfig+0x48>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a45      	ldr	r2, [pc, #276]	@ (80065cc <TIM_Base_SetConfig+0x158>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d108      	bne.n	80064ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a39      	ldr	r2, [pc, #228]	@ (80065b8 <TIM_Base_SetConfig+0x144>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d023      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064dc:	d01f      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a36      	ldr	r2, [pc, #216]	@ (80065bc <TIM_Base_SetConfig+0x148>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01b      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a35      	ldr	r2, [pc, #212]	@ (80065c0 <TIM_Base_SetConfig+0x14c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d017      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a34      	ldr	r2, [pc, #208]	@ (80065c4 <TIM_Base_SetConfig+0x150>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a33      	ldr	r2, [pc, #204]	@ (80065c8 <TIM_Base_SetConfig+0x154>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00f      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a33      	ldr	r2, [pc, #204]	@ (80065d0 <TIM_Base_SetConfig+0x15c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00b      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a32      	ldr	r2, [pc, #200]	@ (80065d4 <TIM_Base_SetConfig+0x160>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d007      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a31      	ldr	r2, [pc, #196]	@ (80065d8 <TIM_Base_SetConfig+0x164>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2c      	ldr	r2, [pc, #176]	@ (80065cc <TIM_Base_SetConfig+0x158>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d108      	bne.n	8006530 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a18      	ldr	r2, [pc, #96]	@ (80065b8 <TIM_Base_SetConfig+0x144>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <TIM_Base_SetConfig+0x110>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a1a      	ldr	r2, [pc, #104]	@ (80065c8 <TIM_Base_SetConfig+0x154>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00f      	beq.n	8006584 <TIM_Base_SetConfig+0x110>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a1a      	ldr	r2, [pc, #104]	@ (80065d0 <TIM_Base_SetConfig+0x15c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00b      	beq.n	8006584 <TIM_Base_SetConfig+0x110>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a19      	ldr	r2, [pc, #100]	@ (80065d4 <TIM_Base_SetConfig+0x160>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d007      	beq.n	8006584 <TIM_Base_SetConfig+0x110>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a18      	ldr	r2, [pc, #96]	@ (80065d8 <TIM_Base_SetConfig+0x164>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d003      	beq.n	8006584 <TIM_Base_SetConfig+0x110>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a13      	ldr	r2, [pc, #76]	@ (80065cc <TIM_Base_SetConfig+0x158>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d103      	bne.n	800658c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b01      	cmp	r3, #1
 800659c:	d105      	bne.n	80065aa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f023 0201 	bic.w	r2, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	611a      	str	r2, [r3, #16]
  }
}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800
 80065c4:	40000c00 	.word	0x40000c00
 80065c8:	40013400 	.word	0x40013400
 80065cc:	40015000 	.word	0x40015000
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40014400 	.word	0x40014400
 80065d8:	40014800 	.word	0x40014800

080065dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f023 0201 	bic.w	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f023 0302 	bic.w	r3, r3, #2
 8006628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a30      	ldr	r2, [pc, #192]	@ (80066f8 <TIM_OC1_SetConfig+0x11c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <TIM_OC1_SetConfig+0x88>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a2f      	ldr	r2, [pc, #188]	@ (80066fc <TIM_OC1_SetConfig+0x120>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00f      	beq.n	8006664 <TIM_OC1_SetConfig+0x88>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a2e      	ldr	r2, [pc, #184]	@ (8006700 <TIM_OC1_SetConfig+0x124>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00b      	beq.n	8006664 <TIM_OC1_SetConfig+0x88>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a2d      	ldr	r2, [pc, #180]	@ (8006704 <TIM_OC1_SetConfig+0x128>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_OC1_SetConfig+0x88>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a2c      	ldr	r2, [pc, #176]	@ (8006708 <TIM_OC1_SetConfig+0x12c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_OC1_SetConfig+0x88>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a2b      	ldr	r2, [pc, #172]	@ (800670c <TIM_OC1_SetConfig+0x130>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d10c      	bne.n	800667e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f023 0308 	bic.w	r3, r3, #8
 800666a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 0304 	bic.w	r3, r3, #4
 800667c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a1d      	ldr	r2, [pc, #116]	@ (80066f8 <TIM_OC1_SetConfig+0x11c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <TIM_OC1_SetConfig+0xd2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a1c      	ldr	r2, [pc, #112]	@ (80066fc <TIM_OC1_SetConfig+0x120>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00f      	beq.n	80066ae <TIM_OC1_SetConfig+0xd2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1b      	ldr	r2, [pc, #108]	@ (8006700 <TIM_OC1_SetConfig+0x124>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00b      	beq.n	80066ae <TIM_OC1_SetConfig+0xd2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a1a      	ldr	r2, [pc, #104]	@ (8006704 <TIM_OC1_SetConfig+0x128>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d007      	beq.n	80066ae <TIM_OC1_SetConfig+0xd2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a19      	ldr	r2, [pc, #100]	@ (8006708 <TIM_OC1_SetConfig+0x12c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d003      	beq.n	80066ae <TIM_OC1_SetConfig+0xd2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a18      	ldr	r2, [pc, #96]	@ (800670c <TIM_OC1_SetConfig+0x130>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d111      	bne.n	80066d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	621a      	str	r2, [r3, #32]
}
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	40012c00 	.word	0x40012c00
 80066fc:	40013400 	.word	0x40013400
 8006700:	40014000 	.word	0x40014000
 8006704:	40014400 	.word	0x40014400
 8006708:	40014800 	.word	0x40014800
 800670c:	40015000 	.word	0x40015000

08006710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f023 0210 	bic.w	r2, r3, #16
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800674a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0320 	bic.w	r3, r3, #32
 800675e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a2c      	ldr	r2, [pc, #176]	@ (8006820 <TIM_OC2_SetConfig+0x110>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d007      	beq.n	8006784 <TIM_OC2_SetConfig+0x74>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a2b      	ldr	r2, [pc, #172]	@ (8006824 <TIM_OC2_SetConfig+0x114>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_OC2_SetConfig+0x74>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a2a      	ldr	r2, [pc, #168]	@ (8006828 <TIM_OC2_SetConfig+0x118>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d10d      	bne.n	80067a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800678a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800679e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006820 <TIM_OC2_SetConfig+0x110>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d013      	beq.n	80067d0 <TIM_OC2_SetConfig+0xc0>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006824 <TIM_OC2_SetConfig+0x114>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00f      	beq.n	80067d0 <TIM_OC2_SetConfig+0xc0>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a1e      	ldr	r2, [pc, #120]	@ (800682c <TIM_OC2_SetConfig+0x11c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00b      	beq.n	80067d0 <TIM_OC2_SetConfig+0xc0>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006830 <TIM_OC2_SetConfig+0x120>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d007      	beq.n	80067d0 <TIM_OC2_SetConfig+0xc0>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006834 <TIM_OC2_SetConfig+0x124>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_OC2_SetConfig+0xc0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a17      	ldr	r2, [pc, #92]	@ (8006828 <TIM_OC2_SetConfig+0x118>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d113      	bne.n	80067f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40013400 	.word	0x40013400
 8006828:	40015000 	.word	0x40015000
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800

08006838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a2b      	ldr	r2, [pc, #172]	@ (8006944 <TIM_OC3_SetConfig+0x10c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d007      	beq.n	80068aa <TIM_OC3_SetConfig+0x72>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2a      	ldr	r2, [pc, #168]	@ (8006948 <TIM_OC3_SetConfig+0x110>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d003      	beq.n	80068aa <TIM_OC3_SetConfig+0x72>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a29      	ldr	r2, [pc, #164]	@ (800694c <TIM_OC3_SetConfig+0x114>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d10d      	bne.n	80068c6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006944 <TIM_OC3_SetConfig+0x10c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <TIM_OC3_SetConfig+0xbe>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006948 <TIM_OC3_SetConfig+0x110>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00f      	beq.n	80068f6 <TIM_OC3_SetConfig+0xbe>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006950 <TIM_OC3_SetConfig+0x118>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00b      	beq.n	80068f6 <TIM_OC3_SetConfig+0xbe>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006954 <TIM_OC3_SetConfig+0x11c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d007      	beq.n	80068f6 <TIM_OC3_SetConfig+0xbe>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <TIM_OC3_SetConfig+0x120>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d003      	beq.n	80068f6 <TIM_OC3_SetConfig+0xbe>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a16      	ldr	r2, [pc, #88]	@ (800694c <TIM_OC3_SetConfig+0x114>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d113      	bne.n	800691e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40013400 	.word	0x40013400
 800694c:	40015000 	.word	0x40015000
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400
 8006958:	40014800 	.word	0x40014800

0800695c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a2c      	ldr	r2, [pc, #176]	@ (8006a6c <TIM_OC4_SetConfig+0x110>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d007      	beq.n	80069d0 <TIM_OC4_SetConfig+0x74>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a70 <TIM_OC4_SetConfig+0x114>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <TIM_OC4_SetConfig+0x74>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a2a      	ldr	r2, [pc, #168]	@ (8006a74 <TIM_OC4_SetConfig+0x118>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d10d      	bne.n	80069ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	031b      	lsls	r3, r3, #12
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a1f      	ldr	r2, [pc, #124]	@ (8006a6c <TIM_OC4_SetConfig+0x110>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <TIM_OC4_SetConfig+0xc0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006a70 <TIM_OC4_SetConfig+0x114>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00f      	beq.n	8006a1c <TIM_OC4_SetConfig+0xc0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006a78 <TIM_OC4_SetConfig+0x11c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <TIM_OC4_SetConfig+0xc0>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a1d      	ldr	r2, [pc, #116]	@ (8006a7c <TIM_OC4_SetConfig+0x120>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_OC4_SetConfig+0xc0>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006a80 <TIM_OC4_SetConfig+0x124>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_OC4_SetConfig+0xc0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a17      	ldr	r2, [pc, #92]	@ (8006a74 <TIM_OC4_SetConfig+0x118>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d113      	bne.n	8006a44 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a22:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a2a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	019b      	lsls	r3, r3, #6
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	019b      	lsls	r3, r3, #6
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40015000 	.word	0x40015000
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	40014800 	.word	0x40014800

08006a84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a19      	ldr	r2, [pc, #100]	@ (8006b40 <TIM_OC5_SetConfig+0xbc>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d013      	beq.n	8006b06 <TIM_OC5_SetConfig+0x82>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a18      	ldr	r2, [pc, #96]	@ (8006b44 <TIM_OC5_SetConfig+0xc0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00f      	beq.n	8006b06 <TIM_OC5_SetConfig+0x82>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a17      	ldr	r2, [pc, #92]	@ (8006b48 <TIM_OC5_SetConfig+0xc4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00b      	beq.n	8006b06 <TIM_OC5_SetConfig+0x82>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a16      	ldr	r2, [pc, #88]	@ (8006b4c <TIM_OC5_SetConfig+0xc8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <TIM_OC5_SetConfig+0x82>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a15      	ldr	r2, [pc, #84]	@ (8006b50 <TIM_OC5_SetConfig+0xcc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_OC5_SetConfig+0x82>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a14      	ldr	r2, [pc, #80]	@ (8006b54 <TIM_OC5_SetConfig+0xd0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d109      	bne.n	8006b1a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	621a      	str	r2, [r3, #32]
}
 8006b34:	bf00      	nop
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	40012c00 	.word	0x40012c00
 8006b44:	40013400 	.word	0x40013400
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	40014400 	.word	0x40014400
 8006b50:	40014800 	.word	0x40014800
 8006b54:	40015000 	.word	0x40015000

08006b58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	051b      	lsls	r3, r3, #20
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a1a      	ldr	r2, [pc, #104]	@ (8006c18 <TIM_OC6_SetConfig+0xc0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <TIM_OC6_SetConfig+0x84>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <TIM_OC6_SetConfig+0xc4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00f      	beq.n	8006bdc <TIM_OC6_SetConfig+0x84>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a18      	ldr	r2, [pc, #96]	@ (8006c20 <TIM_OC6_SetConfig+0xc8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00b      	beq.n	8006bdc <TIM_OC6_SetConfig+0x84>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a17      	ldr	r2, [pc, #92]	@ (8006c24 <TIM_OC6_SetConfig+0xcc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d007      	beq.n	8006bdc <TIM_OC6_SetConfig+0x84>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a16      	ldr	r2, [pc, #88]	@ (8006c28 <TIM_OC6_SetConfig+0xd0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_OC6_SetConfig+0x84>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a15      	ldr	r2, [pc, #84]	@ (8006c2c <TIM_OC6_SetConfig+0xd4>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d109      	bne.n	8006bf0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	621a      	str	r2, [r3, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40013400 	.word	0x40013400
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800
 8006c2c:	40015000 	.word	0x40015000

08006c30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	f023 0201 	bic.w	r2, r3, #1
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4a28      	ldr	r2, [pc, #160]	@ (8006cfc <TIM_TI1_SetConfig+0xcc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d01b      	beq.n	8006c96 <TIM_TI1_SetConfig+0x66>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c64:	d017      	beq.n	8006c96 <TIM_TI1_SetConfig+0x66>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a25      	ldr	r2, [pc, #148]	@ (8006d00 <TIM_TI1_SetConfig+0xd0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d013      	beq.n	8006c96 <TIM_TI1_SetConfig+0x66>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a24      	ldr	r2, [pc, #144]	@ (8006d04 <TIM_TI1_SetConfig+0xd4>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00f      	beq.n	8006c96 <TIM_TI1_SetConfig+0x66>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a23      	ldr	r2, [pc, #140]	@ (8006d08 <TIM_TI1_SetConfig+0xd8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00b      	beq.n	8006c96 <TIM_TI1_SetConfig+0x66>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	4a22      	ldr	r2, [pc, #136]	@ (8006d0c <TIM_TI1_SetConfig+0xdc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d007      	beq.n	8006c96 <TIM_TI1_SetConfig+0x66>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4a21      	ldr	r2, [pc, #132]	@ (8006d10 <TIM_TI1_SetConfig+0xe0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d003      	beq.n	8006c96 <TIM_TI1_SetConfig+0x66>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4a20      	ldr	r2, [pc, #128]	@ (8006d14 <TIM_TI1_SetConfig+0xe4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d101      	bne.n	8006c9a <TIM_TI1_SetConfig+0x6a>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <TIM_TI1_SetConfig+0x6c>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f023 0303 	bic.w	r3, r3, #3
 8006ca6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	e003      	b.n	8006cba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f043 0301 	orr.w	r3, r3, #1
 8006cb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f023 030a 	bic.w	r3, r3, #10
 8006cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f003 030a 	and.w	r3, r3, #10
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40012c00 	.word	0x40012c00
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40000800 	.word	0x40000800
 8006d08:	40000c00 	.word	0x40000c00
 8006d0c:	40013400 	.word	0x40013400
 8006d10:	40014000 	.word	0x40014000
 8006d14:	40015000 	.word	0x40015000

08006d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a1a      	ldr	r2, [r3, #32]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d50:	431a      	orrs	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b08a      	sub	sp, #40	@ 0x28
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e0a0      	b.n	8006eb8 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fa fb10 	bl	80013b0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f7ff fb66 	bl	8006474 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6819      	ldr	r1, [r3, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2203      	movs	r2, #3
 8006db6:	f7ff ff3b 	bl	8006c30 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 020c 	bic.w	r2, r2, #12
 8006dc8:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6999      	ldr	r1, [r3, #24]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006dea:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6812      	ldr	r2, [r2, #0]
 8006df6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dfe:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e0e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e1e:	f023 0307 	bic.w	r3, r3, #7
 8006e22:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0204 	orr.w	r2, r2, #4
 8006e32:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006e3c:	2370      	movs	r3, #112	@ 0x70
 8006e3e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006e40:	2300      	movs	r3, #0
 8006e42:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f107 020c 	add.w	r2, r7, #12
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff fc57 	bl	8006710 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e74:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006e84:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3728      	adds	r7, #40	@ 0x28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d109      	bne.n	8006ee4 <HAL_TIMEx_PWMN_Start+0x24>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	bf14      	ite	ne
 8006edc:	2301      	movne	r3, #1
 8006ede:	2300      	moveq	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	e022      	b.n	8006f2a <HAL_TIMEx_PWMN_Start+0x6a>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d109      	bne.n	8006efe <HAL_TIMEx_PWMN_Start+0x3e>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	bf14      	ite	ne
 8006ef6:	2301      	movne	r3, #1
 8006ef8:	2300      	moveq	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	e015      	b.n	8006f2a <HAL_TIMEx_PWMN_Start+0x6a>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d109      	bne.n	8006f18 <HAL_TIMEx_PWMN_Start+0x58>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	bf14      	ite	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	2300      	moveq	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	e008      	b.n	8006f2a <HAL_TIMEx_PWMN_Start+0x6a>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	bf14      	ite	ne
 8006f24:	2301      	movne	r3, #1
 8006f26:	2300      	moveq	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e073      	b.n	800701a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d104      	bne.n	8006f42 <HAL_TIMEx_PWMN_Start+0x82>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f40:	e013      	b.n	8006f6a <HAL_TIMEx_PWMN_Start+0xaa>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d104      	bne.n	8006f52 <HAL_TIMEx_PWMN_Start+0x92>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f50:	e00b      	b.n	8006f6a <HAL_TIMEx_PWMN_Start+0xaa>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d104      	bne.n	8006f62 <HAL_TIMEx_PWMN_Start+0xa2>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f60:	e003      	b.n	8006f6a <HAL_TIMEx_PWMN_Start+0xaa>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2202      	movs	r2, #2
 8006f66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fa47 	bl	8007406 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a25      	ldr	r2, [pc, #148]	@ (8007024 <HAL_TIMEx_PWMN_Start+0x164>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d022      	beq.n	8006fd8 <HAL_TIMEx_PWMN_Start+0x118>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9a:	d01d      	beq.n	8006fd8 <HAL_TIMEx_PWMN_Start+0x118>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a21      	ldr	r2, [pc, #132]	@ (8007028 <HAL_TIMEx_PWMN_Start+0x168>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d018      	beq.n	8006fd8 <HAL_TIMEx_PWMN_Start+0x118>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a20      	ldr	r2, [pc, #128]	@ (800702c <HAL_TIMEx_PWMN_Start+0x16c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d013      	beq.n	8006fd8 <HAL_TIMEx_PWMN_Start+0x118>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8007030 <HAL_TIMEx_PWMN_Start+0x170>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00e      	beq.n	8006fd8 <HAL_TIMEx_PWMN_Start+0x118>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8007034 <HAL_TIMEx_PWMN_Start+0x174>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d009      	beq.n	8006fd8 <HAL_TIMEx_PWMN_Start+0x118>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8007038 <HAL_TIMEx_PWMN_Start+0x178>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d004      	beq.n	8006fd8 <HAL_TIMEx_PWMN_Start+0x118>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800703c <HAL_TIMEx_PWMN_Start+0x17c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d115      	bne.n	8007004 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	4b18      	ldr	r3, [pc, #96]	@ (8007040 <HAL_TIMEx_PWMN_Start+0x180>)
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b06      	cmp	r3, #6
 8006fe8:	d015      	beq.n	8007016 <HAL_TIMEx_PWMN_Start+0x156>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ff0:	d011      	beq.n	8007016 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0201 	orr.w	r2, r2, #1
 8007000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007002:	e008      	b.n	8007016 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0201 	orr.w	r2, r2, #1
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	e000      	b.n	8007018 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007016:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40012c00 	.word	0x40012c00
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800
 8007030:	40000c00 	.word	0x40000c00
 8007034:	40013400 	.word	0x40013400
 8007038:	40014000 	.word	0x40014000
 800703c:	40015000 	.word	0x40015000
 8007040:	00010007 	.word	0x00010007

08007044 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2200      	movs	r2, #0
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f9d5 	bl	8007406 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6a1a      	ldr	r2, [r3, #32]
 8007062:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007066:	4013      	ands	r3, r2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10f      	bne.n	800708c <HAL_TIMEx_PWMN_Stop+0x48>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6a1a      	ldr	r2, [r3, #32]
 8007072:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007076:	4013      	ands	r3, r2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d107      	bne.n	800708c <HAL_TIMEx_PWMN_Stop+0x48>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800708a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6a1a      	ldr	r2, [r3, #32]
 8007092:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007096:	4013      	ands	r3, r2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10f      	bne.n	80070bc <HAL_TIMEx_PWMN_Stop+0x78>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6a1a      	ldr	r2, [r3, #32]
 80070a2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80070a6:	4013      	ands	r3, r2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d107      	bne.n	80070bc <HAL_TIMEx_PWMN_Stop+0x78>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0201 	bic.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d104      	bne.n	80070cc <HAL_TIMEx_PWMN_Stop+0x88>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070ca:	e013      	b.n	80070f4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d104      	bne.n	80070dc <HAL_TIMEx_PWMN_Stop+0x98>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070da:	e00b      	b.n	80070f4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b08      	cmp	r3, #8
 80070e0:	d104      	bne.n	80070ec <HAL_TIMEx_PWMN_Stop+0xa8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070ea:	e003      	b.n	80070f4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007114:	2302      	movs	r3, #2
 8007116:	e074      	b.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a34      	ldr	r2, [pc, #208]	@ (8007210 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d009      	beq.n	8007156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a33      	ldr	r2, [pc, #204]	@ (8007214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d004      	beq.n	8007156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a31      	ldr	r2, [pc, #196]	@ (8007218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d108      	bne.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800715c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800716e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a21      	ldr	r2, [pc, #132]	@ (8007210 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d022      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007198:	d01d      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1f      	ldr	r2, [pc, #124]	@ (800721c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d018      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007220 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007224 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00e      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a15      	ldr	r2, [pc, #84]	@ (8007214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a11      	ldr	r2, [pc, #68]	@ (8007218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d10c      	bne.n	80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40012c00 	.word	0x40012c00
 8007214:	40013400 	.word	0x40013400
 8007218:	40015000 	.word	0x40015000
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40014000 	.word	0x40014000

0800722c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007244:	2302      	movs	r3, #2
 8007246:	e078      	b.n	800733a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007348 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d009      	beq.n	80072ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a1b      	ldr	r2, [pc, #108]	@ (800734c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d004      	beq.n	80072ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a19      	ldr	r2, [pc, #100]	@ (8007350 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d11c      	bne.n	8007328 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f8:	051b      	lsls	r3, r3, #20
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007316:	4313      	orrs	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40012c00 	.word	0x40012c00
 800734c:	40013400 	.word	0x40013400
 8007350:	40015000 	.word	0x40015000

08007354 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800736a:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007406:	b480      	push	{r7}
 8007408:	b087      	sub	sp, #28
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	2204      	movs	r2, #4
 800741a:	fa02 f303 	lsl.w	r3, r2, r3
 800741e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1a      	ldr	r2, [r3, #32]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	43db      	mvns	r3, r3
 8007428:	401a      	ands	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a1a      	ldr	r2, [r3, #32]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	fa01 f303 	lsl.w	r3, r1, r3
 800743e:	431a      	orrs	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	621a      	str	r2, [r3, #32]
}
 8007444:	bf00      	nop
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e042      	b.n	80074e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007468:	2b00      	cmp	r3, #0
 800746a:	d106      	bne.n	800747a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7fa f905 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2224      	movs	r2, #36	@ 0x24
 800747e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 ff60 	bl	8008360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fc61 	bl	8007d68 <UART_SetConfig>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e01b      	b.n	80074e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 ffdf 	bl	80084a4 <UART_CheckIdleState>
 80074e6:	4603      	mov	r3, r0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	@ 0x28
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	4613      	mov	r3, r2
 80074fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007506:	2b20      	cmp	r3, #32
 8007508:	d17b      	bne.n	8007602 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <HAL_UART_Transmit+0x26>
 8007510:	88fb      	ldrh	r3, [r7, #6]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e074      	b.n	8007604 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2221      	movs	r2, #33	@ 0x21
 8007526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800752a:	f7fa fc91 	bl	8001e50 <HAL_GetTick>
 800752e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007548:	d108      	bne.n	800755c <HAL_UART_Transmit+0x6c>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d104      	bne.n	800755c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007552:	2300      	movs	r3, #0
 8007554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	e003      	b.n	8007564 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007560:	2300      	movs	r3, #0
 8007562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007564:	e030      	b.n	80075c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2200      	movs	r2, #0
 800756e:	2180      	movs	r1, #128	@ 0x80
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f001 f841 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d005      	beq.n	8007588 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2220      	movs	r2, #32
 8007580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e03d      	b.n	8007604 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10b      	bne.n	80075a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800759c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	3302      	adds	r3, #2
 80075a2:	61bb      	str	r3, [r7, #24]
 80075a4:	e007      	b.n	80075b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	3301      	adds	r3, #1
 80075b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b01      	subs	r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1c8      	bne.n	8007566 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2200      	movs	r2, #0
 80075dc:	2140      	movs	r1, #64	@ 0x40
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f001 f80a 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e006      	b.n	8007604 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	e000      	b.n	8007604 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007602:	2302      	movs	r3, #2
  }
}
 8007604:	4618      	mov	r0, r3
 8007606:	3720      	adds	r7, #32
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08a      	sub	sp, #40	@ 0x28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007620:	2b20      	cmp	r3, #32
 8007622:	d137      	bne.n	8007694 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <HAL_UART_Receive_IT+0x24>
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e030      	b.n	8007696 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a18      	ldr	r2, [pc, #96]	@ (80076a0 <HAL_UART_Receive_IT+0x94>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d01f      	beq.n	8007684 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d018      	beq.n	8007684 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	613b      	str	r3, [r7, #16]
   return(result);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	623b      	str	r3, [r7, #32]
 8007672:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	6a3a      	ldr	r2, [r7, #32]
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	61bb      	str	r3, [r7, #24]
   return(result);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e6      	bne.n	8007652 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007684:	88fb      	ldrh	r3, [r7, #6]
 8007686:	461a      	mov	r2, r3
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f001 f822 	bl	80086d4 <UART_Start_Receive_IT>
 8007690:	4603      	mov	r3, r0
 8007692:	e000      	b.n	8007696 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	3728      	adds	r7, #40	@ 0x28
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40008000 	.word	0x40008000

080076a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b0ba      	sub	sp, #232	@ 0xe8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80076ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80076d2:	4013      	ands	r3, r2
 80076d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80076d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d11b      	bne.n	8007718 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d015      	beq.n	8007718 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d105      	bne.n	8007704 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d009      	beq.n	8007718 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8300 	beq.w	8007d0e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
      }
      return;
 8007716:	e2fa      	b.n	8007d0e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 8123 	beq.w	8007968 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007722:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007726:	4b8d      	ldr	r3, [pc, #564]	@ (800795c <HAL_UART_IRQHandler+0x2b8>)
 8007728:	4013      	ands	r3, r2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800772e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007732:	4b8b      	ldr	r3, [pc, #556]	@ (8007960 <HAL_UART_IRQHandler+0x2bc>)
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 8116 	beq.w	8007968 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800773c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d011      	beq.n	800776c <HAL_UART_IRQHandler+0xc8>
 8007748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800774c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2201      	movs	r2, #1
 800775a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007762:	f043 0201 	orr.w	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800776c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d011      	beq.n	800779c <HAL_UART_IRQHandler+0xf8>
 8007778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2202      	movs	r2, #2
 800778a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007792:	f043 0204 	orr.w	r2, r3, #4
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d011      	beq.n	80077cc <HAL_UART_IRQHandler+0x128>
 80077a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2204      	movs	r2, #4
 80077ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c2:	f043 0202 	orr.w	r2, r3, #2
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d017      	beq.n	8007808 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d105      	bne.n	80077f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80077e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80077e8:	4b5c      	ldr	r3, [pc, #368]	@ (800795c <HAL_UART_IRQHandler+0x2b8>)
 80077ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2208      	movs	r2, #8
 80077f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077fe:	f043 0208 	orr.w	r2, r3, #8
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800780c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007810:	2b00      	cmp	r3, #0
 8007812:	d012      	beq.n	800783a <HAL_UART_IRQHandler+0x196>
 8007814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007818:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00c      	beq.n	800783a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007830:	f043 0220 	orr.w	r2, r3, #32
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 8266 	beq.w	8007d12 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d013      	beq.n	800787a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007856:	f003 0320 	and.w	r3, r3, #32
 800785a:	2b00      	cmp	r3, #0
 800785c:	d105      	bne.n	800786a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800785e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007880:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800788e:	2b40      	cmp	r3, #64	@ 0x40
 8007890:	d005      	beq.n	800789e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007896:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800789a:	2b00      	cmp	r3, #0
 800789c:	d054      	beq.n	8007948 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 f83a 	bl	8008918 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ae:	2b40      	cmp	r3, #64	@ 0x40
 80078b0:	d146      	bne.n	8007940 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1d9      	bne.n	80078b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007904:	2b00      	cmp	r3, #0
 8007906:	d017      	beq.n	8007938 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790e:	4a15      	ldr	r2, [pc, #84]	@ (8007964 <HAL_UART_IRQHandler+0x2c0>)
 8007910:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007918:	4618      	mov	r0, r3
 800791a:	f7fc fc4f 	bl	80041bc <HAL_DMA_Abort_IT>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d019      	beq.n	8007958 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800792a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007932:	4610      	mov	r0, r2
 8007934:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007936:	e00f      	b.n	8007958 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f9ff 	bl	8007d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793e:	e00b      	b.n	8007958 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f9fb 	bl	8007d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007946:	e007      	b.n	8007958 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f9f7 	bl	8007d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007956:	e1dc      	b.n	8007d12 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	bf00      	nop
    return;
 800795a:	e1da      	b.n	8007d12 <HAL_UART_IRQHandler+0x66e>
 800795c:	10000001 	.word	0x10000001
 8007960:	04000120 	.word	0x04000120
 8007964:	080089e5 	.word	0x080089e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800796c:	2b01      	cmp	r3, #1
 800796e:	f040 8170 	bne.w	8007c52 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007976:	f003 0310 	and.w	r3, r3, #16
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 8169 	beq.w	8007c52 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8162 	beq.w	8007c52 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2210      	movs	r2, #16
 8007994:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a0:	2b40      	cmp	r3, #64	@ 0x40
 80079a2:	f040 80d8 	bne.w	8007b56 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80af 	beq.w	8007b1c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079c8:	429a      	cmp	r2, r3
 80079ca:	f080 80a7 	bcs.w	8007b1c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f040 8087 	bne.w	8007afa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1da      	bne.n	80079ec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3308      	adds	r3, #8
 8007a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e1      	bne.n	8007a36 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3308      	adds	r3, #8
 8007a92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e3      	bne.n	8007a72 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ac8:	f023 0310 	bic.w	r3, r3, #16
 8007acc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ada:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007adc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ae0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e4      	bne.n	8007ab8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fc fb08 	bl	800410a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2202      	movs	r2, #2
 8007afe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f91b 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007b1a:	e0fc      	b.n	8007d16 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b26:	429a      	cmp	r2, r3
 8007b28:	f040 80f5 	bne.w	8007d16 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	f040 80eb 	bne.w	8007d16 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8fe 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
      return;
 8007b54:	e0df      	b.n	8007d16 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 80d1 	beq.w	8007d1a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80cc 	beq.w	8007d1a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ba6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e4      	bne.n	8007b82 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	623b      	str	r3, [r7, #32]
   return(result);
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007be0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e1      	bne.n	8007bb8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f023 0310 	bic.w	r3, r3, #16
 8007c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c2a:	61fb      	str	r3, [r7, #28]
 8007c2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	69b9      	ldr	r1, [r7, #24]
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	617b      	str	r3, [r7, #20]
   return(result);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e4      	bne.n	8007c08 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2202      	movs	r2, #2
 8007c42:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f880 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c50:	e063      	b.n	8007d1a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00e      	beq.n	8007c7c <HAL_UART_IRQHandler+0x5d8>
 8007c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d008      	beq.n	8007c7c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007c72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 fc13 	bl	80094a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c7a:	e051      	b.n	8007d20 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d014      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d008      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d03a      	beq.n	8007d1e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	4798      	blx	r3
    }
    return;
 8007cb0:	e035      	b.n	8007d1e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d009      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x62e>
 8007cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fe9c 	bl	8008a08 <UART_EndTransmit_IT>
    return;
 8007cd0:	e026      	b.n	8007d20 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x64e>
 8007cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 fbec 	bl	80094c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cf0:	e016      	b.n	8007d20 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d010      	beq.n	8007d20 <HAL_UART_IRQHandler+0x67c>
 8007cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	da0c      	bge.n	8007d20 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 fbd4 	bl	80094b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d0c:	e008      	b.n	8007d20 <HAL_UART_IRQHandler+0x67c>
      return;
 8007d0e:	bf00      	nop
 8007d10:	e006      	b.n	8007d20 <HAL_UART_IRQHandler+0x67c>
    return;
 8007d12:	bf00      	nop
 8007d14:	e004      	b.n	8007d20 <HAL_UART_IRQHandler+0x67c>
      return;
 8007d16:	bf00      	nop
 8007d18:	e002      	b.n	8007d20 <HAL_UART_IRQHandler+0x67c>
      return;
 8007d1a:	bf00      	nop
 8007d1c:	e000      	b.n	8007d20 <HAL_UART_IRQHandler+0x67c>
    return;
 8007d1e:	bf00      	nop
  }
}
 8007d20:	37e8      	adds	r7, #232	@ 0xe8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop

08007d28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d6c:	b08c      	sub	sp, #48	@ 0x30
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	431a      	orrs	r2, r3
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	431a      	orrs	r2, r3
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	4baa      	ldr	r3, [pc, #680]	@ (8008040 <UART_SetConfig+0x2d8>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007da0:	430b      	orrs	r3, r1
 8007da2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a9f      	ldr	r2, [pc, #636]	@ (8008044 <UART_SetConfig+0x2dc>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d004      	beq.n	8007dd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007dde:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007de8:	430b      	orrs	r3, r1
 8007dea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df2:	f023 010f 	bic.w	r1, r3, #15
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a90      	ldr	r2, [pc, #576]	@ (8008048 <UART_SetConfig+0x2e0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d125      	bne.n	8007e58 <UART_SetConfig+0xf0>
 8007e0c:	4b8f      	ldr	r3, [pc, #572]	@ (800804c <UART_SetConfig+0x2e4>)
 8007e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e12:	f003 0303 	and.w	r3, r3, #3
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d81a      	bhi.n	8007e50 <UART_SetConfig+0xe8>
 8007e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <UART_SetConfig+0xb8>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e31 	.word	0x08007e31
 8007e24:	08007e41 	.word	0x08007e41
 8007e28:	08007e39 	.word	0x08007e39
 8007e2c:	08007e49 	.word	0x08007e49
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e36:	e116      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e3e:	e112      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007e40:	2304      	movs	r3, #4
 8007e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e46:	e10e      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007e48:	2308      	movs	r3, #8
 8007e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e4e:	e10a      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007e50:	2310      	movs	r3, #16
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e56:	e106      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a7c      	ldr	r2, [pc, #496]	@ (8008050 <UART_SetConfig+0x2e8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d138      	bne.n	8007ed4 <UART_SetConfig+0x16c>
 8007e62:	4b7a      	ldr	r3, [pc, #488]	@ (800804c <UART_SetConfig+0x2e4>)
 8007e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e68:	f003 030c 	and.w	r3, r3, #12
 8007e6c:	2b0c      	cmp	r3, #12
 8007e6e:	d82d      	bhi.n	8007ecc <UART_SetConfig+0x164>
 8007e70:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <UART_SetConfig+0x110>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007ead 	.word	0x08007ead
 8007e7c:	08007ecd 	.word	0x08007ecd
 8007e80:	08007ecd 	.word	0x08007ecd
 8007e84:	08007ecd 	.word	0x08007ecd
 8007e88:	08007ebd 	.word	0x08007ebd
 8007e8c:	08007ecd 	.word	0x08007ecd
 8007e90:	08007ecd 	.word	0x08007ecd
 8007e94:	08007ecd 	.word	0x08007ecd
 8007e98:	08007eb5 	.word	0x08007eb5
 8007e9c:	08007ecd 	.word	0x08007ecd
 8007ea0:	08007ecd 	.word	0x08007ecd
 8007ea4:	08007ecd 	.word	0x08007ecd
 8007ea8:	08007ec5 	.word	0x08007ec5
 8007eac:	2300      	movs	r3, #0
 8007eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eb2:	e0d8      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eba:	e0d4      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007ebc:	2304      	movs	r3, #4
 8007ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec2:	e0d0      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007ec4:	2308      	movs	r3, #8
 8007ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eca:	e0cc      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007ecc:	2310      	movs	r3, #16
 8007ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed2:	e0c8      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8008054 <UART_SetConfig+0x2ec>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d125      	bne.n	8007f2a <UART_SetConfig+0x1c2>
 8007ede:	4b5b      	ldr	r3, [pc, #364]	@ (800804c <UART_SetConfig+0x2e4>)
 8007ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ee8:	2b30      	cmp	r3, #48	@ 0x30
 8007eea:	d016      	beq.n	8007f1a <UART_SetConfig+0x1b2>
 8007eec:	2b30      	cmp	r3, #48	@ 0x30
 8007eee:	d818      	bhi.n	8007f22 <UART_SetConfig+0x1ba>
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d00a      	beq.n	8007f0a <UART_SetConfig+0x1a2>
 8007ef4:	2b20      	cmp	r3, #32
 8007ef6:	d814      	bhi.n	8007f22 <UART_SetConfig+0x1ba>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <UART_SetConfig+0x19a>
 8007efc:	2b10      	cmp	r3, #16
 8007efe:	d008      	beq.n	8007f12 <UART_SetConfig+0x1aa>
 8007f00:	e00f      	b.n	8007f22 <UART_SetConfig+0x1ba>
 8007f02:	2300      	movs	r3, #0
 8007f04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f08:	e0ad      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f10:	e0a9      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007f12:	2304      	movs	r3, #4
 8007f14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f18:	e0a5      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007f1a:	2308      	movs	r3, #8
 8007f1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f20:	e0a1      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007f22:	2310      	movs	r3, #16
 8007f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f28:	e09d      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a4a      	ldr	r2, [pc, #296]	@ (8008058 <UART_SetConfig+0x2f0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d125      	bne.n	8007f80 <UART_SetConfig+0x218>
 8007f34:	4b45      	ldr	r3, [pc, #276]	@ (800804c <UART_SetConfig+0x2e4>)
 8007f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f40:	d016      	beq.n	8007f70 <UART_SetConfig+0x208>
 8007f42:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f44:	d818      	bhi.n	8007f78 <UART_SetConfig+0x210>
 8007f46:	2b80      	cmp	r3, #128	@ 0x80
 8007f48:	d00a      	beq.n	8007f60 <UART_SetConfig+0x1f8>
 8007f4a:	2b80      	cmp	r3, #128	@ 0x80
 8007f4c:	d814      	bhi.n	8007f78 <UART_SetConfig+0x210>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <UART_SetConfig+0x1f0>
 8007f52:	2b40      	cmp	r3, #64	@ 0x40
 8007f54:	d008      	beq.n	8007f68 <UART_SetConfig+0x200>
 8007f56:	e00f      	b.n	8007f78 <UART_SetConfig+0x210>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f5e:	e082      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007f60:	2302      	movs	r3, #2
 8007f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f66:	e07e      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007f68:	2304      	movs	r3, #4
 8007f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6e:	e07a      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007f70:	2308      	movs	r3, #8
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f76:	e076      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007f78:	2310      	movs	r3, #16
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	e072      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a35      	ldr	r2, [pc, #212]	@ (800805c <UART_SetConfig+0x2f4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d12a      	bne.n	8007fe0 <UART_SetConfig+0x278>
 8007f8a:	4b30      	ldr	r3, [pc, #192]	@ (800804c <UART_SetConfig+0x2e4>)
 8007f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f98:	d01a      	beq.n	8007fd0 <UART_SetConfig+0x268>
 8007f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f9e:	d81b      	bhi.n	8007fd8 <UART_SetConfig+0x270>
 8007fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa4:	d00c      	beq.n	8007fc0 <UART_SetConfig+0x258>
 8007fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007faa:	d815      	bhi.n	8007fd8 <UART_SetConfig+0x270>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <UART_SetConfig+0x250>
 8007fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fb4:	d008      	beq.n	8007fc8 <UART_SetConfig+0x260>
 8007fb6:	e00f      	b.n	8007fd8 <UART_SetConfig+0x270>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fbe:	e052      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc6:	e04e      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007fc8:	2304      	movs	r3, #4
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fce:	e04a      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd6:	e046      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007fd8:	2310      	movs	r3, #16
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fde:	e042      	b.n	8008066 <UART_SetConfig+0x2fe>
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a17      	ldr	r2, [pc, #92]	@ (8008044 <UART_SetConfig+0x2dc>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d13a      	bne.n	8008060 <UART_SetConfig+0x2f8>
 8007fea:	4b18      	ldr	r3, [pc, #96]	@ (800804c <UART_SetConfig+0x2e4>)
 8007fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ff4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ff8:	d01a      	beq.n	8008030 <UART_SetConfig+0x2c8>
 8007ffa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ffe:	d81b      	bhi.n	8008038 <UART_SetConfig+0x2d0>
 8008000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008004:	d00c      	beq.n	8008020 <UART_SetConfig+0x2b8>
 8008006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800800a:	d815      	bhi.n	8008038 <UART_SetConfig+0x2d0>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <UART_SetConfig+0x2b0>
 8008010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008014:	d008      	beq.n	8008028 <UART_SetConfig+0x2c0>
 8008016:	e00f      	b.n	8008038 <UART_SetConfig+0x2d0>
 8008018:	2300      	movs	r3, #0
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801e:	e022      	b.n	8008066 <UART_SetConfig+0x2fe>
 8008020:	2302      	movs	r3, #2
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008026:	e01e      	b.n	8008066 <UART_SetConfig+0x2fe>
 8008028:	2304      	movs	r3, #4
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802e:	e01a      	b.n	8008066 <UART_SetConfig+0x2fe>
 8008030:	2308      	movs	r3, #8
 8008032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008036:	e016      	b.n	8008066 <UART_SetConfig+0x2fe>
 8008038:	2310      	movs	r3, #16
 800803a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803e:	e012      	b.n	8008066 <UART_SetConfig+0x2fe>
 8008040:	cfff69f3 	.word	0xcfff69f3
 8008044:	40008000 	.word	0x40008000
 8008048:	40013800 	.word	0x40013800
 800804c:	40021000 	.word	0x40021000
 8008050:	40004400 	.word	0x40004400
 8008054:	40004800 	.word	0x40004800
 8008058:	40004c00 	.word	0x40004c00
 800805c:	40005000 	.word	0x40005000
 8008060:	2310      	movs	r3, #16
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4aae      	ldr	r2, [pc, #696]	@ (8008324 <UART_SetConfig+0x5bc>)
 800806c:	4293      	cmp	r3, r2
 800806e:	f040 8097 	bne.w	80081a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008072:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008076:	2b08      	cmp	r3, #8
 8008078:	d823      	bhi.n	80080c2 <UART_SetConfig+0x35a>
 800807a:	a201      	add	r2, pc, #4	@ (adr r2, 8008080 <UART_SetConfig+0x318>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	080080a5 	.word	0x080080a5
 8008084:	080080c3 	.word	0x080080c3
 8008088:	080080ad 	.word	0x080080ad
 800808c:	080080c3 	.word	0x080080c3
 8008090:	080080b3 	.word	0x080080b3
 8008094:	080080c3 	.word	0x080080c3
 8008098:	080080c3 	.word	0x080080c3
 800809c:	080080c3 	.word	0x080080c3
 80080a0:	080080bb 	.word	0x080080bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080a4:	f7fd f988 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 80080a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080aa:	e010      	b.n	80080ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080ac:	4b9e      	ldr	r3, [pc, #632]	@ (8008328 <UART_SetConfig+0x5c0>)
 80080ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080b0:	e00d      	b.n	80080ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080b2:	f7fd f913 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 80080b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080b8:	e009      	b.n	80080ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080c0:	e005      	b.n	80080ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 8130 	beq.w	8008336 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080da:	4a94      	ldr	r2, [pc, #592]	@ (800832c <UART_SetConfig+0x5c4>)
 80080dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80080e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	4613      	mov	r3, r2
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	4413      	add	r3, r2
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d305      	bcc.n	8008106 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	429a      	cmp	r2, r3
 8008104:	d903      	bls.n	800810e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800810c:	e113      	b.n	8008336 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	2200      	movs	r2, #0
 8008112:	60bb      	str	r3, [r7, #8]
 8008114:	60fa      	str	r2, [r7, #12]
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811a:	4a84      	ldr	r2, [pc, #528]	@ (800832c <UART_SetConfig+0x5c4>)
 800811c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008120:	b29b      	uxth	r3, r3
 8008122:	2200      	movs	r2, #0
 8008124:	603b      	str	r3, [r7, #0]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008130:	f7f8 f8de 	bl	80002f0 <__aeabi_uldivmod>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	f04f 0200 	mov.w	r2, #0
 8008140:	f04f 0300 	mov.w	r3, #0
 8008144:	020b      	lsls	r3, r1, #8
 8008146:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800814a:	0202      	lsls	r2, r0, #8
 800814c:	6979      	ldr	r1, [r7, #20]
 800814e:	6849      	ldr	r1, [r1, #4]
 8008150:	0849      	lsrs	r1, r1, #1
 8008152:	2000      	movs	r0, #0
 8008154:	460c      	mov	r4, r1
 8008156:	4605      	mov	r5, r0
 8008158:	eb12 0804 	adds.w	r8, r2, r4
 800815c:	eb43 0905 	adc.w	r9, r3, r5
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	469a      	mov	sl, r3
 8008168:	4693      	mov	fp, r2
 800816a:	4652      	mov	r2, sl
 800816c:	465b      	mov	r3, fp
 800816e:	4640      	mov	r0, r8
 8008170:	4649      	mov	r1, r9
 8008172:	f7f8 f8bd 	bl	80002f0 <__aeabi_uldivmod>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	4613      	mov	r3, r2
 800817c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008184:	d308      	bcc.n	8008198 <UART_SetConfig+0x430>
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800818c:	d204      	bcs.n	8008198 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6a3a      	ldr	r2, [r7, #32]
 8008194:	60da      	str	r2, [r3, #12]
 8008196:	e0ce      	b.n	8008336 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800819e:	e0ca      	b.n	8008336 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081a8:	d166      	bne.n	8008278 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80081aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081ae:	2b08      	cmp	r3, #8
 80081b0:	d827      	bhi.n	8008202 <UART_SetConfig+0x49a>
 80081b2:	a201      	add	r2, pc, #4	@ (adr r2, 80081b8 <UART_SetConfig+0x450>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	080081dd 	.word	0x080081dd
 80081bc:	080081e5 	.word	0x080081e5
 80081c0:	080081ed 	.word	0x080081ed
 80081c4:	08008203 	.word	0x08008203
 80081c8:	080081f3 	.word	0x080081f3
 80081cc:	08008203 	.word	0x08008203
 80081d0:	08008203 	.word	0x08008203
 80081d4:	08008203 	.word	0x08008203
 80081d8:	080081fb 	.word	0x080081fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081dc:	f7fd f8ec 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 80081e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081e2:	e014      	b.n	800820e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081e4:	f7fd f8fe 	bl	80053e4 <HAL_RCC_GetPCLK2Freq>
 80081e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ea:	e010      	b.n	800820e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081ec:	4b4e      	ldr	r3, [pc, #312]	@ (8008328 <UART_SetConfig+0x5c0>)
 80081ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081f0:	e00d      	b.n	800820e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f2:	f7fd f873 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 80081f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081f8:	e009      	b.n	800820e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008200:	e005      	b.n	800820e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800820c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 8090 	beq.w	8008336 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821a:	4a44      	ldr	r2, [pc, #272]	@ (800832c <UART_SetConfig+0x5c4>)
 800821c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008220:	461a      	mov	r2, r3
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	fbb3 f3f2 	udiv	r3, r3, r2
 8008228:	005a      	lsls	r2, r3, #1
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	085b      	lsrs	r3, r3, #1
 8008230:	441a      	add	r2, r3
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	fbb2 f3f3 	udiv	r3, r2, r3
 800823a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	2b0f      	cmp	r3, #15
 8008240:	d916      	bls.n	8008270 <UART_SetConfig+0x508>
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008248:	d212      	bcs.n	8008270 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	b29b      	uxth	r3, r3
 800824e:	f023 030f 	bic.w	r3, r3, #15
 8008252:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	085b      	lsrs	r3, r3, #1
 8008258:	b29b      	uxth	r3, r3
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	b29a      	uxth	r2, r3
 8008260:	8bfb      	ldrh	r3, [r7, #30]
 8008262:	4313      	orrs	r3, r2
 8008264:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	8bfa      	ldrh	r2, [r7, #30]
 800826c:	60da      	str	r2, [r3, #12]
 800826e:	e062      	b.n	8008336 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008276:	e05e      	b.n	8008336 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008278:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800827c:	2b08      	cmp	r3, #8
 800827e:	d828      	bhi.n	80082d2 <UART_SetConfig+0x56a>
 8008280:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <UART_SetConfig+0x520>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	080082ad 	.word	0x080082ad
 800828c:	080082b5 	.word	0x080082b5
 8008290:	080082bd 	.word	0x080082bd
 8008294:	080082d3 	.word	0x080082d3
 8008298:	080082c3 	.word	0x080082c3
 800829c:	080082d3 	.word	0x080082d3
 80082a0:	080082d3 	.word	0x080082d3
 80082a4:	080082d3 	.word	0x080082d3
 80082a8:	080082cb 	.word	0x080082cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082ac:	f7fd f884 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 80082b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082b2:	e014      	b.n	80082de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082b4:	f7fd f896 	bl	80053e4 <HAL_RCC_GetPCLK2Freq>
 80082b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082ba:	e010      	b.n	80082de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008328 <UART_SetConfig+0x5c0>)
 80082be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082c0:	e00d      	b.n	80082de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082c2:	f7fd f80b 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 80082c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082c8:	e009      	b.n	80082de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082d0:	e005      	b.n	80082de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082dc:	bf00      	nop
    }

    if (pclk != 0U)
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d028      	beq.n	8008336 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e8:	4a10      	ldr	r2, [pc, #64]	@ (800832c <UART_SetConfig+0x5c4>)
 80082ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082ee:	461a      	mov	r2, r3
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	441a      	add	r2, r3
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	fbb2 f3f3 	udiv	r3, r2, r3
 8008306:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	2b0f      	cmp	r3, #15
 800830c:	d910      	bls.n	8008330 <UART_SetConfig+0x5c8>
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008314:	d20c      	bcs.n	8008330 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	b29a      	uxth	r2, r3
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60da      	str	r2, [r3, #12]
 8008320:	e009      	b.n	8008336 <UART_SetConfig+0x5ce>
 8008322:	bf00      	nop
 8008324:	40008000 	.word	0x40008000
 8008328:	00f42400 	.word	0x00f42400
 800832c:	0800adcc 	.word	0x0800adcc
      }
      else
      {
        ret = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2201      	movs	r2, #1
 800833a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2201      	movs	r2, #1
 8008342:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2200      	movs	r2, #0
 800834a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2200      	movs	r2, #0
 8008350:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008352:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008356:	4618      	mov	r0, r3
 8008358:	3730      	adds	r7, #48	@ 0x30
 800835a:	46bd      	mov	sp, r7
 800835c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00a      	beq.n	800838a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00a      	beq.n	80083ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00a      	beq.n	8008412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	f003 0320 	and.w	r3, r3, #32
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01a      	beq.n	8008476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800845e:	d10a      	bne.n	8008476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	605a      	str	r2, [r3, #4]
  }
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b098      	sub	sp, #96	@ 0x60
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084b4:	f7f9 fccc 	bl	8001e50 <HAL_GetTick>
 80084b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0308 	and.w	r3, r3, #8
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d12f      	bne.n	8008528 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084d0:	2200      	movs	r2, #0
 80084d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f88e 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d022      	beq.n	8008528 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008500:	647b      	str	r3, [r7, #68]	@ 0x44
 8008502:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800850e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e6      	bne.n	80084e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e063      	b.n	80085f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	2b04      	cmp	r3, #4
 8008534:	d149      	bne.n	80085ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008536:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800853e:	2200      	movs	r2, #0
 8008540:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f857 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d03c      	beq.n	80085ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	623b      	str	r3, [r7, #32]
   return(result);
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800856e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008570:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800857c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e6      	bne.n	8008550 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	60fb      	str	r3, [r7, #12]
   return(result);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f023 0301 	bic.w	r3, r3, #1
 8008598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085a2:	61fa      	str	r2, [r7, #28]
 80085a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	69b9      	ldr	r1, [r7, #24]
 80085a8:	69fa      	ldr	r2, [r7, #28]
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	617b      	str	r3, [r7, #20]
   return(result);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e5      	bne.n	8008582 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e012      	b.n	80085f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3758      	adds	r7, #88	@ 0x58
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4613      	mov	r3, r2
 8008606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008608:	e04f      	b.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008610:	d04b      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008612:	f7f9 fc1d 	bl	8001e50 <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	429a      	cmp	r2, r3
 8008620:	d302      	bcc.n	8008628 <UART_WaitOnFlagUntilTimeout+0x30>
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e04e      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0304 	and.w	r3, r3, #4
 8008636:	2b00      	cmp	r3, #0
 8008638:	d037      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2b80      	cmp	r3, #128	@ 0x80
 800863e:	d034      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2b40      	cmp	r3, #64	@ 0x40
 8008644:	d031      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f003 0308 	and.w	r3, r3, #8
 8008650:	2b08      	cmp	r3, #8
 8008652:	d110      	bne.n	8008676 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2208      	movs	r2, #8
 800865a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f95b 	bl	8008918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2208      	movs	r2, #8
 8008666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e029      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008684:	d111      	bne.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800868e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 f941 	bl	8008918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e00f      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	4013      	ands	r3, r2
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	bf0c      	ite	eq
 80086ba:	2301      	moveq	r3, #1
 80086bc:	2300      	movne	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d0a0      	beq.n	800860a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b0a3      	sub	sp, #140	@ 0x8c
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4613      	mov	r3, r2
 80086e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	88fa      	ldrh	r2, [r7, #6]
 80086ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	88fa      	ldrh	r2, [r7, #6]
 80086f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008706:	d10e      	bne.n	8008726 <UART_Start_Receive_IT+0x52>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d105      	bne.n	800871c <UART_Start_Receive_IT+0x48>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008716:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800871a:	e02d      	b.n	8008778 <UART_Start_Receive_IT+0xa4>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	22ff      	movs	r2, #255	@ 0xff
 8008720:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008724:	e028      	b.n	8008778 <UART_Start_Receive_IT+0xa4>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10d      	bne.n	800874a <UART_Start_Receive_IT+0x76>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d104      	bne.n	8008740 <UART_Start_Receive_IT+0x6c>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	22ff      	movs	r2, #255	@ 0xff
 800873a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800873e:	e01b      	b.n	8008778 <UART_Start_Receive_IT+0xa4>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	227f      	movs	r2, #127	@ 0x7f
 8008744:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008748:	e016      	b.n	8008778 <UART_Start_Receive_IT+0xa4>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008752:	d10d      	bne.n	8008770 <UART_Start_Receive_IT+0x9c>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d104      	bne.n	8008766 <UART_Start_Receive_IT+0x92>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	227f      	movs	r2, #127	@ 0x7f
 8008760:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008764:	e008      	b.n	8008778 <UART_Start_Receive_IT+0xa4>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	223f      	movs	r2, #63	@ 0x3f
 800876a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800876e:	e003      	b.n	8008778 <UART_Start_Receive_IT+0xa4>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2222      	movs	r2, #34	@ 0x22
 8008784:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3308      	adds	r3, #8
 800878e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008798:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800879a:	f043 0301 	orr.w	r3, r3, #1
 800879e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3308      	adds	r3, #8
 80087a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80087ac:	673a      	str	r2, [r7, #112]	@ 0x70
 80087ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80087b2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80087b4:	e841 2300 	strex	r3, r2, [r1]
 80087b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80087ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e3      	bne.n	8008788 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087c8:	d14f      	bne.n	800886a <UART_Start_Receive_IT+0x196>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80087d0:	88fa      	ldrh	r2, [r7, #6]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d349      	bcc.n	800886a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087de:	d107      	bne.n	80087f0 <UART_Start_Receive_IT+0x11c>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d103      	bne.n	80087f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4a47      	ldr	r2, [pc, #284]	@ (8008908 <UART_Start_Receive_IT+0x234>)
 80087ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80087ee:	e002      	b.n	80087f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4a46      	ldr	r2, [pc, #280]	@ (800890c <UART_Start_Receive_IT+0x238>)
 80087f4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d01a      	beq.n	8008834 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800880c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800880e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008812:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008820:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008822:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008826:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800882e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e4      	bne.n	80087fe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3308      	adds	r3, #8
 800883a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800883e:	e853 3f00 	ldrex	r3, [r3]
 8008842:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800884a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3308      	adds	r3, #8
 8008852:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008854:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008856:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800885a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e5      	bne.n	8008834 <UART_Start_Receive_IT+0x160>
 8008868:	e046      	b.n	80088f8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008872:	d107      	bne.n	8008884 <UART_Start_Receive_IT+0x1b0>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d103      	bne.n	8008884 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4a24      	ldr	r2, [pc, #144]	@ (8008910 <UART_Start_Receive_IT+0x23c>)
 8008880:	675a      	str	r2, [r3, #116]	@ 0x74
 8008882:	e002      	b.n	800888a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4a23      	ldr	r2, [pc, #140]	@ (8008914 <UART_Start_Receive_IT+0x240>)
 8008888:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d019      	beq.n	80088c6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889a:	e853 3f00 	ldrex	r3, [r3]
 800889e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80088a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	461a      	mov	r2, r3
 80088ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088b2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088b8:	e841 2300 	strex	r3, r2, [r1]
 80088bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80088be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e6      	bne.n	8008892 <UART_Start_Receive_IT+0x1be>
 80088c4:	e018      	b.n	80088f8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	e853 3f00 	ldrex	r3, [r3]
 80088d2:	613b      	str	r3, [r7, #16]
   return(result);
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f043 0320 	orr.w	r3, r3, #32
 80088da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088e4:	623b      	str	r3, [r7, #32]
 80088e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e8:	69f9      	ldr	r1, [r7, #28]
 80088ea:	6a3a      	ldr	r2, [r7, #32]
 80088ec:	e841 2300 	strex	r3, r2, [r1]
 80088f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e6      	bne.n	80088c6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	378c      	adds	r7, #140	@ 0x8c
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	08009135 	.word	0x08009135
 800890c:	08008dd1 	.word	0x08008dd1
 8008910:	08008c19 	.word	0x08008c19
 8008914:	08008a61 	.word	0x08008a61

08008918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008918:	b480      	push	{r7}
 800891a:	b095      	sub	sp, #84	@ 0x54
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800893e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008940:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008944:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800894c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e6      	bne.n	8008920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3308      	adds	r3, #8
 8008958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	61fb      	str	r3, [r7, #28]
   return(result);
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008968:	f023 0301 	bic.w	r3, r3, #1
 800896c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008978:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800897c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e3      	bne.n	8008952 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800898e:	2b01      	cmp	r3, #1
 8008990:	d118      	bne.n	80089c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	60bb      	str	r3, [r7, #8]
   return(result);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f023 0310 	bic.w	r3, r3, #16
 80089a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	6979      	ldr	r1, [r7, #20]
 80089b6:	69ba      	ldr	r2, [r7, #24]
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	613b      	str	r3, [r7, #16]
   return(result);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e6      	bne.n	8008992 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80089d8:	bf00      	nop
 80089da:	3754      	adds	r7, #84	@ 0x54
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7ff f99e 	bl	8007d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a00:	bf00      	nop
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a24:	61fb      	str	r3, [r7, #28]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	61bb      	str	r3, [r7, #24]
 8008a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6979      	ldr	r1, [r7, #20]
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e6      	bne.n	8008a10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff f969 	bl	8007d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a56:	bf00      	nop
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b09c      	sub	sp, #112	@ 0x70
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a78:	2b22      	cmp	r3, #34	@ 0x22
 8008a7a:	f040 80be 	bne.w	8008bfa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a8c:	b2d9      	uxtb	r1, r3
 8008a8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a98:	400a      	ands	r2, r1
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f040 80a1 	bne.w	8008c0a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008adc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ae8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1e6      	bne.n	8008ac8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3308      	adds	r3, #8
 8008b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0c:	f023 0301 	bic.w	r3, r3, #1
 8008b10:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3308      	adds	r3, #8
 8008b18:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008b1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e5      	bne.n	8008afa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a33      	ldr	r2, [pc, #204]	@ (8008c14 <UART_RxISR_8BIT+0x1b4>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d01f      	beq.n	8008b8c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d018      	beq.n	8008b8c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	623b      	str	r3, [r7, #32]
   return(result);
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e6      	bne.n	8008b5a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d12e      	bne.n	8008bf2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	e853 3f00 	ldrex	r3, [r3]
 8008ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0310 	bic.w	r3, r3, #16
 8008bae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bb8:	61fb      	str	r3, [r7, #28]
 8008bba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	69b9      	ldr	r1, [r7, #24]
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	e841 2300 	strex	r3, r2, [r1]
 8008bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e6      	bne.n	8008b9a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	f003 0310 	and.w	r3, r3, #16
 8008bd6:	2b10      	cmp	r3, #16
 8008bd8:	d103      	bne.n	8008be2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2210      	movs	r2, #16
 8008be0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff f8b0 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bf0:	e00b      	b.n	8008c0a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7f9 f8c2 	bl	8001d7c <HAL_UART_RxCpltCallback>
}
 8008bf8:	e007      	b.n	8008c0a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	699a      	ldr	r2, [r3, #24]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f042 0208 	orr.w	r2, r2, #8
 8008c08:	619a      	str	r2, [r3, #24]
}
 8008c0a:	bf00      	nop
 8008c0c:	3770      	adds	r7, #112	@ 0x70
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	40008000 	.word	0x40008000

08008c18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b09c      	sub	sp, #112	@ 0x70
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c30:	2b22      	cmp	r3, #34	@ 0x22
 8008c32:	f040 80be 	bne.w	8008db2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c44:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c46:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008c4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c4e:	4013      	ands	r3, r2
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c5a:	1c9a      	adds	r2, r3, #2
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f040 80a1 	bne.w	8008dc2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c88:	e853 3f00 	ldrex	r3, [r3]
 8008c8c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c94:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ca0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ca4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1e6      	bne.n	8008c80 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc4:	f023 0301 	bic.w	r3, r3, #1
 8008cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008cd2:	643a      	str	r2, [r7, #64]	@ 0x40
 8008cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cda:	e841 2300 	strex	r3, r2, [r1]
 8008cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1e5      	bne.n	8008cb2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a33      	ldr	r2, [pc, #204]	@ (8008dcc <UART_RxISR_16BIT+0x1b4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d01f      	beq.n	8008d44 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d018      	beq.n	8008d44 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d32:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e6      	bne.n	8008d12 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d12e      	bne.n	8008daa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	e853 3f00 	ldrex	r3, [r3]
 8008d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f023 0310 	bic.w	r3, r3, #16
 8008d66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d70:	61bb      	str	r3, [r7, #24]
 8008d72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d74:	6979      	ldr	r1, [r7, #20]
 8008d76:	69ba      	ldr	r2, [r7, #24]
 8008d78:	e841 2300 	strex	r3, r2, [r1]
 8008d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e6      	bne.n	8008d52 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	f003 0310 	and.w	r3, r3, #16
 8008d8e:	2b10      	cmp	r3, #16
 8008d90:	d103      	bne.n	8008d9a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2210      	movs	r2, #16
 8008d98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7fe ffd4 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008da8:	e00b      	b.n	8008dc2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7f8 ffe6 	bl	8001d7c <HAL_UART_RxCpltCallback>
}
 8008db0:	e007      	b.n	8008dc2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	699a      	ldr	r2, [r3, #24]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f042 0208 	orr.w	r2, r2, #8
 8008dc0:	619a      	str	r2, [r3, #24]
}
 8008dc2:	bf00      	nop
 8008dc4:	3770      	adds	r7, #112	@ 0x70
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40008000 	.word	0x40008000

08008dd0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b0ac      	sub	sp, #176	@ 0xb0
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008dde:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e06:	2b22      	cmp	r3, #34	@ 0x22
 8008e08:	f040 8183 	bne.w	8009112 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e12:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e16:	e126      	b.n	8009066 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e22:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008e26:	b2d9      	uxtb	r1, r3
 8008e28:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e32:	400a      	ands	r2, r1
 8008e34:	b2d2      	uxtb	r2, r2
 8008e36:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d053      	beq.n	8008f12 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d011      	beq.n	8008e9a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2201      	movs	r2, #1
 8008e88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e90:	f043 0201 	orr.w	r2, r3, #1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d011      	beq.n	8008eca <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ec0:	f043 0204 	orr.w	r2, r3, #4
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d011      	beq.n	8008efa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00b      	beq.n	8008efa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2204      	movs	r2, #4
 8008ee8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef0:	f043 0202 	orr.w	r2, r3, #2
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d006      	beq.n	8008f12 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7fe ff19 	bl	8007d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f040 80a3 	bne.w	8009066 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008f2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f44:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008f48:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008f50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e4      	bne.n	8008f20 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008f66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f6c:	f023 0301 	bic.w	r3, r3, #1
 8008f70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f7e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008f80:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008f84:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e1      	bne.n	8008f56 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a60      	ldr	r2, [pc, #384]	@ (800912c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d021      	beq.n	8008ff4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d01a      	beq.n	8008ff4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fe0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fe2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fe6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e4      	bne.n	8008fbe <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d130      	bne.n	800905e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009012:	f023 0310 	bic.w	r3, r3, #16
 8009016:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009024:	643b      	str	r3, [r7, #64]	@ 0x40
 8009026:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800902a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e4      	bne.n	8009002 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	f003 0310 	and.w	r3, r3, #16
 8009042:	2b10      	cmp	r3, #16
 8009044:	d103      	bne.n	800904e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2210      	movs	r2, #16
 800904c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7fe fe7a 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800905c:	e00e      	b.n	800907c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f7f8 fe8c 	bl	8001d7c <HAL_UART_RxCpltCallback>
        break;
 8009064:	e00a      	b.n	800907c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009066:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800906a:	2b00      	cmp	r3, #0
 800906c:	d006      	beq.n	800907c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800906e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	2b00      	cmp	r3, #0
 8009078:	f47f aece 	bne.w	8008e18 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009082:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009086:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800908a:	2b00      	cmp	r3, #0
 800908c:	d049      	beq.n	8009122 <UART_RxISR_8BIT_FIFOEN+0x352>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009094:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009098:	429a      	cmp	r2, r3
 800909a:	d242      	bcs.n	8009122 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3308      	adds	r3, #8
 80090a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80090c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090c8:	e841 2300 	strex	r3, r2, [r1]
 80090cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e3      	bne.n	800909c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a16      	ldr	r2, [pc, #88]	@ (8009130 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80090d8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	e853 3f00 	ldrex	r3, [r3]
 80090e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f043 0320 	orr.w	r3, r3, #32
 80090ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090fc:	61bb      	str	r3, [r7, #24]
 80090fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	6979      	ldr	r1, [r7, #20]
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	e841 2300 	strex	r3, r2, [r1]
 8009108:	613b      	str	r3, [r7, #16]
   return(result);
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e4      	bne.n	80090da <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009110:	e007      	b.n	8009122 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	699a      	ldr	r2, [r3, #24]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f042 0208 	orr.w	r2, r2, #8
 8009120:	619a      	str	r2, [r3, #24]
}
 8009122:	bf00      	nop
 8009124:	37b0      	adds	r7, #176	@ 0xb0
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	40008000 	.word	0x40008000
 8009130:	08008a61 	.word	0x08008a61

08009134 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b0ae      	sub	sp, #184	@ 0xb8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009142:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800916a:	2b22      	cmp	r3, #34	@ 0x22
 800916c:	f040 8187 	bne.w	800947e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009176:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800917a:	e12a      	b.n	80093d2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009182:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800918a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800918e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009192:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009196:	4013      	ands	r3, r2
 8009198:	b29a      	uxth	r2, r3
 800919a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800919e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a4:	1c9a      	adds	r2, r3, #2
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d053      	beq.n	800927a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d011      	beq.n	8009202 <UART_RxISR_16BIT_FIFOEN+0xce>
 80091de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00b      	beq.n	8009202 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2201      	movs	r2, #1
 80091f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f8:	f043 0201 	orr.w	r2, r3, #1
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d011      	beq.n	8009232 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800920e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00b      	beq.n	8009232 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2202      	movs	r2, #2
 8009220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009228:	f043 0204 	orr.w	r2, r3, #4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b00      	cmp	r3, #0
 800923c:	d011      	beq.n	8009262 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800923e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00b      	beq.n	8009262 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2204      	movs	r2, #4
 8009250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009258:	f043 0202 	orr.w	r2, r3, #2
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009268:	2b00      	cmp	r3, #0
 800926a:	d006      	beq.n	800927a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7fe fd65 	bl	8007d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009280:	b29b      	uxth	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	f040 80a5 	bne.w	80093d2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800929c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e2      	bne.n	8009288 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3308      	adds	r3, #8
 80092c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3308      	adds	r3, #8
 80092e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80092ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e1      	bne.n	80092c2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2220      	movs	r2, #32
 8009302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a60      	ldr	r2, [pc, #384]	@ (8009498 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d021      	beq.n	8009360 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d01a      	beq.n	8009360 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800933a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800933e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800934c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800934e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009352:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800935a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e4      	bne.n	800932a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009364:	2b01      	cmp	r3, #1
 8009366:	d130      	bne.n	80093ca <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800937c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937e:	f023 0310 	bic.w	r3, r3, #16
 8009382:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009390:	647b      	str	r3, [r7, #68]	@ 0x44
 8009392:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800939e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e4      	bne.n	800936e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	f003 0310 	and.w	r3, r3, #16
 80093ae:	2b10      	cmp	r3, #16
 80093b0:	d103      	bne.n	80093ba <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2210      	movs	r2, #16
 80093b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7fe fcc4 	bl	8007d50 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80093c8:	e00e      	b.n	80093e8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7f8 fcd6 	bl	8001d7c <HAL_UART_RxCpltCallback>
        break;
 80093d0:	e00a      	b.n	80093e8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093d2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d006      	beq.n	80093e8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80093da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093de:	f003 0320 	and.w	r3, r3, #32
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f47f aeca 	bne.w	800917c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093ee:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d049      	beq.n	800948e <UART_RxISR_16BIT_FIFOEN+0x35a>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009400:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009404:	429a      	cmp	r2, r3
 8009406:	d242      	bcs.n	800948e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3308      	adds	r3, #8
 800940e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	623b      	str	r3, [r7, #32]
   return(result);
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800941e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3308      	adds	r3, #8
 8009428:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800942c:	633a      	str	r2, [r7, #48]	@ 0x30
 800942e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800943a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e3      	bne.n	8009408 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a16      	ldr	r2, [pc, #88]	@ (800949c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009444:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	e853 3f00 	ldrex	r3, [r3]
 8009452:	60fb      	str	r3, [r7, #12]
   return(result);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f043 0320 	orr.w	r3, r3, #32
 800945a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009468:	61fb      	str	r3, [r7, #28]
 800946a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	69b9      	ldr	r1, [r7, #24]
 800946e:	69fa      	ldr	r2, [r7, #28]
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	617b      	str	r3, [r7, #20]
   return(result);
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e4      	bne.n	8009446 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800947c:	e007      	b.n	800948e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699a      	ldr	r2, [r3, #24]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f042 0208 	orr.w	r2, r2, #8
 800948c:	619a      	str	r2, [r3, #24]
}
 800948e:	bf00      	nop
 8009490:	37b8      	adds	r7, #184	@ 0xb8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	40008000 	.word	0x40008000
 800949c:	08008c19 	.word	0x08008c19

080094a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d101      	bne.n	80094f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80094ee:	2302      	movs	r3, #2
 80094f0:	e027      	b.n	8009542 <HAL_UARTEx_DisableFifoMode+0x66>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2224      	movs	r2, #36	@ 0x24
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 0201 	bic.w	r2, r2, #1
 8009518:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009520:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2220      	movs	r2, #32
 8009534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009562:	2302      	movs	r3, #2
 8009564:	e02d      	b.n	80095c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2224      	movs	r2, #36	@ 0x24
 8009572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f022 0201 	bic.w	r2, r2, #1
 800958c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f850 	bl	8009648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095de:	2302      	movs	r3, #2
 80095e0:	e02d      	b.n	800963e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2224      	movs	r2, #36	@ 0x24
 80095ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0201 	bic.w	r2, r2, #1
 8009608:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f812 	bl	8009648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2220      	movs	r2, #32
 8009630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009654:	2b00      	cmp	r3, #0
 8009656:	d108      	bne.n	800966a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009668:	e031      	b.n	80096ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800966a:	2308      	movs	r3, #8
 800966c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800966e:	2308      	movs	r3, #8
 8009670:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	0e5b      	lsrs	r3, r3, #25
 800967a:	b2db      	uxtb	r3, r3
 800967c:	f003 0307 	and.w	r3, r3, #7
 8009680:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	0f5b      	lsrs	r3, r3, #29
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009692:	7bbb      	ldrb	r3, [r7, #14]
 8009694:	7b3a      	ldrb	r2, [r7, #12]
 8009696:	4911      	ldr	r1, [pc, #68]	@ (80096dc <UARTEx_SetNbDataToProcess+0x94>)
 8009698:	5c8a      	ldrb	r2, [r1, r2]
 800969a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800969e:	7b3a      	ldrb	r2, [r7, #12]
 80096a0:	490f      	ldr	r1, [pc, #60]	@ (80096e0 <UARTEx_SetNbDataToProcess+0x98>)
 80096a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	7b7a      	ldrb	r2, [r7, #13]
 80096b4:	4909      	ldr	r1, [pc, #36]	@ (80096dc <UARTEx_SetNbDataToProcess+0x94>)
 80096b6:	5c8a      	ldrb	r2, [r1, r2]
 80096b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096bc:	7b7a      	ldrb	r2, [r7, #13]
 80096be:	4908      	ldr	r1, [pc, #32]	@ (80096e0 <UARTEx_SetNbDataToProcess+0x98>)
 80096c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096ce:	bf00      	nop
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	0800ade4 	.word	0x0800ade4
 80096e0:	0800adec 	.word	0x0800adec

080096e4 <atoi>:
 80096e4:	220a      	movs	r2, #10
 80096e6:	2100      	movs	r1, #0
 80096e8:	f000 b87a 	b.w	80097e0 <strtol>

080096ec <_strtol_l.constprop.0>:
 80096ec:	2b24      	cmp	r3, #36	@ 0x24
 80096ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f2:	4686      	mov	lr, r0
 80096f4:	4690      	mov	r8, r2
 80096f6:	d801      	bhi.n	80096fc <_strtol_l.constprop.0+0x10>
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d106      	bne.n	800970a <_strtol_l.constprop.0+0x1e>
 80096fc:	f000 fa5e 	bl	8009bbc <__errno>
 8009700:	2316      	movs	r3, #22
 8009702:	6003      	str	r3, [r0, #0]
 8009704:	2000      	movs	r0, #0
 8009706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970a:	4834      	ldr	r0, [pc, #208]	@ (80097dc <_strtol_l.constprop.0+0xf0>)
 800970c:	460d      	mov	r5, r1
 800970e:	462a      	mov	r2, r5
 8009710:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009714:	5d06      	ldrb	r6, [r0, r4]
 8009716:	f016 0608 	ands.w	r6, r6, #8
 800971a:	d1f8      	bne.n	800970e <_strtol_l.constprop.0+0x22>
 800971c:	2c2d      	cmp	r4, #45	@ 0x2d
 800971e:	d12d      	bne.n	800977c <_strtol_l.constprop.0+0x90>
 8009720:	782c      	ldrb	r4, [r5, #0]
 8009722:	2601      	movs	r6, #1
 8009724:	1c95      	adds	r5, r2, #2
 8009726:	f033 0210 	bics.w	r2, r3, #16
 800972a:	d109      	bne.n	8009740 <_strtol_l.constprop.0+0x54>
 800972c:	2c30      	cmp	r4, #48	@ 0x30
 800972e:	d12a      	bne.n	8009786 <_strtol_l.constprop.0+0x9a>
 8009730:	782a      	ldrb	r2, [r5, #0]
 8009732:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009736:	2a58      	cmp	r2, #88	@ 0x58
 8009738:	d125      	bne.n	8009786 <_strtol_l.constprop.0+0x9a>
 800973a:	786c      	ldrb	r4, [r5, #1]
 800973c:	2310      	movs	r3, #16
 800973e:	3502      	adds	r5, #2
 8009740:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009744:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009748:	2200      	movs	r2, #0
 800974a:	fbbc f9f3 	udiv	r9, ip, r3
 800974e:	4610      	mov	r0, r2
 8009750:	fb03 ca19 	mls	sl, r3, r9, ip
 8009754:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009758:	2f09      	cmp	r7, #9
 800975a:	d81b      	bhi.n	8009794 <_strtol_l.constprop.0+0xa8>
 800975c:	463c      	mov	r4, r7
 800975e:	42a3      	cmp	r3, r4
 8009760:	dd27      	ble.n	80097b2 <_strtol_l.constprop.0+0xc6>
 8009762:	1c57      	adds	r7, r2, #1
 8009764:	d007      	beq.n	8009776 <_strtol_l.constprop.0+0x8a>
 8009766:	4581      	cmp	r9, r0
 8009768:	d320      	bcc.n	80097ac <_strtol_l.constprop.0+0xc0>
 800976a:	d101      	bne.n	8009770 <_strtol_l.constprop.0+0x84>
 800976c:	45a2      	cmp	sl, r4
 800976e:	db1d      	blt.n	80097ac <_strtol_l.constprop.0+0xc0>
 8009770:	fb00 4003 	mla	r0, r0, r3, r4
 8009774:	2201      	movs	r2, #1
 8009776:	f815 4b01 	ldrb.w	r4, [r5], #1
 800977a:	e7eb      	b.n	8009754 <_strtol_l.constprop.0+0x68>
 800977c:	2c2b      	cmp	r4, #43	@ 0x2b
 800977e:	bf04      	itt	eq
 8009780:	782c      	ldrbeq	r4, [r5, #0]
 8009782:	1c95      	addeq	r5, r2, #2
 8009784:	e7cf      	b.n	8009726 <_strtol_l.constprop.0+0x3a>
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1da      	bne.n	8009740 <_strtol_l.constprop.0+0x54>
 800978a:	2c30      	cmp	r4, #48	@ 0x30
 800978c:	bf0c      	ite	eq
 800978e:	2308      	moveq	r3, #8
 8009790:	230a      	movne	r3, #10
 8009792:	e7d5      	b.n	8009740 <_strtol_l.constprop.0+0x54>
 8009794:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009798:	2f19      	cmp	r7, #25
 800979a:	d801      	bhi.n	80097a0 <_strtol_l.constprop.0+0xb4>
 800979c:	3c37      	subs	r4, #55	@ 0x37
 800979e:	e7de      	b.n	800975e <_strtol_l.constprop.0+0x72>
 80097a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80097a4:	2f19      	cmp	r7, #25
 80097a6:	d804      	bhi.n	80097b2 <_strtol_l.constprop.0+0xc6>
 80097a8:	3c57      	subs	r4, #87	@ 0x57
 80097aa:	e7d8      	b.n	800975e <_strtol_l.constprop.0+0x72>
 80097ac:	f04f 32ff 	mov.w	r2, #4294967295
 80097b0:	e7e1      	b.n	8009776 <_strtol_l.constprop.0+0x8a>
 80097b2:	1c53      	adds	r3, r2, #1
 80097b4:	d108      	bne.n	80097c8 <_strtol_l.constprop.0+0xdc>
 80097b6:	2322      	movs	r3, #34	@ 0x22
 80097b8:	f8ce 3000 	str.w	r3, [lr]
 80097bc:	4660      	mov	r0, ip
 80097be:	f1b8 0f00 	cmp.w	r8, #0
 80097c2:	d0a0      	beq.n	8009706 <_strtol_l.constprop.0+0x1a>
 80097c4:	1e69      	subs	r1, r5, #1
 80097c6:	e006      	b.n	80097d6 <_strtol_l.constprop.0+0xea>
 80097c8:	b106      	cbz	r6, 80097cc <_strtol_l.constprop.0+0xe0>
 80097ca:	4240      	negs	r0, r0
 80097cc:	f1b8 0f00 	cmp.w	r8, #0
 80097d0:	d099      	beq.n	8009706 <_strtol_l.constprop.0+0x1a>
 80097d2:	2a00      	cmp	r2, #0
 80097d4:	d1f6      	bne.n	80097c4 <_strtol_l.constprop.0+0xd8>
 80097d6:	f8c8 1000 	str.w	r1, [r8]
 80097da:	e794      	b.n	8009706 <_strtol_l.constprop.0+0x1a>
 80097dc:	0800adf5 	.word	0x0800adf5

080097e0 <strtol>:
 80097e0:	4613      	mov	r3, r2
 80097e2:	460a      	mov	r2, r1
 80097e4:	4601      	mov	r1, r0
 80097e6:	4802      	ldr	r0, [pc, #8]	@ (80097f0 <strtol+0x10>)
 80097e8:	6800      	ldr	r0, [r0, #0]
 80097ea:	f7ff bf7f 	b.w	80096ec <_strtol_l.constprop.0>
 80097ee:	bf00      	nop
 80097f0:	200000d4 	.word	0x200000d4

080097f4 <std>:
 80097f4:	2300      	movs	r3, #0
 80097f6:	b510      	push	{r4, lr}
 80097f8:	4604      	mov	r4, r0
 80097fa:	e9c0 3300 	strd	r3, r3, [r0]
 80097fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009802:	6083      	str	r3, [r0, #8]
 8009804:	8181      	strh	r1, [r0, #12]
 8009806:	6643      	str	r3, [r0, #100]	@ 0x64
 8009808:	81c2      	strh	r2, [r0, #14]
 800980a:	6183      	str	r3, [r0, #24]
 800980c:	4619      	mov	r1, r3
 800980e:	2208      	movs	r2, #8
 8009810:	305c      	adds	r0, #92	@ 0x5c
 8009812:	f000 f928 	bl	8009a66 <memset>
 8009816:	4b0d      	ldr	r3, [pc, #52]	@ (800984c <std+0x58>)
 8009818:	6263      	str	r3, [r4, #36]	@ 0x24
 800981a:	4b0d      	ldr	r3, [pc, #52]	@ (8009850 <std+0x5c>)
 800981c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800981e:	4b0d      	ldr	r3, [pc, #52]	@ (8009854 <std+0x60>)
 8009820:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009822:	4b0d      	ldr	r3, [pc, #52]	@ (8009858 <std+0x64>)
 8009824:	6323      	str	r3, [r4, #48]	@ 0x30
 8009826:	4b0d      	ldr	r3, [pc, #52]	@ (800985c <std+0x68>)
 8009828:	6224      	str	r4, [r4, #32]
 800982a:	429c      	cmp	r4, r3
 800982c:	d006      	beq.n	800983c <std+0x48>
 800982e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009832:	4294      	cmp	r4, r2
 8009834:	d002      	beq.n	800983c <std+0x48>
 8009836:	33d0      	adds	r3, #208	@ 0xd0
 8009838:	429c      	cmp	r4, r3
 800983a:	d105      	bne.n	8009848 <std+0x54>
 800983c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009844:	f000 b9e4 	b.w	8009c10 <__retarget_lock_init_recursive>
 8009848:	bd10      	pop	{r4, pc}
 800984a:	bf00      	nop
 800984c:	080099e1 	.word	0x080099e1
 8009850:	08009a03 	.word	0x08009a03
 8009854:	08009a3b 	.word	0x08009a3b
 8009858:	08009a5f 	.word	0x08009a5f
 800985c:	200005bc 	.word	0x200005bc

08009860 <stdio_exit_handler>:
 8009860:	4a02      	ldr	r2, [pc, #8]	@ (800986c <stdio_exit_handler+0xc>)
 8009862:	4903      	ldr	r1, [pc, #12]	@ (8009870 <stdio_exit_handler+0x10>)
 8009864:	4803      	ldr	r0, [pc, #12]	@ (8009874 <stdio_exit_handler+0x14>)
 8009866:	f000 b869 	b.w	800993c <_fwalk_sglue>
 800986a:	bf00      	nop
 800986c:	200000c8 	.word	0x200000c8
 8009870:	0800a529 	.word	0x0800a529
 8009874:	200000d8 	.word	0x200000d8

08009878 <cleanup_stdio>:
 8009878:	6841      	ldr	r1, [r0, #4]
 800987a:	4b0c      	ldr	r3, [pc, #48]	@ (80098ac <cleanup_stdio+0x34>)
 800987c:	4299      	cmp	r1, r3
 800987e:	b510      	push	{r4, lr}
 8009880:	4604      	mov	r4, r0
 8009882:	d001      	beq.n	8009888 <cleanup_stdio+0x10>
 8009884:	f000 fe50 	bl	800a528 <_fflush_r>
 8009888:	68a1      	ldr	r1, [r4, #8]
 800988a:	4b09      	ldr	r3, [pc, #36]	@ (80098b0 <cleanup_stdio+0x38>)
 800988c:	4299      	cmp	r1, r3
 800988e:	d002      	beq.n	8009896 <cleanup_stdio+0x1e>
 8009890:	4620      	mov	r0, r4
 8009892:	f000 fe49 	bl	800a528 <_fflush_r>
 8009896:	68e1      	ldr	r1, [r4, #12]
 8009898:	4b06      	ldr	r3, [pc, #24]	@ (80098b4 <cleanup_stdio+0x3c>)
 800989a:	4299      	cmp	r1, r3
 800989c:	d004      	beq.n	80098a8 <cleanup_stdio+0x30>
 800989e:	4620      	mov	r0, r4
 80098a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a4:	f000 be40 	b.w	800a528 <_fflush_r>
 80098a8:	bd10      	pop	{r4, pc}
 80098aa:	bf00      	nop
 80098ac:	200005bc 	.word	0x200005bc
 80098b0:	20000624 	.word	0x20000624
 80098b4:	2000068c 	.word	0x2000068c

080098b8 <global_stdio_init.part.0>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	4b0b      	ldr	r3, [pc, #44]	@ (80098e8 <global_stdio_init.part.0+0x30>)
 80098bc:	4c0b      	ldr	r4, [pc, #44]	@ (80098ec <global_stdio_init.part.0+0x34>)
 80098be:	4a0c      	ldr	r2, [pc, #48]	@ (80098f0 <global_stdio_init.part.0+0x38>)
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	4620      	mov	r0, r4
 80098c4:	2200      	movs	r2, #0
 80098c6:	2104      	movs	r1, #4
 80098c8:	f7ff ff94 	bl	80097f4 <std>
 80098cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098d0:	2201      	movs	r2, #1
 80098d2:	2109      	movs	r1, #9
 80098d4:	f7ff ff8e 	bl	80097f4 <std>
 80098d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098dc:	2202      	movs	r2, #2
 80098de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098e2:	2112      	movs	r1, #18
 80098e4:	f7ff bf86 	b.w	80097f4 <std>
 80098e8:	200006f4 	.word	0x200006f4
 80098ec:	200005bc 	.word	0x200005bc
 80098f0:	08009861 	.word	0x08009861

080098f4 <__sfp_lock_acquire>:
 80098f4:	4801      	ldr	r0, [pc, #4]	@ (80098fc <__sfp_lock_acquire+0x8>)
 80098f6:	f000 b98c 	b.w	8009c12 <__retarget_lock_acquire_recursive>
 80098fa:	bf00      	nop
 80098fc:	200006fd 	.word	0x200006fd

08009900 <__sfp_lock_release>:
 8009900:	4801      	ldr	r0, [pc, #4]	@ (8009908 <__sfp_lock_release+0x8>)
 8009902:	f000 b987 	b.w	8009c14 <__retarget_lock_release_recursive>
 8009906:	bf00      	nop
 8009908:	200006fd 	.word	0x200006fd

0800990c <__sinit>:
 800990c:	b510      	push	{r4, lr}
 800990e:	4604      	mov	r4, r0
 8009910:	f7ff fff0 	bl	80098f4 <__sfp_lock_acquire>
 8009914:	6a23      	ldr	r3, [r4, #32]
 8009916:	b11b      	cbz	r3, 8009920 <__sinit+0x14>
 8009918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800991c:	f7ff bff0 	b.w	8009900 <__sfp_lock_release>
 8009920:	4b04      	ldr	r3, [pc, #16]	@ (8009934 <__sinit+0x28>)
 8009922:	6223      	str	r3, [r4, #32]
 8009924:	4b04      	ldr	r3, [pc, #16]	@ (8009938 <__sinit+0x2c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1f5      	bne.n	8009918 <__sinit+0xc>
 800992c:	f7ff ffc4 	bl	80098b8 <global_stdio_init.part.0>
 8009930:	e7f2      	b.n	8009918 <__sinit+0xc>
 8009932:	bf00      	nop
 8009934:	08009879 	.word	0x08009879
 8009938:	200006f4 	.word	0x200006f4

0800993c <_fwalk_sglue>:
 800993c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009940:	4607      	mov	r7, r0
 8009942:	4688      	mov	r8, r1
 8009944:	4614      	mov	r4, r2
 8009946:	2600      	movs	r6, #0
 8009948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800994c:	f1b9 0901 	subs.w	r9, r9, #1
 8009950:	d505      	bpl.n	800995e <_fwalk_sglue+0x22>
 8009952:	6824      	ldr	r4, [r4, #0]
 8009954:	2c00      	cmp	r4, #0
 8009956:	d1f7      	bne.n	8009948 <_fwalk_sglue+0xc>
 8009958:	4630      	mov	r0, r6
 800995a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d907      	bls.n	8009974 <_fwalk_sglue+0x38>
 8009964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009968:	3301      	adds	r3, #1
 800996a:	d003      	beq.n	8009974 <_fwalk_sglue+0x38>
 800996c:	4629      	mov	r1, r5
 800996e:	4638      	mov	r0, r7
 8009970:	47c0      	blx	r8
 8009972:	4306      	orrs	r6, r0
 8009974:	3568      	adds	r5, #104	@ 0x68
 8009976:	e7e9      	b.n	800994c <_fwalk_sglue+0x10>

08009978 <sniprintf>:
 8009978:	b40c      	push	{r2, r3}
 800997a:	b530      	push	{r4, r5, lr}
 800997c:	4b17      	ldr	r3, [pc, #92]	@ (80099dc <sniprintf+0x64>)
 800997e:	1e0c      	subs	r4, r1, #0
 8009980:	681d      	ldr	r5, [r3, #0]
 8009982:	b09d      	sub	sp, #116	@ 0x74
 8009984:	da08      	bge.n	8009998 <sniprintf+0x20>
 8009986:	238b      	movs	r3, #139	@ 0x8b
 8009988:	602b      	str	r3, [r5, #0]
 800998a:	f04f 30ff 	mov.w	r0, #4294967295
 800998e:	b01d      	add	sp, #116	@ 0x74
 8009990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009994:	b002      	add	sp, #8
 8009996:	4770      	bx	lr
 8009998:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800999c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80099a0:	bf14      	ite	ne
 80099a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80099a6:	4623      	moveq	r3, r4
 80099a8:	9304      	str	r3, [sp, #16]
 80099aa:	9307      	str	r3, [sp, #28]
 80099ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80099b0:	9002      	str	r0, [sp, #8]
 80099b2:	9006      	str	r0, [sp, #24]
 80099b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80099b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80099ba:	ab21      	add	r3, sp, #132	@ 0x84
 80099bc:	a902      	add	r1, sp, #8
 80099be:	4628      	mov	r0, r5
 80099c0:	9301      	str	r3, [sp, #4]
 80099c2:	f000 faa3 	bl	8009f0c <_svfiprintf_r>
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	bfbc      	itt	lt
 80099ca:	238b      	movlt	r3, #139	@ 0x8b
 80099cc:	602b      	strlt	r3, [r5, #0]
 80099ce:	2c00      	cmp	r4, #0
 80099d0:	d0dd      	beq.n	800998e <sniprintf+0x16>
 80099d2:	9b02      	ldr	r3, [sp, #8]
 80099d4:	2200      	movs	r2, #0
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	e7d9      	b.n	800998e <sniprintf+0x16>
 80099da:	bf00      	nop
 80099dc:	200000d4 	.word	0x200000d4

080099e0 <__sread>:
 80099e0:	b510      	push	{r4, lr}
 80099e2:	460c      	mov	r4, r1
 80099e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e8:	f000 f8c4 	bl	8009b74 <_read_r>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	bfab      	itete	ge
 80099f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099f2:	89a3      	ldrhlt	r3, [r4, #12]
 80099f4:	181b      	addge	r3, r3, r0
 80099f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099fa:	bfac      	ite	ge
 80099fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099fe:	81a3      	strhlt	r3, [r4, #12]
 8009a00:	bd10      	pop	{r4, pc}

08009a02 <__swrite>:
 8009a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a06:	461f      	mov	r7, r3
 8009a08:	898b      	ldrh	r3, [r1, #12]
 8009a0a:	05db      	lsls	r3, r3, #23
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	4616      	mov	r6, r2
 8009a12:	d505      	bpl.n	8009a20 <__swrite+0x1e>
 8009a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a18:	2302      	movs	r3, #2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f000 f898 	bl	8009b50 <_lseek_r>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	463b      	mov	r3, r7
 8009a30:	4628      	mov	r0, r5
 8009a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a36:	f000 b8af 	b.w	8009b98 <_write_r>

08009a3a <__sseek>:
 8009a3a:	b510      	push	{r4, lr}
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a42:	f000 f885 	bl	8009b50 <_lseek_r>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	bf15      	itete	ne
 8009a4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a56:	81a3      	strheq	r3, [r4, #12]
 8009a58:	bf18      	it	ne
 8009a5a:	81a3      	strhne	r3, [r4, #12]
 8009a5c:	bd10      	pop	{r4, pc}

08009a5e <__sclose>:
 8009a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a62:	f000 b865 	b.w	8009b30 <_close_r>

08009a66 <memset>:
 8009a66:	4402      	add	r2, r0
 8009a68:	4603      	mov	r3, r0
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d100      	bne.n	8009a70 <memset+0xa>
 8009a6e:	4770      	bx	lr
 8009a70:	f803 1b01 	strb.w	r1, [r3], #1
 8009a74:	e7f9      	b.n	8009a6a <memset+0x4>
	...

08009a78 <strtok>:
 8009a78:	4b16      	ldr	r3, [pc, #88]	@ (8009ad4 <strtok+0x5c>)
 8009a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7e:	681f      	ldr	r7, [r3, #0]
 8009a80:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009a82:	4605      	mov	r5, r0
 8009a84:	460e      	mov	r6, r1
 8009a86:	b9ec      	cbnz	r4, 8009ac4 <strtok+0x4c>
 8009a88:	2050      	movs	r0, #80	@ 0x50
 8009a8a:	f000 f92d 	bl	8009ce8 <malloc>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	6478      	str	r0, [r7, #68]	@ 0x44
 8009a92:	b920      	cbnz	r0, 8009a9e <strtok+0x26>
 8009a94:	4b10      	ldr	r3, [pc, #64]	@ (8009ad8 <strtok+0x60>)
 8009a96:	4811      	ldr	r0, [pc, #68]	@ (8009adc <strtok+0x64>)
 8009a98:	215b      	movs	r1, #91	@ 0x5b
 8009a9a:	f000 f8bd 	bl	8009c18 <__assert_func>
 8009a9e:	e9c0 4400 	strd	r4, r4, [r0]
 8009aa2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009aa6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009aaa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009aae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009ab2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009ab6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009aba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009abe:	6184      	str	r4, [r0, #24]
 8009ac0:	7704      	strb	r4, [r0, #28]
 8009ac2:	6244      	str	r4, [r0, #36]	@ 0x24
 8009ac4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	2301      	movs	r3, #1
 8009acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad0:	f000 b806 	b.w	8009ae0 <__strtok_r>
 8009ad4:	200000d4 	.word	0x200000d4
 8009ad8:	0800aef5 	.word	0x0800aef5
 8009adc:	0800af0c 	.word	0x0800af0c

08009ae0 <__strtok_r>:
 8009ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	b908      	cbnz	r0, 8009aea <__strtok_r+0xa>
 8009ae6:	6814      	ldr	r4, [r2, #0]
 8009ae8:	b144      	cbz	r4, 8009afc <__strtok_r+0x1c>
 8009aea:	4620      	mov	r0, r4
 8009aec:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009af0:	460f      	mov	r7, r1
 8009af2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009af6:	b91e      	cbnz	r6, 8009b00 <__strtok_r+0x20>
 8009af8:	b965      	cbnz	r5, 8009b14 <__strtok_r+0x34>
 8009afa:	6015      	str	r5, [r2, #0]
 8009afc:	2000      	movs	r0, #0
 8009afe:	e005      	b.n	8009b0c <__strtok_r+0x2c>
 8009b00:	42b5      	cmp	r5, r6
 8009b02:	d1f6      	bne.n	8009af2 <__strtok_r+0x12>
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1f0      	bne.n	8009aea <__strtok_r+0xa>
 8009b08:	6014      	str	r4, [r2, #0]
 8009b0a:	7003      	strb	r3, [r0, #0]
 8009b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0e:	461c      	mov	r4, r3
 8009b10:	e00c      	b.n	8009b2c <__strtok_r+0x4c>
 8009b12:	b915      	cbnz	r5, 8009b1a <__strtok_r+0x3a>
 8009b14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b18:	460e      	mov	r6, r1
 8009b1a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009b1e:	42ab      	cmp	r3, r5
 8009b20:	d1f7      	bne.n	8009b12 <__strtok_r+0x32>
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0f3      	beq.n	8009b0e <__strtok_r+0x2e>
 8009b26:	2300      	movs	r3, #0
 8009b28:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009b2c:	6014      	str	r4, [r2, #0]
 8009b2e:	e7ed      	b.n	8009b0c <__strtok_r+0x2c>

08009b30 <_close_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	@ (8009b4c <_close_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7f7 fa9a 	bl	8001074 <_close>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_close_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_close_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	200006f8 	.word	0x200006f8

08009b50 <_lseek_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	@ (8009b70 <_lseek_r+0x20>)
 8009b54:	4604      	mov	r4, r0
 8009b56:	4608      	mov	r0, r1
 8009b58:	4611      	mov	r1, r2
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	602a      	str	r2, [r5, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7f7 faaf 	bl	80010c2 <_lseek>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_lseek_r+0x1e>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_lseek_r+0x1e>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	200006f8 	.word	0x200006f8

08009b74 <_read_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d07      	ldr	r5, [pc, #28]	@ (8009b94 <_read_r+0x20>)
 8009b78:	4604      	mov	r4, r0
 8009b7a:	4608      	mov	r0, r1
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	2200      	movs	r2, #0
 8009b80:	602a      	str	r2, [r5, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	f7f7 fa3d 	bl	8001002 <_read>
 8009b88:	1c43      	adds	r3, r0, #1
 8009b8a:	d102      	bne.n	8009b92 <_read_r+0x1e>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	b103      	cbz	r3, 8009b92 <_read_r+0x1e>
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	200006f8 	.word	0x200006f8

08009b98 <_write_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4d07      	ldr	r5, [pc, #28]	@ (8009bb8 <_write_r+0x20>)
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	602a      	str	r2, [r5, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f7f7 fa48 	bl	800103c <_write>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_write_r+0x1e>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_write_r+0x1e>
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	200006f8 	.word	0x200006f8

08009bbc <__errno>:
 8009bbc:	4b01      	ldr	r3, [pc, #4]	@ (8009bc4 <__errno+0x8>)
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	200000d4 	.word	0x200000d4

08009bc8 <__libc_init_array>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	4d0d      	ldr	r5, [pc, #52]	@ (8009c00 <__libc_init_array+0x38>)
 8009bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8009c04 <__libc_init_array+0x3c>)
 8009bce:	1b64      	subs	r4, r4, r5
 8009bd0:	10a4      	asrs	r4, r4, #2
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	42a6      	cmp	r6, r4
 8009bd6:	d109      	bne.n	8009bec <__libc_init_array+0x24>
 8009bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8009c08 <__libc_init_array+0x40>)
 8009bda:	4c0c      	ldr	r4, [pc, #48]	@ (8009c0c <__libc_init_array+0x44>)
 8009bdc:	f000 fff0 	bl	800abc0 <_init>
 8009be0:	1b64      	subs	r4, r4, r5
 8009be2:	10a4      	asrs	r4, r4, #2
 8009be4:	2600      	movs	r6, #0
 8009be6:	42a6      	cmp	r6, r4
 8009be8:	d105      	bne.n	8009bf6 <__libc_init_array+0x2e>
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf0:	4798      	blx	r3
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	e7ee      	b.n	8009bd4 <__libc_init_array+0xc>
 8009bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfa:	4798      	blx	r3
 8009bfc:	3601      	adds	r6, #1
 8009bfe:	e7f2      	b.n	8009be6 <__libc_init_array+0x1e>
 8009c00:	0800afe0 	.word	0x0800afe0
 8009c04:	0800afe0 	.word	0x0800afe0
 8009c08:	0800afe0 	.word	0x0800afe0
 8009c0c:	0800afe4 	.word	0x0800afe4

08009c10 <__retarget_lock_init_recursive>:
 8009c10:	4770      	bx	lr

08009c12 <__retarget_lock_acquire_recursive>:
 8009c12:	4770      	bx	lr

08009c14 <__retarget_lock_release_recursive>:
 8009c14:	4770      	bx	lr
	...

08009c18 <__assert_func>:
 8009c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c1a:	4614      	mov	r4, r2
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	4b09      	ldr	r3, [pc, #36]	@ (8009c44 <__assert_func+0x2c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4605      	mov	r5, r0
 8009c24:	68d8      	ldr	r0, [r3, #12]
 8009c26:	b954      	cbnz	r4, 8009c3e <__assert_func+0x26>
 8009c28:	4b07      	ldr	r3, [pc, #28]	@ (8009c48 <__assert_func+0x30>)
 8009c2a:	461c      	mov	r4, r3
 8009c2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c30:	9100      	str	r1, [sp, #0]
 8009c32:	462b      	mov	r3, r5
 8009c34:	4905      	ldr	r1, [pc, #20]	@ (8009c4c <__assert_func+0x34>)
 8009c36:	f000 fc9f 	bl	800a578 <fiprintf>
 8009c3a:	f000 fce7 	bl	800a60c <abort>
 8009c3e:	4b04      	ldr	r3, [pc, #16]	@ (8009c50 <__assert_func+0x38>)
 8009c40:	e7f4      	b.n	8009c2c <__assert_func+0x14>
 8009c42:	bf00      	nop
 8009c44:	200000d4 	.word	0x200000d4
 8009c48:	0800afa1 	.word	0x0800afa1
 8009c4c:	0800af73 	.word	0x0800af73
 8009c50:	0800af66 	.word	0x0800af66

08009c54 <_free_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4605      	mov	r5, r0
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	d041      	beq.n	8009ce0 <_free_r+0x8c>
 8009c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c60:	1f0c      	subs	r4, r1, #4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bfb8      	it	lt
 8009c66:	18e4      	addlt	r4, r4, r3
 8009c68:	f000 f8e8 	bl	8009e3c <__malloc_lock>
 8009c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ce4 <_free_r+0x90>)
 8009c6e:	6813      	ldr	r3, [r2, #0]
 8009c70:	b933      	cbnz	r3, 8009c80 <_free_r+0x2c>
 8009c72:	6063      	str	r3, [r4, #4]
 8009c74:	6014      	str	r4, [r2, #0]
 8009c76:	4628      	mov	r0, r5
 8009c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c7c:	f000 b8e4 	b.w	8009e48 <__malloc_unlock>
 8009c80:	42a3      	cmp	r3, r4
 8009c82:	d908      	bls.n	8009c96 <_free_r+0x42>
 8009c84:	6820      	ldr	r0, [r4, #0]
 8009c86:	1821      	adds	r1, r4, r0
 8009c88:	428b      	cmp	r3, r1
 8009c8a:	bf01      	itttt	eq
 8009c8c:	6819      	ldreq	r1, [r3, #0]
 8009c8e:	685b      	ldreq	r3, [r3, #4]
 8009c90:	1809      	addeq	r1, r1, r0
 8009c92:	6021      	streq	r1, [r4, #0]
 8009c94:	e7ed      	b.n	8009c72 <_free_r+0x1e>
 8009c96:	461a      	mov	r2, r3
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	b10b      	cbz	r3, 8009ca0 <_free_r+0x4c>
 8009c9c:	42a3      	cmp	r3, r4
 8009c9e:	d9fa      	bls.n	8009c96 <_free_r+0x42>
 8009ca0:	6811      	ldr	r1, [r2, #0]
 8009ca2:	1850      	adds	r0, r2, r1
 8009ca4:	42a0      	cmp	r0, r4
 8009ca6:	d10b      	bne.n	8009cc0 <_free_r+0x6c>
 8009ca8:	6820      	ldr	r0, [r4, #0]
 8009caa:	4401      	add	r1, r0
 8009cac:	1850      	adds	r0, r2, r1
 8009cae:	4283      	cmp	r3, r0
 8009cb0:	6011      	str	r1, [r2, #0]
 8009cb2:	d1e0      	bne.n	8009c76 <_free_r+0x22>
 8009cb4:	6818      	ldr	r0, [r3, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	6053      	str	r3, [r2, #4]
 8009cba:	4408      	add	r0, r1
 8009cbc:	6010      	str	r0, [r2, #0]
 8009cbe:	e7da      	b.n	8009c76 <_free_r+0x22>
 8009cc0:	d902      	bls.n	8009cc8 <_free_r+0x74>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	602b      	str	r3, [r5, #0]
 8009cc6:	e7d6      	b.n	8009c76 <_free_r+0x22>
 8009cc8:	6820      	ldr	r0, [r4, #0]
 8009cca:	1821      	adds	r1, r4, r0
 8009ccc:	428b      	cmp	r3, r1
 8009cce:	bf04      	itt	eq
 8009cd0:	6819      	ldreq	r1, [r3, #0]
 8009cd2:	685b      	ldreq	r3, [r3, #4]
 8009cd4:	6063      	str	r3, [r4, #4]
 8009cd6:	bf04      	itt	eq
 8009cd8:	1809      	addeq	r1, r1, r0
 8009cda:	6021      	streq	r1, [r4, #0]
 8009cdc:	6054      	str	r4, [r2, #4]
 8009cde:	e7ca      	b.n	8009c76 <_free_r+0x22>
 8009ce0:	bd38      	pop	{r3, r4, r5, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000704 	.word	0x20000704

08009ce8 <malloc>:
 8009ce8:	4b02      	ldr	r3, [pc, #8]	@ (8009cf4 <malloc+0xc>)
 8009cea:	4601      	mov	r1, r0
 8009cec:	6818      	ldr	r0, [r3, #0]
 8009cee:	f000 b825 	b.w	8009d3c <_malloc_r>
 8009cf2:	bf00      	nop
 8009cf4:	200000d4 	.word	0x200000d4

08009cf8 <sbrk_aligned>:
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	4e0f      	ldr	r6, [pc, #60]	@ (8009d38 <sbrk_aligned+0x40>)
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	6831      	ldr	r1, [r6, #0]
 8009d00:	4605      	mov	r5, r0
 8009d02:	b911      	cbnz	r1, 8009d0a <sbrk_aligned+0x12>
 8009d04:	f000 fc64 	bl	800a5d0 <_sbrk_r>
 8009d08:	6030      	str	r0, [r6, #0]
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f000 fc5f 	bl	800a5d0 <_sbrk_r>
 8009d12:	1c43      	adds	r3, r0, #1
 8009d14:	d103      	bne.n	8009d1e <sbrk_aligned+0x26>
 8009d16:	f04f 34ff 	mov.w	r4, #4294967295
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	bd70      	pop	{r4, r5, r6, pc}
 8009d1e:	1cc4      	adds	r4, r0, #3
 8009d20:	f024 0403 	bic.w	r4, r4, #3
 8009d24:	42a0      	cmp	r0, r4
 8009d26:	d0f8      	beq.n	8009d1a <sbrk_aligned+0x22>
 8009d28:	1a21      	subs	r1, r4, r0
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 fc50 	bl	800a5d0 <_sbrk_r>
 8009d30:	3001      	adds	r0, #1
 8009d32:	d1f2      	bne.n	8009d1a <sbrk_aligned+0x22>
 8009d34:	e7ef      	b.n	8009d16 <sbrk_aligned+0x1e>
 8009d36:	bf00      	nop
 8009d38:	20000700 	.word	0x20000700

08009d3c <_malloc_r>:
 8009d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d40:	1ccd      	adds	r5, r1, #3
 8009d42:	f025 0503 	bic.w	r5, r5, #3
 8009d46:	3508      	adds	r5, #8
 8009d48:	2d0c      	cmp	r5, #12
 8009d4a:	bf38      	it	cc
 8009d4c:	250c      	movcc	r5, #12
 8009d4e:	2d00      	cmp	r5, #0
 8009d50:	4606      	mov	r6, r0
 8009d52:	db01      	blt.n	8009d58 <_malloc_r+0x1c>
 8009d54:	42a9      	cmp	r1, r5
 8009d56:	d904      	bls.n	8009d62 <_malloc_r+0x26>
 8009d58:	230c      	movs	r3, #12
 8009d5a:	6033      	str	r3, [r6, #0]
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e38 <_malloc_r+0xfc>
 8009d66:	f000 f869 	bl	8009e3c <__malloc_lock>
 8009d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009d6e:	461c      	mov	r4, r3
 8009d70:	bb44      	cbnz	r4, 8009dc4 <_malloc_r+0x88>
 8009d72:	4629      	mov	r1, r5
 8009d74:	4630      	mov	r0, r6
 8009d76:	f7ff ffbf 	bl	8009cf8 <sbrk_aligned>
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	d158      	bne.n	8009e32 <_malloc_r+0xf6>
 8009d80:	f8d8 4000 	ldr.w	r4, [r8]
 8009d84:	4627      	mov	r7, r4
 8009d86:	2f00      	cmp	r7, #0
 8009d88:	d143      	bne.n	8009e12 <_malloc_r+0xd6>
 8009d8a:	2c00      	cmp	r4, #0
 8009d8c:	d04b      	beq.n	8009e26 <_malloc_r+0xea>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	4639      	mov	r1, r7
 8009d92:	4630      	mov	r0, r6
 8009d94:	eb04 0903 	add.w	r9, r4, r3
 8009d98:	f000 fc1a 	bl	800a5d0 <_sbrk_r>
 8009d9c:	4581      	cmp	r9, r0
 8009d9e:	d142      	bne.n	8009e26 <_malloc_r+0xea>
 8009da0:	6821      	ldr	r1, [r4, #0]
 8009da2:	1a6d      	subs	r5, r5, r1
 8009da4:	4629      	mov	r1, r5
 8009da6:	4630      	mov	r0, r6
 8009da8:	f7ff ffa6 	bl	8009cf8 <sbrk_aligned>
 8009dac:	3001      	adds	r0, #1
 8009dae:	d03a      	beq.n	8009e26 <_malloc_r+0xea>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	442b      	add	r3, r5
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	f8d8 3000 	ldr.w	r3, [r8]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	bb62      	cbnz	r2, 8009e18 <_malloc_r+0xdc>
 8009dbe:	f8c8 7000 	str.w	r7, [r8]
 8009dc2:	e00f      	b.n	8009de4 <_malloc_r+0xa8>
 8009dc4:	6822      	ldr	r2, [r4, #0]
 8009dc6:	1b52      	subs	r2, r2, r5
 8009dc8:	d420      	bmi.n	8009e0c <_malloc_r+0xd0>
 8009dca:	2a0b      	cmp	r2, #11
 8009dcc:	d917      	bls.n	8009dfe <_malloc_r+0xc2>
 8009dce:	1961      	adds	r1, r4, r5
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	6025      	str	r5, [r4, #0]
 8009dd4:	bf18      	it	ne
 8009dd6:	6059      	strne	r1, [r3, #4]
 8009dd8:	6863      	ldr	r3, [r4, #4]
 8009dda:	bf08      	it	eq
 8009ddc:	f8c8 1000 	streq.w	r1, [r8]
 8009de0:	5162      	str	r2, [r4, r5]
 8009de2:	604b      	str	r3, [r1, #4]
 8009de4:	4630      	mov	r0, r6
 8009de6:	f000 f82f 	bl	8009e48 <__malloc_unlock>
 8009dea:	f104 000b 	add.w	r0, r4, #11
 8009dee:	1d23      	adds	r3, r4, #4
 8009df0:	f020 0007 	bic.w	r0, r0, #7
 8009df4:	1ac2      	subs	r2, r0, r3
 8009df6:	bf1c      	itt	ne
 8009df8:	1a1b      	subne	r3, r3, r0
 8009dfa:	50a3      	strne	r3, [r4, r2]
 8009dfc:	e7af      	b.n	8009d5e <_malloc_r+0x22>
 8009dfe:	6862      	ldr	r2, [r4, #4]
 8009e00:	42a3      	cmp	r3, r4
 8009e02:	bf0c      	ite	eq
 8009e04:	f8c8 2000 	streq.w	r2, [r8]
 8009e08:	605a      	strne	r2, [r3, #4]
 8009e0a:	e7eb      	b.n	8009de4 <_malloc_r+0xa8>
 8009e0c:	4623      	mov	r3, r4
 8009e0e:	6864      	ldr	r4, [r4, #4]
 8009e10:	e7ae      	b.n	8009d70 <_malloc_r+0x34>
 8009e12:	463c      	mov	r4, r7
 8009e14:	687f      	ldr	r7, [r7, #4]
 8009e16:	e7b6      	b.n	8009d86 <_malloc_r+0x4a>
 8009e18:	461a      	mov	r2, r3
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	42a3      	cmp	r3, r4
 8009e1e:	d1fb      	bne.n	8009e18 <_malloc_r+0xdc>
 8009e20:	2300      	movs	r3, #0
 8009e22:	6053      	str	r3, [r2, #4]
 8009e24:	e7de      	b.n	8009de4 <_malloc_r+0xa8>
 8009e26:	230c      	movs	r3, #12
 8009e28:	6033      	str	r3, [r6, #0]
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f000 f80c 	bl	8009e48 <__malloc_unlock>
 8009e30:	e794      	b.n	8009d5c <_malloc_r+0x20>
 8009e32:	6005      	str	r5, [r0, #0]
 8009e34:	e7d6      	b.n	8009de4 <_malloc_r+0xa8>
 8009e36:	bf00      	nop
 8009e38:	20000704 	.word	0x20000704

08009e3c <__malloc_lock>:
 8009e3c:	4801      	ldr	r0, [pc, #4]	@ (8009e44 <__malloc_lock+0x8>)
 8009e3e:	f7ff bee8 	b.w	8009c12 <__retarget_lock_acquire_recursive>
 8009e42:	bf00      	nop
 8009e44:	200006fc 	.word	0x200006fc

08009e48 <__malloc_unlock>:
 8009e48:	4801      	ldr	r0, [pc, #4]	@ (8009e50 <__malloc_unlock+0x8>)
 8009e4a:	f7ff bee3 	b.w	8009c14 <__retarget_lock_release_recursive>
 8009e4e:	bf00      	nop
 8009e50:	200006fc 	.word	0x200006fc

08009e54 <__ssputs_r>:
 8009e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e58:	688e      	ldr	r6, [r1, #8]
 8009e5a:	461f      	mov	r7, r3
 8009e5c:	42be      	cmp	r6, r7
 8009e5e:	680b      	ldr	r3, [r1, #0]
 8009e60:	4682      	mov	sl, r0
 8009e62:	460c      	mov	r4, r1
 8009e64:	4690      	mov	r8, r2
 8009e66:	d82d      	bhi.n	8009ec4 <__ssputs_r+0x70>
 8009e68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e70:	d026      	beq.n	8009ec0 <__ssputs_r+0x6c>
 8009e72:	6965      	ldr	r5, [r4, #20]
 8009e74:	6909      	ldr	r1, [r1, #16]
 8009e76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e7a:	eba3 0901 	sub.w	r9, r3, r1
 8009e7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e82:	1c7b      	adds	r3, r7, #1
 8009e84:	444b      	add	r3, r9
 8009e86:	106d      	asrs	r5, r5, #1
 8009e88:	429d      	cmp	r5, r3
 8009e8a:	bf38      	it	cc
 8009e8c:	461d      	movcc	r5, r3
 8009e8e:	0553      	lsls	r3, r2, #21
 8009e90:	d527      	bpl.n	8009ee2 <__ssputs_r+0x8e>
 8009e92:	4629      	mov	r1, r5
 8009e94:	f7ff ff52 	bl	8009d3c <_malloc_r>
 8009e98:	4606      	mov	r6, r0
 8009e9a:	b360      	cbz	r0, 8009ef6 <__ssputs_r+0xa2>
 8009e9c:	6921      	ldr	r1, [r4, #16]
 8009e9e:	464a      	mov	r2, r9
 8009ea0:	f000 fba6 	bl	800a5f0 <memcpy>
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	6126      	str	r6, [r4, #16]
 8009eb2:	6165      	str	r5, [r4, #20]
 8009eb4:	444e      	add	r6, r9
 8009eb6:	eba5 0509 	sub.w	r5, r5, r9
 8009eba:	6026      	str	r6, [r4, #0]
 8009ebc:	60a5      	str	r5, [r4, #8]
 8009ebe:	463e      	mov	r6, r7
 8009ec0:	42be      	cmp	r6, r7
 8009ec2:	d900      	bls.n	8009ec6 <__ssputs_r+0x72>
 8009ec4:	463e      	mov	r6, r7
 8009ec6:	6820      	ldr	r0, [r4, #0]
 8009ec8:	4632      	mov	r2, r6
 8009eca:	4641      	mov	r1, r8
 8009ecc:	f000 fb66 	bl	800a59c <memmove>
 8009ed0:	68a3      	ldr	r3, [r4, #8]
 8009ed2:	1b9b      	subs	r3, r3, r6
 8009ed4:	60a3      	str	r3, [r4, #8]
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	4433      	add	r3, r6
 8009eda:	6023      	str	r3, [r4, #0]
 8009edc:	2000      	movs	r0, #0
 8009ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee2:	462a      	mov	r2, r5
 8009ee4:	f000 fb99 	bl	800a61a <_realloc_r>
 8009ee8:	4606      	mov	r6, r0
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d1e0      	bne.n	8009eb0 <__ssputs_r+0x5c>
 8009eee:	6921      	ldr	r1, [r4, #16]
 8009ef0:	4650      	mov	r0, sl
 8009ef2:	f7ff feaf 	bl	8009c54 <_free_r>
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	f8ca 3000 	str.w	r3, [sl]
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f02:	81a3      	strh	r3, [r4, #12]
 8009f04:	f04f 30ff 	mov.w	r0, #4294967295
 8009f08:	e7e9      	b.n	8009ede <__ssputs_r+0x8a>
	...

08009f0c <_svfiprintf_r>:
 8009f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	4698      	mov	r8, r3
 8009f12:	898b      	ldrh	r3, [r1, #12]
 8009f14:	061b      	lsls	r3, r3, #24
 8009f16:	b09d      	sub	sp, #116	@ 0x74
 8009f18:	4607      	mov	r7, r0
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	d510      	bpl.n	8009f42 <_svfiprintf_r+0x36>
 8009f20:	690b      	ldr	r3, [r1, #16]
 8009f22:	b973      	cbnz	r3, 8009f42 <_svfiprintf_r+0x36>
 8009f24:	2140      	movs	r1, #64	@ 0x40
 8009f26:	f7ff ff09 	bl	8009d3c <_malloc_r>
 8009f2a:	6028      	str	r0, [r5, #0]
 8009f2c:	6128      	str	r0, [r5, #16]
 8009f2e:	b930      	cbnz	r0, 8009f3e <_svfiprintf_r+0x32>
 8009f30:	230c      	movs	r3, #12
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	b01d      	add	sp, #116	@ 0x74
 8009f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3e:	2340      	movs	r3, #64	@ 0x40
 8009f40:	616b      	str	r3, [r5, #20]
 8009f42:	2300      	movs	r3, #0
 8009f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f46:	2320      	movs	r3, #32
 8009f48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f50:	2330      	movs	r3, #48	@ 0x30
 8009f52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a0f0 <_svfiprintf_r+0x1e4>
 8009f56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f5a:	f04f 0901 	mov.w	r9, #1
 8009f5e:	4623      	mov	r3, r4
 8009f60:	469a      	mov	sl, r3
 8009f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f66:	b10a      	cbz	r2, 8009f6c <_svfiprintf_r+0x60>
 8009f68:	2a25      	cmp	r2, #37	@ 0x25
 8009f6a:	d1f9      	bne.n	8009f60 <_svfiprintf_r+0x54>
 8009f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f70:	d00b      	beq.n	8009f8a <_svfiprintf_r+0x7e>
 8009f72:	465b      	mov	r3, fp
 8009f74:	4622      	mov	r2, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	4638      	mov	r0, r7
 8009f7a:	f7ff ff6b 	bl	8009e54 <__ssputs_r>
 8009f7e:	3001      	adds	r0, #1
 8009f80:	f000 80a7 	beq.w	800a0d2 <_svfiprintf_r+0x1c6>
 8009f84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f86:	445a      	add	r2, fp
 8009f88:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 809f 	beq.w	800a0d2 <_svfiprintf_r+0x1c6>
 8009f94:	2300      	movs	r3, #0
 8009f96:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f9e:	f10a 0a01 	add.w	sl, sl, #1
 8009fa2:	9304      	str	r3, [sp, #16]
 8009fa4:	9307      	str	r3, [sp, #28]
 8009fa6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009faa:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fac:	4654      	mov	r4, sl
 8009fae:	2205      	movs	r2, #5
 8009fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb4:	484e      	ldr	r0, [pc, #312]	@ (800a0f0 <_svfiprintf_r+0x1e4>)
 8009fb6:	f7f6 f94b 	bl	8000250 <memchr>
 8009fba:	9a04      	ldr	r2, [sp, #16]
 8009fbc:	b9d8      	cbnz	r0, 8009ff6 <_svfiprintf_r+0xea>
 8009fbe:	06d0      	lsls	r0, r2, #27
 8009fc0:	bf44      	itt	mi
 8009fc2:	2320      	movmi	r3, #32
 8009fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fc8:	0711      	lsls	r1, r2, #28
 8009fca:	bf44      	itt	mi
 8009fcc:	232b      	movmi	r3, #43	@ 0x2b
 8009fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fd8:	d015      	beq.n	800a006 <_svfiprintf_r+0xfa>
 8009fda:	9a07      	ldr	r2, [sp, #28]
 8009fdc:	4654      	mov	r4, sl
 8009fde:	2000      	movs	r0, #0
 8009fe0:	f04f 0c0a 	mov.w	ip, #10
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fea:	3b30      	subs	r3, #48	@ 0x30
 8009fec:	2b09      	cmp	r3, #9
 8009fee:	d94b      	bls.n	800a088 <_svfiprintf_r+0x17c>
 8009ff0:	b1b0      	cbz	r0, 800a020 <_svfiprintf_r+0x114>
 8009ff2:	9207      	str	r2, [sp, #28]
 8009ff4:	e014      	b.n	800a020 <_svfiprintf_r+0x114>
 8009ff6:	eba0 0308 	sub.w	r3, r0, r8
 8009ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8009ffe:	4313      	orrs	r3, r2
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	46a2      	mov	sl, r4
 800a004:	e7d2      	b.n	8009fac <_svfiprintf_r+0xa0>
 800a006:	9b03      	ldr	r3, [sp, #12]
 800a008:	1d19      	adds	r1, r3, #4
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	9103      	str	r1, [sp, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	bfbb      	ittet	lt
 800a012:	425b      	neglt	r3, r3
 800a014:	f042 0202 	orrlt.w	r2, r2, #2
 800a018:	9307      	strge	r3, [sp, #28]
 800a01a:	9307      	strlt	r3, [sp, #28]
 800a01c:	bfb8      	it	lt
 800a01e:	9204      	strlt	r2, [sp, #16]
 800a020:	7823      	ldrb	r3, [r4, #0]
 800a022:	2b2e      	cmp	r3, #46	@ 0x2e
 800a024:	d10a      	bne.n	800a03c <_svfiprintf_r+0x130>
 800a026:	7863      	ldrb	r3, [r4, #1]
 800a028:	2b2a      	cmp	r3, #42	@ 0x2a
 800a02a:	d132      	bne.n	800a092 <_svfiprintf_r+0x186>
 800a02c:	9b03      	ldr	r3, [sp, #12]
 800a02e:	1d1a      	adds	r2, r3, #4
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	9203      	str	r2, [sp, #12]
 800a034:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a038:	3402      	adds	r4, #2
 800a03a:	9305      	str	r3, [sp, #20]
 800a03c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a100 <_svfiprintf_r+0x1f4>
 800a040:	7821      	ldrb	r1, [r4, #0]
 800a042:	2203      	movs	r2, #3
 800a044:	4650      	mov	r0, sl
 800a046:	f7f6 f903 	bl	8000250 <memchr>
 800a04a:	b138      	cbz	r0, 800a05c <_svfiprintf_r+0x150>
 800a04c:	9b04      	ldr	r3, [sp, #16]
 800a04e:	eba0 000a 	sub.w	r0, r0, sl
 800a052:	2240      	movs	r2, #64	@ 0x40
 800a054:	4082      	lsls	r2, r0
 800a056:	4313      	orrs	r3, r2
 800a058:	3401      	adds	r4, #1
 800a05a:	9304      	str	r3, [sp, #16]
 800a05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a060:	4824      	ldr	r0, [pc, #144]	@ (800a0f4 <_svfiprintf_r+0x1e8>)
 800a062:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a066:	2206      	movs	r2, #6
 800a068:	f7f6 f8f2 	bl	8000250 <memchr>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d036      	beq.n	800a0de <_svfiprintf_r+0x1d2>
 800a070:	4b21      	ldr	r3, [pc, #132]	@ (800a0f8 <_svfiprintf_r+0x1ec>)
 800a072:	bb1b      	cbnz	r3, 800a0bc <_svfiprintf_r+0x1b0>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	3307      	adds	r3, #7
 800a078:	f023 0307 	bic.w	r3, r3, #7
 800a07c:	3308      	adds	r3, #8
 800a07e:	9303      	str	r3, [sp, #12]
 800a080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a082:	4433      	add	r3, r6
 800a084:	9309      	str	r3, [sp, #36]	@ 0x24
 800a086:	e76a      	b.n	8009f5e <_svfiprintf_r+0x52>
 800a088:	fb0c 3202 	mla	r2, ip, r2, r3
 800a08c:	460c      	mov	r4, r1
 800a08e:	2001      	movs	r0, #1
 800a090:	e7a8      	b.n	8009fe4 <_svfiprintf_r+0xd8>
 800a092:	2300      	movs	r3, #0
 800a094:	3401      	adds	r4, #1
 800a096:	9305      	str	r3, [sp, #20]
 800a098:	4619      	mov	r1, r3
 800a09a:	f04f 0c0a 	mov.w	ip, #10
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0a4:	3a30      	subs	r2, #48	@ 0x30
 800a0a6:	2a09      	cmp	r2, #9
 800a0a8:	d903      	bls.n	800a0b2 <_svfiprintf_r+0x1a6>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0c6      	beq.n	800a03c <_svfiprintf_r+0x130>
 800a0ae:	9105      	str	r1, [sp, #20]
 800a0b0:	e7c4      	b.n	800a03c <_svfiprintf_r+0x130>
 800a0b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e7f0      	b.n	800a09e <_svfiprintf_r+0x192>
 800a0bc:	ab03      	add	r3, sp, #12
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	462a      	mov	r2, r5
 800a0c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a0fc <_svfiprintf_r+0x1f0>)
 800a0c4:	a904      	add	r1, sp, #16
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	f3af 8000 	nop.w
 800a0cc:	1c42      	adds	r2, r0, #1
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	d1d6      	bne.n	800a080 <_svfiprintf_r+0x174>
 800a0d2:	89ab      	ldrh	r3, [r5, #12]
 800a0d4:	065b      	lsls	r3, r3, #25
 800a0d6:	f53f af2d 	bmi.w	8009f34 <_svfiprintf_r+0x28>
 800a0da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0dc:	e72c      	b.n	8009f38 <_svfiprintf_r+0x2c>
 800a0de:	ab03      	add	r3, sp, #12
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	462a      	mov	r2, r5
 800a0e4:	4b05      	ldr	r3, [pc, #20]	@ (800a0fc <_svfiprintf_r+0x1f0>)
 800a0e6:	a904      	add	r1, sp, #16
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	f000 f879 	bl	800a1e0 <_printf_i>
 800a0ee:	e7ed      	b.n	800a0cc <_svfiprintf_r+0x1c0>
 800a0f0:	0800afa2 	.word	0x0800afa2
 800a0f4:	0800afac 	.word	0x0800afac
 800a0f8:	00000000 	.word	0x00000000
 800a0fc:	08009e55 	.word	0x08009e55
 800a100:	0800afa8 	.word	0x0800afa8

0800a104 <_printf_common>:
 800a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a108:	4616      	mov	r6, r2
 800a10a:	4698      	mov	r8, r3
 800a10c:	688a      	ldr	r2, [r1, #8]
 800a10e:	690b      	ldr	r3, [r1, #16]
 800a110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a114:	4293      	cmp	r3, r2
 800a116:	bfb8      	it	lt
 800a118:	4613      	movlt	r3, r2
 800a11a:	6033      	str	r3, [r6, #0]
 800a11c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a120:	4607      	mov	r7, r0
 800a122:	460c      	mov	r4, r1
 800a124:	b10a      	cbz	r2, 800a12a <_printf_common+0x26>
 800a126:	3301      	adds	r3, #1
 800a128:	6033      	str	r3, [r6, #0]
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	0699      	lsls	r1, r3, #26
 800a12e:	bf42      	ittt	mi
 800a130:	6833      	ldrmi	r3, [r6, #0]
 800a132:	3302      	addmi	r3, #2
 800a134:	6033      	strmi	r3, [r6, #0]
 800a136:	6825      	ldr	r5, [r4, #0]
 800a138:	f015 0506 	ands.w	r5, r5, #6
 800a13c:	d106      	bne.n	800a14c <_printf_common+0x48>
 800a13e:	f104 0a19 	add.w	sl, r4, #25
 800a142:	68e3      	ldr	r3, [r4, #12]
 800a144:	6832      	ldr	r2, [r6, #0]
 800a146:	1a9b      	subs	r3, r3, r2
 800a148:	42ab      	cmp	r3, r5
 800a14a:	dc26      	bgt.n	800a19a <_printf_common+0x96>
 800a14c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a150:	6822      	ldr	r2, [r4, #0]
 800a152:	3b00      	subs	r3, #0
 800a154:	bf18      	it	ne
 800a156:	2301      	movne	r3, #1
 800a158:	0692      	lsls	r2, r2, #26
 800a15a:	d42b      	bmi.n	800a1b4 <_printf_common+0xb0>
 800a15c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a160:	4641      	mov	r1, r8
 800a162:	4638      	mov	r0, r7
 800a164:	47c8      	blx	r9
 800a166:	3001      	adds	r0, #1
 800a168:	d01e      	beq.n	800a1a8 <_printf_common+0xa4>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	6922      	ldr	r2, [r4, #16]
 800a16e:	f003 0306 	and.w	r3, r3, #6
 800a172:	2b04      	cmp	r3, #4
 800a174:	bf02      	ittt	eq
 800a176:	68e5      	ldreq	r5, [r4, #12]
 800a178:	6833      	ldreq	r3, [r6, #0]
 800a17a:	1aed      	subeq	r5, r5, r3
 800a17c:	68a3      	ldr	r3, [r4, #8]
 800a17e:	bf0c      	ite	eq
 800a180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a184:	2500      	movne	r5, #0
 800a186:	4293      	cmp	r3, r2
 800a188:	bfc4      	itt	gt
 800a18a:	1a9b      	subgt	r3, r3, r2
 800a18c:	18ed      	addgt	r5, r5, r3
 800a18e:	2600      	movs	r6, #0
 800a190:	341a      	adds	r4, #26
 800a192:	42b5      	cmp	r5, r6
 800a194:	d11a      	bne.n	800a1cc <_printf_common+0xc8>
 800a196:	2000      	movs	r0, #0
 800a198:	e008      	b.n	800a1ac <_printf_common+0xa8>
 800a19a:	2301      	movs	r3, #1
 800a19c:	4652      	mov	r2, sl
 800a19e:	4641      	mov	r1, r8
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	47c8      	blx	r9
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d103      	bne.n	800a1b0 <_printf_common+0xac>
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b0:	3501      	adds	r5, #1
 800a1b2:	e7c6      	b.n	800a142 <_printf_common+0x3e>
 800a1b4:	18e1      	adds	r1, r4, r3
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	2030      	movs	r0, #48	@ 0x30
 800a1ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1be:	4422      	add	r2, r4
 800a1c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	e7c7      	b.n	800a15c <_printf_common+0x58>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	4641      	mov	r1, r8
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	47c8      	blx	r9
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d0e6      	beq.n	800a1a8 <_printf_common+0xa4>
 800a1da:	3601      	adds	r6, #1
 800a1dc:	e7d9      	b.n	800a192 <_printf_common+0x8e>
	...

0800a1e0 <_printf_i>:
 800a1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	7e0f      	ldrb	r7, [r1, #24]
 800a1e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1e8:	2f78      	cmp	r7, #120	@ 0x78
 800a1ea:	4691      	mov	r9, r2
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	469a      	mov	sl, r3
 800a1f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a1f6:	d807      	bhi.n	800a208 <_printf_i+0x28>
 800a1f8:	2f62      	cmp	r7, #98	@ 0x62
 800a1fa:	d80a      	bhi.n	800a212 <_printf_i+0x32>
 800a1fc:	2f00      	cmp	r7, #0
 800a1fe:	f000 80d2 	beq.w	800a3a6 <_printf_i+0x1c6>
 800a202:	2f58      	cmp	r7, #88	@ 0x58
 800a204:	f000 80b9 	beq.w	800a37a <_printf_i+0x19a>
 800a208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a20c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a210:	e03a      	b.n	800a288 <_printf_i+0xa8>
 800a212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a216:	2b15      	cmp	r3, #21
 800a218:	d8f6      	bhi.n	800a208 <_printf_i+0x28>
 800a21a:	a101      	add	r1, pc, #4	@ (adr r1, 800a220 <_printf_i+0x40>)
 800a21c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a220:	0800a279 	.word	0x0800a279
 800a224:	0800a28d 	.word	0x0800a28d
 800a228:	0800a209 	.word	0x0800a209
 800a22c:	0800a209 	.word	0x0800a209
 800a230:	0800a209 	.word	0x0800a209
 800a234:	0800a209 	.word	0x0800a209
 800a238:	0800a28d 	.word	0x0800a28d
 800a23c:	0800a209 	.word	0x0800a209
 800a240:	0800a209 	.word	0x0800a209
 800a244:	0800a209 	.word	0x0800a209
 800a248:	0800a209 	.word	0x0800a209
 800a24c:	0800a38d 	.word	0x0800a38d
 800a250:	0800a2b7 	.word	0x0800a2b7
 800a254:	0800a347 	.word	0x0800a347
 800a258:	0800a209 	.word	0x0800a209
 800a25c:	0800a209 	.word	0x0800a209
 800a260:	0800a3af 	.word	0x0800a3af
 800a264:	0800a209 	.word	0x0800a209
 800a268:	0800a2b7 	.word	0x0800a2b7
 800a26c:	0800a209 	.word	0x0800a209
 800a270:	0800a209 	.word	0x0800a209
 800a274:	0800a34f 	.word	0x0800a34f
 800a278:	6833      	ldr	r3, [r6, #0]
 800a27a:	1d1a      	adds	r2, r3, #4
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	6032      	str	r2, [r6, #0]
 800a280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a288:	2301      	movs	r3, #1
 800a28a:	e09d      	b.n	800a3c8 <_printf_i+0x1e8>
 800a28c:	6833      	ldr	r3, [r6, #0]
 800a28e:	6820      	ldr	r0, [r4, #0]
 800a290:	1d19      	adds	r1, r3, #4
 800a292:	6031      	str	r1, [r6, #0]
 800a294:	0606      	lsls	r6, r0, #24
 800a296:	d501      	bpl.n	800a29c <_printf_i+0xbc>
 800a298:	681d      	ldr	r5, [r3, #0]
 800a29a:	e003      	b.n	800a2a4 <_printf_i+0xc4>
 800a29c:	0645      	lsls	r5, r0, #25
 800a29e:	d5fb      	bpl.n	800a298 <_printf_i+0xb8>
 800a2a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2a4:	2d00      	cmp	r5, #0
 800a2a6:	da03      	bge.n	800a2b0 <_printf_i+0xd0>
 800a2a8:	232d      	movs	r3, #45	@ 0x2d
 800a2aa:	426d      	negs	r5, r5
 800a2ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2b0:	4859      	ldr	r0, [pc, #356]	@ (800a418 <_printf_i+0x238>)
 800a2b2:	230a      	movs	r3, #10
 800a2b4:	e011      	b.n	800a2da <_printf_i+0xfa>
 800a2b6:	6821      	ldr	r1, [r4, #0]
 800a2b8:	6833      	ldr	r3, [r6, #0]
 800a2ba:	0608      	lsls	r0, r1, #24
 800a2bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2c0:	d402      	bmi.n	800a2c8 <_printf_i+0xe8>
 800a2c2:	0649      	lsls	r1, r1, #25
 800a2c4:	bf48      	it	mi
 800a2c6:	b2ad      	uxthmi	r5, r5
 800a2c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2ca:	4853      	ldr	r0, [pc, #332]	@ (800a418 <_printf_i+0x238>)
 800a2cc:	6033      	str	r3, [r6, #0]
 800a2ce:	bf14      	ite	ne
 800a2d0:	230a      	movne	r3, #10
 800a2d2:	2308      	moveq	r3, #8
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2da:	6866      	ldr	r6, [r4, #4]
 800a2dc:	60a6      	str	r6, [r4, #8]
 800a2de:	2e00      	cmp	r6, #0
 800a2e0:	bfa2      	ittt	ge
 800a2e2:	6821      	ldrge	r1, [r4, #0]
 800a2e4:	f021 0104 	bicge.w	r1, r1, #4
 800a2e8:	6021      	strge	r1, [r4, #0]
 800a2ea:	b90d      	cbnz	r5, 800a2f0 <_printf_i+0x110>
 800a2ec:	2e00      	cmp	r6, #0
 800a2ee:	d04b      	beq.n	800a388 <_printf_i+0x1a8>
 800a2f0:	4616      	mov	r6, r2
 800a2f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2f6:	fb03 5711 	mls	r7, r3, r1, r5
 800a2fa:	5dc7      	ldrb	r7, [r0, r7]
 800a2fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a300:	462f      	mov	r7, r5
 800a302:	42bb      	cmp	r3, r7
 800a304:	460d      	mov	r5, r1
 800a306:	d9f4      	bls.n	800a2f2 <_printf_i+0x112>
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d10b      	bne.n	800a324 <_printf_i+0x144>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	07df      	lsls	r7, r3, #31
 800a310:	d508      	bpl.n	800a324 <_printf_i+0x144>
 800a312:	6923      	ldr	r3, [r4, #16]
 800a314:	6861      	ldr	r1, [r4, #4]
 800a316:	4299      	cmp	r1, r3
 800a318:	bfde      	ittt	le
 800a31a:	2330      	movle	r3, #48	@ 0x30
 800a31c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a320:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a324:	1b92      	subs	r2, r2, r6
 800a326:	6122      	str	r2, [r4, #16]
 800a328:	f8cd a000 	str.w	sl, [sp]
 800a32c:	464b      	mov	r3, r9
 800a32e:	aa03      	add	r2, sp, #12
 800a330:	4621      	mov	r1, r4
 800a332:	4640      	mov	r0, r8
 800a334:	f7ff fee6 	bl	800a104 <_printf_common>
 800a338:	3001      	adds	r0, #1
 800a33a:	d14a      	bne.n	800a3d2 <_printf_i+0x1f2>
 800a33c:	f04f 30ff 	mov.w	r0, #4294967295
 800a340:	b004      	add	sp, #16
 800a342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	f043 0320 	orr.w	r3, r3, #32
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	4833      	ldr	r0, [pc, #204]	@ (800a41c <_printf_i+0x23c>)
 800a350:	2778      	movs	r7, #120	@ 0x78
 800a352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	6831      	ldr	r1, [r6, #0]
 800a35a:	061f      	lsls	r7, r3, #24
 800a35c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a360:	d402      	bmi.n	800a368 <_printf_i+0x188>
 800a362:	065f      	lsls	r7, r3, #25
 800a364:	bf48      	it	mi
 800a366:	b2ad      	uxthmi	r5, r5
 800a368:	6031      	str	r1, [r6, #0]
 800a36a:	07d9      	lsls	r1, r3, #31
 800a36c:	bf44      	itt	mi
 800a36e:	f043 0320 	orrmi.w	r3, r3, #32
 800a372:	6023      	strmi	r3, [r4, #0]
 800a374:	b11d      	cbz	r5, 800a37e <_printf_i+0x19e>
 800a376:	2310      	movs	r3, #16
 800a378:	e7ac      	b.n	800a2d4 <_printf_i+0xf4>
 800a37a:	4827      	ldr	r0, [pc, #156]	@ (800a418 <_printf_i+0x238>)
 800a37c:	e7e9      	b.n	800a352 <_printf_i+0x172>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	f023 0320 	bic.w	r3, r3, #32
 800a384:	6023      	str	r3, [r4, #0]
 800a386:	e7f6      	b.n	800a376 <_printf_i+0x196>
 800a388:	4616      	mov	r6, r2
 800a38a:	e7bd      	b.n	800a308 <_printf_i+0x128>
 800a38c:	6833      	ldr	r3, [r6, #0]
 800a38e:	6825      	ldr	r5, [r4, #0]
 800a390:	6961      	ldr	r1, [r4, #20]
 800a392:	1d18      	adds	r0, r3, #4
 800a394:	6030      	str	r0, [r6, #0]
 800a396:	062e      	lsls	r6, r5, #24
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	d501      	bpl.n	800a3a0 <_printf_i+0x1c0>
 800a39c:	6019      	str	r1, [r3, #0]
 800a39e:	e002      	b.n	800a3a6 <_printf_i+0x1c6>
 800a3a0:	0668      	lsls	r0, r5, #25
 800a3a2:	d5fb      	bpl.n	800a39c <_printf_i+0x1bc>
 800a3a4:	8019      	strh	r1, [r3, #0]
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	6123      	str	r3, [r4, #16]
 800a3aa:	4616      	mov	r6, r2
 800a3ac:	e7bc      	b.n	800a328 <_printf_i+0x148>
 800a3ae:	6833      	ldr	r3, [r6, #0]
 800a3b0:	1d1a      	adds	r2, r3, #4
 800a3b2:	6032      	str	r2, [r6, #0]
 800a3b4:	681e      	ldr	r6, [r3, #0]
 800a3b6:	6862      	ldr	r2, [r4, #4]
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7f5 ff48 	bl	8000250 <memchr>
 800a3c0:	b108      	cbz	r0, 800a3c6 <_printf_i+0x1e6>
 800a3c2:	1b80      	subs	r0, r0, r6
 800a3c4:	6060      	str	r0, [r4, #4]
 800a3c6:	6863      	ldr	r3, [r4, #4]
 800a3c8:	6123      	str	r3, [r4, #16]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3d0:	e7aa      	b.n	800a328 <_printf_i+0x148>
 800a3d2:	6923      	ldr	r3, [r4, #16]
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	4640      	mov	r0, r8
 800a3da:	47d0      	blx	sl
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d0ad      	beq.n	800a33c <_printf_i+0x15c>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	079b      	lsls	r3, r3, #30
 800a3e4:	d413      	bmi.n	800a40e <_printf_i+0x22e>
 800a3e6:	68e0      	ldr	r0, [r4, #12]
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	4298      	cmp	r0, r3
 800a3ec:	bfb8      	it	lt
 800a3ee:	4618      	movlt	r0, r3
 800a3f0:	e7a6      	b.n	800a340 <_printf_i+0x160>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	47d0      	blx	sl
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	d09d      	beq.n	800a33c <_printf_i+0x15c>
 800a400:	3501      	adds	r5, #1
 800a402:	68e3      	ldr	r3, [r4, #12]
 800a404:	9903      	ldr	r1, [sp, #12]
 800a406:	1a5b      	subs	r3, r3, r1
 800a408:	42ab      	cmp	r3, r5
 800a40a:	dcf2      	bgt.n	800a3f2 <_printf_i+0x212>
 800a40c:	e7eb      	b.n	800a3e6 <_printf_i+0x206>
 800a40e:	2500      	movs	r5, #0
 800a410:	f104 0619 	add.w	r6, r4, #25
 800a414:	e7f5      	b.n	800a402 <_printf_i+0x222>
 800a416:	bf00      	nop
 800a418:	0800afb3 	.word	0x0800afb3
 800a41c:	0800afc4 	.word	0x0800afc4

0800a420 <__sflush_r>:
 800a420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a428:	0716      	lsls	r6, r2, #28
 800a42a:	4605      	mov	r5, r0
 800a42c:	460c      	mov	r4, r1
 800a42e:	d454      	bmi.n	800a4da <__sflush_r+0xba>
 800a430:	684b      	ldr	r3, [r1, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	dc02      	bgt.n	800a43c <__sflush_r+0x1c>
 800a436:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a438:	2b00      	cmp	r3, #0
 800a43a:	dd48      	ble.n	800a4ce <__sflush_r+0xae>
 800a43c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a43e:	2e00      	cmp	r6, #0
 800a440:	d045      	beq.n	800a4ce <__sflush_r+0xae>
 800a442:	2300      	movs	r3, #0
 800a444:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a448:	682f      	ldr	r7, [r5, #0]
 800a44a:	6a21      	ldr	r1, [r4, #32]
 800a44c:	602b      	str	r3, [r5, #0]
 800a44e:	d030      	beq.n	800a4b2 <__sflush_r+0x92>
 800a450:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	0759      	lsls	r1, r3, #29
 800a456:	d505      	bpl.n	800a464 <__sflush_r+0x44>
 800a458:	6863      	ldr	r3, [r4, #4]
 800a45a:	1ad2      	subs	r2, r2, r3
 800a45c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a45e:	b10b      	cbz	r3, 800a464 <__sflush_r+0x44>
 800a460:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a462:	1ad2      	subs	r2, r2, r3
 800a464:	2300      	movs	r3, #0
 800a466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a468:	6a21      	ldr	r1, [r4, #32]
 800a46a:	4628      	mov	r0, r5
 800a46c:	47b0      	blx	r6
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	d106      	bne.n	800a482 <__sflush_r+0x62>
 800a474:	6829      	ldr	r1, [r5, #0]
 800a476:	291d      	cmp	r1, #29
 800a478:	d82b      	bhi.n	800a4d2 <__sflush_r+0xb2>
 800a47a:	4a2a      	ldr	r2, [pc, #168]	@ (800a524 <__sflush_r+0x104>)
 800a47c:	410a      	asrs	r2, r1
 800a47e:	07d6      	lsls	r6, r2, #31
 800a480:	d427      	bmi.n	800a4d2 <__sflush_r+0xb2>
 800a482:	2200      	movs	r2, #0
 800a484:	6062      	str	r2, [r4, #4]
 800a486:	04d9      	lsls	r1, r3, #19
 800a488:	6922      	ldr	r2, [r4, #16]
 800a48a:	6022      	str	r2, [r4, #0]
 800a48c:	d504      	bpl.n	800a498 <__sflush_r+0x78>
 800a48e:	1c42      	adds	r2, r0, #1
 800a490:	d101      	bne.n	800a496 <__sflush_r+0x76>
 800a492:	682b      	ldr	r3, [r5, #0]
 800a494:	b903      	cbnz	r3, 800a498 <__sflush_r+0x78>
 800a496:	6560      	str	r0, [r4, #84]	@ 0x54
 800a498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a49a:	602f      	str	r7, [r5, #0]
 800a49c:	b1b9      	cbz	r1, 800a4ce <__sflush_r+0xae>
 800a49e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4a2:	4299      	cmp	r1, r3
 800a4a4:	d002      	beq.n	800a4ac <__sflush_r+0x8c>
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f7ff fbd4 	bl	8009c54 <_free_r>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4b0:	e00d      	b.n	800a4ce <__sflush_r+0xae>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	47b0      	blx	r6
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	1c50      	adds	r0, r2, #1
 800a4bc:	d1c9      	bne.n	800a452 <__sflush_r+0x32>
 800a4be:	682b      	ldr	r3, [r5, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d0c6      	beq.n	800a452 <__sflush_r+0x32>
 800a4c4:	2b1d      	cmp	r3, #29
 800a4c6:	d001      	beq.n	800a4cc <__sflush_r+0xac>
 800a4c8:	2b16      	cmp	r3, #22
 800a4ca:	d11e      	bne.n	800a50a <__sflush_r+0xea>
 800a4cc:	602f      	str	r7, [r5, #0]
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	e022      	b.n	800a518 <__sflush_r+0xf8>
 800a4d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4d6:	b21b      	sxth	r3, r3
 800a4d8:	e01b      	b.n	800a512 <__sflush_r+0xf2>
 800a4da:	690f      	ldr	r7, [r1, #16]
 800a4dc:	2f00      	cmp	r7, #0
 800a4de:	d0f6      	beq.n	800a4ce <__sflush_r+0xae>
 800a4e0:	0793      	lsls	r3, r2, #30
 800a4e2:	680e      	ldr	r6, [r1, #0]
 800a4e4:	bf08      	it	eq
 800a4e6:	694b      	ldreq	r3, [r1, #20]
 800a4e8:	600f      	str	r7, [r1, #0]
 800a4ea:	bf18      	it	ne
 800a4ec:	2300      	movne	r3, #0
 800a4ee:	eba6 0807 	sub.w	r8, r6, r7
 800a4f2:	608b      	str	r3, [r1, #8]
 800a4f4:	f1b8 0f00 	cmp.w	r8, #0
 800a4f8:	dde9      	ble.n	800a4ce <__sflush_r+0xae>
 800a4fa:	6a21      	ldr	r1, [r4, #32]
 800a4fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a4fe:	4643      	mov	r3, r8
 800a500:	463a      	mov	r2, r7
 800a502:	4628      	mov	r0, r5
 800a504:	47b0      	blx	r6
 800a506:	2800      	cmp	r0, #0
 800a508:	dc08      	bgt.n	800a51c <__sflush_r+0xfc>
 800a50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a50e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a512:	81a3      	strh	r3, [r4, #12]
 800a514:	f04f 30ff 	mov.w	r0, #4294967295
 800a518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a51c:	4407      	add	r7, r0
 800a51e:	eba8 0800 	sub.w	r8, r8, r0
 800a522:	e7e7      	b.n	800a4f4 <__sflush_r+0xd4>
 800a524:	dfbffffe 	.word	0xdfbffffe

0800a528 <_fflush_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	690b      	ldr	r3, [r1, #16]
 800a52c:	4605      	mov	r5, r0
 800a52e:	460c      	mov	r4, r1
 800a530:	b913      	cbnz	r3, 800a538 <_fflush_r+0x10>
 800a532:	2500      	movs	r5, #0
 800a534:	4628      	mov	r0, r5
 800a536:	bd38      	pop	{r3, r4, r5, pc}
 800a538:	b118      	cbz	r0, 800a542 <_fflush_r+0x1a>
 800a53a:	6a03      	ldr	r3, [r0, #32]
 800a53c:	b90b      	cbnz	r3, 800a542 <_fflush_r+0x1a>
 800a53e:	f7ff f9e5 	bl	800990c <__sinit>
 800a542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0f3      	beq.n	800a532 <_fflush_r+0xa>
 800a54a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a54c:	07d0      	lsls	r0, r2, #31
 800a54e:	d404      	bmi.n	800a55a <_fflush_r+0x32>
 800a550:	0599      	lsls	r1, r3, #22
 800a552:	d402      	bmi.n	800a55a <_fflush_r+0x32>
 800a554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a556:	f7ff fb5c 	bl	8009c12 <__retarget_lock_acquire_recursive>
 800a55a:	4628      	mov	r0, r5
 800a55c:	4621      	mov	r1, r4
 800a55e:	f7ff ff5f 	bl	800a420 <__sflush_r>
 800a562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a564:	07da      	lsls	r2, r3, #31
 800a566:	4605      	mov	r5, r0
 800a568:	d4e4      	bmi.n	800a534 <_fflush_r+0xc>
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	059b      	lsls	r3, r3, #22
 800a56e:	d4e1      	bmi.n	800a534 <_fflush_r+0xc>
 800a570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a572:	f7ff fb4f 	bl	8009c14 <__retarget_lock_release_recursive>
 800a576:	e7dd      	b.n	800a534 <_fflush_r+0xc>

0800a578 <fiprintf>:
 800a578:	b40e      	push	{r1, r2, r3}
 800a57a:	b503      	push	{r0, r1, lr}
 800a57c:	4601      	mov	r1, r0
 800a57e:	ab03      	add	r3, sp, #12
 800a580:	4805      	ldr	r0, [pc, #20]	@ (800a598 <fiprintf+0x20>)
 800a582:	f853 2b04 	ldr.w	r2, [r3], #4
 800a586:	6800      	ldr	r0, [r0, #0]
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	f000 f89d 	bl	800a6c8 <_vfiprintf_r>
 800a58e:	b002      	add	sp, #8
 800a590:	f85d eb04 	ldr.w	lr, [sp], #4
 800a594:	b003      	add	sp, #12
 800a596:	4770      	bx	lr
 800a598:	200000d4 	.word	0x200000d4

0800a59c <memmove>:
 800a59c:	4288      	cmp	r0, r1
 800a59e:	b510      	push	{r4, lr}
 800a5a0:	eb01 0402 	add.w	r4, r1, r2
 800a5a4:	d902      	bls.n	800a5ac <memmove+0x10>
 800a5a6:	4284      	cmp	r4, r0
 800a5a8:	4623      	mov	r3, r4
 800a5aa:	d807      	bhi.n	800a5bc <memmove+0x20>
 800a5ac:	1e43      	subs	r3, r0, #1
 800a5ae:	42a1      	cmp	r1, r4
 800a5b0:	d008      	beq.n	800a5c4 <memmove+0x28>
 800a5b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5ba:	e7f8      	b.n	800a5ae <memmove+0x12>
 800a5bc:	4402      	add	r2, r0
 800a5be:	4601      	mov	r1, r0
 800a5c0:	428a      	cmp	r2, r1
 800a5c2:	d100      	bne.n	800a5c6 <memmove+0x2a>
 800a5c4:	bd10      	pop	{r4, pc}
 800a5c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5ce:	e7f7      	b.n	800a5c0 <memmove+0x24>

0800a5d0 <_sbrk_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4d06      	ldr	r5, [pc, #24]	@ (800a5ec <_sbrk_r+0x1c>)
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	602b      	str	r3, [r5, #0]
 800a5dc:	f7f6 fd7e 	bl	80010dc <_sbrk>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_sbrk_r+0x1a>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_sbrk_r+0x1a>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	200006f8 	.word	0x200006f8

0800a5f0 <memcpy>:
 800a5f0:	440a      	add	r2, r1
 800a5f2:	4291      	cmp	r1, r2
 800a5f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5f8:	d100      	bne.n	800a5fc <memcpy+0xc>
 800a5fa:	4770      	bx	lr
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a602:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a606:	4291      	cmp	r1, r2
 800a608:	d1f9      	bne.n	800a5fe <memcpy+0xe>
 800a60a:	bd10      	pop	{r4, pc}

0800a60c <abort>:
 800a60c:	b508      	push	{r3, lr}
 800a60e:	2006      	movs	r0, #6
 800a610:	f000 fa2e 	bl	800aa70 <raise>
 800a614:	2001      	movs	r0, #1
 800a616:	f7f6 fce9 	bl	8000fec <_exit>

0800a61a <_realloc_r>:
 800a61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61e:	4680      	mov	r8, r0
 800a620:	4615      	mov	r5, r2
 800a622:	460c      	mov	r4, r1
 800a624:	b921      	cbnz	r1, 800a630 <_realloc_r+0x16>
 800a626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a62a:	4611      	mov	r1, r2
 800a62c:	f7ff bb86 	b.w	8009d3c <_malloc_r>
 800a630:	b92a      	cbnz	r2, 800a63e <_realloc_r+0x24>
 800a632:	f7ff fb0f 	bl	8009c54 <_free_r>
 800a636:	2400      	movs	r4, #0
 800a638:	4620      	mov	r0, r4
 800a63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a63e:	f000 fa33 	bl	800aaa8 <_malloc_usable_size_r>
 800a642:	4285      	cmp	r5, r0
 800a644:	4606      	mov	r6, r0
 800a646:	d802      	bhi.n	800a64e <_realloc_r+0x34>
 800a648:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a64c:	d8f4      	bhi.n	800a638 <_realloc_r+0x1e>
 800a64e:	4629      	mov	r1, r5
 800a650:	4640      	mov	r0, r8
 800a652:	f7ff fb73 	bl	8009d3c <_malloc_r>
 800a656:	4607      	mov	r7, r0
 800a658:	2800      	cmp	r0, #0
 800a65a:	d0ec      	beq.n	800a636 <_realloc_r+0x1c>
 800a65c:	42b5      	cmp	r5, r6
 800a65e:	462a      	mov	r2, r5
 800a660:	4621      	mov	r1, r4
 800a662:	bf28      	it	cs
 800a664:	4632      	movcs	r2, r6
 800a666:	f7ff ffc3 	bl	800a5f0 <memcpy>
 800a66a:	4621      	mov	r1, r4
 800a66c:	4640      	mov	r0, r8
 800a66e:	f7ff faf1 	bl	8009c54 <_free_r>
 800a672:	463c      	mov	r4, r7
 800a674:	e7e0      	b.n	800a638 <_realloc_r+0x1e>

0800a676 <__sfputc_r>:
 800a676:	6893      	ldr	r3, [r2, #8]
 800a678:	3b01      	subs	r3, #1
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	b410      	push	{r4}
 800a67e:	6093      	str	r3, [r2, #8]
 800a680:	da08      	bge.n	800a694 <__sfputc_r+0x1e>
 800a682:	6994      	ldr	r4, [r2, #24]
 800a684:	42a3      	cmp	r3, r4
 800a686:	db01      	blt.n	800a68c <__sfputc_r+0x16>
 800a688:	290a      	cmp	r1, #10
 800a68a:	d103      	bne.n	800a694 <__sfputc_r+0x1e>
 800a68c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a690:	f000 b932 	b.w	800a8f8 <__swbuf_r>
 800a694:	6813      	ldr	r3, [r2, #0]
 800a696:	1c58      	adds	r0, r3, #1
 800a698:	6010      	str	r0, [r2, #0]
 800a69a:	7019      	strb	r1, [r3, #0]
 800a69c:	4608      	mov	r0, r1
 800a69e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <__sfputs_r>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	460f      	mov	r7, r1
 800a6aa:	4614      	mov	r4, r2
 800a6ac:	18d5      	adds	r5, r2, r3
 800a6ae:	42ac      	cmp	r4, r5
 800a6b0:	d101      	bne.n	800a6b6 <__sfputs_r+0x12>
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	e007      	b.n	800a6c6 <__sfputs_r+0x22>
 800a6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ba:	463a      	mov	r2, r7
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7ff ffda 	bl	800a676 <__sfputc_r>
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	d1f3      	bne.n	800a6ae <__sfputs_r+0xa>
 800a6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6c8 <_vfiprintf_r>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	460d      	mov	r5, r1
 800a6ce:	b09d      	sub	sp, #116	@ 0x74
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	4698      	mov	r8, r3
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	b118      	cbz	r0, 800a6e0 <_vfiprintf_r+0x18>
 800a6d8:	6a03      	ldr	r3, [r0, #32]
 800a6da:	b90b      	cbnz	r3, 800a6e0 <_vfiprintf_r+0x18>
 800a6dc:	f7ff f916 	bl	800990c <__sinit>
 800a6e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6e2:	07d9      	lsls	r1, r3, #31
 800a6e4:	d405      	bmi.n	800a6f2 <_vfiprintf_r+0x2a>
 800a6e6:	89ab      	ldrh	r3, [r5, #12]
 800a6e8:	059a      	lsls	r2, r3, #22
 800a6ea:	d402      	bmi.n	800a6f2 <_vfiprintf_r+0x2a>
 800a6ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6ee:	f7ff fa90 	bl	8009c12 <__retarget_lock_acquire_recursive>
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	071b      	lsls	r3, r3, #28
 800a6f6:	d501      	bpl.n	800a6fc <_vfiprintf_r+0x34>
 800a6f8:	692b      	ldr	r3, [r5, #16]
 800a6fa:	b99b      	cbnz	r3, 800a724 <_vfiprintf_r+0x5c>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4630      	mov	r0, r6
 800a700:	f000 f938 	bl	800a974 <__swsetup_r>
 800a704:	b170      	cbz	r0, 800a724 <_vfiprintf_r+0x5c>
 800a706:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a708:	07dc      	lsls	r4, r3, #31
 800a70a:	d504      	bpl.n	800a716 <_vfiprintf_r+0x4e>
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	b01d      	add	sp, #116	@ 0x74
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a716:	89ab      	ldrh	r3, [r5, #12]
 800a718:	0598      	lsls	r0, r3, #22
 800a71a:	d4f7      	bmi.n	800a70c <_vfiprintf_r+0x44>
 800a71c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a71e:	f7ff fa79 	bl	8009c14 <__retarget_lock_release_recursive>
 800a722:	e7f3      	b.n	800a70c <_vfiprintf_r+0x44>
 800a724:	2300      	movs	r3, #0
 800a726:	9309      	str	r3, [sp, #36]	@ 0x24
 800a728:	2320      	movs	r3, #32
 800a72a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a732:	2330      	movs	r3, #48	@ 0x30
 800a734:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8e4 <_vfiprintf_r+0x21c>
 800a738:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a73c:	f04f 0901 	mov.w	r9, #1
 800a740:	4623      	mov	r3, r4
 800a742:	469a      	mov	sl, r3
 800a744:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a748:	b10a      	cbz	r2, 800a74e <_vfiprintf_r+0x86>
 800a74a:	2a25      	cmp	r2, #37	@ 0x25
 800a74c:	d1f9      	bne.n	800a742 <_vfiprintf_r+0x7a>
 800a74e:	ebba 0b04 	subs.w	fp, sl, r4
 800a752:	d00b      	beq.n	800a76c <_vfiprintf_r+0xa4>
 800a754:	465b      	mov	r3, fp
 800a756:	4622      	mov	r2, r4
 800a758:	4629      	mov	r1, r5
 800a75a:	4630      	mov	r0, r6
 800a75c:	f7ff ffa2 	bl	800a6a4 <__sfputs_r>
 800a760:	3001      	adds	r0, #1
 800a762:	f000 80a7 	beq.w	800a8b4 <_vfiprintf_r+0x1ec>
 800a766:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a768:	445a      	add	r2, fp
 800a76a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a76c:	f89a 3000 	ldrb.w	r3, [sl]
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 809f 	beq.w	800a8b4 <_vfiprintf_r+0x1ec>
 800a776:	2300      	movs	r3, #0
 800a778:	f04f 32ff 	mov.w	r2, #4294967295
 800a77c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a780:	f10a 0a01 	add.w	sl, sl, #1
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	9307      	str	r3, [sp, #28]
 800a788:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a78c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a78e:	4654      	mov	r4, sl
 800a790:	2205      	movs	r2, #5
 800a792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a796:	4853      	ldr	r0, [pc, #332]	@ (800a8e4 <_vfiprintf_r+0x21c>)
 800a798:	f7f5 fd5a 	bl	8000250 <memchr>
 800a79c:	9a04      	ldr	r2, [sp, #16]
 800a79e:	b9d8      	cbnz	r0, 800a7d8 <_vfiprintf_r+0x110>
 800a7a0:	06d1      	lsls	r1, r2, #27
 800a7a2:	bf44      	itt	mi
 800a7a4:	2320      	movmi	r3, #32
 800a7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7aa:	0713      	lsls	r3, r2, #28
 800a7ac:	bf44      	itt	mi
 800a7ae:	232b      	movmi	r3, #43	@ 0x2b
 800a7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7ba:	d015      	beq.n	800a7e8 <_vfiprintf_r+0x120>
 800a7bc:	9a07      	ldr	r2, [sp, #28]
 800a7be:	4654      	mov	r4, sl
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	f04f 0c0a 	mov.w	ip, #10
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7cc:	3b30      	subs	r3, #48	@ 0x30
 800a7ce:	2b09      	cmp	r3, #9
 800a7d0:	d94b      	bls.n	800a86a <_vfiprintf_r+0x1a2>
 800a7d2:	b1b0      	cbz	r0, 800a802 <_vfiprintf_r+0x13a>
 800a7d4:	9207      	str	r2, [sp, #28]
 800a7d6:	e014      	b.n	800a802 <_vfiprintf_r+0x13a>
 800a7d8:	eba0 0308 	sub.w	r3, r0, r8
 800a7dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	9304      	str	r3, [sp, #16]
 800a7e4:	46a2      	mov	sl, r4
 800a7e6:	e7d2      	b.n	800a78e <_vfiprintf_r+0xc6>
 800a7e8:	9b03      	ldr	r3, [sp, #12]
 800a7ea:	1d19      	adds	r1, r3, #4
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	9103      	str	r1, [sp, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	bfbb      	ittet	lt
 800a7f4:	425b      	neglt	r3, r3
 800a7f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a7fa:	9307      	strge	r3, [sp, #28]
 800a7fc:	9307      	strlt	r3, [sp, #28]
 800a7fe:	bfb8      	it	lt
 800a800:	9204      	strlt	r2, [sp, #16]
 800a802:	7823      	ldrb	r3, [r4, #0]
 800a804:	2b2e      	cmp	r3, #46	@ 0x2e
 800a806:	d10a      	bne.n	800a81e <_vfiprintf_r+0x156>
 800a808:	7863      	ldrb	r3, [r4, #1]
 800a80a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a80c:	d132      	bne.n	800a874 <_vfiprintf_r+0x1ac>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	1d1a      	adds	r2, r3, #4
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	9203      	str	r2, [sp, #12]
 800a816:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a81a:	3402      	adds	r4, #2
 800a81c:	9305      	str	r3, [sp, #20]
 800a81e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8f4 <_vfiprintf_r+0x22c>
 800a822:	7821      	ldrb	r1, [r4, #0]
 800a824:	2203      	movs	r2, #3
 800a826:	4650      	mov	r0, sl
 800a828:	f7f5 fd12 	bl	8000250 <memchr>
 800a82c:	b138      	cbz	r0, 800a83e <_vfiprintf_r+0x176>
 800a82e:	9b04      	ldr	r3, [sp, #16]
 800a830:	eba0 000a 	sub.w	r0, r0, sl
 800a834:	2240      	movs	r2, #64	@ 0x40
 800a836:	4082      	lsls	r2, r0
 800a838:	4313      	orrs	r3, r2
 800a83a:	3401      	adds	r4, #1
 800a83c:	9304      	str	r3, [sp, #16]
 800a83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a842:	4829      	ldr	r0, [pc, #164]	@ (800a8e8 <_vfiprintf_r+0x220>)
 800a844:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a848:	2206      	movs	r2, #6
 800a84a:	f7f5 fd01 	bl	8000250 <memchr>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d03f      	beq.n	800a8d2 <_vfiprintf_r+0x20a>
 800a852:	4b26      	ldr	r3, [pc, #152]	@ (800a8ec <_vfiprintf_r+0x224>)
 800a854:	bb1b      	cbnz	r3, 800a89e <_vfiprintf_r+0x1d6>
 800a856:	9b03      	ldr	r3, [sp, #12]
 800a858:	3307      	adds	r3, #7
 800a85a:	f023 0307 	bic.w	r3, r3, #7
 800a85e:	3308      	adds	r3, #8
 800a860:	9303      	str	r3, [sp, #12]
 800a862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a864:	443b      	add	r3, r7
 800a866:	9309      	str	r3, [sp, #36]	@ 0x24
 800a868:	e76a      	b.n	800a740 <_vfiprintf_r+0x78>
 800a86a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a86e:	460c      	mov	r4, r1
 800a870:	2001      	movs	r0, #1
 800a872:	e7a8      	b.n	800a7c6 <_vfiprintf_r+0xfe>
 800a874:	2300      	movs	r3, #0
 800a876:	3401      	adds	r4, #1
 800a878:	9305      	str	r3, [sp, #20]
 800a87a:	4619      	mov	r1, r3
 800a87c:	f04f 0c0a 	mov.w	ip, #10
 800a880:	4620      	mov	r0, r4
 800a882:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a886:	3a30      	subs	r2, #48	@ 0x30
 800a888:	2a09      	cmp	r2, #9
 800a88a:	d903      	bls.n	800a894 <_vfiprintf_r+0x1cc>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0c6      	beq.n	800a81e <_vfiprintf_r+0x156>
 800a890:	9105      	str	r1, [sp, #20]
 800a892:	e7c4      	b.n	800a81e <_vfiprintf_r+0x156>
 800a894:	fb0c 2101 	mla	r1, ip, r1, r2
 800a898:	4604      	mov	r4, r0
 800a89a:	2301      	movs	r3, #1
 800a89c:	e7f0      	b.n	800a880 <_vfiprintf_r+0x1b8>
 800a89e:	ab03      	add	r3, sp, #12
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	4b12      	ldr	r3, [pc, #72]	@ (800a8f0 <_vfiprintf_r+0x228>)
 800a8a6:	a904      	add	r1, sp, #16
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f3af 8000 	nop.w
 800a8ae:	4607      	mov	r7, r0
 800a8b0:	1c78      	adds	r0, r7, #1
 800a8b2:	d1d6      	bne.n	800a862 <_vfiprintf_r+0x19a>
 800a8b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8b6:	07d9      	lsls	r1, r3, #31
 800a8b8:	d405      	bmi.n	800a8c6 <_vfiprintf_r+0x1fe>
 800a8ba:	89ab      	ldrh	r3, [r5, #12]
 800a8bc:	059a      	lsls	r2, r3, #22
 800a8be:	d402      	bmi.n	800a8c6 <_vfiprintf_r+0x1fe>
 800a8c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8c2:	f7ff f9a7 	bl	8009c14 <__retarget_lock_release_recursive>
 800a8c6:	89ab      	ldrh	r3, [r5, #12]
 800a8c8:	065b      	lsls	r3, r3, #25
 800a8ca:	f53f af1f 	bmi.w	800a70c <_vfiprintf_r+0x44>
 800a8ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8d0:	e71e      	b.n	800a710 <_vfiprintf_r+0x48>
 800a8d2:	ab03      	add	r3, sp, #12
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	4b05      	ldr	r3, [pc, #20]	@ (800a8f0 <_vfiprintf_r+0x228>)
 800a8da:	a904      	add	r1, sp, #16
 800a8dc:	4630      	mov	r0, r6
 800a8de:	f7ff fc7f 	bl	800a1e0 <_printf_i>
 800a8e2:	e7e4      	b.n	800a8ae <_vfiprintf_r+0x1e6>
 800a8e4:	0800afa2 	.word	0x0800afa2
 800a8e8:	0800afac 	.word	0x0800afac
 800a8ec:	00000000 	.word	0x00000000
 800a8f0:	0800a6a5 	.word	0x0800a6a5
 800a8f4:	0800afa8 	.word	0x0800afa8

0800a8f8 <__swbuf_r>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	460e      	mov	r6, r1
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	4605      	mov	r5, r0
 800a900:	b118      	cbz	r0, 800a90a <__swbuf_r+0x12>
 800a902:	6a03      	ldr	r3, [r0, #32]
 800a904:	b90b      	cbnz	r3, 800a90a <__swbuf_r+0x12>
 800a906:	f7ff f801 	bl	800990c <__sinit>
 800a90a:	69a3      	ldr	r3, [r4, #24]
 800a90c:	60a3      	str	r3, [r4, #8]
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	071a      	lsls	r2, r3, #28
 800a912:	d501      	bpl.n	800a918 <__swbuf_r+0x20>
 800a914:	6923      	ldr	r3, [r4, #16]
 800a916:	b943      	cbnz	r3, 800a92a <__swbuf_r+0x32>
 800a918:	4621      	mov	r1, r4
 800a91a:	4628      	mov	r0, r5
 800a91c:	f000 f82a 	bl	800a974 <__swsetup_r>
 800a920:	b118      	cbz	r0, 800a92a <__swbuf_r+0x32>
 800a922:	f04f 37ff 	mov.w	r7, #4294967295
 800a926:	4638      	mov	r0, r7
 800a928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	6922      	ldr	r2, [r4, #16]
 800a92e:	1a98      	subs	r0, r3, r2
 800a930:	6963      	ldr	r3, [r4, #20]
 800a932:	b2f6      	uxtb	r6, r6
 800a934:	4283      	cmp	r3, r0
 800a936:	4637      	mov	r7, r6
 800a938:	dc05      	bgt.n	800a946 <__swbuf_r+0x4e>
 800a93a:	4621      	mov	r1, r4
 800a93c:	4628      	mov	r0, r5
 800a93e:	f7ff fdf3 	bl	800a528 <_fflush_r>
 800a942:	2800      	cmp	r0, #0
 800a944:	d1ed      	bne.n	800a922 <__swbuf_r+0x2a>
 800a946:	68a3      	ldr	r3, [r4, #8]
 800a948:	3b01      	subs	r3, #1
 800a94a:	60a3      	str	r3, [r4, #8]
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	6022      	str	r2, [r4, #0]
 800a952:	701e      	strb	r6, [r3, #0]
 800a954:	6962      	ldr	r2, [r4, #20]
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	429a      	cmp	r2, r3
 800a95a:	d004      	beq.n	800a966 <__swbuf_r+0x6e>
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	07db      	lsls	r3, r3, #31
 800a960:	d5e1      	bpl.n	800a926 <__swbuf_r+0x2e>
 800a962:	2e0a      	cmp	r6, #10
 800a964:	d1df      	bne.n	800a926 <__swbuf_r+0x2e>
 800a966:	4621      	mov	r1, r4
 800a968:	4628      	mov	r0, r5
 800a96a:	f7ff fddd 	bl	800a528 <_fflush_r>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d0d9      	beq.n	800a926 <__swbuf_r+0x2e>
 800a972:	e7d6      	b.n	800a922 <__swbuf_r+0x2a>

0800a974 <__swsetup_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4b29      	ldr	r3, [pc, #164]	@ (800aa1c <__swsetup_r+0xa8>)
 800a978:	4605      	mov	r5, r0
 800a97a:	6818      	ldr	r0, [r3, #0]
 800a97c:	460c      	mov	r4, r1
 800a97e:	b118      	cbz	r0, 800a988 <__swsetup_r+0x14>
 800a980:	6a03      	ldr	r3, [r0, #32]
 800a982:	b90b      	cbnz	r3, 800a988 <__swsetup_r+0x14>
 800a984:	f7fe ffc2 	bl	800990c <__sinit>
 800a988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a98c:	0719      	lsls	r1, r3, #28
 800a98e:	d422      	bmi.n	800a9d6 <__swsetup_r+0x62>
 800a990:	06da      	lsls	r2, r3, #27
 800a992:	d407      	bmi.n	800a9a4 <__swsetup_r+0x30>
 800a994:	2209      	movs	r2, #9
 800a996:	602a      	str	r2, [r5, #0]
 800a998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a99c:	81a3      	strh	r3, [r4, #12]
 800a99e:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a2:	e033      	b.n	800aa0c <__swsetup_r+0x98>
 800a9a4:	0758      	lsls	r0, r3, #29
 800a9a6:	d512      	bpl.n	800a9ce <__swsetup_r+0x5a>
 800a9a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9aa:	b141      	cbz	r1, 800a9be <__swsetup_r+0x4a>
 800a9ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9b0:	4299      	cmp	r1, r3
 800a9b2:	d002      	beq.n	800a9ba <__swsetup_r+0x46>
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	f7ff f94d 	bl	8009c54 <_free_r>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a9c4:	81a3      	strh	r3, [r4, #12]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	6063      	str	r3, [r4, #4]
 800a9ca:	6923      	ldr	r3, [r4, #16]
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	f043 0308 	orr.w	r3, r3, #8
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	6923      	ldr	r3, [r4, #16]
 800a9d8:	b94b      	cbnz	r3, 800a9ee <__swsetup_r+0x7a>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a9e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9e4:	d003      	beq.n	800a9ee <__swsetup_r+0x7a>
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	f000 f88b 	bl	800ab04 <__smakebuf_r>
 800a9ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9f2:	f013 0201 	ands.w	r2, r3, #1
 800a9f6:	d00a      	beq.n	800aa0e <__swsetup_r+0x9a>
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	60a2      	str	r2, [r4, #8]
 800a9fc:	6962      	ldr	r2, [r4, #20]
 800a9fe:	4252      	negs	r2, r2
 800aa00:	61a2      	str	r2, [r4, #24]
 800aa02:	6922      	ldr	r2, [r4, #16]
 800aa04:	b942      	cbnz	r2, 800aa18 <__swsetup_r+0xa4>
 800aa06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa0a:	d1c5      	bne.n	800a998 <__swsetup_r+0x24>
 800aa0c:	bd38      	pop	{r3, r4, r5, pc}
 800aa0e:	0799      	lsls	r1, r3, #30
 800aa10:	bf58      	it	pl
 800aa12:	6962      	ldrpl	r2, [r4, #20]
 800aa14:	60a2      	str	r2, [r4, #8]
 800aa16:	e7f4      	b.n	800aa02 <__swsetup_r+0x8e>
 800aa18:	2000      	movs	r0, #0
 800aa1a:	e7f7      	b.n	800aa0c <__swsetup_r+0x98>
 800aa1c:	200000d4 	.word	0x200000d4

0800aa20 <_raise_r>:
 800aa20:	291f      	cmp	r1, #31
 800aa22:	b538      	push	{r3, r4, r5, lr}
 800aa24:	4605      	mov	r5, r0
 800aa26:	460c      	mov	r4, r1
 800aa28:	d904      	bls.n	800aa34 <_raise_r+0x14>
 800aa2a:	2316      	movs	r3, #22
 800aa2c:	6003      	str	r3, [r0, #0]
 800aa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa36:	b112      	cbz	r2, 800aa3e <_raise_r+0x1e>
 800aa38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa3c:	b94b      	cbnz	r3, 800aa52 <_raise_r+0x32>
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f000 f830 	bl	800aaa4 <_getpid_r>
 800aa44:	4622      	mov	r2, r4
 800aa46:	4601      	mov	r1, r0
 800aa48:	4628      	mov	r0, r5
 800aa4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa4e:	f000 b817 	b.w	800aa80 <_kill_r>
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d00a      	beq.n	800aa6c <_raise_r+0x4c>
 800aa56:	1c59      	adds	r1, r3, #1
 800aa58:	d103      	bne.n	800aa62 <_raise_r+0x42>
 800aa5a:	2316      	movs	r3, #22
 800aa5c:	6003      	str	r3, [r0, #0]
 800aa5e:	2001      	movs	r0, #1
 800aa60:	e7e7      	b.n	800aa32 <_raise_r+0x12>
 800aa62:	2100      	movs	r1, #0
 800aa64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	4798      	blx	r3
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	e7e0      	b.n	800aa32 <_raise_r+0x12>

0800aa70 <raise>:
 800aa70:	4b02      	ldr	r3, [pc, #8]	@ (800aa7c <raise+0xc>)
 800aa72:	4601      	mov	r1, r0
 800aa74:	6818      	ldr	r0, [r3, #0]
 800aa76:	f7ff bfd3 	b.w	800aa20 <_raise_r>
 800aa7a:	bf00      	nop
 800aa7c:	200000d4 	.word	0x200000d4

0800aa80 <_kill_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4d07      	ldr	r5, [pc, #28]	@ (800aaa0 <_kill_r+0x20>)
 800aa84:	2300      	movs	r3, #0
 800aa86:	4604      	mov	r4, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	f7f6 fa9d 	bl	8000fcc <_kill>
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	d102      	bne.n	800aa9c <_kill_r+0x1c>
 800aa96:	682b      	ldr	r3, [r5, #0]
 800aa98:	b103      	cbz	r3, 800aa9c <_kill_r+0x1c>
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	bd38      	pop	{r3, r4, r5, pc}
 800aa9e:	bf00      	nop
 800aaa0:	200006f8 	.word	0x200006f8

0800aaa4 <_getpid_r>:
 800aaa4:	f7f6 ba8a 	b.w	8000fbc <_getpid>

0800aaa8 <_malloc_usable_size_r>:
 800aaa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaac:	1f18      	subs	r0, r3, #4
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bfbc      	itt	lt
 800aab2:	580b      	ldrlt	r3, [r1, r0]
 800aab4:	18c0      	addlt	r0, r0, r3
 800aab6:	4770      	bx	lr

0800aab8 <__swhatbuf_r>:
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	460c      	mov	r4, r1
 800aabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac0:	2900      	cmp	r1, #0
 800aac2:	b096      	sub	sp, #88	@ 0x58
 800aac4:	4615      	mov	r5, r2
 800aac6:	461e      	mov	r6, r3
 800aac8:	da0d      	bge.n	800aae6 <__swhatbuf_r+0x2e>
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aad0:	f04f 0100 	mov.w	r1, #0
 800aad4:	bf14      	ite	ne
 800aad6:	2340      	movne	r3, #64	@ 0x40
 800aad8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aadc:	2000      	movs	r0, #0
 800aade:	6031      	str	r1, [r6, #0]
 800aae0:	602b      	str	r3, [r5, #0]
 800aae2:	b016      	add	sp, #88	@ 0x58
 800aae4:	bd70      	pop	{r4, r5, r6, pc}
 800aae6:	466a      	mov	r2, sp
 800aae8:	f000 f848 	bl	800ab7c <_fstat_r>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	dbec      	blt.n	800aaca <__swhatbuf_r+0x12>
 800aaf0:	9901      	ldr	r1, [sp, #4]
 800aaf2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aaf6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aafa:	4259      	negs	r1, r3
 800aafc:	4159      	adcs	r1, r3
 800aafe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab02:	e7eb      	b.n	800aadc <__swhatbuf_r+0x24>

0800ab04 <__smakebuf_r>:
 800ab04:	898b      	ldrh	r3, [r1, #12]
 800ab06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab08:	079d      	lsls	r5, r3, #30
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	d507      	bpl.n	800ab20 <__smakebuf_r+0x1c>
 800ab10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	6123      	str	r3, [r4, #16]
 800ab18:	2301      	movs	r3, #1
 800ab1a:	6163      	str	r3, [r4, #20]
 800ab1c:	b003      	add	sp, #12
 800ab1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab20:	ab01      	add	r3, sp, #4
 800ab22:	466a      	mov	r2, sp
 800ab24:	f7ff ffc8 	bl	800aab8 <__swhatbuf_r>
 800ab28:	9f00      	ldr	r7, [sp, #0]
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	4630      	mov	r0, r6
 800ab30:	f7ff f904 	bl	8009d3c <_malloc_r>
 800ab34:	b948      	cbnz	r0, 800ab4a <__smakebuf_r+0x46>
 800ab36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab3a:	059a      	lsls	r2, r3, #22
 800ab3c:	d4ee      	bmi.n	800ab1c <__smakebuf_r+0x18>
 800ab3e:	f023 0303 	bic.w	r3, r3, #3
 800ab42:	f043 0302 	orr.w	r3, r3, #2
 800ab46:	81a3      	strh	r3, [r4, #12]
 800ab48:	e7e2      	b.n	800ab10 <__smakebuf_r+0xc>
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	6020      	str	r0, [r4, #0]
 800ab4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab52:	81a3      	strh	r3, [r4, #12]
 800ab54:	9b01      	ldr	r3, [sp, #4]
 800ab56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab5a:	b15b      	cbz	r3, 800ab74 <__smakebuf_r+0x70>
 800ab5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab60:	4630      	mov	r0, r6
 800ab62:	f000 f81d 	bl	800aba0 <_isatty_r>
 800ab66:	b128      	cbz	r0, 800ab74 <__smakebuf_r+0x70>
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	f023 0303 	bic.w	r3, r3, #3
 800ab6e:	f043 0301 	orr.w	r3, r3, #1
 800ab72:	81a3      	strh	r3, [r4, #12]
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	431d      	orrs	r5, r3
 800ab78:	81a5      	strh	r5, [r4, #12]
 800ab7a:	e7cf      	b.n	800ab1c <__smakebuf_r+0x18>

0800ab7c <_fstat_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4d07      	ldr	r5, [pc, #28]	@ (800ab9c <_fstat_r+0x20>)
 800ab80:	2300      	movs	r3, #0
 800ab82:	4604      	mov	r4, r0
 800ab84:	4608      	mov	r0, r1
 800ab86:	4611      	mov	r1, r2
 800ab88:	602b      	str	r3, [r5, #0]
 800ab8a:	f7f6 fa7f 	bl	800108c <_fstat>
 800ab8e:	1c43      	adds	r3, r0, #1
 800ab90:	d102      	bne.n	800ab98 <_fstat_r+0x1c>
 800ab92:	682b      	ldr	r3, [r5, #0]
 800ab94:	b103      	cbz	r3, 800ab98 <_fstat_r+0x1c>
 800ab96:	6023      	str	r3, [r4, #0]
 800ab98:	bd38      	pop	{r3, r4, r5, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200006f8 	.word	0x200006f8

0800aba0 <_isatty_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4d06      	ldr	r5, [pc, #24]	@ (800abbc <_isatty_r+0x1c>)
 800aba4:	2300      	movs	r3, #0
 800aba6:	4604      	mov	r4, r0
 800aba8:	4608      	mov	r0, r1
 800abaa:	602b      	str	r3, [r5, #0]
 800abac:	f7f6 fa7e 	bl	80010ac <_isatty>
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	d102      	bne.n	800abba <_isatty_r+0x1a>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	b103      	cbz	r3, 800abba <_isatty_r+0x1a>
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	200006f8 	.word	0x200006f8

0800abc0 <_init>:
 800abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc2:	bf00      	nop
 800abc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc6:	bc08      	pop	{r3}
 800abc8:	469e      	mov	lr, r3
 800abca:	4770      	bx	lr

0800abcc <_fini>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	bf00      	nop
 800abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd2:	bc08      	pop	{r3}
 800abd4:	469e      	mov	lr, r3
 800abd6:	4770      	bx	lr
