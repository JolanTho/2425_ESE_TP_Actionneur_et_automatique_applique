
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d414  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800d5f8  0800d5f8  0000e5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd1c  0800dd1c  0000f29c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd1c  0800dd1c  0000ed1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd24  0800dd24  0000f29c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd24  0800dd24  0000ed24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd28  0800dd28  0000ed28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0800dd2c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  2000029c  0800dfc8  0000f29c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  0800dfc8  0000f900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f29c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1de  00000000  00000000  0000f2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db8  00000000  00000000  0002c4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  00030268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c7  00000000  00000000  00031980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa1e  00000000  00000000  00032b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d366  00000000  00000000  0005d565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114c4e  00000000  00000000  0007a8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0018f519  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007310  00000000  00000000  0018f5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001968b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000029c 	.word	0x2000029c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d5dc 	.word	0x0800d5dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002a0 	.word	0x200002a0
 800021c:	0800d5dc 	.word	0x0800d5dc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00a f9e6 	bl	800b392 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8000fc8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fce:	4b38      	ldr	r3, [pc, #224]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8000fd0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000fd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd6:	4b36      	ldr	r3, [pc, #216]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fdc:	4b34      	ldr	r3, [pc, #208]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fe2:	4b33      	ldr	r3, [pc, #204]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fe8:	4b31      	ldr	r3, [pc, #196]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fee:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001000:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8001002:	2202      	movs	r2, #2
 8001004:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b2a      	ldr	r3, [pc, #168]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800100e:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8001010:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8001014:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8001018:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800101c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800101e:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8001028:	2200      	movs	r2, #0
 800102a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800102c:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <MX_ADC1_Init+0x108>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001034:	481e      	ldr	r0, [pc, #120]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8001036:	f002 f9bf 	bl	80033b8 <HAL_ADC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001040:	f000 fb90 	bl	8001764 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4818      	ldr	r0, [pc, #96]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8001050:	f003 fd70 	bl	8004b34 <HAL_ADCEx_MultiModeConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800105a:	f000 fb83 	bl	8001764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <MX_ADC1_Init+0x10c>)
 8001060:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001062:	2306      	movs	r3, #6
 8001064:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001066:	2307      	movs	r3, #7
 8001068:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800106a:	237f      	movs	r3, #127	@ 0x7f
 800106c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800106e:	2304      	movs	r3, #4
 8001070:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <MX_ADC1_Init+0x108>)
 800107c:	f002 feaa 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001086:	f000 fb6d 	bl	8001764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <MX_ADC1_Init+0x110>)
 800108c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800108e:	230c      	movs	r3, #12
 8001090:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <MX_ADC1_Init+0x108>)
 8001098:	f002 fe9c 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80010a2:	f000 fb5f 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	3730      	adds	r7, #48	@ 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200002b8 	.word	0x200002b8
 80010b4:	08600004 	.word	0x08600004
 80010b8:	32601000 	.word	0x32601000

080010bc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00a f962 	bl	800b392 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001184 <MX_ADC2_Init+0xc8>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010d6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e2:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010e8:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ee:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001100:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001102:	2201      	movs	r2, #1
 8001104:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001106:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001108:	2201      	movs	r2, #1
 800110a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <MX_ADC2_Init+0xc4>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001116:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800111a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_ADC2_Init+0xc4>)
 800111e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001122:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_ADC2_Init+0xc4>)
 800112e:	2200      	movs	r2, #0
 8001130:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800113a:	4811      	ldr	r0, [pc, #68]	@ (8001180 <MX_ADC2_Init+0xc4>)
 800113c:	f002 f93c 	bl	80033b8 <HAL_ADC_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001146:	f000 fb0d 	bl	8001764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_ADC2_Init+0xcc>)
 800114c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114e:	2306      	movs	r3, #6
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001152:	2307      	movs	r3, #7
 8001154:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001156:	237f      	movs	r3, #127	@ 0x7f
 8001158:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800115a:	2304      	movs	r3, #4
 800115c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001168:	f002 fe34 	bl	8003dd4 <HAL_ADC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001172:	f000 faf7 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000324 	.word	0x20000324
 8001184:	50000100 	.word	0x50000100
 8001188:	04300002 	.word	0x04300002

0800118c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0a4      	sub	sp, #144	@ 0x90
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a8:	2254      	movs	r2, #84	@ 0x54
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00a f8f0 	bl	800b392 <memset>
  if(adcHandle->Instance==ADC1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ba:	f040 80a8 	bne.w	800130e <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011c4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ce:	4618      	mov	r0, r3
 80011d0:	f005 f9b6 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80011da:	f000 fac3 	bl	8001764 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011de:	4b97      	ldr	r3, [pc, #604]	@ (800143c <HAL_ADC_MspInit+0x2b0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3301      	adds	r3, #1
 80011e4:	4a95      	ldr	r2, [pc, #596]	@ (800143c <HAL_ADC_MspInit+0x2b0>)
 80011e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011e8:	4b94      	ldr	r3, [pc, #592]	@ (800143c <HAL_ADC_MspInit+0x2b0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d10b      	bne.n	8001208 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011f0:	4b93      	ldr	r3, [pc, #588]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a92      	ldr	r2, [pc, #584]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 80011f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b90      	ldr	r3, [pc, #576]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001208:	4b8d      	ldr	r3, [pc, #564]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	4a8c      	ldr	r2, [pc, #560]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001214:	4b8a      	ldr	r3, [pc, #552]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	623b      	str	r3, [r7, #32]
 800121e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b87      	ldr	r3, [pc, #540]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	4a86      	ldr	r2, [pc, #536]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122c:	4b84      	ldr	r3, [pc, #528]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	4b81      	ldr	r3, [pc, #516]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123c:	4a80      	ldr	r2, [pc, #512]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001244:	4b7e      	ldr	r3, [pc, #504]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001250:	2304      	movs	r3, #4
 8001252:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001254:	2303      	movs	r3, #3
 8001256:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001264:	4619      	mov	r1, r3
 8001266:	4877      	ldr	r0, [pc, #476]	@ (8001444 <HAL_ADC_MspInit+0x2b8>)
 8001268:	f004 f97e 	bl	8005568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800126c:	2302      	movs	r3, #2
 800126e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001270:	2303      	movs	r3, #3
 8001272:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001280:	4619      	mov	r1, r3
 8001282:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001286:	f004 f96f 	bl	8005568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800128a:	2303      	movs	r3, #3
 800128c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128e:	2303      	movs	r3, #3
 8001290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800129e:	4619      	mov	r1, r3
 80012a0:	4869      	ldr	r0, [pc, #420]	@ (8001448 <HAL_ADC_MspInit+0x2bc>)
 80012a2:	f004 f961 	bl	8005568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012a6:	4b69      	ldr	r3, [pc, #420]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012a8:	4a69      	ldr	r2, [pc, #420]	@ (8001450 <HAL_ADC_MspInit+0x2c4>)
 80012aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ac:	4b67      	ldr	r3, [pc, #412]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012ae:	2205      	movs	r2, #5
 80012b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b2:	4b66      	ldr	r3, [pc, #408]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b8:	4b64      	ldr	r3, [pc, #400]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012be:	4b63      	ldr	r3, [pc, #396]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012c0:	2280      	movs	r2, #128	@ 0x80
 80012c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c4:	4b61      	ldr	r3, [pc, #388]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012cc:	4b5f      	ldr	r3, [pc, #380]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012d4:	4b5d      	ldr	r3, [pc, #372]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012d6:	2220      	movs	r2, #32
 80012d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012da:	4b5c      	ldr	r3, [pc, #368]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012e0:	485a      	ldr	r0, [pc, #360]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012e2:	f003 fe0f 	bl	8004f04 <HAL_DMA_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80012ec:	f000 fa3a 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a56      	ldr	r2, [pc, #344]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80012f6:	4a55      	ldr	r2, [pc, #340]	@ (800144c <HAL_ADC_MspInit+0x2c0>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2012      	movs	r0, #18
 8001302:	f003 fdd7 	bl	8004eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001306:	2012      	movs	r0, #18
 8001308:	f003 fdee 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800130c:	e092      	b.n	8001434 <HAL_ADC_MspInit+0x2a8>
  else if(adcHandle->Instance==ADC2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a50      	ldr	r2, [pc, #320]	@ (8001454 <HAL_ADC_MspInit+0x2c8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	f040 808d 	bne.w	8001434 <HAL_ADC_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800131a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800131e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001320:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001324:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001326:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800132a:	4618      	mov	r0, r3
 800132c:	f005 f908 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 8001336:	f000 fa15 	bl	8001764 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800133a:	4b40      	ldr	r3, [pc, #256]	@ (800143c <HAL_ADC_MspInit+0x2b0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a3e      	ldr	r2, [pc, #248]	@ (800143c <HAL_ADC_MspInit+0x2b0>)
 8001342:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001344:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <HAL_ADC_MspInit+0x2b0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d10b      	bne.n	8001364 <HAL_ADC_MspInit+0x1d8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800134c:	4b3c      	ldr	r3, [pc, #240]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001350:	4a3b      	ldr	r2, [pc, #236]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 8001352:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001358:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001368:	4a35      	ldr	r2, [pc, #212]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001370:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b30      	ldr	r3, [pc, #192]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001380:	4a2f      	ldr	r2, [pc, #188]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001388:	4b2d      	ldr	r3, [pc, #180]	@ (8001440 <HAL_ADC_MspInit+0x2b4>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8001394:	230b      	movs	r3, #11
 8001396:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001398:	2303      	movs	r3, #3
 800139a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013a8:	4619      	mov	r1, r3
 80013aa:	4826      	ldr	r0, [pc, #152]	@ (8001444 <HAL_ADC_MspInit+0x2b8>)
 80013ac:	f004 f8dc 	bl	8005568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80013b0:	2301      	movs	r3, #1
 80013b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ca:	f004 f8cd 	bl	8005568 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80013ce:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 80013d0:	4a22      	ldr	r2, [pc, #136]	@ (800145c <HAL_ADC_MspInit+0x2d0>)
 80013d2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013d4:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 80013d6:	2224      	movs	r2, #36	@ 0x24
 80013d8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013da:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 80013e8:	2280      	movs	r2, #128	@ 0x80
 80013ea:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 80013ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013f2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013f4:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 80013f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013fa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013fc:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 80013fe:	2220      	movs	r2, #32
 8001400:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001408:	4813      	ldr	r0, [pc, #76]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 800140a:	f003 fd7b 	bl	8004f04 <HAL_DMA_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_ADC_MspInit+0x28c>
      Error_Handler();
 8001414:	f000 f9a6 	bl	8001764 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 800141c:	655a      	str	r2, [r3, #84]	@ 0x54
 800141e:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <HAL_ADC_MspInit+0x2cc>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2012      	movs	r0, #18
 800142a:	f003 fd43 	bl	8004eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800142e:	2012      	movs	r0, #18
 8001430:	f003 fd5a 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
}
 8001434:	bf00      	nop
 8001436:	3790      	adds	r7, #144	@ 0x90
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000450 	.word	0x20000450
 8001440:	40021000 	.word	0x40021000
 8001444:	48000800 	.word	0x48000800
 8001448:	48000400 	.word	0x48000400
 800144c:	20000390 	.word	0x20000390
 8001450:	40020008 	.word	0x40020008
 8001454:	50000100 	.word	0x50000100
 8001458:	200003f0 	.word	0x200003f0
 800145c:	4002001c 	.word	0x4002001c

08001460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_DMA_Init+0x60>)
 8001468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800146a:	4a15      	ldr	r2, [pc, #84]	@ (80014c0 <MX_DMA_Init+0x60>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6493      	str	r3, [r2, #72]	@ 0x48
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_DMA_Init+0x60>)
 8001474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <MX_DMA_Init+0x60>)
 8001480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001482:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <MX_DMA_Init+0x60>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6493      	str	r3, [r2, #72]	@ 0x48
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <MX_DMA_Init+0x60>)
 800148c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	200b      	movs	r0, #11
 800149c:	f003 fd0a 	bl	8004eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a0:	200b      	movs	r0, #11
 80014a2:	f003 fd21 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	200c      	movs	r0, #12
 80014ac:	f003 fd02 	bl	8004eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014b0:	200c      	movs	r0, #12
 80014b2:	f003 fd19 	bl	8004ee8 <HAL_NVIC_EnableIRQ>

}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000

080014c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b3f      	ldr	r3, [pc, #252]	@ (80015d8 <MX_GPIO_Init+0x114>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a3e      	ldr	r2, [pc, #248]	@ (80015d8 <MX_GPIO_Init+0x114>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b3c      	ldr	r3, [pc, #240]	@ (80015d8 <MX_GPIO_Init+0x114>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f2:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <MX_GPIO_Init+0x114>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	4a38      	ldr	r2, [pc, #224]	@ (80015d8 <MX_GPIO_Init+0x114>)
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fe:	4b36      	ldr	r3, [pc, #216]	@ (80015d8 <MX_GPIO_Init+0x114>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b33      	ldr	r3, [pc, #204]	@ (80015d8 <MX_GPIO_Init+0x114>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a32      	ldr	r2, [pc, #200]	@ (80015d8 <MX_GPIO_Init+0x114>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <MX_GPIO_Init+0x114>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <MX_GPIO_Init+0x114>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a2c      	ldr	r2, [pc, #176]	@ (80015d8 <MX_GPIO_Init+0x114>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <MX_GPIO_Init+0x114>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153a:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <MX_GPIO_Init+0x114>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a26      	ldr	r2, [pc, #152]	@ (80015d8 <MX_GPIO_Init+0x114>)
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <MX_GPIO_Init+0x114>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2120      	movs	r1, #32
 8001556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155a:	f004 f987 	bl	800586c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2104      	movs	r1, #4
 8001562:	481e      	ldr	r0, [pc, #120]	@ (80015dc <MX_GPIO_Init+0x118>)
 8001564:	f004 f982 	bl	800586c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001568:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800156e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_GPIO_Init+0x11c>)
 8001580:	f003 fff2 	bl	8005568 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001584:	2320      	movs	r3, #32
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159e:	f003 ffe3 	bl	8005568 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80015a2:	2304      	movs	r3, #4
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4808      	ldr	r0, [pc, #32]	@ (80015dc <MX_GPIO_Init+0x118>)
 80015ba:	f003 ffd5 	bl	8005568 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2028      	movs	r0, #40	@ 0x28
 80015c4:	f003 fc76 	bl	8004eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c8:	2028      	movs	r0, #40	@ 0x28
 80015ca:	f003 fc8d 	bl	8004ee8 <HAL_NVIC_EnableIRQ>

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	@ 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48000c00 	.word	0x48000c00
 80015e0:	48000800 	.word	0x48000800

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ea:	f001 fc26 	bl	8002e3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ee:	f000 f853 	bl	8001698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f2:	f7ff ff67 	bl	80014c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80015f6:	f7ff ff33 	bl	8001460 <MX_DMA_Init>
  MX_ADC2_Init();
 80015fa:	f7ff fd5f 	bl	80010bc <MX_ADC2_Init>
  MX_ADC1_Init();
 80015fe:	f7ff fcd3 	bl	8000fa8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001602:	f000 faeb 	bl	8001bdc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001606:	f000 fb9f 	bl	8001d48 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800160a:	f000 fd37 	bl	800207c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800160e:	f000 fd81 	bl	8002114 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8001612:	f000 fbef 	bl	8001df4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init(); // init du shell
 8001616:	f001 f805 	bl	8002624 <Shell_Init>

	pwm_start(); // Depart des pwm
 800161a:	f000 ff6d 	bl	80024f8 <pwm_start>
	codeur_start(); // Depart de l'encodeur
 800161e:	f000 fe6d 	bl	80022fc <codeur_start>

	pid = pid_init(0.48,0.247,0.23);
 8001622:	4c14      	ldr	r4, [pc, #80]	@ (8001674 <main+0x90>)
 8001624:	463b      	mov	r3, r7
 8001626:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8001678 <main+0x94>
 800162a:	eddf 0a14 	vldr	s1, [pc, #80]	@ 800167c <main+0x98>
 800162e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001680 <main+0x9c>
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fec6 	bl	80023c4 <pid_init>
 8001638:	4625      	mov	r5, r4
 800163a:	463c      	mov	r4, r7
 800163c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	602b      	str	r3, [r5, #0]

	HAL_TIM_Base_Start_IT(&htim16); // Demarrage du TImer pour cadencer les valeurs de vitesse
 8001644:	480f      	ldr	r0, [pc, #60]	@ (8001684 <main+0xa0>)
 8001646:	f005 fa21 	bl	8006a8c <HAL_TIM_Base_Start_IT>

	// valeures de l'asserv

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800164a:	217f      	movs	r1, #127	@ 0x7f
 800164c:	480e      	ldr	r0, [pc, #56]	@ (8001688 <main+0xa4>)
 800164e:	f003 f9dd 	bl	8004a0c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc1,2);
 8001652:	2202      	movs	r2, #2
 8001654:	490d      	ldr	r1, [pc, #52]	@ (800168c <main+0xa8>)
 8001656:	480c      	ldr	r0, [pc, #48]	@ (8001688 <main+0xa4>)
 8001658:	f002 f86a 	bl	8003730 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800165c:	217f      	movs	r1, #127	@ 0x7f
 800165e:	480c      	ldr	r0, [pc, #48]	@ (8001690 <main+0xac>)
 8001660:	f003 f9d4 	bl	8004a0c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2,(uint32_t*)&value_adc2,1);
 8001664:	2201      	movs	r2, #1
 8001666:	490b      	ldr	r1, [pc, #44]	@ (8001694 <main+0xb0>)
 8001668:	4809      	ldr	r0, [pc, #36]	@ (8001690 <main+0xac>)
 800166a:	f002 f861 	bl	8003730 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 800166e:	f001 f81b 	bl	80026a8 <Shell_Loop>
 8001672:	e7fc      	b.n	800166e <main+0x8a>
 8001674:	20000460 	.word	0x20000460
 8001678:	3e6b851f 	.word	0x3e6b851f
 800167c:	3e7ced91 	.word	0x3e7ced91
 8001680:	3ef5c28f 	.word	0x3ef5c28f
 8001684:	20000560 	.word	0x20000560
 8001688:	200002b8 	.word	0x200002b8
 800168c:	20000454 	.word	0x20000454
 8001690:	20000324 	.word	0x20000324
 8001694:	2000045c 	.word	0x2000045c

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b094      	sub	sp, #80	@ 0x50
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	f107 0318 	add.w	r3, r7, #24
 80016a2:	2238      	movs	r2, #56	@ 0x38
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f009 fe73 	bl	800b392 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f004 f92c 	bl	8005918 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ca:	2302      	movs	r3, #2
 80016cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ce:	2303      	movs	r3, #3
 80016d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80016d2:	2306      	movs	r3, #6
 80016d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016d6:	2355      	movs	r3, #85	@ 0x55
 80016d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016da:	2302      	movs	r3, #2
 80016dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016de:	2302      	movs	r3, #2
 80016e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 f9c8 	bl	8005a80 <HAL_RCC_OscConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80016f6:	f000 f835 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fa:	230f      	movs	r3, #15
 80016fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fe:	2303      	movs	r3, #3
 8001700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2104      	movs	r1, #4
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fcc6 	bl	80060a4 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800171e:	f000 f821 	bl	8001764 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	@ 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
//	cpt = (cpt + 1)%20000;
//	if(cpt == 0) HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001752:	f001 fb8b 	bl	8002e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40001000 	.word	0x40001000

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <Error_Handler+0x8>

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <HAL_MspInit+0x44>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800177a:	4a0e      	ldr	r2, [pc, #56]	@ (80017b4 <HAL_MspInit+0x44>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6613      	str	r3, [r2, #96]	@ 0x60
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <HAL_MspInit+0x44>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_MspInit+0x44>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001792:	4a08      	ldr	r2, [pc, #32]	@ (80017b4 <HAL_MspInit+0x44>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001798:	6593      	str	r3, [r2, #88]	@ 0x58
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_MspInit+0x44>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017a6:	f004 f95b 	bl	8005a60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	@ 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017c8:	4b2c      	ldr	r3, [pc, #176]	@ (800187c <HAL_InitTick+0xc4>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017cc:	4a2b      	ldr	r2, [pc, #172]	@ (800187c <HAL_InitTick+0xc4>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d4:	4b29      	ldr	r3, [pc, #164]	@ (800187c <HAL_InitTick+0xc4>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e0:	f107 020c 	add.w	r2, r7, #12
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 fe30 	bl	8006450 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017f0:	f004 fe02 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 80017f4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f8:	4a21      	ldr	r2, [pc, #132]	@ (8001880 <HAL_InitTick+0xc8>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9b      	lsrs	r3, r3, #18
 8001800:	3b01      	subs	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <HAL_InitTick+0xcc>)
 8001806:	4a20      	ldr	r2, [pc, #128]	@ (8001888 <HAL_InitTick+0xd0>)
 8001808:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800180a:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <HAL_InitTick+0xcc>)
 800180c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001810:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001812:	4a1c      	ldr	r2, [pc, #112]	@ (8001884 <HAL_InitTick+0xcc>)
 8001814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001816:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001818:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_InitTick+0xcc>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_InitTick+0xcc>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001824:	4817      	ldr	r0, [pc, #92]	@ (8001884 <HAL_InitTick+0xcc>)
 8001826:	f005 f8d9 	bl	80069dc <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001830:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001834:	2b00      	cmp	r3, #0
 8001836:	d11b      	bne.n	8001870 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001838:	4812      	ldr	r0, [pc, #72]	@ (8001884 <HAL_InitTick+0xcc>)
 800183a:	f005 f927 	bl	8006a8c <HAL_TIM_Base_Start_IT>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001844:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001848:	2b00      	cmp	r3, #0
 800184a:	d111      	bne.n	8001870 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800184c:	2036      	movs	r0, #54	@ 0x36
 800184e:	f003 fb4b 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d808      	bhi.n	800186a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	2036      	movs	r0, #54	@ 0x36
 800185e:	f003 fb29 	bl	8004eb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001862:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <HAL_InitTick+0xd4>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e002      	b.n	8001870 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001870:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001874:	4618      	mov	r0, r3
 8001876:	3730      	adds	r7, #48	@ 0x30
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	431bde83 	.word	0x431bde83
 8001884:	20000474 	.word	0x20000474
 8001888:	40001000 	.word	0x40001000
 800188c:	200000cc 	.word	0x200000cc

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <NMI_Handler+0x4>

08001898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <HardFault_Handler+0x4>

080018a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <MemManage_Handler+0x4>

080018a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <DMA1_Channel1_IRQHandler+0x10>)
 80018f6:	f003 fce8 	bl	80052ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000390 	.word	0x20000390

08001904 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <DMA1_Channel2_IRQHandler+0x10>)
 800190a:	f003 fcde 	bl	80052ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200003f0 	.word	0x200003f0

08001918 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800191c:	4803      	ldr	r0, [pc, #12]	@ (800192c <ADC1_2_IRQHandler+0x14>)
 800191e:	f001 ffdb 	bl	80038d8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001922:	4803      	ldr	r0, [pc, #12]	@ (8001930 <ADC1_2_IRQHandler+0x18>)
 8001924:	f001 ffd8 	bl	80038d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200002b8 	.word	0x200002b8
 8001930:	20000324 	.word	0x20000324

08001934 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001938:	481b      	ldr	r0, [pc, #108]	@ (80019a8 <TIM1_UP_TIM16_IRQHandler+0x74>)
 800193a:	f005 fc79 	bl	8007230 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800193e:	481b      	ldr	r0, [pc, #108]	@ (80019ac <TIM1_UP_TIM16_IRQHandler+0x78>)
 8001940:	f005 fc76 	bl	8007230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  if(idx == dt){
 8001944:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <TIM1_UP_TIM16_IRQHandler+0x7c>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <TIM1_UP_TIM16_IRQHandler+0x80>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d109      	bne.n	8001964 <TIM1_UP_TIM16_IRQHandler+0x30>
	  idx =0;
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <TIM1_UP_TIM16_IRQHandler+0x7c>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
	  calc_speed();
 8001956:	f000 fcf5 	bl	8002344 <calc_speed>
	  HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 800195a:	2120      	movs	r1, #32
 800195c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001960:	f003 ff9c 	bl	800589c <HAL_GPIO_TogglePin>
  }

  idx++;
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <TIM1_UP_TIM16_IRQHandler+0x7c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a11      	ldr	r2, [pc, #68]	@ (80019b0 <TIM1_UP_TIM16_IRQHandler+0x7c>)
 800196c:	6013      	str	r3, [r2, #0]

  NewAlpha = pid_compute(&pid, (float) consigne,(float)vitesse[0], deltaTime);
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <TIM1_UP_TIM16_IRQHandler+0x84>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <TIM1_UP_TIM16_IRQHandler+0x88>)
 800197c:	ed93 7a00 	vldr	s14, [r3]
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <TIM1_UP_TIM16_IRQHandler+0x8c>)
 8001982:	edd3 6a00 	vldr	s13, [r3]
 8001986:	eeb0 1a66 	vmov.f32	s2, s13
 800198a:	eef0 0a47 	vmov.f32	s1, s14
 800198e:	eeb0 0a67 	vmov.f32	s0, s15
 8001992:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <TIM1_UP_TIM16_IRQHandler+0x90>)
 8001994:	f000 fd3c 	bl	8002410 <pid_compute>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
 800199c:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <TIM1_UP_TIM16_IRQHandler+0x94>)
 800199e:	edc3 7a00 	vstr	s15, [r3]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200004c8 	.word	0x200004c8
 80019ac:	20000560 	.word	0x20000560
 80019b0:	200004c0 	.word	0x200004c0
 80019b4:	20000008 	.word	0x20000008
 80019b8:	20000734 	.word	0x20000734
 80019bc:	200006dc 	.word	0x200006dc
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000460 	.word	0x20000460
 80019c8:	20000738 	.word	0x20000738

080019cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <TIM3_IRQHandler+0x10>)
 80019d2:	f005 fc2d 	bl	8007230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000514 	.word	0x20000514

080019e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019e4:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <USART2_IRQHandler+0x10>)
 80019e6:	f006 fe9b 	bl	8008720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200005ac 	.word	0x200005ac

080019f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019f8:	4802      	ldr	r0, [pc, #8]	@ (8001a04 <USART3_IRQHandler+0x10>)
 80019fa:	f006 fe91 	bl	8008720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000640 	.word	0x20000640

08001a08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001a0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a10:	f003 ff5e 	bl	80058d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <TIM6_DAC_IRQHandler+0x10>)
 8001a1e:	f005 fc07 	bl	8007230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000474 	.word	0x20000474

08001a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return 1;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_kill>:

int _kill(int pid, int sig)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a46:	f009 fd53 	bl	800b4f0 <__errno>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2216      	movs	r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_exit>:

void _exit (int status)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ffe7 	bl	8001a3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a6e:	bf00      	nop
 8001a70:	e7fd      	b.n	8001a6e <_exit+0x12>

08001a72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e00a      	b.n	8001a9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a84:	f3af 8000 	nop.w
 8001a88:	4601      	mov	r1, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	60ba      	str	r2, [r7, #8]
 8001a90:	b2ca      	uxtb	r2, r1
 8001a92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbf0      	blt.n	8001a84 <_read+0x12>
  }

  return len;
 8001aa2:	687b      	ldr	r3, [r7, #4]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e009      	b.n	8001ad2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60ba      	str	r2, [r7, #8]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dbf1      	blt.n	8001abe <_write+0x12>
  }
  return len;
 8001ada:	687b      	ldr	r3, [r7, #4]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_close>:

int _close(int file)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_isatty>:

int _isatty(int file)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	@ (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d207      	bcs.n	8001b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b7c:	f009 fcb8 	bl	800b4f0 <__errno>
 8001b80:	4603      	mov	r3, r0
 8001b82:	220c      	movs	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	@ (8001bb0 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20020000 	.word	0x20020000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	200004c4 	.word	0x200004c4
 8001bb4:	20000900 	.word	0x20000900

08001bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <SystemInit+0x20>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc2:	4a05      	ldr	r2, [pc, #20]	@ (8001bd8 <SystemInit+0x20>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b098      	sub	sp, #96	@ 0x60
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
 8001bfc:	611a      	str	r2, [r3, #16]
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2234      	movs	r2, #52	@ 0x34
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f009 fbc2 	bl	800b392 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001c10:	4a4c      	ldr	r2, [pc, #304]	@ (8001d44 <MX_TIM1_Init+0x168>)
 8001c12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c14:	4b4a      	ldr	r3, [pc, #296]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001c1a:	4b49      	ldr	r3, [pc, #292]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8001c20:	4b47      	ldr	r3, [pc, #284]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001c22:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001c26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	4b45      	ldr	r3, [pc, #276]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c2e:	4b44      	ldr	r3, [pc, #272]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b42      	ldr	r3, [pc, #264]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c3a:	4841      	ldr	r0, [pc, #260]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001c3c:	f004 ff9e 	bl	8006b7c <HAL_TIM_PWM_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c46:	f7ff fd8d 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001c4e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c52:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4838      	ldr	r0, [pc, #224]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001c60:	f006 fa8c 	bl	800817c <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c6a:	f7ff fd7b 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6e:	2360      	movs	r3, #96	@ 0x60
 8001c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5100;
 8001c72:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c90:	2200      	movs	r2, #0
 8001c92:	4619      	mov	r1, r3
 8001c94:	482a      	ldr	r0, [pc, #168]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001c96:	f005 fc1b 	bl	80074d0 <HAL_TIM_PWM_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001ca0:	f7ff fd60 	bl	8001764 <Error_Handler>
  }
  sConfigOC.Pulse = 3400;
 8001ca4:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001caa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4823      	ldr	r0, [pc, #140]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001cb4:	f005 fc0c 	bl	80074d0 <HAL_TIM_PWM_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8001cbe:	f7ff fd51 	bl	8001764 <Error_Handler>
  }
  sConfigOC.Pulse = 5100;
 8001cc2:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8001cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ccc:	2208      	movs	r2, #8
 8001cce:	4619      	mov	r1, r3
 8001cd0:	481b      	ldr	r0, [pc, #108]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001cd2:	f005 fbfd 	bl	80074d0 <HAL_TIM_PWM_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001cdc:	f7ff fd42 	bl	8001764 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8001ce0:	4817      	ldr	r0, [pc, #92]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001ce2:	f006 fb75 	bl	80083d0 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 8001cf2:	2311      	movs	r3, #17
 8001cf4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d16:	2300      	movs	r3, #0
 8001d18:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001d24:	f006 fac0 	bl	80082a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8001d2e:	f7ff fd19 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d32:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <MX_TIM1_Init+0x164>)
 8001d34:	f000 f93a 	bl	8001fac <HAL_TIM_MspPostInit>

}
 8001d38:	bf00      	nop
 8001d3a:	3760      	adds	r7, #96	@ 0x60
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200004c8 	.word	0x200004c8
 8001d44:	40012c00 	.word	0x40012c00

08001d48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	@ 0x30
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	2224      	movs	r2, #36	@ 0x24
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f009 fb1b 	bl	800b392 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <MX_TIM3_Init+0xa4>)
 8001d68:	4a21      	ldr	r2, [pc, #132]	@ (8001df0 <MX_TIM3_Init+0xa8>)
 8001d6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dec <MX_TIM3_Init+0xa4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d72:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <MX_TIM3_Init+0xa4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d78:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <MX_TIM3_Init+0xa4>)
 8001d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <MX_TIM3_Init+0xa4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d86:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <MX_TIM3_Init+0xa4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d94:	2301      	movs	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001da4:	2301      	movs	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	4619      	mov	r1, r3
 8001db6:	480d      	ldr	r0, [pc, #52]	@ (8001dec <MX_TIM3_Init+0xa4>)
 8001db8:	f005 f8e6 	bl	8006f88 <HAL_TIM_Encoder_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001dc2:	f7ff fccf 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4806      	ldr	r0, [pc, #24]	@ (8001dec <MX_TIM3_Init+0xa4>)
 8001dd4:	f006 f9d2 	bl	800817c <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001dde:	f7ff fcc1 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	3730      	adds	r7, #48	@ 0x30
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000514 	.word	0x20000514
 8001df0:	40000400 	.word	0x40000400

08001df4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <MX_TIM16_Init+0x44>)
 8001dfa:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <MX_TIM16_Init+0x48>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <MX_TIM16_Init+0x44>)
 8001e00:	2204      	movs	r2, #4
 8001e02:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <MX_TIM16_Init+0x44>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 33999;
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <MX_TIM16_Init+0x44>)
 8001e0c:	f248 42cf 	movw	r2, #33999	@ 0x84cf
 8001e10:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <MX_TIM16_Init+0x44>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e18:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <MX_TIM16_Init+0x44>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <MX_TIM16_Init+0x44>)
 8001e20:	2280      	movs	r2, #128	@ 0x80
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	@ (8001e38 <MX_TIM16_Init+0x44>)
 8001e26:	f004 fdd9 	bl	80069dc <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001e30:	f7ff fc98 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000560 	.word	0x20000560
 8001e3c:	40014400 	.word	0x40014400

08001e40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e84 <HAL_TIM_PWM_MspInit+0x44>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d113      	bne.n	8001e7a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <HAL_TIM_PWM_MspInit+0x48>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e56:	4a0c      	ldr	r2, [pc, #48]	@ (8001e88 <HAL_TIM_PWM_MspInit+0x48>)
 8001e58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <HAL_TIM_PWM_MspInit+0x48>)
 8001e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2019      	movs	r0, #25
 8001e70:	f003 f820 	bl	8004eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e74:	2019      	movs	r0, #25
 8001e76:	f003 f837 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40012c00 	.word	0x40012c00
 8001e88:	40021000 	.word	0x40021000

08001e8c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	@ 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f54 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d14d      	bne.n	8001f4a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eba:	4b27      	ldr	r3, [pc, #156]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	4a23      	ldr	r2, [pc, #140]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eea:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001ef6:	2350      	movs	r3, #80	@ 0x50
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f06:	2302      	movs	r3, #2
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f14:	f003 fb28 	bl	8005568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4809      	ldr	r0, [pc, #36]	@ (8001f5c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001f36:	f003 fb17 	bl	8005568 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	201d      	movs	r0, #29
 8001f40:	f002 ffb8 	bl	8004eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f44:	201d      	movs	r0, #29
 8001f46:	f002 ffcf 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3728      	adds	r7, #40	@ 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000800 	.word	0x48000800

08001f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x44>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d113      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f72:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x48>)
 8001f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f76:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x48>)
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x48>)
 8001f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2019      	movs	r0, #25
 8001f90:	f002 ff90 	bl	8004eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f94:	2019      	movs	r0, #25
 8001f96:	f002 ffa7 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40014400 	.word	0x40014400
 8001fa8:	40021000 	.word	0x40021000

08001fac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a29      	ldr	r2, [pc, #164]	@ (8002070 <HAL_TIM_MspPostInit+0xc4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d14b      	bne.n	8002066 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	4b29      	ldr	r3, [pc, #164]	@ (8002074 <HAL_TIM_MspPostInit+0xc8>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	4a28      	ldr	r2, [pc, #160]	@ (8002074 <HAL_TIM_MspPostInit+0xc8>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fda:	4b26      	ldr	r3, [pc, #152]	@ (8002074 <HAL_TIM_MspPostInit+0xc8>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b23      	ldr	r3, [pc, #140]	@ (8002074 <HAL_TIM_MspPostInit+0xc8>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	4a22      	ldr	r2, [pc, #136]	@ (8002074 <HAL_TIM_MspPostInit+0xc8>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ff2:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <HAL_TIM_MspPostInit+0xc8>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001ffe:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002010:	2306      	movs	r3, #6
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	4817      	ldr	r0, [pc, #92]	@ (8002078 <HAL_TIM_MspPostInit+0xcc>)
 800201c:	f003 faa4 	bl	8005568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002020:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002032:	2304      	movs	r3, #4
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	480e      	ldr	r0, [pc, #56]	@ (8002078 <HAL_TIM_MspPostInit+0xcc>)
 800203e:	f003 fa93 	bl	8005568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8002042:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002054:	2306      	movs	r3, #6
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002062:	f003 fa81 	bl	8005568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	@ 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40021000 	.word	0x40021000
 8002078:	48000400 	.word	0x48000400

0800207c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002080:	4b22      	ldr	r3, [pc, #136]	@ (800210c <MX_USART2_UART_Init+0x90>)
 8002082:	4a23      	ldr	r2, [pc, #140]	@ (8002110 <MX_USART2_UART_Init+0x94>)
 8002084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002086:	4b21      	ldr	r3, [pc, #132]	@ (800210c <MX_USART2_UART_Init+0x90>)
 8002088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800208c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <MX_USART2_UART_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <MX_USART2_UART_Init+0x90>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800209a:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <MX_USART2_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <MX_USART2_UART_Init+0x90>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b19      	ldr	r3, [pc, #100]	@ (800210c <MX_USART2_UART_Init+0x90>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b17      	ldr	r3, [pc, #92]	@ (800210c <MX_USART2_UART_Init+0x90>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <MX_USART2_UART_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <MX_USART2_UART_Init+0x90>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <MX_USART2_UART_Init+0x90>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c4:	4811      	ldr	r0, [pc, #68]	@ (800210c <MX_USART2_UART_Init+0x90>)
 80020c6:	f006 fa01 	bl	80084cc <HAL_UART_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020d0:	f7ff fb48 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d4:	2100      	movs	r1, #0
 80020d6:	480d      	ldr	r0, [pc, #52]	@ (800210c <MX_USART2_UART_Init+0x90>)
 80020d8:	f008 fa77 	bl	800a5ca <HAL_UARTEx_SetTxFifoThreshold>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020e2:	f7ff fb3f 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e6:	2100      	movs	r1, #0
 80020e8:	4808      	ldr	r0, [pc, #32]	@ (800210c <MX_USART2_UART_Init+0x90>)
 80020ea:	f008 faac 	bl	800a646 <HAL_UARTEx_SetRxFifoThreshold>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020f4:	f7ff fb36 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020f8:	4804      	ldr	r0, [pc, #16]	@ (800210c <MX_USART2_UART_Init+0x90>)
 80020fa:	f008 fa2d 	bl	800a558 <HAL_UARTEx_DisableFifoMode>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002104:	f7ff fb2e 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200005ac 	.word	0x200005ac
 8002110:	40004400 	.word	0x40004400

08002114 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002118:	4b22      	ldr	r3, [pc, #136]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 800211a:	4a23      	ldr	r2, [pc, #140]	@ (80021a8 <MX_USART3_UART_Init+0x94>)
 800211c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800211e:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 8002120:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002124:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002126:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800212c:	4b1d      	ldr	r3, [pc, #116]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002132:	4b1c      	ldr	r3, [pc, #112]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 800213a:	220c      	movs	r2, #12
 800213c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213e:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002144:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214a:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002150:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002156:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 8002158:	2200      	movs	r2, #0
 800215a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800215c:	4811      	ldr	r0, [pc, #68]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 800215e:	f006 f9b5 	bl	80084cc <HAL_UART_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002168:	f7ff fafc 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800216c:	2100      	movs	r1, #0
 800216e:	480d      	ldr	r0, [pc, #52]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 8002170:	f008 fa2b 	bl	800a5ca <HAL_UARTEx_SetTxFifoThreshold>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800217a:	f7ff faf3 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800217e:	2100      	movs	r1, #0
 8002180:	4808      	ldr	r0, [pc, #32]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 8002182:	f008 fa60 	bl	800a646 <HAL_UARTEx_SetRxFifoThreshold>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800218c:	f7ff faea 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002190:	4804      	ldr	r0, [pc, #16]	@ (80021a4 <MX_USART3_UART_Init+0x90>)
 8002192:	f008 f9e1 	bl	800a558 <HAL_UARTEx_DisableFifoMode>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800219c:	f7ff fae2 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000640 	.word	0x20000640
 80021a8:	40004800 	.word	0x40004800

080021ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0a0      	sub	sp, #128	@ 0x80
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c4:	f107 0318 	add.w	r3, r7, #24
 80021c8:	2254      	movs	r2, #84	@ 0x54
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f009 f8e0 	bl	800b392 <memset>
  if(uartHandle->Instance==USART2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a45      	ldr	r2, [pc, #276]	@ (80022ec <HAL_UART_MspInit+0x140>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d13f      	bne.n	800225c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021dc:	2302      	movs	r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e4:	f107 0318 	add.w	r3, r7, #24
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 f9a9 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021f4:	f7ff fab6 	bl	8001764 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f8:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	4a3c      	ldr	r2, [pc, #240]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 80021fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002202:	6593      	str	r3, [r2, #88]	@ 0x58
 8002204:	4b3a      	ldr	r3, [pc, #232]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002210:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 8002212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002214:	4a36      	ldr	r2, [pc, #216]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221c:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002228:	230c      	movs	r3, #12
 800222a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002238:	2307      	movs	r3, #7
 800223a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002240:	4619      	mov	r1, r3
 8002242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002246:	f003 f98f 	bl	8005568 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2026      	movs	r0, #38	@ 0x26
 8002250:	f002 fe30 	bl	8004eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002254:	2026      	movs	r0, #38	@ 0x26
 8002256:	f002 fe47 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800225a:	e043      	b.n	80022e4 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a24      	ldr	r2, [pc, #144]	@ (80022f4 <HAL_UART_MspInit+0x148>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d13e      	bne.n	80022e4 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002266:	2304      	movs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800226e:	f107 0318 	add.w	r3, r7, #24
 8002272:	4618      	mov	r0, r3
 8002274:	f004 f964 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800227e:	f7ff fa71 	bl	8001764 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002282:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800228c:	6593      	str	r3, [r2, #88]	@ 0x58
 800228e:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	4a14      	ldr	r2, [pc, #80]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a6:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_UART_MspInit+0x144>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022c4:	2307      	movs	r3, #7
 80022c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022cc:	4619      	mov	r1, r3
 80022ce:	480a      	ldr	r0, [pc, #40]	@ (80022f8 <HAL_UART_MspInit+0x14c>)
 80022d0:	f003 f94a 	bl	8005568 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	2027      	movs	r0, #39	@ 0x27
 80022da:	f002 fdeb 	bl	8004eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022de:	2027      	movs	r0, #39	@ 0x27
 80022e0:	f002 fe02 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
}
 80022e4:	bf00      	nop
 80022e6:	3780      	adds	r7, #128	@ 0x80
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40004400 	.word	0x40004400
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40004800 	.word	0x40004800
 80022f8:	48000800 	.word	0x48000800

080022fc <codeur_start>:
float vitesse[3] ={0};   //vitesse du moteur (le signe donne le sens)
int dt=100; 			 //mesure de la vitesse toutes les 100ms
float resolution = 4096; //nombre d'incrément du compteur pour un tour du moteur


void codeur_start(void){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8002300:	213c      	movs	r1, #60	@ 0x3c
 8002302:	4802      	ldr	r0, [pc, #8]	@ (800230c <codeur_start+0x10>)
 8002304:	f004 fee6 	bl	80070d4 <HAL_TIM_Encoder_Start_IT>
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000514 	.word	0x20000514

08002310 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(&htim3); //valeur du compteur absolue
 8002318:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_TIM_IC_CaptureCallback+0x28>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	4a07      	ldr	r2, [pc, #28]	@ (800233c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8002320:	6013      	str	r3, [r2, #0]
	pos = (int16_t)counter; 				 //valeur du compteur avec les valeurs négatives
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b21a      	sxth	r2, r3
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_TIM_IC_CaptureCallback+0x30>)
 800232a:	801a      	strh	r2, [r3, #0]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	20000514 	.word	0x20000514
 800233c:	200006d4 	.word	0x200006d4
 8002340:	200006d8 	.word	0x200006d8

08002344 <calc_speed>:

void calc_speed(){
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
	vitesse[0]=vitesse[1];
 8002348:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <calc_speed+0x68>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a17      	ldr	r2, [pc, #92]	@ (80023ac <calc_speed+0x68>)
 800234e:	6013      	str	r3, [r2, #0]
	vitesse[1]=vitesse[2];
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <calc_speed+0x68>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a15      	ldr	r2, [pc, #84]	@ (80023ac <calc_speed+0x68>)
 8002356:	6053      	str	r3, [r2, #4]
	vitesse[2] = (((pos - oldpos)/dt)/resolution)*ms_To_s*10;
 8002358:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <calc_speed+0x6c>)
 800235a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235e:	461a      	mov	r2, r3
 8002360:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <calc_speed+0x70>)
 8002362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002366:	1ad2      	subs	r2, r2, r3
 8002368:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <calc_speed+0x74>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002370:	ee07 3a90 	vmov	s15, r3
 8002374:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <calc_speed+0x78>)
 800237a:	ed93 7a00 	vldr	s14, [r3]
 800237e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002382:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80023c0 <calc_speed+0x7c>
 8002386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800238a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800238e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <calc_speed+0x68>)
 8002394:	edc3 7a02 	vstr	s15, [r3, #8]
	oldpos = pos;
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <calc_speed+0x6c>)
 800239a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800239e:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <calc_speed+0x70>)
 80023a0:	801a      	strh	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	200006dc 	.word	0x200006dc
 80023b0:	200006d8 	.word	0x200006d8
 80023b4:	200006da 	.word	0x200006da
 80023b8:	20000008 	.word	0x20000008
 80023bc:	2000000c 	.word	0x2000000c
 80023c0:	447a0000 	.word	0x447a0000

080023c4 <pid_init>:
#include "mylibs/pid_controller.h"

// Initialise un PID
PIDController pid_init(float kp, float ki, float kd) {
 80023c4:	b4b0      	push	{r4, r5, r7}
 80023c6:	b08b      	sub	sp, #44	@ 0x2c
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80023d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80023d4:	ed87 1a00 	vstr	s2, [r7]
    PIDController pid = {kp, ki, kd, 0.0f, 0.0f};
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
    return pid;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	461d      	mov	r5, r3
 80023f4:	f107 0414 	add.w	r4, r7, #20
 80023f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	602b      	str	r3, [r5, #0]
}
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	372c      	adds	r7, #44	@ 0x2c
 8002404:	46bd      	mov	sp, r7
 8002406:	bcb0      	pop	{r4, r5, r7}
 8002408:	4770      	bx	lr
 800240a:	0000      	movs	r0, r0
 800240c:	0000      	movs	r0, r0
	...

08002410 <pid_compute>:

// Calcul du PID et détermination de l'alpha
float pid_compute(PIDController *pid, float setpoint, float measured, float deltaTime) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	@ 0x30
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	ed87 0a02 	vstr	s0, [r7, #8]
 800241c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002420:	ed87 1a00 	vstr	s2, [r7]
    // Convertir la consigne (RPM) dans la plage de mesure (-200 à 200)
    float scaledSetpoint = setpoint * (200.0 / 3000.0);
 8002424:	68b8      	ldr	r0, [r7, #8]
 8002426:	f7fe f8c7 	bl	80005b8 <__aeabi_f2d>
 800242a:	a331      	add	r3, pc, #196	@ (adr r3, 80024f0 <pid_compute+0xe0>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fe f91a 	bl	8000668 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fbec 	bl	8000c18 <__aeabi_d2f>
 8002440:	4603      	mov	r3, r0
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Calcul de l'erreur
    float error = scaledSetpoint - measured;
 8002444:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002448:	edd7 7a01 	vldr	s15, [r7, #4]
 800244c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002450:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Terme proportionnel
    float proportional = pid->kp * error;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002462:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Terme intégral
    pid->integral += error * deltaTime;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	ed93 7a04 	vldr	s14, [r3, #16]
 800246c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8002470:	edd7 7a00 	vldr	s15, [r7]
 8002474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	edc3 7a04 	vstr	s15, [r3, #16]
    float integral = pid->ki * pid->integral;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	ed93 7a01 	vldr	s14, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	edd3 7a04 	vldr	s15, [r3, #16]
 800248e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002492:	edc7 7a08 	vstr	s15, [r7, #32]

    // Terme dérivé
    float derivative = pid->kd * (error - pid->prevError) / deltaTime;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	ed93 7a02 	vldr	s14, [r3, #8]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	edd3 7a03 	vldr	s15, [r3, #12]
 80024a2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80024a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024aa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80024ae:	ed97 7a00 	vldr	s14, [r7]
 80024b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b6:	edc7 7a07 	vstr	s15, [r7, #28]
    pid->prevError = error;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024be:	60da      	str	r2, [r3, #12]

    // Calcul de la sortie PID
    float pid_output = proportional + integral + derivative;
 80024c0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80024c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80024c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80024d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d4:	edc7 7a06 	vstr	s15, [r7, #24]

    // Mapping de la sortie PID vers Alpha (0-100)
    float alpha = pid_output;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	617b      	str	r3, [r7, #20]


    return alpha;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	ee07 3a90 	vmov	s15, r3
}
 80024e2:	eeb0 0a67 	vmov.f32	s0, s15
 80024e6:	3730      	adds	r7, #48	@ 0x30
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	f3af 8000 	nop.w
 80024f0:	11111111 	.word	0x11111111
 80024f4:	3fb11111 	.word	0x3fb11111

080024f8 <pwm_start>:
#include "mylibs/pwm.h"
#include "tim.h"

int aTemp;

void pwm_start(void){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0

	aTemp=50;
 80024fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <pwm_start+0x30>)
 80024fe:	2232      	movs	r2, #50	@ 0x32
 8002500:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002502:	2100      	movs	r1, #0
 8002504:	4809      	ldr	r0, [pc, #36]	@ (800252c <pwm_start+0x34>)
 8002506:	f004 fb91 	bl	8006c2c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800250a:	2100      	movs	r1, #0
 800250c:	4807      	ldr	r0, [pc, #28]	@ (800252c <pwm_start+0x34>)
 800250e:	f005 fd15 	bl	8007f3c <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002512:	2104      	movs	r1, #4
 8002514:	4805      	ldr	r0, [pc, #20]	@ (800252c <pwm_start+0x34>)
 8002516:	f004 fb89 	bl	8006c2c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800251a:	2104      	movs	r1, #4
 800251c:	4803      	ldr	r0, [pc, #12]	@ (800252c <pwm_start+0x34>)
 800251e:	f005 fd0d 	bl	8007f3c <HAL_TIMEx_PWMN_Start>


}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200006e8 	.word	0x200006e8
 800252c:	200004c8 	.word	0x200004c8

08002530 <pwm_stop>:


void pwm_stop(void){
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
	set_pwm_alpha(50);
 8002534:	2032      	movs	r0, #50	@ 0x32
 8002536:	f000 f815 	bl	8002564 <set_pwm_alpha>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800253a:	2100      	movs	r1, #0
 800253c:	4808      	ldr	r0, [pc, #32]	@ (8002560 <pwm_stop+0x30>)
 800253e:	f004 fc87 	bl	8006e50 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002542:	2100      	movs	r1, #0
 8002544:	4806      	ldr	r0, [pc, #24]	@ (8002560 <pwm_stop+0x30>)
 8002546:	f005 fdbb 	bl	80080c0 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800254a:	2104      	movs	r1, #4
 800254c:	4804      	ldr	r0, [pc, #16]	@ (8002560 <pwm_stop+0x30>)
 800254e:	f004 fc7f 	bl	8006e50 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002552:	2104      	movs	r1, #4
 8002554:	4802      	ldr	r0, [pc, #8]	@ (8002560 <pwm_stop+0x30>)
 8002556:	f005 fdb3 	bl	80080c0 <HAL_TIMEx_PWMN_Stop>
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200004c8 	.word	0x200004c8

08002564 <set_pwm_alpha>:

/*
 * TP2
 */

void set_pwm_alpha(int alpha){
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	int a1;
	int a2;
	int aTransi=aTemp;
 800256c:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <set_pwm_alpha+0xb8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	617b      	str	r3, [r7, #20]

	if (alpha > aTransi){
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	429a      	cmp	r2, r3
 8002578:	dd22      	ble.n	80025c0 <set_pwm_alpha+0x5c>
		while(aTransi != alpha){
 800257a:	e01d      	b.n	80025b8 <set_pwm_alpha+0x54>

			aTransi++;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	011a      	lsls	r2, r3, #4
 800258c:	4413      	add	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	011a      	lsls	r2, r3, #4
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 80025a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002620 <set_pwm_alpha+0xbc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 80025aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <set_pwm_alpha+0xbc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(100);
 80025b2:	2064      	movs	r0, #100	@ 0x64
 80025b4:	f000 fc78 	bl	8002ea8 <HAL_Delay>
		while(aTransi != alpha){
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d1dd      	bne.n	800257c <set_pwm_alpha+0x18>
		}
	}

	if (alpha < aTransi){
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	da22      	bge.n	800260e <set_pwm_alpha+0xaa>
		while(aTransi != alpha){
 80025c8:	e01d      	b.n	8002606 <set_pwm_alpha+0xa2>

			aTransi--;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	011a      	lsls	r2, r3, #4
 80025da:	4413      	add	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	011a      	lsls	r2, r3, #4
 80025ec:	4413      	add	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <set_pwm_alpha+0xbc>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 80025f8:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <set_pwm_alpha+0xbc>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	639a      	str	r2, [r3, #56]	@ 0x38

			HAL_Delay(100);
 8002600:	2064      	movs	r0, #100	@ 0x64
 8002602:	f000 fc51 	bl	8002ea8 <HAL_Delay>
		while(aTransi != alpha){
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	d1dd      	bne.n	80025ca <set_pwm_alpha+0x66>
		}
	}
	aTemp = alpha;
 800260e:	4a03      	ldr	r2, [pc, #12]	@ (800261c <set_pwm_alpha+0xb8>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6013      	str	r3, [r2, #0]
}
 8002614:	bf00      	nop
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200006e8 	.word	0x200006e8
 8002620:	200004c8 	.word	0x200004c8

08002624 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002628:	2224      	movs	r2, #36	@ 0x24
 800262a:	2100      	movs	r1, #0
 800262c:	4816      	ldr	r0, [pc, #88]	@ (8002688 <Shell_Init+0x64>)
 800262e:	f008 feb0 	bl	800b392 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8002632:	2240      	movs	r2, #64	@ 0x40
 8002634:	2100      	movs	r1, #0
 8002636:	4815      	ldr	r0, [pc, #84]	@ (800268c <Shell_Init+0x68>)
 8002638:	f008 feab 	bl	800b392 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 800263c:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <Shell_Init+0x6c>)
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8002642:	2240      	movs	r2, #64	@ 0x40
 8002644:	2100      	movs	r1, #0
 8002646:	4813      	ldr	r0, [pc, #76]	@ (8002694 <Shell_Init+0x70>)
 8002648:	f008 fea3 	bl	800b392 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800264c:	2201      	movs	r2, #1
 800264e:	4910      	ldr	r1, [pc, #64]	@ (8002690 <Shell_Init+0x6c>)
 8002650:	4811      	ldr	r0, [pc, #68]	@ (8002698 <Shell_Init+0x74>)
 8002652:	f006 f819 	bl	8008688 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002656:	4811      	ldr	r0, [pc, #68]	@ (800269c <Shell_Init+0x78>)
 8002658:	f7fd fe42 	bl	80002e0 <strlen>
 800265c:	4603      	mov	r3, r0
 800265e:	b29a      	uxth	r2, r3
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	490d      	ldr	r1, [pc, #52]	@ (800269c <Shell_Init+0x78>)
 8002666:	480c      	ldr	r0, [pc, #48]	@ (8002698 <Shell_Init+0x74>)
 8002668:	f005 ff80 	bl	800856c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800266c:	480c      	ldr	r0, [pc, #48]	@ (80026a0 <Shell_Init+0x7c>)
 800266e:	f7fd fe37 	bl	80002e0 <strlen>
 8002672:	4603      	mov	r3, r0
 8002674:	b29a      	uxth	r2, r3
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	4909      	ldr	r1, [pc, #36]	@ (80026a0 <Shell_Init+0x7c>)
 800267c:	4806      	ldr	r0, [pc, #24]	@ (8002698 <Shell_Init+0x74>)
 800267e:	f005 ff75 	bl	800856c <HAL_UART_Transmit>
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000780 	.word	0x20000780
 800268c:	2000073c 	.word	0x2000073c
 8002690:	200006f0 	.word	0x200006f0
 8002694:	200006f4 	.word	0x200006f4
 8002698:	200005ac 	.word	0x200005ac
 800269c:	2000002c 	.word	0x2000002c
 80026a0:	20000010 	.word	0x20000010
 80026a4:	00000000 	.word	0x00000000

080026a8 <Shell_Loop>:

void Shell_Loop(void){
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b08b      	sub	sp, #44	@ 0x2c
 80026ac:	af02      	add	r7, sp, #8

	int uartTxStringLength;

	if(uartRxReceived){
 80026ae:	4ba2      	ldr	r3, [pc, #648]	@ (8002938 <Shell_Loop+0x290>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d05b      	beq.n	800276e <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80026b6:	4ba1      	ldr	r3, [pc, #644]	@ (800293c <Shell_Loop+0x294>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d034      	beq.n	8002728 <Shell_Loop+0x80>
 80026be:	2b0d      	cmp	r3, #13
 80026c0:	d142      	bne.n	8002748 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	2203      	movs	r2, #3
 80026c8:	499d      	ldr	r1, [pc, #628]	@ (8002940 <Shell_Loop+0x298>)
 80026ca:	489e      	ldr	r0, [pc, #632]	@ (8002944 <Shell_Loop+0x29c>)
 80026cc:	f005 ff4e 	bl	800856c <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80026d0:	4b9d      	ldr	r3, [pc, #628]	@ (8002948 <Shell_Loop+0x2a0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a9d      	ldr	r2, [pc, #628]	@ (800294c <Shell_Loop+0x2a4>)
 80026d6:	2100      	movs	r1, #0
 80026d8:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80026da:	4b9d      	ldr	r3, [pc, #628]	@ (8002950 <Shell_Loop+0x2a8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80026e0:	499c      	ldr	r1, [pc, #624]	@ (8002954 <Shell_Loop+0x2ac>)
 80026e2:	489a      	ldr	r0, [pc, #616]	@ (800294c <Shell_Loop+0x2a4>)
 80026e4:	f008 fe5e 	bl	800b3a4 <strtok>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a9b      	ldr	r2, [pc, #620]	@ (8002958 <Shell_Loop+0x2b0>)
 80026ec:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80026ee:	e010      	b.n	8002712 <Shell_Loop+0x6a>
				argv[argc++] = token;
 80026f0:	4b97      	ldr	r3, [pc, #604]	@ (8002950 <Shell_Loop+0x2a8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	4996      	ldr	r1, [pc, #600]	@ (8002950 <Shell_Loop+0x2a8>)
 80026f8:	600a      	str	r2, [r1, #0]
 80026fa:	4a97      	ldr	r2, [pc, #604]	@ (8002958 <Shell_Loop+0x2b0>)
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4997      	ldr	r1, [pc, #604]	@ (800295c <Shell_Loop+0x2b4>)
 8002700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8002704:	4993      	ldr	r1, [pc, #588]	@ (8002954 <Shell_Loop+0x2ac>)
 8002706:	2000      	movs	r0, #0
 8002708:	f008 fe4c 	bl	800b3a4 <strtok>
 800270c:	4603      	mov	r3, r0
 800270e:	4a92      	ldr	r2, [pc, #584]	@ (8002958 <Shell_Loop+0x2b0>)
 8002710:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002712:	4b91      	ldr	r3, [pc, #580]	@ (8002958 <Shell_Loop+0x2b0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ea      	bne.n	80026f0 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 800271a:	4b8b      	ldr	r3, [pc, #556]	@ (8002948 <Shell_Loop+0x2a0>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002720:	4b8f      	ldr	r3, [pc, #572]	@ (8002960 <Shell_Loop+0x2b8>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
			break;
 8002726:	e01f      	b.n	8002768 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002728:	4b87      	ldr	r3, [pc, #540]	@ (8002948 <Shell_Loop+0x2a0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	4986      	ldr	r1, [pc, #536]	@ (8002948 <Shell_Loop+0x2a0>)
 8002730:	600a      	str	r2, [r1, #0]
 8002732:	4a86      	ldr	r2, [pc, #536]	@ (800294c <Shell_Loop+0x2a4>)
 8002734:	2100      	movs	r1, #0
 8002736:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
 800273c:	2204      	movs	r2, #4
 800273e:	4989      	ldr	r1, [pc, #548]	@ (8002964 <Shell_Loop+0x2bc>)
 8002740:	4880      	ldr	r0, [pc, #512]	@ (8002944 <Shell_Loop+0x29c>)
 8002742:	f005 ff13 	bl	800856c <HAL_UART_Transmit>
			break;
 8002746:	e00f      	b.n	8002768 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002748:	4b7f      	ldr	r3, [pc, #508]	@ (8002948 <Shell_Loop+0x2a0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	497e      	ldr	r1, [pc, #504]	@ (8002948 <Shell_Loop+0x2a0>)
 8002750:	600a      	str	r2, [r1, #0]
 8002752:	4a7a      	ldr	r2, [pc, #488]	@ (800293c <Shell_Loop+0x294>)
 8002754:	7811      	ldrb	r1, [r2, #0]
 8002756:	4a7d      	ldr	r2, [pc, #500]	@ (800294c <Shell_Loop+0x2a4>)
 8002758:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	2201      	movs	r2, #1
 8002760:	4976      	ldr	r1, [pc, #472]	@ (800293c <Shell_Loop+0x294>)
 8002762:	4878      	ldr	r0, [pc, #480]	@ (8002944 <Shell_Loop+0x29c>)
 8002764:	f005 ff02 	bl	800856c <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8002768:	4b73      	ldr	r3, [pc, #460]	@ (8002938 <Shell_Loop+0x290>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 800276e:	4b7c      	ldr	r3, [pc, #496]	@ (8002960 <Shell_Loop+0x2b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 82f3 	beq.w	8002d5e <Shell_Loop+0x6b6>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8002778:	4b78      	ldr	r3, [pc, #480]	@ (800295c <Shell_Loop+0x2b4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	497a      	ldr	r1, [pc, #488]	@ (8002968 <Shell_Loop+0x2c0>)
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fd4e 	bl	8000220 <strcmp>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	221a      	movs	r2, #26
 8002790:	4976      	ldr	r1, [pc, #472]	@ (800296c <Shell_Loop+0x2c4>)
 8002792:	486c      	ldr	r0, [pc, #432]	@ (8002944 <Shell_Loop+0x29c>)
 8002794:	f005 feea 	bl	800856c <HAL_UART_Transmit>
 8002798:	e2d7      	b.n	8002d4a <Shell_Loop+0x6a2>
		}
		else if(strcmp(argv[0],"help")==0){
 800279a:	4b70      	ldr	r3, [pc, #448]	@ (800295c <Shell_Loop+0x2b4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4974      	ldr	r1, [pc, #464]	@ (8002970 <Shell_Loop+0x2c8>)
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fd3d 	bl	8000220 <strcmp>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 808d 	bne.w	80028c8 <Shell_Loop+0x220>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80027ae:	4a71      	ldr	r2, [pc, #452]	@ (8002974 <Shell_Loop+0x2cc>)
 80027b0:	2140      	movs	r1, #64	@ 0x40
 80027b2:	4871      	ldr	r0, [pc, #452]	@ (8002978 <Shell_Loop+0x2d0>)
 80027b4:	f008 fd76 	bl	800b2a4 <sniprintf>
 80027b8:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	496d      	ldr	r1, [pc, #436]	@ (8002978 <Shell_Loop+0x2d0>)
 80027c4:	485f      	ldr	r0, [pc, #380]	@ (8002944 <Shell_Loop+0x29c>)
 80027c6:	f005 fed1 	bl	800856c <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "help : Donne les fonctions disponibles\r\n");
 80027ca:	4a6c      	ldr	r2, [pc, #432]	@ (800297c <Shell_Loop+0x2d4>)
 80027cc:	2140      	movs	r1, #64	@ 0x40
 80027ce:	486a      	ldr	r0, [pc, #424]	@ (8002978 <Shell_Loop+0x2d0>)
 80027d0:	f008 fd68 	bl	800b2a4 <sniprintf>
 80027d4:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
 80027de:	4966      	ldr	r1, [pc, #408]	@ (8002978 <Shell_Loop+0x2d0>)
 80027e0:	4858      	ldr	r0, [pc, #352]	@ (8002944 <Shell_Loop+0x29c>)
 80027e2:	f005 fec3 	bl	800856c <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "WhereisBrian? : dit ou se situe Brian\r\n");
 80027e6:	4a66      	ldr	r2, [pc, #408]	@ (8002980 <Shell_Loop+0x2d8>)
 80027e8:	2140      	movs	r1, #64	@ 0x40
 80027ea:	4863      	ldr	r0, [pc, #396]	@ (8002978 <Shell_Loop+0x2d0>)
 80027ec:	f008 fd5a 	bl	800b2a4 <sniprintf>
 80027f0:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	495f      	ldr	r1, [pc, #380]	@ (8002978 <Shell_Loop+0x2d0>)
 80027fc:	4851      	ldr	r0, [pc, #324]	@ (8002944 <Shell_Loop+0x29c>)
 80027fe:	f005 feb5 	bl	800856c <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speed XXX : Set la speed\r\n");
 8002802:	4a60      	ldr	r2, [pc, #384]	@ (8002984 <Shell_Loop+0x2dc>)
 8002804:	2140      	movs	r1, #64	@ 0x40
 8002806:	485c      	ldr	r0, [pc, #368]	@ (8002978 <Shell_Loop+0x2d0>)
 8002808:	f008 fd4c 	bl	800b2a4 <sniprintf>
 800280c:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	b29a      	uxth	r2, r3
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	4958      	ldr	r1, [pc, #352]	@ (8002978 <Shell_Loop+0x2d0>)
 8002818:	484a      	ldr	r0, [pc, #296]	@ (8002944 <Shell_Loop+0x29c>)
 800281a:	f005 fea7 	bl	800856c <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speedStart : Start les PWM\r\n");
 800281e:	4a5a      	ldr	r2, [pc, #360]	@ (8002988 <Shell_Loop+0x2e0>)
 8002820:	2140      	movs	r1, #64	@ 0x40
 8002822:	4855      	ldr	r0, [pc, #340]	@ (8002978 <Shell_Loop+0x2d0>)
 8002824:	f008 fd3e 	bl	800b2a4 <sniprintf>
 8002828:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	b29a      	uxth	r2, r3
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	4951      	ldr	r1, [pc, #324]	@ (8002978 <Shell_Loop+0x2d0>)
 8002834:	4843      	ldr	r0, [pc, #268]	@ (8002944 <Shell_Loop+0x29c>)
 8002836:	f005 fe99 	bl	800856c <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speedStop : Stop les PWM\r\n");
 800283a:	4a54      	ldr	r2, [pc, #336]	@ (800298c <Shell_Loop+0x2e4>)
 800283c:	2140      	movs	r1, #64	@ 0x40
 800283e:	484e      	ldr	r0, [pc, #312]	@ (8002978 <Shell_Loop+0x2d0>)
 8002840:	f008 fd30 	bl	800b2a4 <sniprintf>
 8002844:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	b29a      	uxth	r2, r3
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	494a      	ldr	r1, [pc, #296]	@ (8002978 <Shell_Loop+0x2d0>)
 8002850:	483c      	ldr	r0, [pc, #240]	@ (8002944 <Shell_Loop+0x29c>)
 8002852:	f005 fe8b 	bl	800856c <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "adcValue : Recupere la valeure de l'adc\r\n");
 8002856:	4a4e      	ldr	r2, [pc, #312]	@ (8002990 <Shell_Loop+0x2e8>)
 8002858:	2140      	movs	r1, #64	@ 0x40
 800285a:	4847      	ldr	r0, [pc, #284]	@ (8002978 <Shell_Loop+0x2d0>)
 800285c:	f008 fd22 	bl	800b2a4 <sniprintf>
 8002860:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	b29a      	uxth	r2, r3
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
 800286a:	4943      	ldr	r1, [pc, #268]	@ (8002978 <Shell_Loop+0x2d0>)
 800286c:	4835      	ldr	r0, [pc, #212]	@ (8002944 <Shell_Loop+0x29c>)
 800286e:	f005 fe7d 	bl	800856c <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "vitesse : Recupere la valeure de vitesse\r\n");
 8002872:	4a48      	ldr	r2, [pc, #288]	@ (8002994 <Shell_Loop+0x2ec>)
 8002874:	2140      	movs	r1, #64	@ 0x40
 8002876:	4840      	ldr	r0, [pc, #256]	@ (8002978 <Shell_Loop+0x2d0>)
 8002878:	f008 fd14 	bl	800b2a4 <sniprintf>
 800287c:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	b29a      	uxth	r2, r3
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	493c      	ldr	r1, [pc, #240]	@ (8002978 <Shell_Loop+0x2d0>)
 8002888:	482e      	ldr	r0, [pc, #184]	@ (8002944 <Shell_Loop+0x29c>)
 800288a:	f005 fe6f 	bl	800856c <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "asserv : Choisit une valeure de tr/min\r\n");
 800288e:	4a42      	ldr	r2, [pc, #264]	@ (8002998 <Shell_Loop+0x2f0>)
 8002890:	2140      	movs	r1, #64	@ 0x40
 8002892:	4839      	ldr	r0, [pc, #228]	@ (8002978 <Shell_Loop+0x2d0>)
 8002894:	f008 fd06 	bl	800b2a4 <sniprintf>
 8002898:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	b29a      	uxth	r2, r3
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	4935      	ldr	r1, [pc, #212]	@ (8002978 <Shell_Loop+0x2d0>)
 80028a4:	4827      	ldr	r0, [pc, #156]	@ (8002944 <Shell_Loop+0x29c>)
 80028a6:	f005 fe61 	bl	800856c <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "asservPrint : Print la valeure d'alpha calculée par asserv\r\n");
 80028aa:	4a3c      	ldr	r2, [pc, #240]	@ (800299c <Shell_Loop+0x2f4>)
 80028ac:	2140      	movs	r1, #64	@ 0x40
 80028ae:	4832      	ldr	r0, [pc, #200]	@ (8002978 <Shell_Loop+0x2d0>)
 80028b0:	f008 fcf8 	bl	800b2a4 <sniprintf>
 80028b4:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	492e      	ldr	r1, [pc, #184]	@ (8002978 <Shell_Loop+0x2d0>)
 80028c0:	4820      	ldr	r0, [pc, #128]	@ (8002944 <Shell_Loop+0x29c>)
 80028c2:	f005 fe53 	bl	800856c <HAL_UART_Transmit>
 80028c6:	e240      	b.n	8002d4a <Shell_Loop+0x6a2>
		}
		else if(strcmp(argv[0],"speed")==0){
 80028c8:	4b24      	ldr	r3, [pc, #144]	@ (800295c <Shell_Loop+0x2b4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4934      	ldr	r1, [pc, #208]	@ (80029a0 <Shell_Loop+0x2f8>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fca6 	bl	8000220 <strcmp>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 808d 	bne.w	80029f6 <Shell_Loop+0x34e>
			if(atoi(argv[1])>=0){
 80028dc:	4b1f      	ldr	r3, [pc, #124]	@ (800295c <Shell_Loop+0x2b4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f007 ff3d 	bl	800a760 <atoi>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	db6f      	blt.n	80029cc <Shell_Loop+0x324>
				if(atoi(argv[1])<=100){
 80028ec:	4b1b      	ldr	r3, [pc, #108]	@ (800295c <Shell_Loop+0x2b4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f007 ff35 	bl	800a760 <atoi>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b64      	cmp	r3, #100	@ 0x64
 80028fa:	dc55      	bgt.n	80029a8 <Shell_Loop+0x300>
					set_pwm_alpha(atoi(argv[1]));
 80028fc:	4b17      	ldr	r3, [pc, #92]	@ (800295c <Shell_Loop+0x2b4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4618      	mov	r0, r3
 8002902:	f007 ff2d 	bl	800a760 <atoi>
 8002906:	4603      	mov	r3, r0
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fe2b 	bl	8002564 <set_pwm_alpha>
					uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = %d\r\n",atoi(argv[1]));
 800290e:	4b13      	ldr	r3, [pc, #76]	@ (800295c <Shell_Loop+0x2b4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4618      	mov	r0, r3
 8002914:	f007 ff24 	bl	800a760 <atoi>
 8002918:	4603      	mov	r3, r0
 800291a:	4a22      	ldr	r2, [pc, #136]	@ (80029a4 <Shell_Loop+0x2fc>)
 800291c:	2140      	movs	r1, #64	@ 0x40
 800291e:	4816      	ldr	r0, [pc, #88]	@ (8002978 <Shell_Loop+0x2d0>)
 8002920:	f008 fcc0 	bl	800b2a4 <sniprintf>
 8002924:	6138      	str	r0, [r7, #16]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	b29a      	uxth	r2, r3
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	4912      	ldr	r1, [pc, #72]	@ (8002978 <Shell_Loop+0x2d0>)
 8002930:	4804      	ldr	r0, [pc, #16]	@ (8002944 <Shell_Loop+0x29c>)
 8002932:	f005 fe1b 	bl	800856c <HAL_UART_Transmit>
 8002936:	e208      	b.n	8002d4a <Shell_Loop+0x6a2>
 8002938:	200006ec 	.word	0x200006ec
 800293c:	200006f0 	.word	0x200006f0
 8002940:	20000094 	.word	0x20000094
 8002944:	200005ac 	.word	0x200005ac
 8002948:	2000077c 	.word	0x2000077c
 800294c:	2000073c 	.word	0x2000073c
 8002950:	200007a4 	.word	0x200007a4
 8002954:	0800d5f8 	.word	0x0800d5f8
 8002958:	200007a8 	.word	0x200007a8
 800295c:	20000780 	.word	0x20000780
 8002960:	200007ac 	.word	0x200007ac
 8002964:	20000098 	.word	0x20000098
 8002968:	0800d5fc 	.word	0x0800d5fc
 800296c:	200000b0 	.word	0x200000b0
 8002970:	0800d60c 	.word	0x0800d60c
 8002974:	0800d614 	.word	0x0800d614
 8002978:	200006f4 	.word	0x200006f4
 800297c:	0800d63c 	.word	0x0800d63c
 8002980:	0800d668 	.word	0x0800d668
 8002984:	0800d690 	.word	0x0800d690
 8002988:	0800d6ac 	.word	0x0800d6ac
 800298c:	0800d6cc 	.word	0x0800d6cc
 8002990:	0800d6e8 	.word	0x0800d6e8
 8002994:	0800d714 	.word	0x0800d714
 8002998:	0800d740 	.word	0x0800d740
 800299c:	0800d76c 	.word	0x0800d76c
 80029a0:	0800d7ac 	.word	0x0800d7ac
 80029a4:	0800d7b4 	.word	0x0800d7b4
				}else{
					set_pwm_alpha(100);
 80029a8:	2064      	movs	r0, #100	@ 0x64
 80029aa:	f7ff fddb 	bl	8002564 <set_pwm_alpha>
					uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = 100\r\n");
 80029ae:	4a66      	ldr	r2, [pc, #408]	@ (8002b48 <Shell_Loop+0x4a0>)
 80029b0:	2140      	movs	r1, #64	@ 0x40
 80029b2:	4866      	ldr	r0, [pc, #408]	@ (8002b4c <Shell_Loop+0x4a4>)
 80029b4:	f008 fc76 	bl	800b2a4 <sniprintf>
 80029b8:	6138      	str	r0, [r7, #16]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
 80029c2:	4962      	ldr	r1, [pc, #392]	@ (8002b4c <Shell_Loop+0x4a4>)
 80029c4:	4862      	ldr	r0, [pc, #392]	@ (8002b50 <Shell_Loop+0x4a8>)
 80029c6:	f005 fdd1 	bl	800856c <HAL_UART_Transmit>
 80029ca:	e1be      	b.n	8002d4a <Shell_Loop+0x6a2>
				}
			}else{
				uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur alpha est pas entre 0 et 100\r\n",atoi(argv[1]));
 80029cc:	4b61      	ldr	r3, [pc, #388]	@ (8002b54 <Shell_Loop+0x4ac>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f007 fec5 	bl	800a760 <atoi>
 80029d6:	4603      	mov	r3, r0
 80029d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002b58 <Shell_Loop+0x4b0>)
 80029da:	2140      	movs	r1, #64	@ 0x40
 80029dc:	485b      	ldr	r0, [pc, #364]	@ (8002b4c <Shell_Loop+0x4a4>)
 80029de:	f008 fc61 	bl	800b2a4 <sniprintf>
 80029e2:	6138      	str	r0, [r7, #16]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295
 80029ec:	4957      	ldr	r1, [pc, #348]	@ (8002b4c <Shell_Loop+0x4a4>)
 80029ee:	4858      	ldr	r0, [pc, #352]	@ (8002b50 <Shell_Loop+0x4a8>)
 80029f0:	f005 fdbc 	bl	800856c <HAL_UART_Transmit>
 80029f4:	e1a9      	b.n	8002d4a <Shell_Loop+0x6a2>
			}
		}else if(strcmp(argv[0],"speedStart")==0){
 80029f6:	4b57      	ldr	r3, [pc, #348]	@ (8002b54 <Shell_Loop+0x4ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4958      	ldr	r1, [pc, #352]	@ (8002b5c <Shell_Loop+0x4b4>)
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fc0f 	bl	8000220 <strcmp>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <Shell_Loop+0x366>
			pwm_start();
 8002a08:	f7ff fd76 	bl	80024f8 <pwm_start>
 8002a0c:	e19d      	b.n	8002d4a <Shell_Loop+0x6a2>
		}else if(strcmp(argv[0],"speedStop")==0){
 8002a0e:	4b51      	ldr	r3, [pc, #324]	@ (8002b54 <Shell_Loop+0x4ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4953      	ldr	r1, [pc, #332]	@ (8002b60 <Shell_Loop+0x4b8>)
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fc03 	bl	8000220 <strcmp>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <Shell_Loop+0x37e>
			pwm_stop();
 8002a20:	f7ff fd86 	bl	8002530 <pwm_stop>
 8002a24:	e191      	b.n	8002d4a <Shell_Loop+0x6a2>

		}else if(strcmp(argv[0], "asservPrint")==0){
 8002a26:	4b4b      	ldr	r3, [pc, #300]	@ (8002b54 <Shell_Loop+0x4ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	494e      	ldr	r1, [pc, #312]	@ (8002b64 <Shell_Loop+0x4bc>)
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fbf7 	bl	8000220 <strcmp>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d115      	bne.n	8002a64 <Shell_Loop+0x3bc>

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouvelle alpha = %d\r\n",(int)NewAlpha);
 8002a38:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <Shell_Loop+0x4c0>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a42:	ee17 3a90 	vmov	r3, s15
 8002a46:	4a49      	ldr	r2, [pc, #292]	@ (8002b6c <Shell_Loop+0x4c4>)
 8002a48:	2140      	movs	r1, #64	@ 0x40
 8002a4a:	4840      	ldr	r0, [pc, #256]	@ (8002b4c <Shell_Loop+0x4a4>)
 8002a4c:	f008 fc2a 	bl	800b2a4 <sniprintf>
 8002a50:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	493c      	ldr	r1, [pc, #240]	@ (8002b4c <Shell_Loop+0x4a4>)
 8002a5c:	483c      	ldr	r0, [pc, #240]	@ (8002b50 <Shell_Loop+0x4a8>)
 8002a5e:	f005 fd85 	bl	800856c <HAL_UART_Transmit>
 8002a62:	e172      	b.n	8002d4a <Shell_Loop+0x6a2>

		}else if(strcmp(argv[0],"asserv")==0){//Fonction permettant de lancer l'asservissement
 8002a64:	4b3b      	ldr	r3, [pc, #236]	@ (8002b54 <Shell_Loop+0x4ac>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4941      	ldr	r1, [pc, #260]	@ (8002b70 <Shell_Loop+0x4c8>)
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fbd8 	bl	8000220 <strcmp>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d148      	bne.n	8002b08 <Shell_Loop+0x460>
			if((atoi(argv[1])>=-3000) & (atoi(argv[1])<=3000)){
 8002a76:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <Shell_Loop+0x4ac>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f007 fe70 	bl	800a760 <atoi>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4a3c      	ldr	r2, [pc, #240]	@ (8002b74 <Shell_Loop+0x4cc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	bfac      	ite	ge
 8002a88:	2301      	movge	r3, #1
 8002a8a:	2300      	movlt	r3, #0
 8002a8c:	b2dc      	uxtb	r4, r3
 8002a8e:	4b31      	ldr	r3, [pc, #196]	@ (8002b54 <Shell_Loop+0x4ac>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f007 fe64 	bl	800a760 <atoi>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	bfd4      	ite	le
 8002aa2:	2301      	movle	r3, #1
 8002aa4:	2300      	movgt	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	4023      	ands	r3, r4
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01c      	beq.n	8002aea <Shell_Loop+0x442>
				consigne = atoi(argv[1]);
 8002ab0:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <Shell_Loop+0x4ac>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f007 fe53 	bl	800a760 <atoi>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a2e      	ldr	r2, [pc, #184]	@ (8002b78 <Shell_Loop+0x4d0>)
 8002abe:	6013      	str	r3, [r2, #0]
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouvelle consigne = %d\r\n",atoi(argv[1]));
 8002ac0:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <Shell_Loop+0x4ac>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f007 fe4b 	bl	800a760 <atoi>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4a2b      	ldr	r2, [pc, #172]	@ (8002b7c <Shell_Loop+0x4d4>)
 8002ace:	2140      	movs	r1, #64	@ 0x40
 8002ad0:	481e      	ldr	r0, [pc, #120]	@ (8002b4c <Shell_Loop+0x4a4>)
 8002ad2:	f008 fbe7 	bl	800b2a4 <sniprintf>
 8002ad6:	6078      	str	r0, [r7, #4]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae0:	491a      	ldr	r1, [pc, #104]	@ (8002b4c <Shell_Loop+0x4a4>)
 8002ae2:	481b      	ldr	r0, [pc, #108]	@ (8002b50 <Shell_Loop+0x4a8>)
 8002ae4:	f005 fd42 	bl	800856c <HAL_UART_Transmit>
 8002ae8:	e12f      	b.n	8002d4a <Shell_Loop+0x6a2>
			}
			else{//Sécuritée permettant de ne pas avoir une vitesse inatteignable
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur consigne doit être comprise entre + ou - 3000 tour/min\r\n");
 8002aea:	4a25      	ldr	r2, [pc, #148]	@ (8002b80 <Shell_Loop+0x4d8>)
 8002aec:	2140      	movs	r1, #64	@ 0x40
 8002aee:	4817      	ldr	r0, [pc, #92]	@ (8002b4c <Shell_Loop+0x4a4>)
 8002af0:	f008 fbd8 	bl	800b2a4 <sniprintf>
 8002af4:	60b8      	str	r0, [r7, #8]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	4913      	ldr	r1, [pc, #76]	@ (8002b4c <Shell_Loop+0x4a4>)
 8002b00:	4813      	ldr	r0, [pc, #76]	@ (8002b50 <Shell_Loop+0x4a8>)
 8002b02:	f005 fd33 	bl	800856c <HAL_UART_Transmit>
 8002b06:	e120      	b.n	8002d4a <Shell_Loop+0x6a2>
			}

		}else if(strcmp(argv[0],"vitesse")==0){//Fonction permettant d'éteindre les PWM
 8002b08:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <Shell_Loop+0x4ac>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	491d      	ldr	r1, [pc, #116]	@ (8002b84 <Shell_Loop+0x4dc>)
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fb86 	bl	8000220 <strcmp>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d13a      	bne.n	8002b90 <Shell_Loop+0x4e8>

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Vitesse : %d\r\n",(int)vitesse[0]);
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <Shell_Loop+0x4e0>)
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b24:	ee17 3a90 	vmov	r3, s15
 8002b28:	4a18      	ldr	r2, [pc, #96]	@ (8002b8c <Shell_Loop+0x4e4>)
 8002b2a:	2140      	movs	r1, #64	@ 0x40
 8002b2c:	4807      	ldr	r0, [pc, #28]	@ (8002b4c <Shell_Loop+0x4a4>)
 8002b2e:	f008 fbb9 	bl	800b2a4 <sniprintf>
 8002b32:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3c:	4903      	ldr	r1, [pc, #12]	@ (8002b4c <Shell_Loop+0x4a4>)
 8002b3e:	4804      	ldr	r0, [pc, #16]	@ (8002b50 <Shell_Loop+0x4a8>)
 8002b40:	f005 fd14 	bl	800856c <HAL_UART_Transmit>
 8002b44:	e101      	b.n	8002d4a <Shell_Loop+0x6a2>
 8002b46:	bf00      	nop
 8002b48:	0800d7cc 	.word	0x0800d7cc
 8002b4c:	200006f4 	.word	0x200006f4
 8002b50:	200005ac 	.word	0x200005ac
 8002b54:	20000780 	.word	0x20000780
 8002b58:	0800d7e4 	.word	0x0800d7e4
 8002b5c:	0800d80c 	.word	0x0800d80c
 8002b60:	0800d818 	.word	0x0800d818
 8002b64:	0800d824 	.word	0x0800d824
 8002b68:	20000738 	.word	0x20000738
 8002b6c:	0800d830 	.word	0x0800d830
 8002b70:	0800d848 	.word	0x0800d848
 8002b74:	fffff448 	.word	0xfffff448
 8002b78:	20000734 	.word	0x20000734
 8002b7c:	0800d850 	.word	0x0800d850
 8002b80:	0800d86c 	.word	0x0800d86c
 8002b84:	0800d8b0 	.word	0x0800d8b0
 8002b88:	200006dc 	.word	0x200006dc
 8002b8c:	0800d8b8 	.word	0x0800d8b8


		}else if(strcmp(argv[0],"adcValue")==0){
 8002b90:	4b7d      	ldr	r3, [pc, #500]	@ (8002d88 <Shell_Loop+0x6e0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	497d      	ldr	r1, [pc, #500]	@ (8002d8c <Shell_Loop+0x6e4>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fb42 	bl	8000220 <strcmp>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 80cc 	bne.w	8002d3c <Shell_Loop+0x694>

			float adc1 = ((((float)value_adc1[0]/4095.0)*3.3)-1.65)/0.05;
 8002ba4:	4b7a      	ldr	r3, [pc, #488]	@ (8002d90 <Shell_Loop+0x6e8>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb0:	ee17 0a90 	vmov	r0, s15
 8002bb4:	f7fd fd00 	bl	80005b8 <__aeabi_f2d>
 8002bb8:	a36b      	add	r3, pc, #428	@ (adr r3, 8002d68 <Shell_Loop+0x6c0>)
 8002bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbe:	f7fd fe7d 	bl	80008bc <__aeabi_ddiv>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	a369      	add	r3, pc, #420	@ (adr r3, 8002d70 <Shell_Loop+0x6c8>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fd4a 	bl	8000668 <__aeabi_dmul>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	a366      	add	r3, pc, #408	@ (adr r3, 8002d78 <Shell_Loop+0x6d0>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd fb89 	bl	80002f8 <__aeabi_dsub>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	a364      	add	r3, pc, #400	@ (adr r3, 8002d80 <Shell_Loop+0x6d8>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd fe62 	bl	80008bc <__aeabi_ddiv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f7fe f80a 	bl	8000c18 <__aeabi_d2f>
 8002c04:	4603      	mov	r3, r0
 8002c06:	61fb      	str	r3, [r7, #28]
			float adc2 = ((((float)value_adc1[1]/4095)*3.3)-1.65)/0.05;
 8002c08:	4b61      	ldr	r3, [pc, #388]	@ (8002d90 <Shell_Loop+0x6e8>)
 8002c0a:	885b      	ldrh	r3, [r3, #2]
 8002c0c:	ee07 3a90 	vmov	s15, r3
 8002c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c14:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8002d94 <Shell_Loop+0x6ec>
 8002c18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c1c:	ee16 0a90 	vmov	r0, s13
 8002c20:	f7fd fcca 	bl	80005b8 <__aeabi_f2d>
 8002c24:	a352      	add	r3, pc, #328	@ (adr r3, 8002d70 <Shell_Loop+0x6c8>)
 8002c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2a:	f7fd fd1d 	bl	8000668 <__aeabi_dmul>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	a350      	add	r3, pc, #320	@ (adr r3, 8002d78 <Shell_Loop+0x6d0>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f7fd fb5c 	bl	80002f8 <__aeabi_dsub>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	a34d      	add	r3, pc, #308	@ (adr r3, 8002d80 <Shell_Loop+0x6d8>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fd fe35 	bl	80008bc <__aeabi_ddiv>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f7fd ffdd 	bl	8000c18 <__aeabi_d2f>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	61bb      	str	r3, [r7, #24]
			float adc3 = ((((float)value_adc2/4095)*3.3)-1.65)/0.05;
 8002c62:	4b4d      	ldr	r3, [pc, #308]	@ (8002d98 <Shell_Loop+0x6f0>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8002d94 <Shell_Loop+0x6ec>
 8002c72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c76:	ee16 0a90 	vmov	r0, s13
 8002c7a:	f7fd fc9d 	bl	80005b8 <__aeabi_f2d>
 8002c7e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002d70 <Shell_Loop+0x6c8>)
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f7fd fcf0 	bl	8000668 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	a339      	add	r3, pc, #228	@ (adr r3, 8002d78 <Shell_Loop+0x6d0>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	f7fd fb2f 	bl	80002f8 <__aeabi_dsub>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	a337      	add	r3, pc, #220	@ (adr r3, 8002d80 <Shell_Loop+0x6d8>)
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f7fd fe08 	bl	80008bc <__aeabi_ddiv>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f7fd ffb0 	bl	8000c18 <__aeabi_d2f>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	617b      	str	r3, [r7, #20]

			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur Source: %f \r\n", adc1);
 8002cbc:	69f8      	ldr	r0, [r7, #28]
 8002cbe:	f7fd fc7b 	bl	80005b8 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	e9cd 2300 	strd	r2, r3, [sp]
 8002cca:	4a34      	ldr	r2, [pc, #208]	@ (8002d9c <Shell_Loop+0x6f4>)
 8002ccc:	2140      	movs	r1, #64	@ 0x40
 8002cce:	4834      	ldr	r0, [pc, #208]	@ (8002da0 <Shell_Loop+0x6f8>)
 8002cd0:	f008 fae8 	bl	800b2a4 <sniprintf>
 8002cd4:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	4930      	ldr	r1, [pc, #192]	@ (8002da0 <Shell_Loop+0x6f8>)
 8002ce0:	4830      	ldr	r0, [pc, #192]	@ (8002da4 <Shell_Loop+0x6fc>)
 8002ce2:	f005 fc43 	bl	800856c <HAL_UART_Transmit>

			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur V: %f \r\n", adc2);
 8002ce6:	69b8      	ldr	r0, [r7, #24]
 8002ce8:	f7fd fc66 	bl	80005b8 <__aeabi_f2d>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	e9cd 2300 	strd	r2, r3, [sp]
 8002cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8002da8 <Shell_Loop+0x700>)
 8002cf6:	2140      	movs	r1, #64	@ 0x40
 8002cf8:	4829      	ldr	r0, [pc, #164]	@ (8002da0 <Shell_Loop+0x6f8>)
 8002cfa:	f008 fad3 	bl	800b2a4 <sniprintf>
 8002cfe:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	f04f 33ff 	mov.w	r3, #4294967295
 8002d08:	4925      	ldr	r1, [pc, #148]	@ (8002da0 <Shell_Loop+0x6f8>)
 8002d0a:	4826      	ldr	r0, [pc, #152]	@ (8002da4 <Shell_Loop+0x6fc>)
 8002d0c:	f005 fc2e 	bl	800856c <HAL_UART_Transmit>

			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur de U: %f \r\n", adc3);
 8002d10:	6978      	ldr	r0, [r7, #20]
 8002d12:	f7fd fc51 	bl	80005b8 <__aeabi_f2d>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	e9cd 2300 	strd	r2, r3, [sp]
 8002d1e:	4a23      	ldr	r2, [pc, #140]	@ (8002dac <Shell_Loop+0x704>)
 8002d20:	2140      	movs	r1, #64	@ 0x40
 8002d22:	481f      	ldr	r0, [pc, #124]	@ (8002da0 <Shell_Loop+0x6f8>)
 8002d24:	f008 fabe 	bl	800b2a4 <sniprintf>
 8002d28:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d32:	491b      	ldr	r1, [pc, #108]	@ (8002da0 <Shell_Loop+0x6f8>)
 8002d34:	481b      	ldr	r0, [pc, #108]	@ (8002da4 <Shell_Loop+0x6fc>)
 8002d36:	f005 fc19 	bl	800856c <HAL_UART_Transmit>
 8002d3a:	e006      	b.n	8002d4a <Shell_Loop+0x6a2>

		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d40:	2214      	movs	r2, #20
 8002d42:	491b      	ldr	r1, [pc, #108]	@ (8002db0 <Shell_Loop+0x708>)
 8002d44:	4817      	ldr	r0, [pc, #92]	@ (8002da4 <Shell_Loop+0x6fc>)
 8002d46:	f005 fc11 	bl	800856c <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	221c      	movs	r2, #28
 8002d50:	4918      	ldr	r1, [pc, #96]	@ (8002db4 <Shell_Loop+0x70c>)
 8002d52:	4814      	ldr	r0, [pc, #80]	@ (8002da4 <Shell_Loop+0x6fc>)
 8002d54:	f005 fc0a 	bl	800856c <HAL_UART_Transmit>
		newCmdReady = 0;
 8002d58:	4b17      	ldr	r3, [pc, #92]	@ (8002db8 <Shell_Loop+0x710>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
	}
}
 8002d5e:	bf00      	nop
 8002d60:	3724      	adds	r7, #36	@ 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}
 8002d66:	bf00      	nop
 8002d68:	00000000 	.word	0x00000000
 8002d6c:	40affe00 	.word	0x40affe00
 8002d70:	66666666 	.word	0x66666666
 8002d74:	400a6666 	.word	0x400a6666
 8002d78:	66666666 	.word	0x66666666
 8002d7c:	3ffa6666 	.word	0x3ffa6666
 8002d80:	9999999a 	.word	0x9999999a
 8002d84:	3fa99999 	.word	0x3fa99999
 8002d88:	20000780 	.word	0x20000780
 8002d8c:	0800d8c8 	.word	0x0800d8c8
 8002d90:	20000454 	.word	0x20000454
 8002d94:	457ff000 	.word	0x457ff000
 8002d98:	2000045c 	.word	0x2000045c
 8002d9c:	0800d8d4 	.word	0x0800d8d4
 8002da0:	200006f4 	.word	0x200006f4
 8002da4:	200005ac 	.word	0x200005ac
 8002da8:	0800d8ec 	.word	0x0800d8ec
 8002dac:	0800d8fc 	.word	0x0800d8fc
 8002db0:	2000009c 	.word	0x2000009c
 8002db4:	20000010 	.word	0x20000010
 8002db8:	200007ac 	.word	0x200007ac

08002dbc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <HAL_UART_RxCpltCallback+0x20>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4904      	ldr	r1, [pc, #16]	@ (8002de0 <HAL_UART_RxCpltCallback+0x24>)
 8002dce:	4805      	ldr	r0, [pc, #20]	@ (8002de4 <HAL_UART_RxCpltCallback+0x28>)
 8002dd0:	f005 fc5a 	bl	8008688 <HAL_UART_Receive_IT>
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	200006ec 	.word	0x200006ec
 8002de0:	200006f0 	.word	0x200006f0
 8002de4:	200005ac 	.word	0x200005ac

08002de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002de8:	480d      	ldr	r0, [pc, #52]	@ (8002e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dec:	480d      	ldr	r0, [pc, #52]	@ (8002e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dee:	490e      	ldr	r1, [pc, #56]	@ (8002e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002df0:	4a0e      	ldr	r2, [pc, #56]	@ (8002e2c <LoopForever+0xe>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002df4:	e002      	b.n	8002dfc <LoopCopyDataInit>

08002df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfa:	3304      	adds	r3, #4

08002dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e00:	d3f9      	bcc.n	8002df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e02:	4a0b      	ldr	r2, [pc, #44]	@ (8002e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e04:	4c0b      	ldr	r4, [pc, #44]	@ (8002e34 <LoopForever+0x16>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e08:	e001      	b.n	8002e0e <LoopFillZerobss>

08002e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e0c:	3204      	adds	r2, #4

08002e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e10:	d3fb      	bcc.n	8002e0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e12:	f7fe fed1 	bl	8001bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e16:	f008 fb71 	bl	800b4fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e1a:	f7fe fbe3 	bl	80015e4 <main>

08002e1e <LoopForever>:

LoopForever:
    b LoopForever
 8002e1e:	e7fe      	b.n	8002e1e <LoopForever>
  ldr   r0, =_estack
 8002e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e28:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 8002e2c:	0800dd2c 	.word	0x0800dd2c
  ldr r2, =_sbss
 8002e30:	2000029c 	.word	0x2000029c
  ldr r4, =_ebss
 8002e34:	20000900 	.word	0x20000900

08002e38 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e38:	e7fe      	b.n	8002e38 <ADC3_IRQHandler>

08002e3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e44:	2003      	movs	r0, #3
 8002e46:	f002 f82a 	bl	8004e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e4a:	200f      	movs	r0, #15
 8002e4c:	f7fe fcb4 	bl	80017b8 <HAL_InitTick>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	71fb      	strb	r3, [r7, #7]
 8002e5a:	e001      	b.n	8002e60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e5c:	f7fe fc88 	bl	8001770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e60:	79fb      	ldrb	r3, [r7, #7]

}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <HAL_IncTick+0x1c>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_IncTick+0x20>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4413      	add	r3, r2
 8002e7a:	4a03      	ldr	r2, [pc, #12]	@ (8002e88 <HAL_IncTick+0x1c>)
 8002e7c:	6013      	str	r3, [r2, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	200007b0 	.word	0x200007b0
 8002e8c:	200000d0 	.word	0x200000d0

08002e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return uwTick;
 8002e94:	4b03      	ldr	r3, [pc, #12]	@ (8002ea4 <HAL_GetTick+0x14>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	200007b0 	.word	0x200007b0

08002ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb0:	f7ff ffee 	bl	8002e90 <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d004      	beq.n	8002ecc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <HAL_Delay+0x40>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ecc:	bf00      	nop
 8002ece:	f7ff ffdf 	bl	8002e90 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d8f7      	bhi.n	8002ece <HAL_Delay+0x26>
  {
  }
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200000d0 	.word	0x200000d0

08002eec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	609a      	str	r2, [r3, #8]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3360      	adds	r3, #96	@ 0x60
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <LL_ADC_SetOffset+0x44>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f8c:	bf00      	nop
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	03fff000 	.word	0x03fff000

08002f9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3360      	adds	r3, #96	@ 0x60
 8002faa:	461a      	mov	r2, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3360      	adds	r3, #96	@ 0x60
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b087      	sub	sp, #28
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3360      	adds	r3, #96	@ 0x60
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	431a      	orrs	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3360      	adds	r3, #96	@ 0x60
 8003044:	461a      	mov	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	431a      	orrs	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	615a      	str	r2, [r3, #20]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b087      	sub	sp, #28
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3330      	adds	r3, #48	@ 0x30
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	4413      	add	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	211f      	movs	r1, #31
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	401a      	ands	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0e9b      	lsrs	r3, r3, #26
 80030ee:	f003 011f 	and.w	r1, r3, #31
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	431a      	orrs	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3314      	adds	r3, #20
 8003144:	461a      	mov	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	0e5b      	lsrs	r3, r3, #25
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	4413      	add	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	0d1b      	lsrs	r3, r3, #20
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	2107      	movs	r1, #7
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	401a      	ands	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	0d1b      	lsrs	r3, r3, #20
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	431a      	orrs	r2, r3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a4:	43db      	mvns	r3, r3
 80031a6:	401a      	ands	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0318 	and.w	r3, r3, #24
 80031ae:	4908      	ldr	r1, [pc, #32]	@ (80031d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031b0:	40d9      	lsrs	r1, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	400b      	ands	r3, r1
 80031b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ba:	431a      	orrs	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	0007ffff 	.word	0x0007ffff

080031d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 031f 	and.w	r3, r3, #31
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800321c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6093      	str	r3, [r2, #8]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003244:	d101      	bne.n	800324a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003268:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800326c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003294:	d101      	bne.n	800329a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032e4:	f043 0202 	orr.w	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <LL_ADC_IsEnabled+0x18>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <LL_ADC_IsEnabled+0x1a>
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b02      	cmp	r3, #2
 8003330:	d101      	bne.n	8003336 <LL_ADC_IsDisableOngoing+0x18>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <LL_ADC_IsDisableOngoing+0x1a>
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003354:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d101      	bne.n	8003384 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d101      	bne.n	80033aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b089      	sub	sp, #36	@ 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e1a9      	b.n	8003726 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fd fed3 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff19 	bl	8003230 <LL_ADC_IsDeepPowerDownEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff feff 	bl	800320c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff34 	bl	8003280 <LL_ADC_IsInternalRegulatorEnabled>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d115      	bne.n	800344a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ff18 	bl	8003258 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003428:	4b9c      	ldr	r3, [pc, #624]	@ (800369c <HAL_ADC_Init+0x2e4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	4a9c      	ldr	r2, [pc, #624]	@ (80036a0 <HAL_ADC_Init+0x2e8>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	3301      	adds	r3, #1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800343c:	e002      	b.n	8003444 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3b01      	subs	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f9      	bne.n	800343e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ff16 	bl	8003280 <LL_ADC_IsInternalRegulatorEnabled>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	f043 0210 	orr.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ff76 	bl	800336c <LL_ADC_REG_IsConversionOngoing>
 8003480:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	f040 8142 	bne.w	8003714 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 813e 	bne.w	8003714 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034a0:	f043 0202 	orr.w	r2, r3, #2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff23 	bl	80032f8 <LL_ADC_IsEnabled>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d141      	bne.n	800353c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c0:	d004      	beq.n	80034cc <HAL_ADC_Init+0x114>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a77      	ldr	r2, [pc, #476]	@ (80036a4 <HAL_ADC_Init+0x2ec>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d10f      	bne.n	80034ec <HAL_ADC_Init+0x134>
 80034cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034d0:	f7ff ff12 	bl	80032f8 <LL_ADC_IsEnabled>
 80034d4:	4604      	mov	r4, r0
 80034d6:	4873      	ldr	r0, [pc, #460]	@ (80036a4 <HAL_ADC_Init+0x2ec>)
 80034d8:	f7ff ff0e 	bl	80032f8 <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	4323      	orrs	r3, r4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e012      	b.n	8003512 <HAL_ADC_Init+0x15a>
 80034ec:	486e      	ldr	r0, [pc, #440]	@ (80036a8 <HAL_ADC_Init+0x2f0>)
 80034ee:	f7ff ff03 	bl	80032f8 <LL_ADC_IsEnabled>
 80034f2:	4604      	mov	r4, r0
 80034f4:	486d      	ldr	r0, [pc, #436]	@ (80036ac <HAL_ADC_Init+0x2f4>)
 80034f6:	f7ff feff 	bl	80032f8 <LL_ADC_IsEnabled>
 80034fa:	4603      	mov	r3, r0
 80034fc:	431c      	orrs	r4, r3
 80034fe:	486c      	ldr	r0, [pc, #432]	@ (80036b0 <HAL_ADC_Init+0x2f8>)
 8003500:	f7ff fefa 	bl	80032f8 <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	4323      	orrs	r3, r4
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800351e:	d004      	beq.n	800352a <HAL_ADC_Init+0x172>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a5f      	ldr	r2, [pc, #380]	@ (80036a4 <HAL_ADC_Init+0x2ec>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_ADC_Init+0x176>
 800352a:	4a62      	ldr	r2, [pc, #392]	@ (80036b4 <HAL_ADC_Init+0x2fc>)
 800352c:	e000      	b.n	8003530 <HAL_ADC_Init+0x178>
 800352e:	4a62      	ldr	r2, [pc, #392]	@ (80036b8 <HAL_ADC_Init+0x300>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7ff fcd8 	bl	8002eec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7f5b      	ldrb	r3, [r3, #29]
 8003540:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003546:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800354c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003552:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800355a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003566:	2b01      	cmp	r3, #1
 8003568:	d106      	bne.n	8003578 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	045b      	lsls	r3, r3, #17
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	4b48      	ldr	r3, [pc, #288]	@ (80036bc <HAL_ADC_Init+0x304>)
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	69b9      	ldr	r1, [r7, #24]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fee5 	bl	8003392 <LL_ADC_INJ_IsConversionOngoing>
 80035c8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d17f      	bne.n	80036d0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d17c      	bne.n	80036d0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035da:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035e2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035f2:	f023 0302 	bic.w	r3, r3, #2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	69b9      	ldr	r1, [r7, #24]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d017      	beq.n	8003638 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003616:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003620:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6911      	ldr	r1, [r2, #16]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	430b      	orrs	r3, r1
 8003632:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003636:	e013      	b.n	8003660 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003646:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003658:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800365c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003666:	2b01      	cmp	r3, #1
 8003668:	d12a      	bne.n	80036c0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003680:	4311      	orrs	r1, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003686:	4311      	orrs	r1, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800368c:	430a      	orrs	r2, r1
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	e019      	b.n	80036d0 <HAL_ADC_Init+0x318>
 800369c:	20000004 	.word	0x20000004
 80036a0:	053e2d63 	.word	0x053e2d63
 80036a4:	50000100 	.word	0x50000100
 80036a8:	50000400 	.word	0x50000400
 80036ac:	50000500 	.word	0x50000500
 80036b0:	50000600 	.word	0x50000600
 80036b4:	50000300 	.word	0x50000300
 80036b8:	50000700 	.word	0x50000700
 80036bc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10c      	bne.n	80036f2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	f023 010f 	bic.w	r1, r3, #15
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	1e5a      	subs	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80036f0:	e007      	b.n	8003702 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 020f 	bic.w	r2, r2, #15
 8003700:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003712:	e007      	b.n	8003724 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003718:	f043 0210 	orr.w	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003724:	7ffb      	ldrb	r3, [r7, #31]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	@ 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	bf00      	nop

08003730 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003744:	d004      	beq.n	8003750 <HAL_ADC_Start_DMA+0x20>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a5a      	ldr	r2, [pc, #360]	@ (80038b4 <HAL_ADC_Start_DMA+0x184>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_ADC_Start_DMA+0x24>
 8003750:	4b59      	ldr	r3, [pc, #356]	@ (80038b8 <HAL_ADC_Start_DMA+0x188>)
 8003752:	e000      	b.n	8003756 <HAL_ADC_Start_DMA+0x26>
 8003754:	4b59      	ldr	r3, [pc, #356]	@ (80038bc <HAL_ADC_Start_DMA+0x18c>)
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fd3c 	bl	80031d4 <LL_ADC_GetMultimode>
 800375c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fe02 	bl	800336c <LL_ADC_REG_IsConversionOngoing>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 809b 	bne.w	80038a6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_ADC_Start_DMA+0x4e>
 800377a:	2302      	movs	r3, #2
 800377c:	e096      	b.n	80038ac <HAL_ADC_Start_DMA+0x17c>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a4d      	ldr	r2, [pc, #308]	@ (80038c0 <HAL_ADC_Start_DMA+0x190>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d008      	beq.n	80037a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b05      	cmp	r3, #5
 800379a:	d002      	beq.n	80037a2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b09      	cmp	r3, #9
 80037a0:	d17a      	bne.n	8003898 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 ff56 	bl	8004654 <ADC_Enable>
 80037a8:	4603      	mov	r3, r0
 80037aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d16d      	bne.n	800388e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a3a      	ldr	r2, [pc, #232]	@ (80038b4 <HAL_ADC_Start_DMA+0x184>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_ADC_Start_DMA+0xb4>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a3b      	ldr	r2, [pc, #236]	@ (80038c4 <HAL_ADC_Start_DMA+0x194>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d002      	beq.n	80037e0 <HAL_ADC_Start_DMA+0xb0>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e003      	b.n	80037e8 <HAL_ADC_Start_DMA+0xb8>
 80037e0:	4b39      	ldr	r3, [pc, #228]	@ (80038c8 <HAL_ADC_Start_DMA+0x198>)
 80037e2:	e001      	b.n	80037e8 <HAL_ADC_Start_DMA+0xb8>
 80037e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d002      	beq.n	80037f6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d105      	bne.n	8003802 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003812:	f023 0206 	bic.w	r2, r3, #6
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	661a      	str	r2, [r3, #96]	@ 0x60
 800381a:	e002      	b.n	8003822 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	4a29      	ldr	r2, [pc, #164]	@ (80038cc <HAL_ADC_Start_DMA+0x19c>)
 8003828:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382e:	4a28      	ldr	r2, [pc, #160]	@ (80038d0 <HAL_ADC_Start_DMA+0x1a0>)
 8003830:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003836:	4a27      	ldr	r2, [pc, #156]	@ (80038d4 <HAL_ADC_Start_DMA+0x1a4>)
 8003838:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	221c      	movs	r2, #28
 8003840:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0210 	orr.w	r2, r2, #16
 8003858:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3340      	adds	r3, #64	@ 0x40
 8003874:	4619      	mov	r1, r3
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f001 fbeb 	bl	8005054 <HAL_DMA_Start_IT>
 800387e:	4603      	mov	r3, r0
 8003880:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fd5c 	bl	8003344 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800388c:	e00d      	b.n	80038aa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003896:	e008      	b.n	80038aa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80038a4:	e001      	b.n	80038aa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
 80038a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	50000100 	.word	0x50000100
 80038b8:	50000300 	.word	0x50000300
 80038bc:	50000700 	.word	0x50000700
 80038c0:	50000600 	.word	0x50000600
 80038c4:	50000500 	.word	0x50000500
 80038c8:	50000400 	.word	0x50000400
 80038cc:	0800483f 	.word	0x0800483f
 80038d0:	08004917 	.word	0x08004917
 80038d4:	08004933 	.word	0x08004933

080038d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	@ 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80038e0:	2300      	movs	r3, #0
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038fc:	d004      	beq.n	8003908 <HAL_ADC_IRQHandler+0x30>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a8e      	ldr	r2, [pc, #568]	@ (8003b3c <HAL_ADC_IRQHandler+0x264>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_ADC_IRQHandler+0x34>
 8003908:	4b8d      	ldr	r3, [pc, #564]	@ (8003b40 <HAL_ADC_IRQHandler+0x268>)
 800390a:	e000      	b.n	800390e <HAL_ADC_IRQHandler+0x36>
 800390c:	4b8d      	ldr	r3, [pc, #564]	@ (8003b44 <HAL_ADC_IRQHandler+0x26c>)
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fc60 	bl	80031d4 <LL_ADC_GetMultimode>
 8003914:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <HAL_ADC_IRQHandler+0x78>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d012      	beq.n	8003950 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d105      	bne.n	8003942 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f001 f8ec 	bl	8004b20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2202      	movs	r2, #2
 800394e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <HAL_ADC_IRQHandler+0x8c>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8094 	beq.w	8003a98 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 808e 	beq.w	8003a98 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fb79 	bl	8003090 <LL_ADC_REG_IsTriggerSourceSWStart>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d072      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a64      	ldr	r2, [pc, #400]	@ (8003b3c <HAL_ADC_IRQHandler+0x264>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d009      	beq.n	80039c2 <HAL_ADC_IRQHandler+0xea>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a65      	ldr	r2, [pc, #404]	@ (8003b48 <HAL_ADC_IRQHandler+0x270>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d002      	beq.n	80039be <HAL_ADC_IRQHandler+0xe6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	e003      	b.n	80039c6 <HAL_ADC_IRQHandler+0xee>
 80039be:	4b63      	ldr	r3, [pc, #396]	@ (8003b4c <HAL_ADC_IRQHandler+0x274>)
 80039c0:	e001      	b.n	80039c6 <HAL_ADC_IRQHandler+0xee>
 80039c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d008      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d002      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d104      	bne.n	80039ea <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	e014      	b.n	8003a14 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a53      	ldr	r2, [pc, #332]	@ (8003b3c <HAL_ADC_IRQHandler+0x264>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_ADC_IRQHandler+0x130>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a53      	ldr	r2, [pc, #332]	@ (8003b48 <HAL_ADC_IRQHandler+0x270>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d002      	beq.n	8003a04 <HAL_ADC_IRQHandler+0x12c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	e003      	b.n	8003a0c <HAL_ADC_IRQHandler+0x134>
 8003a04:	4b51      	ldr	r3, [pc, #324]	@ (8003b4c <HAL_ADC_IRQHandler+0x274>)
 8003a06:	e001      	b.n	8003a0c <HAL_ADC_IRQHandler+0x134>
 8003a08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d135      	bne.n	8003a8a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d12e      	bne.n	8003a8a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fc9b 	bl	800336c <LL_ADC_REG_IsConversionOngoing>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d11a      	bne.n	8003a72 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 020c 	bic.w	r2, r2, #12
 8003a4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d112      	bne.n	8003a8a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a68:	f043 0201 	orr.w	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a70:	e00b      	b.n	8003a8a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	f043 0210 	orr.w	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fe4d 	bl	800172a <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	220c      	movs	r2, #12
 8003a96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_ADC_IRQHandler+0x1d4>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 80b3 	beq.w	8003c1e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80ad 	beq.w	8003c1e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fb14 	bl	800310e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ae6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff facf 	bl	8003090 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003af2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a10      	ldr	r2, [pc, #64]	@ (8003b3c <HAL_ADC_IRQHandler+0x264>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_ADC_IRQHandler+0x23a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a11      	ldr	r2, [pc, #68]	@ (8003b48 <HAL_ADC_IRQHandler+0x270>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d002      	beq.n	8003b0e <HAL_ADC_IRQHandler+0x236>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	e003      	b.n	8003b16 <HAL_ADC_IRQHandler+0x23e>
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b4c <HAL_ADC_IRQHandler+0x274>)
 8003b10:	e001      	b.n	8003b16 <HAL_ADC_IRQHandler+0x23e>
 8003b12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d008      	beq.n	8003b30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b06      	cmp	r3, #6
 8003b28:	d002      	beq.n	8003b30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b07      	cmp	r3, #7
 8003b2e:	d10f      	bne.n	8003b50 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	e01f      	b.n	8003b7a <HAL_ADC_IRQHandler+0x2a2>
 8003b3a:	bf00      	nop
 8003b3c:	50000100 	.word	0x50000100
 8003b40:	50000300 	.word	0x50000300
 8003b44:	50000700 	.word	0x50000700
 8003b48:	50000500 	.word	0x50000500
 8003b4c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a8b      	ldr	r2, [pc, #556]	@ (8003d84 <HAL_ADC_IRQHandler+0x4ac>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_ADC_IRQHandler+0x296>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a8a      	ldr	r2, [pc, #552]	@ (8003d88 <HAL_ADC_IRQHandler+0x4b0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d002      	beq.n	8003b6a <HAL_ADC_IRQHandler+0x292>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	e003      	b.n	8003b72 <HAL_ADC_IRQHandler+0x29a>
 8003b6a:	4b88      	ldr	r3, [pc, #544]	@ (8003d8c <HAL_ADC_IRQHandler+0x4b4>)
 8003b6c:	e001      	b.n	8003b72 <HAL_ADC_IRQHandler+0x29a>
 8003b6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b72:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d047      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_ADC_IRQHandler+0x2c2>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03f      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d13a      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba4:	2b40      	cmp	r3, #64	@ 0x40
 8003ba6:	d133      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d12e      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fbeb 	bl	8003392 <LL_ADC_INJ_IsConversionOngoing>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d11a      	bne.n	8003bf8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bd0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d112      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bf6:	e00b      	b.n	8003c10 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfc:	f043 0210 	orr.w	r2, r3, #16
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 ff5d 	bl	8004ad0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2260      	movs	r2, #96	@ 0x60
 8003c1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d011      	beq.n	8003c4c <HAL_ADC_IRQHandler+0x374>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00c      	beq.n	8003c4c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c36:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8b4 	bl	8003dac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2280      	movs	r2, #128	@ 0x80
 8003c4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x3a4>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00d      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 ff43 	bl	8004af8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d012      	beq.n	8003cac <HAL_ADC_IRQHandler+0x3d4>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00d      	beq.n	8003cac <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 ff35 	bl	8004b0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003caa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d043      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x466>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03e      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ccc:	e021      	b.n	8003d12 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cdc:	d004      	beq.n	8003ce8 <HAL_ADC_IRQHandler+0x410>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a28      	ldr	r2, [pc, #160]	@ (8003d84 <HAL_ADC_IRQHandler+0x4ac>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_ADC_IRQHandler+0x414>
 8003ce8:	4b29      	ldr	r3, [pc, #164]	@ (8003d90 <HAL_ADC_IRQHandler+0x4b8>)
 8003cea:	e000      	b.n	8003cee <HAL_ADC_IRQHandler+0x416>
 8003cec:	4b29      	ldr	r3, [pc, #164]	@ (8003d94 <HAL_ADC_IRQHandler+0x4bc>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fa7e 	bl	80031f0 <LL_ADC_GetMultiDMATransfer>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cfe:	e008      	b.n	8003d12 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10e      	bne.n	8003d36 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d28:	f043 0202 	orr.w	r2, r3, #2
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f845 	bl	8003dc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2210      	movs	r2, #16
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d018      	beq.n	8003d7a <HAL_ADC_IRQHandler+0x4a2>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d013      	beq.n	8003d7a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d56:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d62:	f043 0208 	orr.w	r2, r3, #8
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d72:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 feb5 	bl	8004ae4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003d7a:	bf00      	nop
 8003d7c:	3728      	adds	r7, #40	@ 0x28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	50000100 	.word	0x50000100
 8003d88:	50000500 	.word	0x50000500
 8003d8c:	50000400 	.word	0x50000400
 8003d90:	50000300 	.word	0x50000300
 8003d94:	50000700 	.word	0x50000700

08003d98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b0b6      	sub	sp, #216	@ 0xd8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d102      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x24>
 8003df2:	2302      	movs	r3, #2
 8003df4:	f000 bc13 	b.w	800461e <HAL_ADC_ConfigChannel+0x84a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fab1 	bl	800336c <LL_ADC_REG_IsConversionOngoing>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 83f3 	bne.w	80045f8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6859      	ldr	r1, [r3, #4]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f7ff f949 	bl	80030b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fa9f 	bl	800336c <LL_ADC_REG_IsConversionOngoing>
 8003e2e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff faab 	bl	8003392 <LL_ADC_INJ_IsConversionOngoing>
 8003e3c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f040 81d9 	bne.w	80041fc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 81d4 	bne.w	80041fc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e5c:	d10f      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2200      	movs	r2, #0
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f7ff f963 	bl	8003134 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff f8f7 	bl	800306a <LL_ADC_SetSamplingTimeCommonConfig>
 8003e7c:	e00e      	b.n	8003e9c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f7ff f952 	bl	8003134 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff f8e7 	bl	800306a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	08db      	lsrs	r3, r3, #3
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d022      	beq.n	8003f04 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6919      	ldr	r1, [r3, #16]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ece:	f7ff f841 	bl	8002f54 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6919      	ldr	r1, [r3, #16]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f7ff f88d 	bl	8002ffe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d102      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x126>
 8003ef4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ef8:	e000      	b.n	8003efc <HAL_ADC_ConfigChannel+0x128>
 8003efa:	2300      	movs	r3, #0
 8003efc:	461a      	mov	r2, r3
 8003efe:	f7ff f899 	bl	8003034 <LL_ADC_SetOffsetSaturation>
 8003f02:	e17b      	b.n	80041fc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff f846 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x15c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f83b 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 8003f26:	4603      	mov	r3, r0
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	f003 021f 	and.w	r2, r3, #31
 8003f2e:	e01e      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x19a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff f830 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003f5e:	2320      	movs	r3, #32
 8003f60:	e004      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003f62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d105      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x1b2>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	0e9b      	lsrs	r3, r3, #26
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	e018      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x1e4>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003faa:	2320      	movs	r3, #32
 8003fac:	e004      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d106      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe ffff 	bl	8002fc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe ffe3 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x222>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe ffd8 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 8003fec:	4603      	mov	r3, r0
 8003fee:	0e9b      	lsrs	r3, r3, #26
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	e01e      	b.n	8004034 <HAL_ADC_ConfigChannel+0x260>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe ffcd 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 8004002:	4603      	mov	r3, r0
 8004004:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004014:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004018:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800401c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004024:	2320      	movs	r3, #32
 8004026:	e004      	b.n	8004032 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <HAL_ADC_ConfigChannel+0x278>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	0e9b      	lsrs	r3, r3, #26
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	e018      	b.n	800407e <HAL_ADC_ConfigChannel+0x2aa>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004060:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004068:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004070:	2320      	movs	r3, #32
 8004072:	e004      	b.n	800407e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004074:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800407e:	429a      	cmp	r2, r3
 8004080:	d106      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2200      	movs	r2, #0
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe ff9c 	bl	8002fc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe ff80 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 800409c:	4603      	mov	r3, r0
 800409e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x2e8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe ff75 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 80040b2:	4603      	mov	r3, r0
 80040b4:	0e9b      	lsrs	r3, r3, #26
 80040b6:	f003 021f 	and.w	r2, r3, #31
 80040ba:	e01e      	b.n	80040fa <HAL_ADC_ConfigChannel+0x326>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe ff6a 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80040da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80040e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e004      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80040ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004102:	2b00      	cmp	r3, #0
 8004104:	d105      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x33e>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	0e9b      	lsrs	r3, r3, #26
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	e016      	b.n	8004140 <HAL_ADC_ConfigChannel+0x36c>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004124:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004126:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800412a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004132:	2320      	movs	r3, #32
 8004134:	e004      	b.n	8004140 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004136:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004140:	429a      	cmp	r2, r3
 8004142:	d106      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2200      	movs	r2, #0
 800414a:	2102      	movs	r1, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe ff3b 	bl	8002fc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2103      	movs	r1, #3
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe ff1f 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 800415e:	4603      	mov	r3, r0
 8004160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <HAL_ADC_ConfigChannel+0x3aa>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2103      	movs	r1, #3
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe ff14 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 8004174:	4603      	mov	r3, r0
 8004176:	0e9b      	lsrs	r3, r3, #26
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	e017      	b.n	80041ae <HAL_ADC_ConfigChannel+0x3da>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2103      	movs	r1, #3
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe ff09 	bl	8002f9c <LL_ADC_GetOffsetChannel>
 800418a:	4603      	mov	r3, r0
 800418c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004198:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800419a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80041a0:	2320      	movs	r3, #32
 80041a2:	e003      	b.n	80041ac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80041a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x3f2>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	0e9b      	lsrs	r3, r3, #26
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	e011      	b.n	80041ea <HAL_ADC_ConfigChannel+0x416>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80041d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80041d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80041de:	2320      	movs	r3, #32
 80041e0:	e003      	b.n	80041ea <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80041e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d106      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	2103      	movs	r1, #3
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fee6 	bl	8002fc8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff f879 	bl	80032f8 <LL_ADC_IsEnabled>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 813d 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6819      	ldr	r1, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	461a      	mov	r2, r3
 800421c:	f7fe ffb6 	bl	800318c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4aa2      	ldr	r2, [pc, #648]	@ (80044b0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	f040 812e 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x480>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	3301      	adds	r3, #1
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	2b09      	cmp	r3, #9
 800424a:	bf94      	ite	ls
 800424c:	2301      	movls	r3, #1
 800424e:	2300      	movhi	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e019      	b.n	8004288 <HAL_ADC_ConfigChannel+0x4b4>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800425c:	fa93 f3a3 	rbit	r3, r3
 8004260:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004264:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800426c:	2320      	movs	r3, #32
 800426e:	e003      	b.n	8004278 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2b09      	cmp	r3, #9
 8004280:	bf94      	ite	ls
 8004282:	2301      	movls	r3, #1
 8004284:	2300      	movhi	r3, #0
 8004286:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004288:	2b00      	cmp	r3, #0
 800428a:	d079      	beq.n	8004380 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004294:	2b00      	cmp	r3, #0
 8004296:	d107      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x4d4>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	3301      	adds	r3, #1
 80042a0:	069b      	lsls	r3, r3, #26
 80042a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a6:	e015      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x500>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80042b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80042ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e003      	b.n	80042cc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80042c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x520>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	0e9b      	lsrs	r3, r3, #26
 80042e6:	3301      	adds	r3, #1
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	e017      	b.n	8004324 <HAL_ADC_ConfigChannel+0x550>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004304:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	ea42 0103 	orr.w	r1, r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <HAL_ADC_ConfigChannel+0x576>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	3301      	adds	r3, #1
 800433c:	f003 021f 	and.w	r2, r3, #31
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	051b      	lsls	r3, r3, #20
 8004348:	e018      	b.n	800437c <HAL_ADC_ConfigChannel+0x5a8>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800435c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004362:	2320      	movs	r3, #32
 8004364:	e003      	b.n	800436e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	3301      	adds	r3, #1
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800437c:	430b      	orrs	r3, r1
 800437e:	e07e      	b.n	800447e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <HAL_ADC_ConfigChannel+0x5c8>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0e9b      	lsrs	r3, r3, #26
 8004392:	3301      	adds	r3, #1
 8004394:	069b      	lsls	r3, r3, #26
 8004396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800439a:	e015      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x5f4>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e003      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	069b      	lsls	r3, r3, #26
 80043c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x614>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	0e9b      	lsrs	r3, r3, #26
 80043da:	3301      	adds	r3, #1
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	e017      	b.n	8004418 <HAL_ADC_ConfigChannel+0x644>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	61fb      	str	r3, [r7, #28]
  return result;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004400:	2320      	movs	r3, #32
 8004402:	e003      	b.n	800440c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	3301      	adds	r3, #1
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	ea42 0103 	orr.w	r1, r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10d      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x670>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0e9b      	lsrs	r3, r3, #26
 800442e:	3301      	adds	r3, #1
 8004430:	f003 021f 	and.w	r2, r3, #31
 8004434:	4613      	mov	r3, r2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	4413      	add	r3, r2
 800443a:	3b1e      	subs	r3, #30
 800443c:	051b      	lsls	r3, r3, #20
 800443e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004442:	e01b      	b.n	800447c <HAL_ADC_ConfigChannel+0x6a8>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	613b      	str	r3, [r7, #16]
  return result;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800445c:	2320      	movs	r3, #32
 800445e:	e003      	b.n	8004468 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f003 021f 	and.w	r2, r3, #31
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	3b1e      	subs	r3, #30
 8004476:	051b      	lsls	r3, r3, #20
 8004478:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800447c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004482:	4619      	mov	r1, r3
 8004484:	f7fe fe56 	bl	8003134 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_ADC_ConfigChannel+0x6e0>)
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80be 	beq.w	8004612 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800449e:	d004      	beq.n	80044aa <HAL_ADC_ConfigChannel+0x6d6>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <HAL_ADC_ConfigChannel+0x6e4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10a      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x6ec>
 80044aa:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <HAL_ADC_ConfigChannel+0x6e8>)
 80044ac:	e009      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x6ee>
 80044ae:	bf00      	nop
 80044b0:	407f0000 	.word	0x407f0000
 80044b4:	80080000 	.word	0x80080000
 80044b8:	50000100 	.word	0x50000100
 80044bc:	50000300 	.word	0x50000300
 80044c0:	4b59      	ldr	r3, [pc, #356]	@ (8004628 <HAL_ADC_ConfigChannel+0x854>)
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fd38 	bl	8002f38 <LL_ADC_GetCommonPathInternalCh>
 80044c8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a56      	ldr	r2, [pc, #344]	@ (800462c <HAL_ADC_ConfigChannel+0x858>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_ADC_ConfigChannel+0x70c>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a55      	ldr	r2, [pc, #340]	@ (8004630 <HAL_ADC_ConfigChannel+0x85c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d13a      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d134      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044f4:	d005      	beq.n	8004502 <HAL_ADC_ConfigChannel+0x72e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004634 <HAL_ADC_ConfigChannel+0x860>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	f040 8085 	bne.w	800460c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800450a:	d004      	beq.n	8004516 <HAL_ADC_ConfigChannel+0x742>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a49      	ldr	r2, [pc, #292]	@ (8004638 <HAL_ADC_ConfigChannel+0x864>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <HAL_ADC_ConfigChannel+0x746>
 8004516:	4a49      	ldr	r2, [pc, #292]	@ (800463c <HAL_ADC_ConfigChannel+0x868>)
 8004518:	e000      	b.n	800451c <HAL_ADC_ConfigChannel+0x748>
 800451a:	4a43      	ldr	r2, [pc, #268]	@ (8004628 <HAL_ADC_ConfigChannel+0x854>)
 800451c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004520:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f7fe fcf3 	bl	8002f12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800452c:	4b44      	ldr	r3, [pc, #272]	@ (8004640 <HAL_ADC_ConfigChannel+0x86c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	4a44      	ldr	r2, [pc, #272]	@ (8004644 <HAL_ADC_ConfigChannel+0x870>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	4613      	mov	r3, r2
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004546:	e002      	b.n	800454e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3b01      	subs	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f9      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004554:	e05a      	b.n	800460c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3b      	ldr	r2, [pc, #236]	@ (8004648 <HAL_ADC_ConfigChannel+0x874>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d125      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d11f      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a31      	ldr	r2, [pc, #196]	@ (8004638 <HAL_ADC_ConfigChannel+0x864>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d104      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x7ac>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a34      	ldr	r2, [pc, #208]	@ (800464c <HAL_ADC_ConfigChannel+0x878>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d047      	beq.n	8004610 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004588:	d004      	beq.n	8004594 <HAL_ADC_ConfigChannel+0x7c0>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2a      	ldr	r2, [pc, #168]	@ (8004638 <HAL_ADC_ConfigChannel+0x864>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x7c4>
 8004594:	4a29      	ldr	r2, [pc, #164]	@ (800463c <HAL_ADC_ConfigChannel+0x868>)
 8004596:	e000      	b.n	800459a <HAL_ADC_ConfigChannel+0x7c6>
 8004598:	4a23      	ldr	r2, [pc, #140]	@ (8004628 <HAL_ADC_ConfigChannel+0x854>)
 800459a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800459e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7fe fcb4 	bl	8002f12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045aa:	e031      	b.n	8004610 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a27      	ldr	r2, [pc, #156]	@ (8004650 <HAL_ADC_ConfigChannel+0x87c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d12d      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d127      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004638 <HAL_ADC_ConfigChannel+0x864>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d022      	beq.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045d4:	d004      	beq.n	80045e0 <HAL_ADC_ConfigChannel+0x80c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a17      	ldr	r2, [pc, #92]	@ (8004638 <HAL_ADC_ConfigChannel+0x864>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x810>
 80045e0:	4a16      	ldr	r2, [pc, #88]	@ (800463c <HAL_ADC_ConfigChannel+0x868>)
 80045e2:	e000      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x812>
 80045e4:	4a10      	ldr	r2, [pc, #64]	@ (8004628 <HAL_ADC_ConfigChannel+0x854>)
 80045e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fe fc8e 	bl	8002f12 <LL_ADC_SetCommonPathInternalCh>
 80045f6:	e00c      	b.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	f043 0220 	orr.w	r2, r3, #32
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800460a:	e002      	b.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800460c:	bf00      	nop
 800460e:	e000      	b.n	8004612 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004610:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800461a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800461e:	4618      	mov	r0, r3
 8004620:	37d8      	adds	r7, #216	@ 0xd8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	50000700 	.word	0x50000700
 800462c:	c3210000 	.word	0xc3210000
 8004630:	90c00010 	.word	0x90c00010
 8004634:	50000600 	.word	0x50000600
 8004638:	50000100 	.word	0x50000100
 800463c:	50000300 	.word	0x50000300
 8004640:	20000004 	.word	0x20000004
 8004644:	053e2d63 	.word	0x053e2d63
 8004648:	c7520000 	.word	0xc7520000
 800464c:	50000500 	.word	0x50000500
 8004650:	cb840000 	.word	0xcb840000

08004654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe fe47 	bl	80032f8 <LL_ADC_IsEnabled>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d176      	bne.n	800475e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	4b3c      	ldr	r3, [pc, #240]	@ (8004768 <ADC_Enable+0x114>)
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004682:	f043 0210 	orr.w	r2, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468e:	f043 0201 	orr.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e062      	b.n	8004760 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fe02 	bl	80032a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ac:	d004      	beq.n	80046b8 <ADC_Enable+0x64>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a2e      	ldr	r2, [pc, #184]	@ (800476c <ADC_Enable+0x118>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <ADC_Enable+0x68>
 80046b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004770 <ADC_Enable+0x11c>)
 80046ba:	e000      	b.n	80046be <ADC_Enable+0x6a>
 80046bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004774 <ADC_Enable+0x120>)
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fc3a 	bl	8002f38 <LL_ADC_GetCommonPathInternalCh>
 80046c4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80046c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d013      	beq.n	80046f6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004778 <ADC_Enable+0x124>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	4a29      	ldr	r2, [pc, #164]	@ (800477c <ADC_Enable+0x128>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	099b      	lsrs	r3, r3, #6
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	4613      	mov	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046e8:	e002      	b.n	80046f0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f9      	bne.n	80046ea <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046f6:	f7fe fbcb 	bl	8002e90 <HAL_GetTick>
 80046fa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046fc:	e028      	b.n	8004750 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fdf8 	bl	80032f8 <LL_ADC_IsEnabled>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe fdc8 	bl	80032a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004718:	f7fe fbba 	bl	8002e90 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d914      	bls.n	8004750 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d00d      	beq.n	8004750 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004738:	f043 0210 	orr.w	r2, r3, #16
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004744:	f043 0201 	orr.w	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e007      	b.n	8004760 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d1cf      	bne.n	80046fe <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	8000003f 	.word	0x8000003f
 800476c:	50000100 	.word	0x50000100
 8004770:	50000300 	.word	0x50000300
 8004774:	50000700 	.word	0x50000700
 8004778:	20000004 	.word	0x20000004
 800477c:	053e2d63 	.word	0x053e2d63

08004780 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe fdc6 	bl	800331e <LL_ADC_IsDisableOngoing>
 8004792:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe fdad 	bl	80032f8 <LL_ADC_IsEnabled>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d047      	beq.n	8004834 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d144      	bne.n	8004834 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 030d 	and.w	r3, r3, #13
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d10c      	bne.n	80047d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fd87 	bl	80032d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2203      	movs	r2, #3
 80047c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047ca:	f7fe fb61 	bl	8002e90 <HAL_GetTick>
 80047ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047d0:	e029      	b.n	8004826 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d6:	f043 0210 	orr.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e2:	f043 0201 	orr.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e023      	b.n	8004836 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047ee:	f7fe fb4f 	bl	8002e90 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d914      	bls.n	8004826 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00d      	beq.n	8004826 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480e:	f043 0210 	orr.w	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481a:	f043 0201 	orr.w	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e007      	b.n	8004836 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1dc      	bne.n	80047ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004850:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004854:	2b00      	cmp	r3, #0
 8004856:	d14b      	bne.n	80048f0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d021      	beq.n	80048b6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe fc0a 	bl	8003090 <LL_ADC_REG_IsTriggerSourceSWStart>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d032      	beq.n	80048e8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d12b      	bne.n	80048e8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004894:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11f      	bne.n	80048e8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ac:	f043 0201 	orr.w	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048b4:	e018      	b.n	80048e8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d111      	bne.n	80048e8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e0:	f043 0201 	orr.w	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7fc ff1e 	bl	800172a <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048ee:	e00e      	b.n	800490e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff fa5f 	bl	8003dc0 <HAL_ADC_ErrorCallback>
}
 8004902:	e004      	b.n	800490e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004922:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff fa37 	bl	8003d98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004944:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004950:	f043 0204 	orr.w	r2, r3, #4
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff fa31 	bl	8003dc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800495e:	bf00      	nop
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <LL_ADC_IsEnabled>:
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <LL_ADC_IsEnabled+0x18>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <LL_ADC_IsEnabled+0x1a>
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_ADC_StartCalibration>:
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800499e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <LL_ADC_IsCalibrationOnGoing>:
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049d2:	d101      	bne.n	80049d8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <LL_ADC_IsCalibrationOnGoing+0x1c>
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d101      	bne.n	80049fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_ADCEx_Calibration_Start+0x1c>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e04d      	b.n	8004ac4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff fea5 	bl	8004780 <ADC_Disable>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d136      	bne.n	8004aae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a48:	f023 0302 	bic.w	r3, r3, #2
 8004a4c:	f043 0202 	orr.w	r2, r3, #2
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6839      	ldr	r1, [r7, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff ff96 	bl	800498c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a60:	e014      	b.n	8004a8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	3301      	adds	r3, #1
 8004a66:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4a18      	ldr	r2, [pc, #96]	@ (8004acc <HAL_ADCEx_Calibration_Start+0xc0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d90d      	bls.n	8004a8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a74:	f023 0312 	bic.w	r3, r3, #18
 8004a78:	f043 0210 	orr.w	r2, r3, #16
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e01b      	b.n	8004ac4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff ff94 	bl	80049be <LL_ADC_IsCalibrationOnGoing>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e2      	bne.n	8004a62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa0:	f023 0303 	bic.w	r3, r3, #3
 8004aa4:	f043 0201 	orr.w	r2, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004aac:	e005      	b.n	8004aba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab2:	f043 0210 	orr.w	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	0004de01 	.word	0x0004de01

08004ad0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b0a1      	sub	sp, #132	@ 0x84
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e0e7      	b.n	8004d22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b6a:	d102      	bne.n	8004b72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	e009      	b.n	8004b86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6e      	ldr	r2, [pc, #440]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d102      	bne.n	8004b82 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004b7c:	4b6d      	ldr	r3, [pc, #436]	@ (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	e001      	b.n	8004b86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0be      	b.n	8004d22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff ff1d 	bl	80049e6 <LL_ADC_REG_IsConversionOngoing>
 8004bac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ff17 	bl	80049e6 <LL_ADC_REG_IsConversionOngoing>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 80a0 	bne.w	8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 809c 	bne.w	8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bd0:	d004      	beq.n	8004bdc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a55      	ldr	r2, [pc, #340]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d101      	bne.n	8004be0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004bdc:	4b56      	ldr	r3, [pc, #344]	@ (8004d38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004bde:	e000      	b.n	8004be2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004be0:	4b56      	ldr	r3, [pc, #344]	@ (8004d3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004be2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d04b      	beq.n	8004c84 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004bfe:	035b      	lsls	r3, r3, #13
 8004c00:	430b      	orrs	r3, r1
 8004c02:	431a      	orrs	r2, r3
 8004c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c10:	d004      	beq.n	8004c1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a45      	ldr	r2, [pc, #276]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d10f      	bne.n	8004c3c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004c1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c20:	f7ff fea1 	bl	8004966 <LL_ADC_IsEnabled>
 8004c24:	4604      	mov	r4, r0
 8004c26:	4841      	ldr	r0, [pc, #260]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c28:	f7ff fe9d 	bl	8004966 <LL_ADC_IsEnabled>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4323      	orrs	r3, r4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e012      	b.n	8004c62 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004c3c:	483c      	ldr	r0, [pc, #240]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c3e:	f7ff fe92 	bl	8004966 <LL_ADC_IsEnabled>
 8004c42:	4604      	mov	r4, r0
 8004c44:	483b      	ldr	r0, [pc, #236]	@ (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c46:	f7ff fe8e 	bl	8004966 <LL_ADC_IsEnabled>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	431c      	orrs	r4, r3
 8004c4e:	483c      	ldr	r0, [pc, #240]	@ (8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c50:	f7ff fe89 	bl	8004966 <LL_ADC_IsEnabled>
 8004c54:	4603      	mov	r3, r0
 8004c56:	4323      	orrs	r3, r4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d056      	beq.n	8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c6e:	f023 030f 	bic.w	r3, r3, #15
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	6811      	ldr	r1, [r2, #0]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	6892      	ldr	r2, [r2, #8]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c80:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c82:	e047      	b.n	8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c98:	d004      	beq.n	8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a23      	ldr	r2, [pc, #140]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d10f      	bne.n	8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004ca4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ca8:	f7ff fe5d 	bl	8004966 <LL_ADC_IsEnabled>
 8004cac:	4604      	mov	r4, r0
 8004cae:	481f      	ldr	r0, [pc, #124]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004cb0:	f7ff fe59 	bl	8004966 <LL_ADC_IsEnabled>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4323      	orrs	r3, r4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	e012      	b.n	8004cea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004cc4:	481a      	ldr	r0, [pc, #104]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004cc6:	f7ff fe4e 	bl	8004966 <LL_ADC_IsEnabled>
 8004cca:	4604      	mov	r4, r0
 8004ccc:	4819      	ldr	r0, [pc, #100]	@ (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004cce:	f7ff fe4a 	bl	8004966 <LL_ADC_IsEnabled>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	431c      	orrs	r4, r3
 8004cd6:	481a      	ldr	r0, [pc, #104]	@ (8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004cd8:	f7ff fe45 	bl	8004966 <LL_ADC_IsEnabled>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4323      	orrs	r3, r4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bf0c      	ite	eq
 8004ce4:	2301      	moveq	r3, #1
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d012      	beq.n	8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cf6:	f023 030f 	bic.w	r3, r3, #15
 8004cfa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004cfc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cfe:	e009      	b.n	8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d04:	f043 0220 	orr.w	r2, r3, #32
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004d12:	e000      	b.n	8004d16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3784      	adds	r7, #132	@ 0x84
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd90      	pop	{r4, r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	50000100 	.word	0x50000100
 8004d30:	50000400 	.word	0x50000400
 8004d34:	50000500 	.word	0x50000500
 8004d38:	50000300 	.word	0x50000300
 8004d3c:	50000700 	.word	0x50000700
 8004d40:	50000600 	.word	0x50000600

08004d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d54:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <__NVIC_SetPriorityGrouping+0x44>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d60:	4013      	ands	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d76:	4a04      	ldr	r2, [pc, #16]	@ (8004d88 <__NVIC_SetPriorityGrouping+0x44>)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	60d3      	str	r3, [r2, #12]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d90:	4b04      	ldr	r3, [pc, #16]	@ (8004da4 <__NVIC_GetPriorityGrouping+0x18>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	0a1b      	lsrs	r3, r3, #8
 8004d96:	f003 0307 	and.w	r3, r3, #7
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	e000ed00 	.word	0xe000ed00

08004da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	db0b      	blt.n	8004dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	f003 021f 	and.w	r2, r3, #31
 8004dc0:	4907      	ldr	r1, [pc, #28]	@ (8004de0 <__NVIC_EnableIRQ+0x38>)
 8004dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	2001      	movs	r0, #1
 8004dca:	fa00 f202 	lsl.w	r2, r0, r2
 8004dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	e000e100 	.word	0xe000e100

08004de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	6039      	str	r1, [r7, #0]
 8004dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	db0a      	blt.n	8004e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	490c      	ldr	r1, [pc, #48]	@ (8004e30 <__NVIC_SetPriority+0x4c>)
 8004dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e02:	0112      	lsls	r2, r2, #4
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	440b      	add	r3, r1
 8004e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e0c:	e00a      	b.n	8004e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	4908      	ldr	r1, [pc, #32]	@ (8004e34 <__NVIC_SetPriority+0x50>)
 8004e14:	79fb      	ldrb	r3, [r7, #7]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	3b04      	subs	r3, #4
 8004e1c:	0112      	lsls	r2, r2, #4
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	440b      	add	r3, r1
 8004e22:	761a      	strb	r2, [r3, #24]
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	e000e100 	.word	0xe000e100
 8004e34:	e000ed00 	.word	0xe000ed00

08004e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b089      	sub	sp, #36	@ 0x24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f1c3 0307 	rsb	r3, r3, #7
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	bf28      	it	cs
 8004e56:	2304      	movcs	r3, #4
 8004e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	2b06      	cmp	r3, #6
 8004e60:	d902      	bls.n	8004e68 <NVIC_EncodePriority+0x30>
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	3b03      	subs	r3, #3
 8004e66:	e000      	b.n	8004e6a <NVIC_EncodePriority+0x32>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43da      	mvns	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e80:	f04f 31ff 	mov.w	r1, #4294967295
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8a:	43d9      	mvns	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e90:	4313      	orrs	r3, r2
         );
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3724      	adds	r7, #36	@ 0x24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff ff4c 	bl	8004d44 <__NVIC_SetPriorityGrouping>
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ec2:	f7ff ff63 	bl	8004d8c <__NVIC_GetPriorityGrouping>
 8004ec6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	6978      	ldr	r0, [r7, #20]
 8004ece:	f7ff ffb3 	bl	8004e38 <NVIC_EncodePriority>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff ff82 	bl	8004de4 <__NVIC_SetPriority>
}
 8004ee0:	bf00      	nop
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff ff56 	bl	8004da8 <__NVIC_EnableIRQ>
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e08d      	b.n	8005032 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4b47      	ldr	r3, [pc, #284]	@ (800503c <HAL_DMA_Init+0x138>)
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d80f      	bhi.n	8004f42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	4b45      	ldr	r3, [pc, #276]	@ (8005040 <HAL_DMA_Init+0x13c>)
 8004f2a:	4413      	add	r3, r2
 8004f2c:	4a45      	ldr	r2, [pc, #276]	@ (8005044 <HAL_DMA_Init+0x140>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	091b      	lsrs	r3, r3, #4
 8004f34:	009a      	lsls	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a42      	ldr	r2, [pc, #264]	@ (8005048 <HAL_DMA_Init+0x144>)
 8004f3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f40:	e00e      	b.n	8004f60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	4b40      	ldr	r3, [pc, #256]	@ (800504c <HAL_DMA_Init+0x148>)
 8004f4a:	4413      	add	r3, r2
 8004f4c:	4a3d      	ldr	r2, [pc, #244]	@ (8005044 <HAL_DMA_Init+0x140>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	009a      	lsls	r2, r3, #2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a3c      	ldr	r2, [pc, #240]	@ (8005050 <HAL_DMA_Init+0x14c>)
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa76 	bl	80054a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fc0:	d102      	bne.n	8004fc8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fdc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_DMA_Init+0x104>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d80c      	bhi.n	8005008 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa96 	bl	8005520 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	e008      	b.n	800501a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40020407 	.word	0x40020407
 8005040:	bffdfff8 	.word	0xbffdfff8
 8005044:	cccccccd 	.word	0xcccccccd
 8005048:	40020000 	.word	0x40020000
 800504c:	bffdfbf8 	.word	0xbffdfbf8
 8005050:	40020400 	.word	0x40020400

08005054 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_DMA_Start_IT+0x20>
 8005070:	2302      	movs	r3, #2
 8005072:	e066      	b.n	8005142 <HAL_DMA_Start_IT+0xee>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d155      	bne.n	8005134 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0201 	bic.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f9bb 	bl	8005428 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 020e 	orr.w	r2, r2, #14
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e00f      	b.n	80050ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0204 	bic.w	r2, r2, #4
 80050da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 020a 	orr.w	r2, r2, #10
 80050ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005108:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005120:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	e005      	b.n	8005140 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800513c:	2302      	movs	r3, #2
 800513e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005140:	7dfb      	ldrb	r3, [r7, #23]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d005      	beq.n	800516e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2204      	movs	r2, #4
 8005166:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
 800516c:	e037      	b.n	80051de <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 020e 	bic.w	r2, r2, #14
 800517c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800518c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a2:	f003 021f 	and.w	r2, r3, #31
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	2101      	movs	r1, #1
 80051ac:	fa01 f202 	lsl.w	r2, r1, r2
 80051b0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051ba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00c      	beq.n	80051de <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051d2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051dc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d00d      	beq.n	8005230 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2204      	movs	r2, #4
 8005218:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
 800522e:	e047      	b.n	80052c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 020e 	bic.w	r2, r2, #14
 800523e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800525e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005264:	f003 021f 	and.w	r2, r3, #31
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526c:	2101      	movs	r1, #1
 800526e:	fa01 f202 	lsl.w	r2, r1, r2
 8005272:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800527c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005290:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005294:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800529e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	4798      	blx	r3
    }
  }
  return status;
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e6:	f003 031f 	and.w	r3, r3, #31
 80052ea:	2204      	movs	r2, #4
 80052ec:	409a      	lsls	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d026      	beq.n	8005344 <HAL_DMA_IRQHandler+0x7a>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d021      	beq.n	8005344 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d107      	bne.n	800531e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0204 	bic.w	r2, r2, #4
 800531c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	f003 021f 	and.w	r2, r3, #31
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	2104      	movs	r1, #4
 800532c:	fa01 f202 	lsl.w	r2, r1, r2
 8005330:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005336:	2b00      	cmp	r3, #0
 8005338:	d071      	beq.n	800541e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005342:	e06c      	b.n	800541e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	2202      	movs	r2, #2
 800534e:	409a      	lsls	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d02e      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d029      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10b      	bne.n	8005388 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 020a 	bic.w	r2, r2, #10
 800537e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538c:	f003 021f 	and.w	r2, r3, #31
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	2102      	movs	r1, #2
 8005396:	fa01 f202 	lsl.w	r2, r1, r2
 800539a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d038      	beq.n	800541e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80053b4:	e033      	b.n	800541e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2208      	movs	r2, #8
 80053c0:	409a      	lsls	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d02a      	beq.n	8005420 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d025      	beq.n	8005420 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 020e 	bic.w	r2, r2, #14
 80053e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e8:	f003 021f 	and.w	r2, r3, #31
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f0:	2101      	movs	r1, #1
 80053f2:	fa01 f202 	lsl.w	r2, r1, r2
 80053f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800541e:	bf00      	nop
 8005420:	bf00      	nop
}
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800543e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005450:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005456:	f003 021f 	and.w	r2, r3, #31
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	2101      	movs	r1, #1
 8005460:	fa01 f202 	lsl.w	r2, r1, r2
 8005464:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b10      	cmp	r3, #16
 8005474:	d108      	bne.n	8005488 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005486:	e007      	b.n	8005498 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	60da      	str	r2, [r3, #12]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	4b16      	ldr	r3, [pc, #88]	@ (800550c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d802      	bhi.n	80054be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80054b8:	4b15      	ldr	r3, [pc, #84]	@ (8005510 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	e001      	b.n	80054c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80054be:	4b15      	ldr	r3, [pc, #84]	@ (8005514 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80054c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	3b08      	subs	r3, #8
 80054ce:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054dc:	089b      	lsrs	r3, r3, #2
 80054de:	009a      	lsls	r2, r3, #2
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a0b      	ldr	r2, [pc, #44]	@ (800551c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80054ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	2201      	movs	r2, #1
 80054f8:	409a      	lsls	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40020407 	.word	0x40020407
 8005510:	40020800 	.word	0x40020800
 8005514:	40020820 	.word	0x40020820
 8005518:	cccccccd 	.word	0xcccccccd
 800551c:	40020880 	.word	0x40020880

08005520 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	461a      	mov	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a08      	ldr	r2, [pc, #32]	@ (8005564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005542:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3b01      	subs	r3, #1
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	2201      	movs	r2, #1
 800554e:	409a      	lsls	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	1000823f 	.word	0x1000823f
 8005564:	40020940 	.word	0x40020940

08005568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005576:	e15a      	b.n	800582e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	2101      	movs	r1, #1
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	4013      	ands	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 814c 	beq.w	8005828 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d005      	beq.n	80055a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d130      	bne.n	800560a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	2203      	movs	r2, #3
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	43db      	mvns	r3, r3
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4013      	ands	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055de:	2201      	movs	r2, #1
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4013      	ands	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	f003 0201 	and.w	r2, r3, #1
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b03      	cmp	r3, #3
 8005614:	d017      	beq.n	8005646 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	2203      	movs	r2, #3
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4013      	ands	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d123      	bne.n	800569a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	08da      	lsrs	r2, r3, #3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3208      	adds	r2, #8
 800565a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	220f      	movs	r2, #15
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43db      	mvns	r3, r3
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	08da      	lsrs	r2, r3, #3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3208      	adds	r2, #8
 8005694:	6939      	ldr	r1, [r7, #16]
 8005696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	2203      	movs	r2, #3
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	43db      	mvns	r3, r3
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4013      	ands	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 0203 	and.w	r2, r3, #3
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 80a6 	beq.w	8005828 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056dc:	4b5b      	ldr	r3, [pc, #364]	@ (800584c <HAL_GPIO_Init+0x2e4>)
 80056de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e0:	4a5a      	ldr	r2, [pc, #360]	@ (800584c <HAL_GPIO_Init+0x2e4>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80056e8:	4b58      	ldr	r3, [pc, #352]	@ (800584c <HAL_GPIO_Init+0x2e4>)
 80056ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056f4:	4a56      	ldr	r2, [pc, #344]	@ (8005850 <HAL_GPIO_Init+0x2e8>)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	089b      	lsrs	r3, r3, #2
 80056fa:	3302      	adds	r3, #2
 80056fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005700:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	220f      	movs	r2, #15
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	43db      	mvns	r3, r3
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4013      	ands	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800571e:	d01f      	beq.n	8005760 <HAL_GPIO_Init+0x1f8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a4c      	ldr	r2, [pc, #304]	@ (8005854 <HAL_GPIO_Init+0x2ec>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d019      	beq.n	800575c <HAL_GPIO_Init+0x1f4>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a4b      	ldr	r2, [pc, #300]	@ (8005858 <HAL_GPIO_Init+0x2f0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d013      	beq.n	8005758 <HAL_GPIO_Init+0x1f0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a4a      	ldr	r2, [pc, #296]	@ (800585c <HAL_GPIO_Init+0x2f4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00d      	beq.n	8005754 <HAL_GPIO_Init+0x1ec>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a49      	ldr	r2, [pc, #292]	@ (8005860 <HAL_GPIO_Init+0x2f8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d007      	beq.n	8005750 <HAL_GPIO_Init+0x1e8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a48      	ldr	r2, [pc, #288]	@ (8005864 <HAL_GPIO_Init+0x2fc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d101      	bne.n	800574c <HAL_GPIO_Init+0x1e4>
 8005748:	2305      	movs	r3, #5
 800574a:	e00a      	b.n	8005762 <HAL_GPIO_Init+0x1fa>
 800574c:	2306      	movs	r3, #6
 800574e:	e008      	b.n	8005762 <HAL_GPIO_Init+0x1fa>
 8005750:	2304      	movs	r3, #4
 8005752:	e006      	b.n	8005762 <HAL_GPIO_Init+0x1fa>
 8005754:	2303      	movs	r3, #3
 8005756:	e004      	b.n	8005762 <HAL_GPIO_Init+0x1fa>
 8005758:	2302      	movs	r3, #2
 800575a:	e002      	b.n	8005762 <HAL_GPIO_Init+0x1fa>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_GPIO_Init+0x1fa>
 8005760:	2300      	movs	r3, #0
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	f002 0203 	and.w	r2, r2, #3
 8005768:	0092      	lsls	r2, r2, #2
 800576a:	4093      	lsls	r3, r2
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005772:	4937      	ldr	r1, [pc, #220]	@ (8005850 <HAL_GPIO_Init+0x2e8>)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	3302      	adds	r3, #2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005780:	4b39      	ldr	r3, [pc, #228]	@ (8005868 <HAL_GPIO_Init+0x300>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	43db      	mvns	r3, r3
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4013      	ands	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057a4:	4a30      	ldr	r2, [pc, #192]	@ (8005868 <HAL_GPIO_Init+0x300>)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80057aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005868 <HAL_GPIO_Init+0x300>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	43db      	mvns	r3, r3
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4013      	ands	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057ce:	4a26      	ldr	r2, [pc, #152]	@ (8005868 <HAL_GPIO_Init+0x300>)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80057d4:	4b24      	ldr	r3, [pc, #144]	@ (8005868 <HAL_GPIO_Init+0x300>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	43db      	mvns	r3, r3
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4013      	ands	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005868 <HAL_GPIO_Init+0x300>)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80057fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005868 <HAL_GPIO_Init+0x300>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	43db      	mvns	r3, r3
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4013      	ands	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005822:	4a11      	ldr	r2, [pc, #68]	@ (8005868 <HAL_GPIO_Init+0x300>)
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	3301      	adds	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	f47f ae9d 	bne.w	8005578 <HAL_GPIO_Init+0x10>
  }
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	40021000 	.word	0x40021000
 8005850:	40010000 	.word	0x40010000
 8005854:	48000400 	.word	0x48000400
 8005858:	48000800 	.word	0x48000800
 800585c:	48000c00 	.word	0x48000c00
 8005860:	48001000 	.word	0x48001000
 8005864:	48001400 	.word	0x48001400
 8005868:	40010400 	.word	0x40010400

0800586c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	807b      	strh	r3, [r7, #2]
 8005878:	4613      	mov	r3, r2
 800587a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800587c:	787b      	ldrb	r3, [r7, #1]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005882:	887a      	ldrh	r2, [r7, #2]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005888:	e002      	b.n	8005890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800588a:	887a      	ldrh	r2, [r7, #2]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058ae:	887a      	ldrh	r2, [r7, #2]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4013      	ands	r3, r2
 80058b4:	041a      	lsls	r2, r3, #16
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	43d9      	mvns	r1, r3
 80058ba:	887b      	ldrh	r3, [r7, #2]
 80058bc:	400b      	ands	r3, r1
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	619a      	str	r2, [r3, #24]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058da:	4b08      	ldr	r3, [pc, #32]	@ (80058fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058e6:	4a05      	ldr	r2, [pc, #20]	@ (80058fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f806 	bl	8005900 <HAL_GPIO_EXTI_Callback>
  }
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40010400 	.word	0x40010400

08005900 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d141      	bne.n	80059aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005926:	4b4b      	ldr	r3, [pc, #300]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800592e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005932:	d131      	bne.n	8005998 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005934:	4b47      	ldr	r3, [pc, #284]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800593a:	4a46      	ldr	r2, [pc, #280]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005940:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005944:	4b43      	ldr	r3, [pc, #268]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800594c:	4a41      	ldr	r2, [pc, #260]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800594e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005952:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005954:	4b40      	ldr	r3, [pc, #256]	@ (8005a58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2232      	movs	r2, #50	@ 0x32
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	4a3f      	ldr	r2, [pc, #252]	@ (8005a5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005960:	fba2 2303 	umull	r2, r3, r2, r3
 8005964:	0c9b      	lsrs	r3, r3, #18
 8005966:	3301      	adds	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800596a:	e002      	b.n	8005972 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b01      	subs	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005972:	4b38      	ldr	r3, [pc, #224]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800597e:	d102      	bne.n	8005986 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f2      	bne.n	800596c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005986:	4b33      	ldr	r3, [pc, #204]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800598e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005992:	d158      	bne.n	8005a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e057      	b.n	8005a48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005998:	4b2e      	ldr	r3, [pc, #184]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800599a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800599e:	4a2d      	ldr	r2, [pc, #180]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80059a8:	e04d      	b.n	8005a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059b0:	d141      	bne.n	8005a36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059b2:	4b28      	ldr	r3, [pc, #160]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059be:	d131      	bne.n	8005a24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059c0:	4b24      	ldr	r3, [pc, #144]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c6:	4a23      	ldr	r2, [pc, #140]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059d0:	4b20      	ldr	r3, [pc, #128]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2232      	movs	r2, #50	@ 0x32
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	4a1c      	ldr	r2, [pc, #112]	@ (8005a5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	0c9b      	lsrs	r3, r3, #18
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059f6:	e002      	b.n	80059fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059fe:	4b15      	ldr	r3, [pc, #84]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a0a:	d102      	bne.n	8005a12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f2      	bne.n	80059f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a12:	4b10      	ldr	r3, [pc, #64]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a1e:	d112      	bne.n	8005a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e011      	b.n	8005a48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a24:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005a34:	e007      	b.n	8005a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a36:	4b07      	ldr	r3, [pc, #28]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a3e:	4a05      	ldr	r2, [pc, #20]	@ (8005a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40007000 	.word	0x40007000
 8005a58:	20000004 	.word	0x20000004
 8005a5c:	431bde83 	.word	0x431bde83

08005a60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	4a04      	ldr	r2, [pc, #16]	@ (8005a7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a6e:	6093      	str	r3, [r2, #8]
}
 8005a70:	bf00      	nop
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40007000 	.word	0x40007000

08005a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e2fe      	b.n	8006090 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d075      	beq.n	8005b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9e:	4b97      	ldr	r3, [pc, #604]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa8:	4b94      	ldr	r3, [pc, #592]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b0c      	cmp	r3, #12
 8005ab6:	d102      	bne.n	8005abe <HAL_RCC_OscConfig+0x3e>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d002      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x44>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d10b      	bne.n	8005adc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac4:	4b8d      	ldr	r3, [pc, #564]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d05b      	beq.n	8005b88 <HAL_RCC_OscConfig+0x108>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d157      	bne.n	8005b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e2d9      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae4:	d106      	bne.n	8005af4 <HAL_RCC_OscConfig+0x74>
 8005ae6:	4b85      	ldr	r3, [pc, #532]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a84      	ldr	r2, [pc, #528]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	e01d      	b.n	8005b30 <HAL_RCC_OscConfig+0xb0>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005afc:	d10c      	bne.n	8005b18 <HAL_RCC_OscConfig+0x98>
 8005afe:	4b7f      	ldr	r3, [pc, #508]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a7e      	ldr	r2, [pc, #504]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	e00b      	b.n	8005b30 <HAL_RCC_OscConfig+0xb0>
 8005b18:	4b78      	ldr	r3, [pc, #480]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a77      	ldr	r2, [pc, #476]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	4b75      	ldr	r3, [pc, #468]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a74      	ldr	r2, [pc, #464]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d013      	beq.n	8005b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fd f9aa 	bl	8002e90 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b40:	f7fd f9a6 	bl	8002e90 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b64      	cmp	r3, #100	@ 0x64
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e29e      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b52:	4b6a      	ldr	r3, [pc, #424]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCC_OscConfig+0xc0>
 8005b5e:	e014      	b.n	8005b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fd f996 	bl	8002e90 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b68:	f7fd f992 	bl	8002e90 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	@ 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e28a      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b7a:	4b60      	ldr	r3, [pc, #384]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f0      	bne.n	8005b68 <HAL_RCC_OscConfig+0xe8>
 8005b86:	e000      	b.n	8005b8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d075      	beq.n	8005c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b96:	4b59      	ldr	r3, [pc, #356]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ba0:	4b56      	ldr	r3, [pc, #344]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b0c      	cmp	r3, #12
 8005bae:	d102      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x136>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d002      	beq.n	8005bbc <HAL_RCC_OscConfig+0x13c>
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d11f      	bne.n	8005bfc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x154>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e25d      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd4:	4b49      	ldr	r3, [pc, #292]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	061b      	lsls	r3, r3, #24
 8005be2:	4946      	ldr	r1, [pc, #280]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005be8:	4b45      	ldr	r3, [pc, #276]	@ (8005d00 <HAL_RCC_OscConfig+0x280>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fb fde3 	bl	80017b8 <HAL_InitTick>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d043      	beq.n	8005c80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e249      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d023      	beq.n	8005c4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c04:	4b3d      	ldr	r3, [pc, #244]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a3c      	ldr	r2, [pc, #240]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fd f93e 	bl	8002e90 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c18:	f7fd f93a 	bl	8002e90 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e232      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c2a:	4b34      	ldr	r3, [pc, #208]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c36:	4b31      	ldr	r3, [pc, #196]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	061b      	lsls	r3, r3, #24
 8005c44:	492d      	ldr	r1, [pc, #180]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	604b      	str	r3, [r1, #4]
 8005c4a:	e01a      	b.n	8005c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2a      	ldr	r2, [pc, #168]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005c52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7fd f91a 	bl	8002e90 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c60:	f7fd f916 	bl	8002e90 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e20e      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c72:	4b22      	ldr	r3, [pc, #136]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0x1e0>
 8005c7e:	e000      	b.n	8005c82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d041      	beq.n	8005d12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d01c      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c96:	4b19      	ldr	r3, [pc, #100]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c9c:	4a17      	ldr	r2, [pc, #92]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca6:	f7fd f8f3 	bl	8002e90 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cae:	f7fd f8ef 	bl	8002e90 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e1e7      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0ef      	beq.n	8005cae <HAL_RCC_OscConfig+0x22e>
 8005cce:	e020      	b.n	8005d12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cd6:	4a09      	ldr	r2, [pc, #36]	@ (8005cfc <HAL_RCC_OscConfig+0x27c>)
 8005cd8:	f023 0301 	bic.w	r3, r3, #1
 8005cdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce0:	f7fd f8d6 	bl	8002e90 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ce6:	e00d      	b.n	8005d04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce8:	f7fd f8d2 	bl	8002e90 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d906      	bls.n	8005d04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e1ca      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	200000cc 	.word	0x200000cc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d04:	4b8c      	ldr	r3, [pc, #560]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1ea      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 80a6 	beq.w	8005e6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d20:	2300      	movs	r3, #0
 8005d22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d24:	4b84      	ldr	r3, [pc, #528]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_RCC_OscConfig+0x2b4>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <HAL_RCC_OscConfig+0x2b6>
 8005d34:	2300      	movs	r3, #0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00d      	beq.n	8005d56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d46:	4b7c      	ldr	r3, [pc, #496]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d52:	2301      	movs	r3, #1
 8005d54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d56:	4b79      	ldr	r3, [pc, #484]	@ (8005f3c <HAL_RCC_OscConfig+0x4bc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d118      	bne.n	8005d94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d62:	4b76      	ldr	r3, [pc, #472]	@ (8005f3c <HAL_RCC_OscConfig+0x4bc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a75      	ldr	r2, [pc, #468]	@ (8005f3c <HAL_RCC_OscConfig+0x4bc>)
 8005d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d6e:	f7fd f88f 	bl	8002e90 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d76:	f7fd f88b 	bl	8002e90 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e183      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d88:	4b6c      	ldr	r3, [pc, #432]	@ (8005f3c <HAL_RCC_OscConfig+0x4bc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d108      	bne.n	8005dae <HAL_RCC_OscConfig+0x32e>
 8005d9c:	4b66      	ldr	r3, [pc, #408]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da2:	4a65      	ldr	r2, [pc, #404]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dac:	e024      	b.n	8005df8 <HAL_RCC_OscConfig+0x378>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b05      	cmp	r3, #5
 8005db4:	d110      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x358>
 8005db6:	4b60      	ldr	r3, [pc, #384]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dbc:	4a5e      	ldr	r2, [pc, #376]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005dbe:	f043 0304 	orr.w	r3, r3, #4
 8005dc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dcc:	4a5a      	ldr	r2, [pc, #360]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dd6:	e00f      	b.n	8005df8 <HAL_RCC_OscConfig+0x378>
 8005dd8:	4b57      	ldr	r3, [pc, #348]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dde:	4a56      	ldr	r2, [pc, #344]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005de8:	4b53      	ldr	r3, [pc, #332]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dee:	4a52      	ldr	r2, [pc, #328]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005df0:	f023 0304 	bic.w	r3, r3, #4
 8005df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d016      	beq.n	8005e2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e00:	f7fd f846 	bl	8002e90 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e06:	e00a      	b.n	8005e1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e08:	f7fd f842 	bl	8002e90 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e138      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e1e:	4b46      	ldr	r3, [pc, #280]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0ed      	beq.n	8005e08 <HAL_RCC_OscConfig+0x388>
 8005e2c:	e015      	b.n	8005e5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2e:	f7fd f82f 	bl	8002e90 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e34:	e00a      	b.n	8005e4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e36:	f7fd f82b 	bl	8002e90 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e121      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1ed      	bne.n	8005e36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e5a:	7ffb      	ldrb	r3, [r7, #31]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d105      	bne.n	8005e6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e60:	4b35      	ldr	r3, [pc, #212]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e64:	4a34      	ldr	r2, [pc, #208]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d03c      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01c      	beq.n	8005eba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e80:	4b2d      	ldr	r3, [pc, #180]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e86:	4a2c      	ldr	r2, [pc, #176]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005e88:	f043 0301 	orr.w	r3, r3, #1
 8005e8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e90:	f7fc fffe 	bl	8002e90 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e98:	f7fc fffa 	bl	8002e90 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e0f2      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eaa:	4b23      	ldr	r3, [pc, #140]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0ef      	beq.n	8005e98 <HAL_RCC_OscConfig+0x418>
 8005eb8:	e01b      	b.n	8005ef2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005eba:	4b1f      	ldr	r3, [pc, #124]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eca:	f7fc ffe1 	bl	8002e90 <HAL_GetTick>
 8005ece:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ed2:	f7fc ffdd 	bl	8002e90 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e0d5      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ee4:	4b14      	ldr	r3, [pc, #80]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1ef      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80c9 	beq.w	800608e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005efc:	4b0e      	ldr	r3, [pc, #56]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b0c      	cmp	r3, #12
 8005f06:	f000 8083 	beq.w	8006010 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d15e      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f12:	4b09      	ldr	r3, [pc, #36]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a08      	ldr	r2, [pc, #32]	@ (8005f38 <HAL_RCC_OscConfig+0x4b8>)
 8005f18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1e:	f7fc ffb7 	bl	8002e90 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f24:	e00c      	b.n	8005f40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f26:	f7fc ffb3 	bl	8002e90 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d905      	bls.n	8005f40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e0ab      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f40:	4b55      	ldr	r3, [pc, #340]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1ec      	bne.n	8005f26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f4c:	4b52      	ldr	r3, [pc, #328]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	4b52      	ldr	r3, [pc, #328]	@ (800609c <HAL_RCC_OscConfig+0x61c>)
 8005f52:	4013      	ands	r3, r2
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6a11      	ldr	r1, [r2, #32]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f5c:	3a01      	subs	r2, #1
 8005f5e:	0112      	lsls	r2, r2, #4
 8005f60:	4311      	orrs	r1, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005f66:	0212      	lsls	r2, r2, #8
 8005f68:	4311      	orrs	r1, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f6e:	0852      	lsrs	r2, r2, #1
 8005f70:	3a01      	subs	r2, #1
 8005f72:	0552      	lsls	r2, r2, #21
 8005f74:	4311      	orrs	r1, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f7a:	0852      	lsrs	r2, r2, #1
 8005f7c:	3a01      	subs	r2, #1
 8005f7e:	0652      	lsls	r2, r2, #25
 8005f80:	4311      	orrs	r1, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f86:	06d2      	lsls	r2, r2, #27
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	4943      	ldr	r1, [pc, #268]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f90:	4b41      	ldr	r3, [pc, #260]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a40      	ldr	r2, [pc, #256]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	4a3d      	ldr	r2, [pc, #244]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fa6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa8:	f7fc ff72 	bl	8002e90 <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb0:	f7fc ff6e 	bl	8002e90 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e066      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc2:	4b35      	ldr	r3, [pc, #212]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x530>
 8005fce:	e05e      	b.n	800608e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd0:	4b31      	ldr	r3, [pc, #196]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a30      	ldr	r2, [pc, #192]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005fd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fc ff58 	bl	8002e90 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe4:	f7fc ff54 	bl	8002e90 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e04c      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff6:	4b28      	ldr	r3, [pc, #160]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006002:	4b25      	ldr	r3, [pc, #148]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	4924      	ldr	r1, [pc, #144]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 8006008:	4b25      	ldr	r3, [pc, #148]	@ (80060a0 <HAL_RCC_OscConfig+0x620>)
 800600a:	4013      	ands	r3, r2
 800600c:	60cb      	str	r3, [r1, #12]
 800600e:	e03e      	b.n	800608e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e039      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800601c:	4b1e      	ldr	r3, [pc, #120]	@ (8006098 <HAL_RCC_OscConfig+0x618>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f003 0203 	and.w	r2, r3, #3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	429a      	cmp	r2, r3
 800602e:	d12c      	bne.n	800608a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603a:	3b01      	subs	r3, #1
 800603c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800603e:	429a      	cmp	r2, r3
 8006040:	d123      	bne.n	800608a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800604e:	429a      	cmp	r2, r3
 8006050:	d11b      	bne.n	800608a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800605e:	429a      	cmp	r2, r3
 8006060:	d113      	bne.n	800608a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	3b01      	subs	r3, #1
 8006070:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006072:	429a      	cmp	r2, r3
 8006074:	d109      	bne.n	800608a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	3b01      	subs	r3, #1
 8006084:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006086:	429a      	cmp	r2, r3
 8006088:	d001      	beq.n	800608e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40021000 	.word	0x40021000
 800609c:	019f800c 	.word	0x019f800c
 80060a0:	feeefffc 	.word	0xfeeefffc

080060a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e11e      	b.n	80062fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060bc:	4b91      	ldr	r3, [pc, #580]	@ (8006304 <HAL_RCC_ClockConfig+0x260>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d910      	bls.n	80060ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ca:	4b8e      	ldr	r3, [pc, #568]	@ (8006304 <HAL_RCC_ClockConfig+0x260>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f023 020f 	bic.w	r2, r3, #15
 80060d2:	498c      	ldr	r1, [pc, #560]	@ (8006304 <HAL_RCC_ClockConfig+0x260>)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060da:	4b8a      	ldr	r3, [pc, #552]	@ (8006304 <HAL_RCC_ClockConfig+0x260>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d001      	beq.n	80060ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e106      	b.n	80062fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d073      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d129      	bne.n	8006154 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006100:	4b81      	ldr	r3, [pc, #516]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e0f4      	b.n	80062fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006110:	f000 f9d0 	bl	80064b4 <RCC_GetSysClockFreqFromPLLSource>
 8006114:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4a7c      	ldr	r2, [pc, #496]	@ (800630c <HAL_RCC_ClockConfig+0x268>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d93f      	bls.n	800619e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800611e:	4b7a      	ldr	r3, [pc, #488]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006132:	2b00      	cmp	r3, #0
 8006134:	d033      	beq.n	800619e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800613a:	2b00      	cmp	r3, #0
 800613c:	d12f      	bne.n	800619e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800613e:	4b72      	ldr	r3, [pc, #456]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006146:	4a70      	ldr	r2, [pc, #448]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 8006148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800614c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800614e:	2380      	movs	r3, #128	@ 0x80
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e024      	b.n	800619e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b02      	cmp	r3, #2
 800615a:	d107      	bne.n	800616c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800615c:	4b6a      	ldr	r3, [pc, #424]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e0c6      	b.n	80062fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800616c:	4b66      	ldr	r3, [pc, #408]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0be      	b.n	80062fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800617c:	f000 f8ce 	bl	800631c <HAL_RCC_GetSysClockFreq>
 8006180:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4a61      	ldr	r2, [pc, #388]	@ (800630c <HAL_RCC_ClockConfig+0x268>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d909      	bls.n	800619e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800618a:	4b5f      	ldr	r3, [pc, #380]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006192:	4a5d      	ldr	r2, [pc, #372]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 8006194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006198:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800619a:	2380      	movs	r3, #128	@ 0x80
 800619c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800619e:	4b5a      	ldr	r3, [pc, #360]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f023 0203 	bic.w	r2, r3, #3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4957      	ldr	r1, [pc, #348]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b0:	f7fc fe6e 	bl	8002e90 <HAL_GetTick>
 80061b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b6:	e00a      	b.n	80061ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b8:	f7fc fe6a 	bl	8002e90 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e095      	b.n	80062fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ce:	4b4e      	ldr	r3, [pc, #312]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 020c 	and.w	r2, r3, #12
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	429a      	cmp	r2, r3
 80061de:	d1eb      	bne.n	80061b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d023      	beq.n	8006234 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061f8:	4b43      	ldr	r3, [pc, #268]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	4a42      	ldr	r2, [pc, #264]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 80061fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006202:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006210:	4b3d      	ldr	r3, [pc, #244]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006218:	4a3b      	ldr	r2, [pc, #236]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 800621a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800621e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006220:	4b39      	ldr	r3, [pc, #228]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	4936      	ldr	r1, [pc, #216]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 800622e:	4313      	orrs	r3, r2
 8006230:	608b      	str	r3, [r1, #8]
 8006232:	e008      	b.n	8006246 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2b80      	cmp	r3, #128	@ 0x80
 8006238:	d105      	bne.n	8006246 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800623a:	4b33      	ldr	r3, [pc, #204]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	4a32      	ldr	r2, [pc, #200]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 8006240:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006244:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006246:	4b2f      	ldr	r3, [pc, #188]	@ (8006304 <HAL_RCC_ClockConfig+0x260>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d21d      	bcs.n	8006290 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006254:	4b2b      	ldr	r3, [pc, #172]	@ (8006304 <HAL_RCC_ClockConfig+0x260>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f023 020f 	bic.w	r2, r3, #15
 800625c:	4929      	ldr	r1, [pc, #164]	@ (8006304 <HAL_RCC_ClockConfig+0x260>)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	4313      	orrs	r3, r2
 8006262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006264:	f7fc fe14 	bl	8002e90 <HAL_GetTick>
 8006268:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800626a:	e00a      	b.n	8006282 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800626c:	f7fc fe10 	bl	8002e90 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e03b      	b.n	80062fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006282:	4b20      	ldr	r3, [pc, #128]	@ (8006304 <HAL_RCC_ClockConfig+0x260>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d1ed      	bne.n	800626c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800629c:	4b1a      	ldr	r3, [pc, #104]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4917      	ldr	r1, [pc, #92]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d009      	beq.n	80062ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ba:	4b13      	ldr	r3, [pc, #76]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	490f      	ldr	r1, [pc, #60]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062ce:	f000 f825 	bl	800631c <HAL_RCC_GetSysClockFreq>
 80062d2:	4602      	mov	r2, r0
 80062d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <HAL_RCC_ClockConfig+0x264>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	091b      	lsrs	r3, r3, #4
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	490c      	ldr	r1, [pc, #48]	@ (8006310 <HAL_RCC_ClockConfig+0x26c>)
 80062e0:	5ccb      	ldrb	r3, [r1, r3]
 80062e2:	f003 031f 	and.w	r3, r3, #31
 80062e6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006314 <HAL_RCC_ClockConfig+0x270>)
 80062ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80062ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <HAL_RCC_ClockConfig+0x274>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fb fa60 	bl	80017b8 <HAL_InitTick>
 80062f8:	4603      	mov	r3, r0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40022000 	.word	0x40022000
 8006308:	40021000 	.word	0x40021000
 800630c:	04c4b400 	.word	0x04c4b400
 8006310:	0800d910 	.word	0x0800d910
 8006314:	20000004 	.word	0x20000004
 8006318:	200000cc 	.word	0x200000cc

0800631c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006322:	4b2c      	ldr	r3, [pc, #176]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
 800632a:	2b04      	cmp	r3, #4
 800632c:	d102      	bne.n	8006334 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800632e:	4b2a      	ldr	r3, [pc, #168]	@ (80063d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e047      	b.n	80063c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006334:	4b27      	ldr	r3, [pc, #156]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 030c 	and.w	r3, r3, #12
 800633c:	2b08      	cmp	r3, #8
 800633e:	d102      	bne.n	8006346 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006340:	4b26      	ldr	r3, [pc, #152]	@ (80063dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	e03e      	b.n	80063c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006346:	4b23      	ldr	r3, [pc, #140]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 030c 	and.w	r3, r3, #12
 800634e:	2b0c      	cmp	r3, #12
 8006350:	d136      	bne.n	80063c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006352:	4b20      	ldr	r3, [pc, #128]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800635c:	4b1d      	ldr	r3, [pc, #116]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	3301      	adds	r3, #1
 8006368:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d10c      	bne.n	800638a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006370:	4a1a      	ldr	r2, [pc, #104]	@ (80063dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	4a16      	ldr	r2, [pc, #88]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800637a:	68d2      	ldr	r2, [r2, #12]
 800637c:	0a12      	lsrs	r2, r2, #8
 800637e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	617b      	str	r3, [r7, #20]
      break;
 8006388:	e00c      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800638a:	4a13      	ldr	r2, [pc, #76]	@ (80063d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006392:	4a10      	ldr	r2, [pc, #64]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006394:	68d2      	ldr	r2, [r2, #12]
 8006396:	0a12      	lsrs	r2, r2, #8
 8006398:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	617b      	str	r3, [r7, #20]
      break;
 80063a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063a4:	4b0b      	ldr	r3, [pc, #44]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	0e5b      	lsrs	r3, r3, #25
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	3301      	adds	r3, #1
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	e001      	b.n	80063c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80063c4:	693b      	ldr	r3, [r7, #16]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40021000 	.word	0x40021000
 80063d8:	00f42400 	.word	0x00f42400
 80063dc:	016e3600 	.word	0x016e3600

080063e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063e4:	4b03      	ldr	r3, [pc, #12]	@ (80063f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063e6:	681b      	ldr	r3, [r3, #0]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000004 	.word	0x20000004

080063f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063fc:	f7ff fff0 	bl	80063e0 <HAL_RCC_GetHCLKFreq>
 8006400:	4602      	mov	r2, r0
 8006402:	4b06      	ldr	r3, [pc, #24]	@ (800641c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	0a1b      	lsrs	r3, r3, #8
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	4904      	ldr	r1, [pc, #16]	@ (8006420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800640e:	5ccb      	ldrb	r3, [r1, r3]
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006418:	4618      	mov	r0, r3
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40021000 	.word	0x40021000
 8006420:	0800d920 	.word	0x0800d920

08006424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006428:	f7ff ffda 	bl	80063e0 <HAL_RCC_GetHCLKFreq>
 800642c:	4602      	mov	r2, r0
 800642e:	4b06      	ldr	r3, [pc, #24]	@ (8006448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	0adb      	lsrs	r3, r3, #11
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	4904      	ldr	r1, [pc, #16]	@ (800644c <HAL_RCC_GetPCLK2Freq+0x28>)
 800643a:	5ccb      	ldrb	r3, [r1, r3]
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40021000 	.word	0x40021000
 800644c:	0800d920 	.word	0x0800d920

08006450 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	220f      	movs	r2, #15
 800645e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006460:	4b12      	ldr	r3, [pc, #72]	@ (80064ac <HAL_RCC_GetClockConfig+0x5c>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 0203 	and.w	r2, r3, #3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800646c:	4b0f      	ldr	r3, [pc, #60]	@ (80064ac <HAL_RCC_GetClockConfig+0x5c>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006478:	4b0c      	ldr	r3, [pc, #48]	@ (80064ac <HAL_RCC_GetClockConfig+0x5c>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006484:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <HAL_RCC_GetClockConfig+0x5c>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	08db      	lsrs	r3, r3, #3
 800648a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006492:	4b07      	ldr	r3, [pc, #28]	@ (80064b0 <HAL_RCC_GetClockConfig+0x60>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 020f 	and.w	r2, r3, #15
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	601a      	str	r2, [r3, #0]
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40021000 	.word	0x40021000
 80064b0:	40022000 	.word	0x40022000

080064b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	091b      	lsrs	r3, r3, #4
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d10c      	bne.n	80064f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064d8:	4a17      	ldr	r2, [pc, #92]	@ (8006538 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e0:	4a14      	ldr	r2, [pc, #80]	@ (8006534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064e2:	68d2      	ldr	r2, [r2, #12]
 80064e4:	0a12      	lsrs	r2, r2, #8
 80064e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064ea:	fb02 f303 	mul.w	r3, r2, r3
 80064ee:	617b      	str	r3, [r7, #20]
    break;
 80064f0:	e00c      	b.n	800650c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064f2:	4a12      	ldr	r2, [pc, #72]	@ (800653c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064fc:	68d2      	ldr	r2, [r2, #12]
 80064fe:	0a12      	lsrs	r2, r2, #8
 8006500:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006504:	fb02 f303 	mul.w	r3, r2, r3
 8006508:	617b      	str	r3, [r7, #20]
    break;
 800650a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800650c:	4b09      	ldr	r3, [pc, #36]	@ (8006534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	0e5b      	lsrs	r3, r3, #25
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	3301      	adds	r3, #1
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	fbb2 f3f3 	udiv	r3, r2, r3
 8006524:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006526:	687b      	ldr	r3, [r7, #4]
}
 8006528:	4618      	mov	r0, r3
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	40021000 	.word	0x40021000
 8006538:	016e3600 	.word	0x016e3600
 800653c:	00f42400 	.word	0x00f42400

08006540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006548:	2300      	movs	r3, #0
 800654a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800654c:	2300      	movs	r3, #0
 800654e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 8098 	beq.w	800668e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800655e:	2300      	movs	r3, #0
 8006560:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006562:	4b43      	ldr	r3, [pc, #268]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10d      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800656e:	4b40      	ldr	r3, [pc, #256]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006572:	4a3f      	ldr	r2, [pc, #252]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006578:	6593      	str	r3, [r2, #88]	@ 0x58
 800657a:	4b3d      	ldr	r3, [pc, #244]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800657c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006586:	2301      	movs	r3, #1
 8006588:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800658a:	4b3a      	ldr	r3, [pc, #232]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a39      	ldr	r2, [pc, #228]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006596:	f7fc fc7b 	bl	8002e90 <HAL_GetTick>
 800659a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800659c:	e009      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659e:	f7fc fc77 	bl	8002e90 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d902      	bls.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	74fb      	strb	r3, [r7, #19]
        break;
 80065b0:	e005      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065b2:	4b30      	ldr	r3, [pc, #192]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0ef      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80065be:	7cfb      	ldrb	r3, [r7, #19]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d159      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01e      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d019      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065e0:	4b23      	ldr	r3, [pc, #140]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065ec:	4b20      	ldr	r3, [pc, #128]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006602:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800660c:	4a18      	ldr	r2, [pc, #96]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661e:	f7fc fc37 	bl	8002e90 <HAL_GetTick>
 8006622:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006624:	e00b      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006626:	f7fc fc33 	bl	8002e90 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006634:	4293      	cmp	r3, r2
 8006636:	d902      	bls.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	74fb      	strb	r3, [r7, #19]
            break;
 800663c:	e006      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800663e:	4b0c      	ldr	r3, [pc, #48]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0ec      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800664c:	7cfb      	ldrb	r3, [r7, #19]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10b      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006652:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006658:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006660:	4903      	ldr	r1, [pc, #12]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006662:	4313      	orrs	r3, r2
 8006664:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006668:	e008      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800666a:	7cfb      	ldrb	r3, [r7, #19]
 800666c:	74bb      	strb	r3, [r7, #18]
 800666e:	e005      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006670:	40021000 	.word	0x40021000
 8006674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006678:	7cfb      	ldrb	r3, [r7, #19]
 800667a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800667c:	7c7b      	ldrb	r3, [r7, #17]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d105      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006682:	4ba7      	ldr	r3, [pc, #668]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006686:	4aa6      	ldr	r2, [pc, #664]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800668c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800669a:	4ba1      	ldr	r3, [pc, #644]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a0:	f023 0203 	bic.w	r2, r3, #3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	499d      	ldr	r1, [pc, #628]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066bc:	4b98      	ldr	r3, [pc, #608]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c2:	f023 020c 	bic.w	r2, r3, #12
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	4995      	ldr	r1, [pc, #596]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066de:	4b90      	ldr	r3, [pc, #576]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	498c      	ldr	r1, [pc, #560]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006700:	4b87      	ldr	r3, [pc, #540]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006706:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	4984      	ldr	r1, [pc, #528]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0310 	and.w	r3, r3, #16
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006722:	4b7f      	ldr	r3, [pc, #508]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006728:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	497b      	ldr	r1, [pc, #492]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006744:	4b76      	ldr	r3, [pc, #472]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	4973      	ldr	r1, [pc, #460]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006766:	4b6e      	ldr	r3, [pc, #440]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	496a      	ldr	r1, [pc, #424]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006788:	4b65      	ldr	r3, [pc, #404]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	4962      	ldr	r1, [pc, #392]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006798:	4313      	orrs	r3, r2
 800679a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b8:	4959      	ldr	r1, [pc, #356]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067cc:	4b54      	ldr	r3, [pc, #336]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067d2:	f023 0203 	bic.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067da:	4951      	ldr	r1, [pc, #324]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067ee:	4b4c      	ldr	r3, [pc, #304]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fc:	4948      	ldr	r1, [pc, #288]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800680c:	2b00      	cmp	r3, #0
 800680e:	d015      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006810:	4b43      	ldr	r3, [pc, #268]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006816:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681e:	4940      	ldr	r1, [pc, #256]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800682e:	d105      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006830:	4b3b      	ldr	r3, [pc, #236]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	4a3a      	ldr	r2, [pc, #232]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800683a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006844:	2b00      	cmp	r3, #0
 8006846:	d015      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006848:	4b35      	ldr	r3, [pc, #212]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800684a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006856:	4932      	ldr	r1, [pc, #200]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006858:	4313      	orrs	r3, r2
 800685a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006862:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006866:	d105      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006868:	4b2d      	ldr	r3, [pc, #180]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4a2c      	ldr	r2, [pc, #176]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006872:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d015      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006880:	4b27      	ldr	r3, [pc, #156]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006886:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688e:	4924      	ldr	r1, [pc, #144]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800689e:	d105      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d015      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068b8:	4b19      	ldr	r3, [pc, #100]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c6:	4916      	ldr	r1, [pc, #88]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068d6:	d105      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068d8:	4b11      	ldr	r3, [pc, #68]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	4a10      	ldr	r2, [pc, #64]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d019      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	4908      	ldr	r1, [pc, #32]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006900:	4313      	orrs	r3, r2
 8006902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800690e:	d109      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006910:	4b03      	ldr	r3, [pc, #12]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4a02      	ldr	r2, [pc, #8]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800691a:	60d3      	str	r3, [r2, #12]
 800691c:	e002      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800691e:	bf00      	nop
 8006920:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d015      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006930:	4b29      	ldr	r3, [pc, #164]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006936:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693e:	4926      	ldr	r1, [pc, #152]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006940:	4313      	orrs	r3, r2
 8006942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800694e:	d105      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006950:	4b21      	ldr	r3, [pc, #132]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	4a20      	ldr	r2, [pc, #128]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800695a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d015      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006968:	4b1b      	ldr	r3, [pc, #108]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006976:	4918      	ldr	r1, [pc, #96]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006986:	d105      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006988:	4b13      	ldr	r3, [pc, #76]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	4a12      	ldr	r2, [pc, #72]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800698e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006992:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d015      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80069a0:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ae:	490a      	ldr	r1, [pc, #40]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069be:	d105      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069c0:	4b05      	ldr	r3, [pc, #20]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4a04      	ldr	r2, [pc, #16]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80069cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40021000 	.word	0x40021000

080069dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e049      	b.n	8006a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fb faac 	bl	8001f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3304      	adds	r3, #4
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f000 fe8a 	bl	8007734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d001      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e054      	b.n	8006b4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a26      	ldr	r2, [pc, #152]	@ (8006b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d022      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x80>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d01d      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x80>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a22      	ldr	r2, [pc, #136]	@ (8006b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x80>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a21      	ldr	r2, [pc, #132]	@ (8006b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x80>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x80>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b6c <HAL_TIM_Base_Start_IT+0xe0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x80>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1c      	ldr	r2, [pc, #112]	@ (8006b70 <HAL_TIM_Base_Start_IT+0xe4>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIM_Base_Start_IT+0x80>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1b      	ldr	r2, [pc, #108]	@ (8006b74 <HAL_TIM_Base_Start_IT+0xe8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d115      	bne.n	8006b38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	4b19      	ldr	r3, [pc, #100]	@ (8006b78 <HAL_TIM_Base_Start_IT+0xec>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b06      	cmp	r3, #6
 8006b1c:	d015      	beq.n	8006b4a <HAL_TIM_Base_Start_IT+0xbe>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b24:	d011      	beq.n	8006b4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0201 	orr.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b36:	e008      	b.n	8006b4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0201 	orr.w	r2, r2, #1
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	e000      	b.n	8006b4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00
 8006b6c:	40013400 	.word	0x40013400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40015000 	.word	0x40015000
 8006b78:	00010007 	.word	0x00010007

08006b7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e049      	b.n	8006c22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fb f94c 	bl	8001e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f000 fdba 	bl	8007734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d109      	bne.n	8006c50 <HAL_TIM_PWM_Start+0x24>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	bf14      	ite	ne
 8006c48:	2301      	movne	r3, #1
 8006c4a:	2300      	moveq	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	e03c      	b.n	8006cca <HAL_TIM_PWM_Start+0x9e>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d109      	bne.n	8006c6a <HAL_TIM_PWM_Start+0x3e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	bf14      	ite	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	2300      	moveq	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	e02f      	b.n	8006cca <HAL_TIM_PWM_Start+0x9e>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d109      	bne.n	8006c84 <HAL_TIM_PWM_Start+0x58>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	e022      	b.n	8006cca <HAL_TIM_PWM_Start+0x9e>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b0c      	cmp	r3, #12
 8006c88:	d109      	bne.n	8006c9e <HAL_TIM_PWM_Start+0x72>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	bf14      	ite	ne
 8006c96:	2301      	movne	r3, #1
 8006c98:	2300      	moveq	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	e015      	b.n	8006cca <HAL_TIM_PWM_Start+0x9e>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b10      	cmp	r3, #16
 8006ca2:	d109      	bne.n	8006cb8 <HAL_TIM_PWM_Start+0x8c>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	bf14      	ite	ne
 8006cb0:	2301      	movne	r3, #1
 8006cb2:	2300      	moveq	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	e008      	b.n	8006cca <HAL_TIM_PWM_Start+0x9e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	bf14      	ite	ne
 8006cc4:	2301      	movne	r3, #1
 8006cc6:	2300      	moveq	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e0a6      	b.n	8006e20 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d104      	bne.n	8006ce2 <HAL_TIM_PWM_Start+0xb6>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ce0:	e023      	b.n	8006d2a <HAL_TIM_PWM_Start+0xfe>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d104      	bne.n	8006cf2 <HAL_TIM_PWM_Start+0xc6>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cf0:	e01b      	b.n	8006d2a <HAL_TIM_PWM_Start+0xfe>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d104      	bne.n	8006d02 <HAL_TIM_PWM_Start+0xd6>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d00:	e013      	b.n	8006d2a <HAL_TIM_PWM_Start+0xfe>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b0c      	cmp	r3, #12
 8006d06:	d104      	bne.n	8006d12 <HAL_TIM_PWM_Start+0xe6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d10:	e00b      	b.n	8006d2a <HAL_TIM_PWM_Start+0xfe>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b10      	cmp	r3, #16
 8006d16:	d104      	bne.n	8006d22 <HAL_TIM_PWM_Start+0xf6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d20:	e003      	b.n	8006d2a <HAL_TIM_PWM_Start+0xfe>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 f8dc 	bl	8007ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a3a      	ldr	r2, [pc, #232]	@ (8006e28 <HAL_TIM_PWM_Start+0x1fc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d018      	beq.n	8006d74 <HAL_TIM_PWM_Start+0x148>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a39      	ldr	r2, [pc, #228]	@ (8006e2c <HAL_TIM_PWM_Start+0x200>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d013      	beq.n	8006d74 <HAL_TIM_PWM_Start+0x148>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a37      	ldr	r2, [pc, #220]	@ (8006e30 <HAL_TIM_PWM_Start+0x204>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00e      	beq.n	8006d74 <HAL_TIM_PWM_Start+0x148>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a36      	ldr	r2, [pc, #216]	@ (8006e34 <HAL_TIM_PWM_Start+0x208>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d009      	beq.n	8006d74 <HAL_TIM_PWM_Start+0x148>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a34      	ldr	r2, [pc, #208]	@ (8006e38 <HAL_TIM_PWM_Start+0x20c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_TIM_PWM_Start+0x148>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a33      	ldr	r2, [pc, #204]	@ (8006e3c <HAL_TIM_PWM_Start+0x210>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d101      	bne.n	8006d78 <HAL_TIM_PWM_Start+0x14c>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <HAL_TIM_PWM_Start+0x14e>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d007      	beq.n	8006d8e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a25      	ldr	r2, [pc, #148]	@ (8006e28 <HAL_TIM_PWM_Start+0x1fc>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d022      	beq.n	8006dde <HAL_TIM_PWM_Start+0x1b2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da0:	d01d      	beq.n	8006dde <HAL_TIM_PWM_Start+0x1b2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a26      	ldr	r2, [pc, #152]	@ (8006e40 <HAL_TIM_PWM_Start+0x214>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_TIM_PWM_Start+0x1b2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a24      	ldr	r2, [pc, #144]	@ (8006e44 <HAL_TIM_PWM_Start+0x218>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_TIM_PWM_Start+0x1b2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a23      	ldr	r2, [pc, #140]	@ (8006e48 <HAL_TIM_PWM_Start+0x21c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_TIM_PWM_Start+0x1b2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a19      	ldr	r2, [pc, #100]	@ (8006e2c <HAL_TIM_PWM_Start+0x200>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_TIM_PWM_Start+0x1b2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a18      	ldr	r2, [pc, #96]	@ (8006e30 <HAL_TIM_PWM_Start+0x204>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_TIM_PWM_Start+0x1b2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a18      	ldr	r2, [pc, #96]	@ (8006e3c <HAL_TIM_PWM_Start+0x210>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d115      	bne.n	8006e0a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	4b19      	ldr	r3, [pc, #100]	@ (8006e4c <HAL_TIM_PWM_Start+0x220>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b06      	cmp	r3, #6
 8006dee:	d015      	beq.n	8006e1c <HAL_TIM_PWM_Start+0x1f0>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006df6:	d011      	beq.n	8006e1c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0201 	orr.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e08:	e008      	b.n	8006e1c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0201 	orr.w	r2, r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e000      	b.n	8006e1e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	40014400 	.word	0x40014400
 8006e38:	40014800 	.word	0x40014800
 8006e3c:	40015000 	.word	0x40015000
 8006e40:	40000400 	.word	0x40000400
 8006e44:	40000800 	.word	0x40000800
 8006e48:	40000c00 	.word	0x40000c00
 8006e4c:	00010007 	.word	0x00010007

08006e50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 f844 	bl	8007ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a40      	ldr	r2, [pc, #256]	@ (8006f70 <HAL_TIM_PWM_Stop+0x120>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d018      	beq.n	8006ea4 <HAL_TIM_PWM_Stop+0x54>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a3f      	ldr	r2, [pc, #252]	@ (8006f74 <HAL_TIM_PWM_Stop+0x124>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d013      	beq.n	8006ea4 <HAL_TIM_PWM_Stop+0x54>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a3d      	ldr	r2, [pc, #244]	@ (8006f78 <HAL_TIM_PWM_Stop+0x128>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00e      	beq.n	8006ea4 <HAL_TIM_PWM_Stop+0x54>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a3c      	ldr	r2, [pc, #240]	@ (8006f7c <HAL_TIM_PWM_Stop+0x12c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d009      	beq.n	8006ea4 <HAL_TIM_PWM_Stop+0x54>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a3a      	ldr	r2, [pc, #232]	@ (8006f80 <HAL_TIM_PWM_Stop+0x130>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d004      	beq.n	8006ea4 <HAL_TIM_PWM_Stop+0x54>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a39      	ldr	r2, [pc, #228]	@ (8006f84 <HAL_TIM_PWM_Stop+0x134>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIM_PWM_Stop+0x58>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e000      	b.n	8006eaa <HAL_TIM_PWM_Stop+0x5a>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d017      	beq.n	8006ede <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6a1a      	ldr	r2, [r3, #32]
 8006eb4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10f      	bne.n	8006ede <HAL_TIM_PWM_Stop+0x8e>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6a1a      	ldr	r2, [r3, #32]
 8006ec4:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006ec8:	4013      	ands	r3, r2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d107      	bne.n	8006ede <HAL_TIM_PWM_Stop+0x8e>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006edc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6a1a      	ldr	r2, [r3, #32]
 8006ee4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006ee8:	4013      	ands	r3, r2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10f      	bne.n	8006f0e <HAL_TIM_PWM_Stop+0xbe>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6a1a      	ldr	r2, [r3, #32]
 8006ef4:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006ef8:	4013      	ands	r3, r2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d107      	bne.n	8006f0e <HAL_TIM_PWM_Stop+0xbe>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <HAL_TIM_PWM_Stop+0xce>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f1c:	e023      	b.n	8006f66 <HAL_TIM_PWM_Stop+0x116>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_PWM_Stop+0xde>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f2c:	e01b      	b.n	8006f66 <HAL_TIM_PWM_Stop+0x116>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d104      	bne.n	8006f3e <HAL_TIM_PWM_Stop+0xee>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f3c:	e013      	b.n	8006f66 <HAL_TIM_PWM_Stop+0x116>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b0c      	cmp	r3, #12
 8006f42:	d104      	bne.n	8006f4e <HAL_TIM_PWM_Stop+0xfe>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f4c:	e00b      	b.n	8006f66 <HAL_TIM_PWM_Stop+0x116>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b10      	cmp	r3, #16
 8006f52:	d104      	bne.n	8006f5e <HAL_TIM_PWM_Stop+0x10e>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f5c:	e003      	b.n	8006f66 <HAL_TIM_PWM_Stop+0x116>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	40012c00 	.word	0x40012c00
 8006f74:	40013400 	.word	0x40013400
 8006f78:	40014000 	.word	0x40014000
 8006f7c:	40014400 	.word	0x40014400
 8006f80:	40014800 	.word	0x40014800
 8006f84:	40015000 	.word	0x40015000

08006f88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e097      	b.n	80070cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d106      	bne.n	8006fb6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7fa ff6b 	bl	8001e8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006fcc:	f023 0307 	bic.w	r3, r3, #7
 8006fd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f000 fba9 	bl	8007734 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	4313      	orrs	r3, r2
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007028:	f023 030c 	bic.w	r3, r3, #12
 800702c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007034:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	4313      	orrs	r3, r2
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	011a      	lsls	r2, r3, #4
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	031b      	lsls	r3, r3, #12
 8007058:	4313      	orrs	r3, r2
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4313      	orrs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007066:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	4313      	orrs	r3, r2
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d110      	bne.n	8007126 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d102      	bne.n	8007110 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800710a:	7b7b      	ldrb	r3, [r7, #13]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d001      	beq.n	8007114 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e089      	b.n	8007228 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007124:	e031      	b.n	800718a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b04      	cmp	r3, #4
 800712a:	d110      	bne.n	800714e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d102      	bne.n	8007138 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007132:	7b3b      	ldrb	r3, [r7, #12]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d001      	beq.n	800713c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e075      	b.n	8007228 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800714c:	e01d      	b.n	800718a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d108      	bne.n	8007166 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d105      	bne.n	8007166 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800715a:	7b7b      	ldrb	r3, [r7, #13]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d102      	bne.n	8007166 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007160:	7b3b      	ldrb	r3, [r7, #12]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d001      	beq.n	800716a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e05e      	b.n	8007228 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2202      	movs	r2, #2
 800716e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2202      	movs	r2, #2
 8007176:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2202      	movs	r2, #2
 800717e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2202      	movs	r2, #2
 8007186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b04      	cmp	r3, #4
 8007194:	d010      	beq.n	80071b8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007196:	e01f      	b.n	80071d8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2201      	movs	r2, #1
 800719e:	2100      	movs	r1, #0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fea5 	bl	8007ef0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0202 	orr.w	r2, r2, #2
 80071b4:	60da      	str	r2, [r3, #12]
      break;
 80071b6:	e02e      	b.n	8007216 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2201      	movs	r2, #1
 80071be:	2104      	movs	r1, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fe95 	bl	8007ef0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0204 	orr.w	r2, r2, #4
 80071d4:	60da      	str	r2, [r3, #12]
      break;
 80071d6:	e01e      	b.n	8007216 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2201      	movs	r2, #1
 80071de:	2100      	movs	r1, #0
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fe85 	bl	8007ef0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2201      	movs	r2, #1
 80071ec:	2104      	movs	r1, #4
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fe7e 	bl	8007ef0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0202 	orr.w	r2, r2, #2
 8007202:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0204 	orr.w	r2, r2, #4
 8007212:	60da      	str	r2, [r3, #12]
      break;
 8007214:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0201 	orr.w	r2, r2, #1
 8007224:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d020      	beq.n	8007294 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01b      	beq.n	8007294 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f06f 0202 	mvn.w	r2, #2
 8007264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fb f848 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8007280:	e005      	b.n	800728e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fa38 	bl	80076f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fa3f 	bl	800770c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b00      	cmp	r3, #0
 800729c:	d020      	beq.n	80072e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01b      	beq.n	80072e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0204 	mvn.w	r2, #4
 80072b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2202      	movs	r2, #2
 80072b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fb f822 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 80072cc:	e005      	b.n	80072da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa12 	bl	80076f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fa19 	bl	800770c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d020      	beq.n	800732c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f003 0308 	and.w	r3, r3, #8
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01b      	beq.n	800732c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0208 	mvn.w	r2, #8
 80072fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2204      	movs	r2, #4
 8007302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fa fffc 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8007318:	e005      	b.n	8007326 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f9ec 	bl	80076f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f9f3 	bl	800770c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	2b00      	cmp	r3, #0
 8007334:	d020      	beq.n	8007378 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01b      	beq.n	8007378 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0210 	mvn.w	r2, #16
 8007348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2208      	movs	r2, #8
 800734e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fa ffd6 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8007364:	e005      	b.n	8007372 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9c6 	bl	80076f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f9cd 	bl	800770c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00c      	beq.n	800739c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d007      	beq.n	800739c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0201 	mvn.w	r2, #1
 8007394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7fa f9d2 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d104      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00c      	beq.n	80073ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80073c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 f820 	bl	800840a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00c      	beq.n	80073ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80073e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 f818 	bl	800841e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00c      	beq.n	8007412 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800740a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f987 	bl	8007720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f003 0320 	and.w	r3, r3, #32
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00c      	beq.n	8007436 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f06f 0220 	mvn.w	r2, #32
 800742e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 ffe0 	bl	80083f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00c      	beq.n	800745a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d007      	beq.n	800745a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 ffec 	bl	8008432 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00c      	beq.n	800747e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 ffe4 	bl	8008446 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00c      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d007      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800749a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 ffdc 	bl	800845a <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00c      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80074be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 ffd4 	bl	800846e <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074c6:	bf00      	nop
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e0ff      	b.n	80076ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b14      	cmp	r3, #20
 80074fa:	f200 80f0 	bhi.w	80076de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80074fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	08007559 	.word	0x08007559
 8007508:	080076df 	.word	0x080076df
 800750c:	080076df 	.word	0x080076df
 8007510:	080076df 	.word	0x080076df
 8007514:	08007599 	.word	0x08007599
 8007518:	080076df 	.word	0x080076df
 800751c:	080076df 	.word	0x080076df
 8007520:	080076df 	.word	0x080076df
 8007524:	080075db 	.word	0x080075db
 8007528:	080076df 	.word	0x080076df
 800752c:	080076df 	.word	0x080076df
 8007530:	080076df 	.word	0x080076df
 8007534:	0800761b 	.word	0x0800761b
 8007538:	080076df 	.word	0x080076df
 800753c:	080076df 	.word	0x080076df
 8007540:	080076df 	.word	0x080076df
 8007544:	0800765d 	.word	0x0800765d
 8007548:	080076df 	.word	0x080076df
 800754c:	080076df 	.word	0x080076df
 8007550:	080076df 	.word	0x080076df
 8007554:	0800769d 	.word	0x0800769d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 f99c 	bl	800789c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0208 	orr.w	r2, r2, #8
 8007572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0204 	bic.w	r2, r2, #4
 8007582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6999      	ldr	r1, [r3, #24]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	691a      	ldr	r2, [r3, #16]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	619a      	str	r2, [r3, #24]
      break;
 8007596:	e0a5      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fa16 	bl	80079d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6999      	ldr	r1, [r3, #24]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	021a      	lsls	r2, r3, #8
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	619a      	str	r2, [r3, #24]
      break;
 80075d8:	e084      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fa89 	bl	8007af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69da      	ldr	r2, [r3, #28]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f042 0208 	orr.w	r2, r2, #8
 80075f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69da      	ldr	r2, [r3, #28]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0204 	bic.w	r2, r2, #4
 8007604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69d9      	ldr	r1, [r3, #28]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	61da      	str	r2, [r3, #28]
      break;
 8007618:	e064      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 fafb 	bl	8007c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69da      	ldr	r2, [r3, #28]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69da      	ldr	r2, [r3, #28]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	69d9      	ldr	r1, [r3, #28]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	021a      	lsls	r2, r3, #8
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	61da      	str	r2, [r3, #28]
      break;
 800765a:	e043      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fb6e 	bl	8007d44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0208 	orr.w	r2, r2, #8
 8007676:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0204 	bic.w	r2, r2, #4
 8007686:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800769a:	e023      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fbb8 	bl	8007e18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	021a      	lsls	r2, r3, #8
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80076dc:	e002      	b.n	80076e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	75fb      	strb	r3, [r7, #23]
      break;
 80076e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop

080076f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a4c      	ldr	r2, [pc, #304]	@ (8007878 <TIM_Base_SetConfig+0x144>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d017      	beq.n	800777c <TIM_Base_SetConfig+0x48>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007752:	d013      	beq.n	800777c <TIM_Base_SetConfig+0x48>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a49      	ldr	r2, [pc, #292]	@ (800787c <TIM_Base_SetConfig+0x148>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d00f      	beq.n	800777c <TIM_Base_SetConfig+0x48>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a48      	ldr	r2, [pc, #288]	@ (8007880 <TIM_Base_SetConfig+0x14c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00b      	beq.n	800777c <TIM_Base_SetConfig+0x48>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a47      	ldr	r2, [pc, #284]	@ (8007884 <TIM_Base_SetConfig+0x150>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d007      	beq.n	800777c <TIM_Base_SetConfig+0x48>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a46      	ldr	r2, [pc, #280]	@ (8007888 <TIM_Base_SetConfig+0x154>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d003      	beq.n	800777c <TIM_Base_SetConfig+0x48>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a45      	ldr	r2, [pc, #276]	@ (800788c <TIM_Base_SetConfig+0x158>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d108      	bne.n	800778e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a39      	ldr	r2, [pc, #228]	@ (8007878 <TIM_Base_SetConfig+0x144>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d023      	beq.n	80077de <TIM_Base_SetConfig+0xaa>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779c:	d01f      	beq.n	80077de <TIM_Base_SetConfig+0xaa>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a36      	ldr	r2, [pc, #216]	@ (800787c <TIM_Base_SetConfig+0x148>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d01b      	beq.n	80077de <TIM_Base_SetConfig+0xaa>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a35      	ldr	r2, [pc, #212]	@ (8007880 <TIM_Base_SetConfig+0x14c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d017      	beq.n	80077de <TIM_Base_SetConfig+0xaa>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a34      	ldr	r2, [pc, #208]	@ (8007884 <TIM_Base_SetConfig+0x150>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d013      	beq.n	80077de <TIM_Base_SetConfig+0xaa>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a33      	ldr	r2, [pc, #204]	@ (8007888 <TIM_Base_SetConfig+0x154>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00f      	beq.n	80077de <TIM_Base_SetConfig+0xaa>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a33      	ldr	r2, [pc, #204]	@ (8007890 <TIM_Base_SetConfig+0x15c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00b      	beq.n	80077de <TIM_Base_SetConfig+0xaa>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a32      	ldr	r2, [pc, #200]	@ (8007894 <TIM_Base_SetConfig+0x160>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d007      	beq.n	80077de <TIM_Base_SetConfig+0xaa>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a31      	ldr	r2, [pc, #196]	@ (8007898 <TIM_Base_SetConfig+0x164>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d003      	beq.n	80077de <TIM_Base_SetConfig+0xaa>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a2c      	ldr	r2, [pc, #176]	@ (800788c <TIM_Base_SetConfig+0x158>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d108      	bne.n	80077f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a18      	ldr	r2, [pc, #96]	@ (8007878 <TIM_Base_SetConfig+0x144>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d013      	beq.n	8007844 <TIM_Base_SetConfig+0x110>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a1a      	ldr	r2, [pc, #104]	@ (8007888 <TIM_Base_SetConfig+0x154>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00f      	beq.n	8007844 <TIM_Base_SetConfig+0x110>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a1a      	ldr	r2, [pc, #104]	@ (8007890 <TIM_Base_SetConfig+0x15c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00b      	beq.n	8007844 <TIM_Base_SetConfig+0x110>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a19      	ldr	r2, [pc, #100]	@ (8007894 <TIM_Base_SetConfig+0x160>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d007      	beq.n	8007844 <TIM_Base_SetConfig+0x110>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a18      	ldr	r2, [pc, #96]	@ (8007898 <TIM_Base_SetConfig+0x164>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d003      	beq.n	8007844 <TIM_Base_SetConfig+0x110>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a13      	ldr	r2, [pc, #76]	@ (800788c <TIM_Base_SetConfig+0x158>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d103      	bne.n	800784c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b01      	cmp	r3, #1
 800785c:	d105      	bne.n	800786a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f023 0201 	bic.w	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	611a      	str	r2, [r3, #16]
  }
}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40000400 	.word	0x40000400
 8007880:	40000800 	.word	0x40000800
 8007884:	40000c00 	.word	0x40000c00
 8007888:	40013400 	.word	0x40013400
 800788c:	40015000 	.word	0x40015000
 8007890:	40014000 	.word	0x40014000
 8007894:	40014400 	.word	0x40014400
 8007898:	40014800 	.word	0x40014800

0800789c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	f023 0201 	bic.w	r2, r3, #1
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0303 	bic.w	r3, r3, #3
 80078d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f023 0302 	bic.w	r3, r3, #2
 80078e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a30      	ldr	r2, [pc, #192]	@ (80079b8 <TIM_OC1_SetConfig+0x11c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d013      	beq.n	8007924 <TIM_OC1_SetConfig+0x88>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a2f      	ldr	r2, [pc, #188]	@ (80079bc <TIM_OC1_SetConfig+0x120>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00f      	beq.n	8007924 <TIM_OC1_SetConfig+0x88>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a2e      	ldr	r2, [pc, #184]	@ (80079c0 <TIM_OC1_SetConfig+0x124>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d00b      	beq.n	8007924 <TIM_OC1_SetConfig+0x88>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a2d      	ldr	r2, [pc, #180]	@ (80079c4 <TIM_OC1_SetConfig+0x128>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d007      	beq.n	8007924 <TIM_OC1_SetConfig+0x88>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a2c      	ldr	r2, [pc, #176]	@ (80079c8 <TIM_OC1_SetConfig+0x12c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d003      	beq.n	8007924 <TIM_OC1_SetConfig+0x88>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a2b      	ldr	r2, [pc, #172]	@ (80079cc <TIM_OC1_SetConfig+0x130>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d10c      	bne.n	800793e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f023 0308 	bic.w	r3, r3, #8
 800792a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f023 0304 	bic.w	r3, r3, #4
 800793c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a1d      	ldr	r2, [pc, #116]	@ (80079b8 <TIM_OC1_SetConfig+0x11c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d013      	beq.n	800796e <TIM_OC1_SetConfig+0xd2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a1c      	ldr	r2, [pc, #112]	@ (80079bc <TIM_OC1_SetConfig+0x120>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00f      	beq.n	800796e <TIM_OC1_SetConfig+0xd2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a1b      	ldr	r2, [pc, #108]	@ (80079c0 <TIM_OC1_SetConfig+0x124>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00b      	beq.n	800796e <TIM_OC1_SetConfig+0xd2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a1a      	ldr	r2, [pc, #104]	@ (80079c4 <TIM_OC1_SetConfig+0x128>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d007      	beq.n	800796e <TIM_OC1_SetConfig+0xd2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a19      	ldr	r2, [pc, #100]	@ (80079c8 <TIM_OC1_SetConfig+0x12c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <TIM_OC1_SetConfig+0xd2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a18      	ldr	r2, [pc, #96]	@ (80079cc <TIM_OC1_SetConfig+0x130>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d111      	bne.n	8007992 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800797c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	621a      	str	r2, [r3, #32]
}
 80079ac:	bf00      	nop
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40012c00 	.word	0x40012c00
 80079bc:	40013400 	.word	0x40013400
 80079c0:	40014000 	.word	0x40014000
 80079c4:	40014400 	.word	0x40014400
 80079c8:	40014800 	.word	0x40014800
 80079cc:	40015000 	.word	0x40015000

080079d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f023 0210 	bic.w	r2, r3, #16
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f023 0320 	bic.w	r3, r3, #32
 8007a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8007ae0 <TIM_OC2_SetConfig+0x110>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d007      	beq.n	8007a44 <TIM_OC2_SetConfig+0x74>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a2b      	ldr	r2, [pc, #172]	@ (8007ae4 <TIM_OC2_SetConfig+0x114>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_OC2_SetConfig+0x74>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ae8 <TIM_OC2_SetConfig+0x118>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d10d      	bne.n	8007a60 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae0 <TIM_OC2_SetConfig+0x110>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d013      	beq.n	8007a90 <TIM_OC2_SetConfig+0xc0>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ae4 <TIM_OC2_SetConfig+0x114>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00f      	beq.n	8007a90 <TIM_OC2_SetConfig+0xc0>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a1e      	ldr	r2, [pc, #120]	@ (8007aec <TIM_OC2_SetConfig+0x11c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00b      	beq.n	8007a90 <TIM_OC2_SetConfig+0xc0>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8007af0 <TIM_OC2_SetConfig+0x120>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d007      	beq.n	8007a90 <TIM_OC2_SetConfig+0xc0>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a1c      	ldr	r2, [pc, #112]	@ (8007af4 <TIM_OC2_SetConfig+0x124>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_OC2_SetConfig+0xc0>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a17      	ldr	r2, [pc, #92]	@ (8007ae8 <TIM_OC2_SetConfig+0x118>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d113      	bne.n	8007ab8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40012c00 	.word	0x40012c00
 8007ae4:	40013400 	.word	0x40013400
 8007ae8:	40015000 	.word	0x40015000
 8007aec:	40014000 	.word	0x40014000
 8007af0:	40014400 	.word	0x40014400
 8007af4:	40014800 	.word	0x40014800

08007af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 0303 	bic.w	r3, r3, #3
 8007b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a2b      	ldr	r2, [pc, #172]	@ (8007c04 <TIM_OC3_SetConfig+0x10c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d007      	beq.n	8007b6a <TIM_OC3_SetConfig+0x72>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8007c08 <TIM_OC3_SetConfig+0x110>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d003      	beq.n	8007b6a <TIM_OC3_SetConfig+0x72>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a29      	ldr	r2, [pc, #164]	@ (8007c0c <TIM_OC3_SetConfig+0x114>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d10d      	bne.n	8007b86 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	021b      	lsls	r3, r3, #8
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a1e      	ldr	r2, [pc, #120]	@ (8007c04 <TIM_OC3_SetConfig+0x10c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d013      	beq.n	8007bb6 <TIM_OC3_SetConfig+0xbe>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1d      	ldr	r2, [pc, #116]	@ (8007c08 <TIM_OC3_SetConfig+0x110>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00f      	beq.n	8007bb6 <TIM_OC3_SetConfig+0xbe>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1d      	ldr	r2, [pc, #116]	@ (8007c10 <TIM_OC3_SetConfig+0x118>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00b      	beq.n	8007bb6 <TIM_OC3_SetConfig+0xbe>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8007c14 <TIM_OC3_SetConfig+0x11c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d007      	beq.n	8007bb6 <TIM_OC3_SetConfig+0xbe>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8007c18 <TIM_OC3_SetConfig+0x120>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d003      	beq.n	8007bb6 <TIM_OC3_SetConfig+0xbe>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a16      	ldr	r2, [pc, #88]	@ (8007c0c <TIM_OC3_SetConfig+0x114>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d113      	bne.n	8007bde <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	621a      	str	r2, [r3, #32]
}
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	40012c00 	.word	0x40012c00
 8007c08:	40013400 	.word	0x40013400
 8007c0c:	40015000 	.word	0x40015000
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800

08007c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	031b      	lsls	r3, r3, #12
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8007d2c <TIM_OC4_SetConfig+0x110>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d007      	beq.n	8007c90 <TIM_OC4_SetConfig+0x74>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a2b      	ldr	r2, [pc, #172]	@ (8007d30 <TIM_OC4_SetConfig+0x114>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d003      	beq.n	8007c90 <TIM_OC4_SetConfig+0x74>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8007d34 <TIM_OC4_SetConfig+0x118>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10d      	bne.n	8007cac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	031b      	lsls	r3, r3, #12
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007caa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a1f      	ldr	r2, [pc, #124]	@ (8007d2c <TIM_OC4_SetConfig+0x110>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d013      	beq.n	8007cdc <TIM_OC4_SetConfig+0xc0>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d30 <TIM_OC4_SetConfig+0x114>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d00f      	beq.n	8007cdc <TIM_OC4_SetConfig+0xc0>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8007d38 <TIM_OC4_SetConfig+0x11c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d00b      	beq.n	8007cdc <TIM_OC4_SetConfig+0xc0>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8007d3c <TIM_OC4_SetConfig+0x120>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d007      	beq.n	8007cdc <TIM_OC4_SetConfig+0xc0>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a1c      	ldr	r2, [pc, #112]	@ (8007d40 <TIM_OC4_SetConfig+0x124>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d003      	beq.n	8007cdc <TIM_OC4_SetConfig+0xc0>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a17      	ldr	r2, [pc, #92]	@ (8007d34 <TIM_OC4_SetConfig+0x118>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d113      	bne.n	8007d04 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ce2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007cea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	019b      	lsls	r3, r3, #6
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	019b      	lsls	r3, r3, #6
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40012c00 	.word	0x40012c00
 8007d30:	40013400 	.word	0x40013400
 8007d34:	40015000 	.word	0x40015000
 8007d38:	40014000 	.word	0x40014000
 8007d3c:	40014400 	.word	0x40014400
 8007d40:	40014800 	.word	0x40014800

08007d44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007d88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	041b      	lsls	r3, r3, #16
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a19      	ldr	r2, [pc, #100]	@ (8007e00 <TIM_OC5_SetConfig+0xbc>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d013      	beq.n	8007dc6 <TIM_OC5_SetConfig+0x82>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a18      	ldr	r2, [pc, #96]	@ (8007e04 <TIM_OC5_SetConfig+0xc0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00f      	beq.n	8007dc6 <TIM_OC5_SetConfig+0x82>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a17      	ldr	r2, [pc, #92]	@ (8007e08 <TIM_OC5_SetConfig+0xc4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00b      	beq.n	8007dc6 <TIM_OC5_SetConfig+0x82>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a16      	ldr	r2, [pc, #88]	@ (8007e0c <TIM_OC5_SetConfig+0xc8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d007      	beq.n	8007dc6 <TIM_OC5_SetConfig+0x82>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a15      	ldr	r2, [pc, #84]	@ (8007e10 <TIM_OC5_SetConfig+0xcc>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d003      	beq.n	8007dc6 <TIM_OC5_SetConfig+0x82>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a14      	ldr	r2, [pc, #80]	@ (8007e14 <TIM_OC5_SetConfig+0xd0>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d109      	bne.n	8007dda <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	621a      	str	r2, [r3, #32]
}
 8007df4:	bf00      	nop
 8007df6:	371c      	adds	r7, #28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	40012c00 	.word	0x40012c00
 8007e04:	40013400 	.word	0x40013400
 8007e08:	40014000 	.word	0x40014000
 8007e0c:	40014400 	.word	0x40014400
 8007e10:	40014800 	.word	0x40014800
 8007e14:	40015000 	.word	0x40015000

08007e18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	051b      	lsls	r3, r3, #20
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ed8 <TIM_OC6_SetConfig+0xc0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d013      	beq.n	8007e9c <TIM_OC6_SetConfig+0x84>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a19      	ldr	r2, [pc, #100]	@ (8007edc <TIM_OC6_SetConfig+0xc4>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00f      	beq.n	8007e9c <TIM_OC6_SetConfig+0x84>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ee0 <TIM_OC6_SetConfig+0xc8>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00b      	beq.n	8007e9c <TIM_OC6_SetConfig+0x84>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a17      	ldr	r2, [pc, #92]	@ (8007ee4 <TIM_OC6_SetConfig+0xcc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d007      	beq.n	8007e9c <TIM_OC6_SetConfig+0x84>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a16      	ldr	r2, [pc, #88]	@ (8007ee8 <TIM_OC6_SetConfig+0xd0>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d003      	beq.n	8007e9c <TIM_OC6_SetConfig+0x84>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a15      	ldr	r2, [pc, #84]	@ (8007eec <TIM_OC6_SetConfig+0xd4>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d109      	bne.n	8007eb0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	029b      	lsls	r3, r3, #10
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40012c00 	.word	0x40012c00
 8007edc:	40013400 	.word	0x40013400
 8007ee0:	40014000 	.word	0x40014000
 8007ee4:	40014400 	.word	0x40014400
 8007ee8:	40014800 	.word	0x40014800
 8007eec:	40015000 	.word	0x40015000

08007ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	f003 031f 	and.w	r3, r3, #31
 8007f02:	2201      	movs	r2, #1
 8007f04:	fa02 f303 	lsl.w	r3, r2, r3
 8007f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6a1a      	ldr	r2, [r3, #32]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	43db      	mvns	r3, r3
 8007f12:	401a      	ands	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a1a      	ldr	r2, [r3, #32]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f003 031f 	and.w	r3, r3, #31
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	fa01 f303 	lsl.w	r3, r1, r3
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	621a      	str	r2, [r3, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <HAL_TIMEx_PWMN_Start+0x24>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	bf14      	ite	ne
 8007f58:	2301      	movne	r3, #1
 8007f5a:	2300      	moveq	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	e022      	b.n	8007fa6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d109      	bne.n	8007f7a <HAL_TIMEx_PWMN_Start+0x3e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	bf14      	ite	ne
 8007f72:	2301      	movne	r3, #1
 8007f74:	2300      	moveq	r3, #0
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	e015      	b.n	8007fa6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d109      	bne.n	8007f94 <HAL_TIMEx_PWMN_Start+0x58>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	bf14      	ite	ne
 8007f8c:	2301      	movne	r3, #1
 8007f8e:	2300      	moveq	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	e008      	b.n	8007fa6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	bf14      	ite	ne
 8007fa0:	2301      	movne	r3, #1
 8007fa2:	2300      	moveq	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e073      	b.n	8008096 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d104      	bne.n	8007fbe <HAL_TIMEx_PWMN_Start+0x82>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fbc:	e013      	b.n	8007fe6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d104      	bne.n	8007fce <HAL_TIMEx_PWMN_Start+0x92>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fcc:	e00b      	b.n	8007fe6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d104      	bne.n	8007fde <HAL_TIMEx_PWMN_Start+0xa2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007fdc:	e003      	b.n	8007fe6 <HAL_TIMEx_PWMN_Start+0xaa>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2204      	movs	r2, #4
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fa47 	bl	8008482 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008002:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a25      	ldr	r2, [pc, #148]	@ (80080a0 <HAL_TIMEx_PWMN_Start+0x164>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d022      	beq.n	8008054 <HAL_TIMEx_PWMN_Start+0x118>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008016:	d01d      	beq.n	8008054 <HAL_TIMEx_PWMN_Start+0x118>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a21      	ldr	r2, [pc, #132]	@ (80080a4 <HAL_TIMEx_PWMN_Start+0x168>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d018      	beq.n	8008054 <HAL_TIMEx_PWMN_Start+0x118>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a20      	ldr	r2, [pc, #128]	@ (80080a8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d013      	beq.n	8008054 <HAL_TIMEx_PWMN_Start+0x118>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a1e      	ldr	r2, [pc, #120]	@ (80080ac <HAL_TIMEx_PWMN_Start+0x170>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00e      	beq.n	8008054 <HAL_TIMEx_PWMN_Start+0x118>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a1d      	ldr	r2, [pc, #116]	@ (80080b0 <HAL_TIMEx_PWMN_Start+0x174>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d009      	beq.n	8008054 <HAL_TIMEx_PWMN_Start+0x118>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1b      	ldr	r2, [pc, #108]	@ (80080b4 <HAL_TIMEx_PWMN_Start+0x178>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d004      	beq.n	8008054 <HAL_TIMEx_PWMN_Start+0x118>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1a      	ldr	r2, [pc, #104]	@ (80080b8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d115      	bne.n	8008080 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	4b18      	ldr	r3, [pc, #96]	@ (80080bc <HAL_TIMEx_PWMN_Start+0x180>)
 800805c:	4013      	ands	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b06      	cmp	r3, #6
 8008064:	d015      	beq.n	8008092 <HAL_TIMEx_PWMN_Start+0x156>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800806c:	d011      	beq.n	8008092 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0201 	orr.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800807e:	e008      	b.n	8008092 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0201 	orr.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e000      	b.n	8008094 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008092:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	40012c00 	.word	0x40012c00
 80080a4:	40000400 	.word	0x40000400
 80080a8:	40000800 	.word	0x40000800
 80080ac:	40000c00 	.word	0x40000c00
 80080b0:	40013400 	.word	0x40013400
 80080b4:	40014000 	.word	0x40014000
 80080b8:	40015000 	.word	0x40015000
 80080bc:	00010007 	.word	0x00010007

080080c0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2200      	movs	r2, #0
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 f9d5 	bl	8008482 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6a1a      	ldr	r2, [r3, #32]
 80080de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80080e2:	4013      	ands	r3, r2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10f      	bne.n	8008108 <HAL_TIMEx_PWMN_Stop+0x48>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	f244 4344 	movw	r3, #17476	@ 0x4444
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d107      	bne.n	8008108 <HAL_TIMEx_PWMN_Stop+0x48>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008106:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6a1a      	ldr	r2, [r3, #32]
 800810e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008112:	4013      	ands	r3, r2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10f      	bne.n	8008138 <HAL_TIMEx_PWMN_Stop+0x78>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6a1a      	ldr	r2, [r3, #32]
 800811e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008122:	4013      	ands	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d107      	bne.n	8008138 <HAL_TIMEx_PWMN_Stop+0x78>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <HAL_TIMEx_PWMN_Stop+0x88>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008146:	e013      	b.n	8008170 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b04      	cmp	r3, #4
 800814c:	d104      	bne.n	8008158 <HAL_TIMEx_PWMN_Stop+0x98>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008156:	e00b      	b.n	8008170 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b08      	cmp	r3, #8
 800815c:	d104      	bne.n	8008168 <HAL_TIMEx_PWMN_Stop+0xa8>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008166:	e003      	b.n	8008170 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008190:	2302      	movs	r3, #2
 8008192:	e074      	b.n	800827e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a34      	ldr	r2, [pc, #208]	@ (800828c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d009      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a33      	ldr	r2, [pc, #204]	@ (8008290 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d004      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a31      	ldr	r2, [pc, #196]	@ (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d108      	bne.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80081ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a21      	ldr	r2, [pc, #132]	@ (800828c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d022      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008214:	d01d      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a1f      	ldr	r2, [pc, #124]	@ (8008298 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d018      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1d      	ldr	r2, [pc, #116]	@ (800829c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d013      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a1c      	ldr	r2, [pc, #112]	@ (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00e      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a15      	ldr	r2, [pc, #84]	@ (8008290 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d009      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a18      	ldr	r2, [pc, #96]	@ (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d004      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a11      	ldr	r2, [pc, #68]	@ (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d10c      	bne.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	4313      	orrs	r3, r2
 8008262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40012c00 	.word	0x40012c00
 8008290:	40013400 	.word	0x40013400
 8008294:	40015000 	.word	0x40015000
 8008298:	40000400 	.word	0x40000400
 800829c:	40000800 	.word	0x40000800
 80082a0:	40000c00 	.word	0x40000c00
 80082a4:	40014000 	.word	0x40014000

080082a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e078      	b.n	80083b6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4313      	orrs	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	4313      	orrs	r3, r2
 800831e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	041b      	lsls	r3, r3, #16
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	4313      	orrs	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a1c      	ldr	r2, [pc, #112]	@ (80083c4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d009      	beq.n	800836a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a1b      	ldr	r2, [pc, #108]	@ (80083c8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d004      	beq.n	800836a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a19      	ldr	r2, [pc, #100]	@ (80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d11c      	bne.n	80083a4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008374:	051b      	lsls	r3, r3, #20
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40012c00 	.word	0x40012c00
 80083c8:	40013400 	.word	0x40013400
 80083cc:	40015000 	.word	0x40015000

080083d0 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80083e6:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008432:	b480      	push	{r7}
 8008434:	b083      	sub	sp, #12
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008482:	b480      	push	{r7}
 8008484:	b087      	sub	sp, #28
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	2204      	movs	r2, #4
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a1a      	ldr	r2, [r3, #32]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	43db      	mvns	r3, r3
 80084a4:	401a      	ands	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6a1a      	ldr	r2, [r3, #32]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f003 030f 	and.w	r3, r3, #15
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ba:	431a      	orrs	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	621a      	str	r2, [r3, #32]
}
 80084c0:	bf00      	nop
 80084c2:	371c      	adds	r7, #28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e042      	b.n	8008564 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d106      	bne.n	80084f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7f9 fe5b 	bl	80021ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2224      	movs	r2, #36	@ 0x24
 80084fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 0201 	bic.w	r2, r2, #1
 800850c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 ff60 	bl	80093dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fc61 	bl	8008de4 <UART_SetConfig>
 8008522:	4603      	mov	r3, r0
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e01b      	b.n	8008564 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800853a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800854a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0201 	orr.w	r2, r2, #1
 800855a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 ffdf 	bl	8009520 <UART_CheckIdleState>
 8008562:	4603      	mov	r3, r0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	@ 0x28
 8008570:	af02      	add	r7, sp, #8
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	4613      	mov	r3, r2
 800857a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008582:	2b20      	cmp	r3, #32
 8008584:	d17b      	bne.n	800867e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <HAL_UART_Transmit+0x26>
 800858c:	88fb      	ldrh	r3, [r7, #6]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e074      	b.n	8008680 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2221      	movs	r2, #33	@ 0x21
 80085a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085a6:	f7fa fc73 	bl	8002e90 <HAL_GetTick>
 80085aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	88fa      	ldrh	r2, [r7, #6]
 80085b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	88fa      	ldrh	r2, [r7, #6]
 80085b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085c4:	d108      	bne.n	80085d8 <HAL_UART_Transmit+0x6c>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d104      	bne.n	80085d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	61bb      	str	r3, [r7, #24]
 80085d6:	e003      	b.n	80085e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085dc:	2300      	movs	r3, #0
 80085de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085e0:	e030      	b.n	8008644 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2200      	movs	r2, #0
 80085ea:	2180      	movs	r1, #128	@ 0x80
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f001 f841 	bl	8009674 <UART_WaitOnFlagUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e03d      	b.n	8008680 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10b      	bne.n	8008622 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008618:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	3302      	adds	r3, #2
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	e007      	b.n	8008632 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	781a      	ldrb	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	3301      	adds	r3, #1
 8008630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008638:	b29b      	uxth	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	b29a      	uxth	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800864a:	b29b      	uxth	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1c8      	bne.n	80085e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2200      	movs	r2, #0
 8008658:	2140      	movs	r1, #64	@ 0x40
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f001 f80a 	bl	8009674 <UART_WaitOnFlagUntilTimeout>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2220      	movs	r2, #32
 800866a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e006      	b.n	8008680 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2220      	movs	r2, #32
 8008676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	e000      	b.n	8008680 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800867e:	2302      	movs	r3, #2
  }
}
 8008680:	4618      	mov	r0, r3
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08a      	sub	sp, #40	@ 0x28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800869c:	2b20      	cmp	r3, #32
 800869e:	d137      	bne.n	8008710 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <HAL_UART_Receive_IT+0x24>
 80086a6:	88fb      	ldrh	r3, [r7, #6]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e030      	b.n	8008712 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a18      	ldr	r2, [pc, #96]	@ (800871c <HAL_UART_Receive_IT+0x94>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d01f      	beq.n	8008700 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d018      	beq.n	8008700 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	613b      	str	r3, [r7, #16]
   return(result);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ec:	623b      	str	r3, [r7, #32]
 80086ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	69f9      	ldr	r1, [r7, #28]
 80086f2:	6a3a      	ldr	r2, [r7, #32]
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e6      	bne.n	80086ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008700:	88fb      	ldrh	r3, [r7, #6]
 8008702:	461a      	mov	r2, r3
 8008704:	68b9      	ldr	r1, [r7, #8]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f001 f822 	bl	8009750 <UART_Start_Receive_IT>
 800870c:	4603      	mov	r3, r0
 800870e:	e000      	b.n	8008712 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008710:	2302      	movs	r3, #2
  }
}
 8008712:	4618      	mov	r0, r3
 8008714:	3728      	adds	r7, #40	@ 0x28
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	40008000 	.word	0x40008000

08008720 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b0ba      	sub	sp, #232	@ 0xe8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008746:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800874a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800874e:	4013      	ands	r3, r2
 8008750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008758:	2b00      	cmp	r3, #0
 800875a:	d11b      	bne.n	8008794 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800875c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d015      	beq.n	8008794 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800876c:	f003 0320 	and.w	r3, r3, #32
 8008770:	2b00      	cmp	r3, #0
 8008772:	d105      	bne.n	8008780 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 8300 	beq.w	8008d8a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	4798      	blx	r3
      }
      return;
 8008792:	e2fa      	b.n	8008d8a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 8123 	beq.w	80089e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800879e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80087a2:	4b8d      	ldr	r3, [pc, #564]	@ (80089d8 <HAL_UART_IRQHandler+0x2b8>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d106      	bne.n	80087b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80087ae:	4b8b      	ldr	r3, [pc, #556]	@ (80089dc <HAL_UART_IRQHandler+0x2bc>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 8116 	beq.w	80089e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d011      	beq.n	80087e8 <HAL_UART_IRQHandler+0xc8>
 80087c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00b      	beq.n	80087e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2201      	movs	r2, #1
 80087d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087de:	f043 0201 	orr.w	r2, r3, #1
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ec:	f003 0302 	and.w	r3, r3, #2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d011      	beq.n	8008818 <HAL_UART_IRQHandler+0xf8>
 80087f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2202      	movs	r2, #2
 8008806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800880e:	f043 0204 	orr.w	r2, r3, #4
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800881c:	f003 0304 	and.w	r3, r3, #4
 8008820:	2b00      	cmp	r3, #0
 8008822:	d011      	beq.n	8008848 <HAL_UART_IRQHandler+0x128>
 8008824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2204      	movs	r2, #4
 8008836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800883e:	f043 0202 	orr.w	r2, r3, #2
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800884c:	f003 0308 	and.w	r3, r3, #8
 8008850:	2b00      	cmp	r3, #0
 8008852:	d017      	beq.n	8008884 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008858:	f003 0320 	and.w	r3, r3, #32
 800885c:	2b00      	cmp	r3, #0
 800885e:	d105      	bne.n	800886c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008860:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008864:	4b5c      	ldr	r3, [pc, #368]	@ (80089d8 <HAL_UART_IRQHandler+0x2b8>)
 8008866:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00b      	beq.n	8008884 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2208      	movs	r2, #8
 8008872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800887a:	f043 0208 	orr.w	r2, r3, #8
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800888c:	2b00      	cmp	r3, #0
 800888e:	d012      	beq.n	80088b6 <HAL_UART_IRQHandler+0x196>
 8008890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008894:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00c      	beq.n	80088b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ac:	f043 0220 	orr.w	r2, r3, #32
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 8266 	beq.w	8008d8e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d013      	beq.n	80088f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d105      	bne.n	80088e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d007      	beq.n	80088f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800890a:	2b40      	cmp	r3, #64	@ 0x40
 800890c:	d005      	beq.n	800891a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800890e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008912:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008916:	2b00      	cmp	r3, #0
 8008918:	d054      	beq.n	80089c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 f83a 	bl	8009994 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800892a:	2b40      	cmp	r3, #64	@ 0x40
 800892c:	d146      	bne.n	80089bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3308      	adds	r3, #8
 8008934:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800894c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3308      	adds	r3, #8
 8008956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800895a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800895e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1d9      	bne.n	800892e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008980:	2b00      	cmp	r3, #0
 8008982:	d017      	beq.n	80089b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800898a:	4a15      	ldr	r2, [pc, #84]	@ (80089e0 <HAL_UART_IRQHandler+0x2c0>)
 800898c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008994:	4618      	mov	r0, r3
 8008996:	f7fc fc31 	bl	80051fc <HAL_DMA_Abort_IT>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d019      	beq.n	80089d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80089ae:	4610      	mov	r0, r2
 80089b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b2:	e00f      	b.n	80089d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f9ff 	bl	8008db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ba:	e00b      	b.n	80089d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f9fb 	bl	8008db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c2:	e007      	b.n	80089d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f9f7 	bl	8008db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80089d2:	e1dc      	b.n	8008d8e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d4:	bf00      	nop
    return;
 80089d6:	e1da      	b.n	8008d8e <HAL_UART_IRQHandler+0x66e>
 80089d8:	10000001 	.word	0x10000001
 80089dc:	04000120 	.word	0x04000120
 80089e0:	08009a61 	.word	0x08009a61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	f040 8170 	bne.w	8008cce <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f2:	f003 0310 	and.w	r3, r3, #16
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 8169 	beq.w	8008cce <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a00:	f003 0310 	and.w	r3, r3, #16
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 8162 	beq.w	8008cce <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2210      	movs	r2, #16
 8008a10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a1c:	2b40      	cmp	r3, #64	@ 0x40
 8008a1e:	f040 80d8 	bne.w	8008bd2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80af 	beq.w	8008b98 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a44:	429a      	cmp	r2, r3
 8008a46:	f080 80a7 	bcs.w	8008b98 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f040 8087 	bne.w	8008b76 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1da      	bne.n	8008a68 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ac2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ac4:	f023 0301 	bic.w	r3, r3, #1
 8008ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ad6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ade:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e1      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e3      	bne.n	8008aee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b3c:	e853 3f00 	ldrex	r3, [r3]
 8008b40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b44:	f023 0310 	bic.w	r3, r3, #16
 8008b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e4      	bne.n	8008b34 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fc faea 	bl	800514a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2202      	movs	r2, #2
 8008b7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f91b 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008b96:	e0fc      	b.n	8008d92 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	f040 80f5 	bne.w	8008d92 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0320 	and.w	r3, r3, #32
 8008bb6:	2b20      	cmp	r3, #32
 8008bb8:	f040 80eb 	bne.w	8008d92 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f8fe 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
      return;
 8008bd0:	e0df      	b.n	8008d92 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 80d1 	beq.w	8008d96 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 80cc 	beq.w	8008d96 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e4      	bne.n	8008bfe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	623b      	str	r3, [r7, #32]
   return(result);
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c4a:	f023 0301 	bic.w	r3, r3, #1
 8008c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c64:	e841 2300 	strex	r3, r2, [r1]
 8008c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e1      	bne.n	8008c34 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f023 0310 	bic.w	r3, r3, #16
 8008c98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ca6:	61fb      	str	r3, [r7, #28]
 8008ca8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	69b9      	ldr	r1, [r7, #24]
 8008cac:	69fa      	ldr	r2, [r7, #28]
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	617b      	str	r3, [r7, #20]
   return(result);
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e4      	bne.n	8008c84 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f880 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ccc:	e063      	b.n	8008d96 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00e      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x5d8>
 8008cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d008      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008cee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 fc13 	bl	800a51c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cf6:	e051      	b.n	8008d9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d014      	beq.n	8008d2e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d105      	bne.n	8008d1c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d008      	beq.n	8008d2e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d03a      	beq.n	8008d9a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	4798      	blx	r3
    }
    return;
 8008d2c:	e035      	b.n	8008d9a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <HAL_UART_IRQHandler+0x62e>
 8008d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fe9c 	bl	8009a84 <UART_EndTransmit_IT>
    return;
 8008d4c:	e026      	b.n	8008d9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <HAL_UART_IRQHandler+0x64e>
 8008d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d5e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 fbec 	bl	800a544 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d6c:	e016      	b.n	8008d9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d010      	beq.n	8008d9c <HAL_UART_IRQHandler+0x67c>
 8008d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da0c      	bge.n	8008d9c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 fbd4 	bl	800a530 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d88:	e008      	b.n	8008d9c <HAL_UART_IRQHandler+0x67c>
      return;
 8008d8a:	bf00      	nop
 8008d8c:	e006      	b.n	8008d9c <HAL_UART_IRQHandler+0x67c>
    return;
 8008d8e:	bf00      	nop
 8008d90:	e004      	b.n	8008d9c <HAL_UART_IRQHandler+0x67c>
      return;
 8008d92:	bf00      	nop
 8008d94:	e002      	b.n	8008d9c <HAL_UART_IRQHandler+0x67c>
      return;
 8008d96:	bf00      	nop
 8008d98:	e000      	b.n	8008d9c <HAL_UART_IRQHandler+0x67c>
    return;
 8008d9a:	bf00      	nop
  }
}
 8008d9c:	37e8      	adds	r7, #232	@ 0xe8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop

08008da4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008de8:	b08c      	sub	sp, #48	@ 0x30
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4baa      	ldr	r3, [pc, #680]	@ (80090bc <UART_SetConfig+0x2d8>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	6812      	ldr	r2, [r2, #0]
 8008e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a9f      	ldr	r2, [pc, #636]	@ (80090c0 <UART_SetConfig+0x2dc>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d004      	beq.n	8008e50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008e5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e64:	430b      	orrs	r3, r1
 8008e66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6e:	f023 010f 	bic.w	r1, r3, #15
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a90      	ldr	r2, [pc, #576]	@ (80090c4 <UART_SetConfig+0x2e0>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d125      	bne.n	8008ed4 <UART_SetConfig+0xf0>
 8008e88:	4b8f      	ldr	r3, [pc, #572]	@ (80090c8 <UART_SetConfig+0x2e4>)
 8008e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	2b03      	cmp	r3, #3
 8008e94:	d81a      	bhi.n	8008ecc <UART_SetConfig+0xe8>
 8008e96:	a201      	add	r2, pc, #4	@ (adr r2, 8008e9c <UART_SetConfig+0xb8>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008ead 	.word	0x08008ead
 8008ea0:	08008ebd 	.word	0x08008ebd
 8008ea4:	08008eb5 	.word	0x08008eb5
 8008ea8:	08008ec5 	.word	0x08008ec5
 8008eac:	2301      	movs	r3, #1
 8008eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eb2:	e116      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eba:	e112      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008ebc:	2304      	movs	r3, #4
 8008ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ec2:	e10e      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008ec4:	2308      	movs	r3, #8
 8008ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eca:	e10a      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008ecc:	2310      	movs	r3, #16
 8008ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ed2:	e106      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a7c      	ldr	r2, [pc, #496]	@ (80090cc <UART_SetConfig+0x2e8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d138      	bne.n	8008f50 <UART_SetConfig+0x16c>
 8008ede:	4b7a      	ldr	r3, [pc, #488]	@ (80090c8 <UART_SetConfig+0x2e4>)
 8008ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ee4:	f003 030c 	and.w	r3, r3, #12
 8008ee8:	2b0c      	cmp	r3, #12
 8008eea:	d82d      	bhi.n	8008f48 <UART_SetConfig+0x164>
 8008eec:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef4 <UART_SetConfig+0x110>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f29 	.word	0x08008f29
 8008ef8:	08008f49 	.word	0x08008f49
 8008efc:	08008f49 	.word	0x08008f49
 8008f00:	08008f49 	.word	0x08008f49
 8008f04:	08008f39 	.word	0x08008f39
 8008f08:	08008f49 	.word	0x08008f49
 8008f0c:	08008f49 	.word	0x08008f49
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f31 	.word	0x08008f31
 8008f18:	08008f49 	.word	0x08008f49
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	08008f49 	.word	0x08008f49
 8008f24:	08008f41 	.word	0x08008f41
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f2e:	e0d8      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008f30:	2302      	movs	r3, #2
 8008f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f36:	e0d4      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008f38:	2304      	movs	r3, #4
 8008f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f3e:	e0d0      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008f40:	2308      	movs	r3, #8
 8008f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f46:	e0cc      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008f48:	2310      	movs	r3, #16
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4e:	e0c8      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a5e      	ldr	r2, [pc, #376]	@ (80090d0 <UART_SetConfig+0x2ec>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d125      	bne.n	8008fa6 <UART_SetConfig+0x1c2>
 8008f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80090c8 <UART_SetConfig+0x2e4>)
 8008f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008f64:	2b30      	cmp	r3, #48	@ 0x30
 8008f66:	d016      	beq.n	8008f96 <UART_SetConfig+0x1b2>
 8008f68:	2b30      	cmp	r3, #48	@ 0x30
 8008f6a:	d818      	bhi.n	8008f9e <UART_SetConfig+0x1ba>
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	d00a      	beq.n	8008f86 <UART_SetConfig+0x1a2>
 8008f70:	2b20      	cmp	r3, #32
 8008f72:	d814      	bhi.n	8008f9e <UART_SetConfig+0x1ba>
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <UART_SetConfig+0x19a>
 8008f78:	2b10      	cmp	r3, #16
 8008f7a:	d008      	beq.n	8008f8e <UART_SetConfig+0x1aa>
 8008f7c:	e00f      	b.n	8008f9e <UART_SetConfig+0x1ba>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f84:	e0ad      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008f86:	2302      	movs	r3, #2
 8008f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f8c:	e0a9      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008f8e:	2304      	movs	r3, #4
 8008f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f94:	e0a5      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008f96:	2308      	movs	r3, #8
 8008f98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f9c:	e0a1      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008f9e:	2310      	movs	r3, #16
 8008fa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fa4:	e09d      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a4a      	ldr	r2, [pc, #296]	@ (80090d4 <UART_SetConfig+0x2f0>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d125      	bne.n	8008ffc <UART_SetConfig+0x218>
 8008fb0:	4b45      	ldr	r3, [pc, #276]	@ (80090c8 <UART_SetConfig+0x2e4>)
 8008fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008fba:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fbc:	d016      	beq.n	8008fec <UART_SetConfig+0x208>
 8008fbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fc0:	d818      	bhi.n	8008ff4 <UART_SetConfig+0x210>
 8008fc2:	2b80      	cmp	r3, #128	@ 0x80
 8008fc4:	d00a      	beq.n	8008fdc <UART_SetConfig+0x1f8>
 8008fc6:	2b80      	cmp	r3, #128	@ 0x80
 8008fc8:	d814      	bhi.n	8008ff4 <UART_SetConfig+0x210>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <UART_SetConfig+0x1f0>
 8008fce:	2b40      	cmp	r3, #64	@ 0x40
 8008fd0:	d008      	beq.n	8008fe4 <UART_SetConfig+0x200>
 8008fd2:	e00f      	b.n	8008ff4 <UART_SetConfig+0x210>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fda:	e082      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fe2:	e07e      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008fe4:	2304      	movs	r3, #4
 8008fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fea:	e07a      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008fec:	2308      	movs	r3, #8
 8008fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ff2:	e076      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008ff4:	2310      	movs	r3, #16
 8008ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ffa:	e072      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a35      	ldr	r2, [pc, #212]	@ (80090d8 <UART_SetConfig+0x2f4>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d12a      	bne.n	800905c <UART_SetConfig+0x278>
 8009006:	4b30      	ldr	r3, [pc, #192]	@ (80090c8 <UART_SetConfig+0x2e4>)
 8009008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800900c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009010:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009014:	d01a      	beq.n	800904c <UART_SetConfig+0x268>
 8009016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800901a:	d81b      	bhi.n	8009054 <UART_SetConfig+0x270>
 800901c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009020:	d00c      	beq.n	800903c <UART_SetConfig+0x258>
 8009022:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009026:	d815      	bhi.n	8009054 <UART_SetConfig+0x270>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <UART_SetConfig+0x250>
 800902c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009030:	d008      	beq.n	8009044 <UART_SetConfig+0x260>
 8009032:	e00f      	b.n	8009054 <UART_SetConfig+0x270>
 8009034:	2300      	movs	r3, #0
 8009036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800903a:	e052      	b.n	80090e2 <UART_SetConfig+0x2fe>
 800903c:	2302      	movs	r3, #2
 800903e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009042:	e04e      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8009044:	2304      	movs	r3, #4
 8009046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800904a:	e04a      	b.n	80090e2 <UART_SetConfig+0x2fe>
 800904c:	2308      	movs	r3, #8
 800904e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009052:	e046      	b.n	80090e2 <UART_SetConfig+0x2fe>
 8009054:	2310      	movs	r3, #16
 8009056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800905a:	e042      	b.n	80090e2 <UART_SetConfig+0x2fe>
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a17      	ldr	r2, [pc, #92]	@ (80090c0 <UART_SetConfig+0x2dc>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d13a      	bne.n	80090dc <UART_SetConfig+0x2f8>
 8009066:	4b18      	ldr	r3, [pc, #96]	@ (80090c8 <UART_SetConfig+0x2e4>)
 8009068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800906c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009070:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009074:	d01a      	beq.n	80090ac <UART_SetConfig+0x2c8>
 8009076:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800907a:	d81b      	bhi.n	80090b4 <UART_SetConfig+0x2d0>
 800907c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009080:	d00c      	beq.n	800909c <UART_SetConfig+0x2b8>
 8009082:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009086:	d815      	bhi.n	80090b4 <UART_SetConfig+0x2d0>
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <UART_SetConfig+0x2b0>
 800908c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009090:	d008      	beq.n	80090a4 <UART_SetConfig+0x2c0>
 8009092:	e00f      	b.n	80090b4 <UART_SetConfig+0x2d0>
 8009094:	2300      	movs	r3, #0
 8009096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800909a:	e022      	b.n	80090e2 <UART_SetConfig+0x2fe>
 800909c:	2302      	movs	r3, #2
 800909e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090a2:	e01e      	b.n	80090e2 <UART_SetConfig+0x2fe>
 80090a4:	2304      	movs	r3, #4
 80090a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090aa:	e01a      	b.n	80090e2 <UART_SetConfig+0x2fe>
 80090ac:	2308      	movs	r3, #8
 80090ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090b2:	e016      	b.n	80090e2 <UART_SetConfig+0x2fe>
 80090b4:	2310      	movs	r3, #16
 80090b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ba:	e012      	b.n	80090e2 <UART_SetConfig+0x2fe>
 80090bc:	cfff69f3 	.word	0xcfff69f3
 80090c0:	40008000 	.word	0x40008000
 80090c4:	40013800 	.word	0x40013800
 80090c8:	40021000 	.word	0x40021000
 80090cc:	40004400 	.word	0x40004400
 80090d0:	40004800 	.word	0x40004800
 80090d4:	40004c00 	.word	0x40004c00
 80090d8:	40005000 	.word	0x40005000
 80090dc:	2310      	movs	r3, #16
 80090de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4aae      	ldr	r2, [pc, #696]	@ (80093a0 <UART_SetConfig+0x5bc>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	f040 8097 	bne.w	800921c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090f2:	2b08      	cmp	r3, #8
 80090f4:	d823      	bhi.n	800913e <UART_SetConfig+0x35a>
 80090f6:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <UART_SetConfig+0x318>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	08009121 	.word	0x08009121
 8009100:	0800913f 	.word	0x0800913f
 8009104:	08009129 	.word	0x08009129
 8009108:	0800913f 	.word	0x0800913f
 800910c:	0800912f 	.word	0x0800912f
 8009110:	0800913f 	.word	0x0800913f
 8009114:	0800913f 	.word	0x0800913f
 8009118:	0800913f 	.word	0x0800913f
 800911c:	08009137 	.word	0x08009137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009120:	f7fd f96a 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 8009124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009126:	e010      	b.n	800914a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009128:	4b9e      	ldr	r3, [pc, #632]	@ (80093a4 <UART_SetConfig+0x5c0>)
 800912a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800912c:	e00d      	b.n	800914a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800912e:	f7fd f8f5 	bl	800631c <HAL_RCC_GetSysClockFreq>
 8009132:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009134:	e009      	b.n	800914a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800913a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800913c:	e005      	b.n	800914a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009148:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800914a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 8130 	beq.w	80093b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009156:	4a94      	ldr	r2, [pc, #592]	@ (80093a8 <UART_SetConfig+0x5c4>)
 8009158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800915c:	461a      	mov	r2, r3
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	fbb3 f3f2 	udiv	r3, r3, r2
 8009164:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	4613      	mov	r3, r2
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	4413      	add	r3, r2
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	429a      	cmp	r2, r3
 8009174:	d305      	bcc.n	8009182 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	429a      	cmp	r2, r3
 8009180:	d903      	bls.n	800918a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009188:	e113      	b.n	80093b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918c:	2200      	movs	r2, #0
 800918e:	60bb      	str	r3, [r7, #8]
 8009190:	60fa      	str	r2, [r7, #12]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009196:	4a84      	ldr	r2, [pc, #528]	@ (80093a8 <UART_SetConfig+0x5c4>)
 8009198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800919c:	b29b      	uxth	r3, r3
 800919e:	2200      	movs	r2, #0
 80091a0:	603b      	str	r3, [r7, #0]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80091ac:	f7f7 fd84 	bl	8000cb8 <__aeabi_uldivmod>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	4610      	mov	r0, r2
 80091b6:	4619      	mov	r1, r3
 80091b8:	f04f 0200 	mov.w	r2, #0
 80091bc:	f04f 0300 	mov.w	r3, #0
 80091c0:	020b      	lsls	r3, r1, #8
 80091c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091c6:	0202      	lsls	r2, r0, #8
 80091c8:	6979      	ldr	r1, [r7, #20]
 80091ca:	6849      	ldr	r1, [r1, #4]
 80091cc:	0849      	lsrs	r1, r1, #1
 80091ce:	2000      	movs	r0, #0
 80091d0:	460c      	mov	r4, r1
 80091d2:	4605      	mov	r5, r0
 80091d4:	eb12 0804 	adds.w	r8, r2, r4
 80091d8:	eb43 0905 	adc.w	r9, r3, r5
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	469a      	mov	sl, r3
 80091e4:	4693      	mov	fp, r2
 80091e6:	4652      	mov	r2, sl
 80091e8:	465b      	mov	r3, fp
 80091ea:	4640      	mov	r0, r8
 80091ec:	4649      	mov	r1, r9
 80091ee:	f7f7 fd63 	bl	8000cb8 <__aeabi_uldivmod>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4613      	mov	r3, r2
 80091f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009200:	d308      	bcc.n	8009214 <UART_SetConfig+0x430>
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009208:	d204      	bcs.n	8009214 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6a3a      	ldr	r2, [r7, #32]
 8009210:	60da      	str	r2, [r3, #12]
 8009212:	e0ce      	b.n	80093b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800921a:	e0ca      	b.n	80093b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009224:	d166      	bne.n	80092f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009226:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800922a:	2b08      	cmp	r3, #8
 800922c:	d827      	bhi.n	800927e <UART_SetConfig+0x49a>
 800922e:	a201      	add	r2, pc, #4	@ (adr r2, 8009234 <UART_SetConfig+0x450>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	08009259 	.word	0x08009259
 8009238:	08009261 	.word	0x08009261
 800923c:	08009269 	.word	0x08009269
 8009240:	0800927f 	.word	0x0800927f
 8009244:	0800926f 	.word	0x0800926f
 8009248:	0800927f 	.word	0x0800927f
 800924c:	0800927f 	.word	0x0800927f
 8009250:	0800927f 	.word	0x0800927f
 8009254:	08009277 	.word	0x08009277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009258:	f7fd f8ce 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 800925c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800925e:	e014      	b.n	800928a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009260:	f7fd f8e0 	bl	8006424 <HAL_RCC_GetPCLK2Freq>
 8009264:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009266:	e010      	b.n	800928a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009268:	4b4e      	ldr	r3, [pc, #312]	@ (80093a4 <UART_SetConfig+0x5c0>)
 800926a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800926c:	e00d      	b.n	800928a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800926e:	f7fd f855 	bl	800631c <HAL_RCC_GetSysClockFreq>
 8009272:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009274:	e009      	b.n	800928a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800927a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800927c:	e005      	b.n	800928a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 8090 	beq.w	80093b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009296:	4a44      	ldr	r2, [pc, #272]	@ (80093a8 <UART_SetConfig+0x5c4>)
 8009298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800929c:	461a      	mov	r2, r3
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80092a4:	005a      	lsls	r2, r3, #1
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	085b      	lsrs	r3, r3, #1
 80092ac:	441a      	add	r2, r3
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	2b0f      	cmp	r3, #15
 80092bc:	d916      	bls.n	80092ec <UART_SetConfig+0x508>
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092c4:	d212      	bcs.n	80092ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	f023 030f 	bic.w	r3, r3, #15
 80092ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	085b      	lsrs	r3, r3, #1
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	b29a      	uxth	r2, r3
 80092dc:	8bfb      	ldrh	r3, [r7, #30]
 80092de:	4313      	orrs	r3, r2
 80092e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	8bfa      	ldrh	r2, [r7, #30]
 80092e8:	60da      	str	r2, [r3, #12]
 80092ea:	e062      	b.n	80093b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80092f2:	e05e      	b.n	80093b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d828      	bhi.n	800934e <UART_SetConfig+0x56a>
 80092fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009304 <UART_SetConfig+0x520>)
 80092fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009302:	bf00      	nop
 8009304:	08009329 	.word	0x08009329
 8009308:	08009331 	.word	0x08009331
 800930c:	08009339 	.word	0x08009339
 8009310:	0800934f 	.word	0x0800934f
 8009314:	0800933f 	.word	0x0800933f
 8009318:	0800934f 	.word	0x0800934f
 800931c:	0800934f 	.word	0x0800934f
 8009320:	0800934f 	.word	0x0800934f
 8009324:	08009347 	.word	0x08009347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009328:	f7fd f866 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 800932c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800932e:	e014      	b.n	800935a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009330:	f7fd f878 	bl	8006424 <HAL_RCC_GetPCLK2Freq>
 8009334:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009336:	e010      	b.n	800935a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009338:	4b1a      	ldr	r3, [pc, #104]	@ (80093a4 <UART_SetConfig+0x5c0>)
 800933a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800933c:	e00d      	b.n	800935a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800933e:	f7fc ffed 	bl	800631c <HAL_RCC_GetSysClockFreq>
 8009342:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009344:	e009      	b.n	800935a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800934a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800934c:	e005      	b.n	800935a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009358:	bf00      	nop
    }

    if (pclk != 0U)
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	2b00      	cmp	r3, #0
 800935e:	d028      	beq.n	80093b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009364:	4a10      	ldr	r2, [pc, #64]	@ (80093a8 <UART_SetConfig+0x5c4>)
 8009366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800936a:	461a      	mov	r2, r3
 800936c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	085b      	lsrs	r3, r3, #1
 8009378:	441a      	add	r2, r3
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009382:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	2b0f      	cmp	r3, #15
 8009388:	d910      	bls.n	80093ac <UART_SetConfig+0x5c8>
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009390:	d20c      	bcs.n	80093ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	b29a      	uxth	r2, r3
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60da      	str	r2, [r3, #12]
 800939c:	e009      	b.n	80093b2 <UART_SetConfig+0x5ce>
 800939e:	bf00      	nop
 80093a0:	40008000 	.word	0x40008000
 80093a4:	00f42400 	.word	0x00f42400
 80093a8:	0800d928 	.word	0x0800d928
      }
      else
      {
        ret = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2201      	movs	r2, #1
 80093be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2200      	movs	r2, #0
 80093c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	2200      	movs	r2, #0
 80093cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80093ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3730      	adds	r7, #48	@ 0x30
 80093d6:	46bd      	mov	sp, r7
 80093d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080093dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e8:	f003 0308 	and.w	r3, r3, #8
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00a      	beq.n	8009406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00a      	beq.n	8009428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00a      	beq.n	800944a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	430a      	orrs	r2, r1
 8009448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800944e:	f003 0304 	and.w	r3, r3, #4
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00a      	beq.n	800946c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009470:	f003 0310 	and.w	r3, r3, #16
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00a      	beq.n	800948e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	430a      	orrs	r2, r1
 800948c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009492:	f003 0320 	and.w	r3, r3, #32
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00a      	beq.n	80094b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	430a      	orrs	r2, r1
 80094ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01a      	beq.n	80094f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094da:	d10a      	bne.n	80094f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00a      	beq.n	8009514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	605a      	str	r2, [r3, #4]
  }
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b098      	sub	sp, #96	@ 0x60
 8009524:	af02      	add	r7, sp, #8
 8009526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009530:	f7f9 fcae 	bl	8002e90 <HAL_GetTick>
 8009534:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0308 	and.w	r3, r3, #8
 8009540:	2b08      	cmp	r3, #8
 8009542:	d12f      	bne.n	80095a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009544:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800954c:	2200      	movs	r2, #0
 800954e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f88e 	bl	8009674 <UART_WaitOnFlagUntilTimeout>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d022      	beq.n	80095a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009566:	e853 3f00 	ldrex	r3, [r3]
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800956c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009572:	653b      	str	r3, [r7, #80]	@ 0x50
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	461a      	mov	r2, r3
 800957a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800957c:	647b      	str	r3, [r7, #68]	@ 0x44
 800957e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009580:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009584:	e841 2300 	strex	r3, r2, [r1]
 8009588:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800958a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1e6      	bne.n	800955e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2220      	movs	r2, #32
 8009594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e063      	b.n	800966c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d149      	bne.n	8009646 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095ba:	2200      	movs	r2, #0
 80095bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f857 	bl	8009674 <UART_WaitOnFlagUntilTimeout>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d03c      	beq.n	8009646 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d4:	e853 3f00 	ldrex	r3, [r3]
 80095d8:	623b      	str	r3, [r7, #32]
   return(result);
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80095ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095f2:	e841 2300 	strex	r3, r2, [r1]
 80095f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1e6      	bne.n	80095cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3308      	adds	r3, #8
 8009604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	60fb      	str	r3, [r7, #12]
   return(result);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f023 0301 	bic.w	r3, r3, #1
 8009614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3308      	adds	r3, #8
 800961c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800961e:	61fa      	str	r2, [r7, #28]
 8009620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	69b9      	ldr	r1, [r7, #24]
 8009624:	69fa      	ldr	r2, [r7, #28]
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	617b      	str	r3, [r7, #20]
   return(result);
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e5      	bne.n	80095fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2220      	movs	r2, #32
 8009636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e012      	b.n	800966c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2220      	movs	r2, #32
 800964a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2220      	movs	r2, #32
 8009652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3758      	adds	r7, #88	@ 0x58
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	4613      	mov	r3, r2
 8009682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009684:	e04f      	b.n	8009726 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968c:	d04b      	beq.n	8009726 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800968e:	f7f9 fbff 	bl	8002e90 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	429a      	cmp	r2, r3
 800969c:	d302      	bcc.n	80096a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e04e      	b.n	8009746 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0304 	and.w	r3, r3, #4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d037      	beq.n	8009726 <UART_WaitOnFlagUntilTimeout+0xb2>
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b80      	cmp	r3, #128	@ 0x80
 80096ba:	d034      	beq.n	8009726 <UART_WaitOnFlagUntilTimeout+0xb2>
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2b40      	cmp	r3, #64	@ 0x40
 80096c0:	d031      	beq.n	8009726 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	69db      	ldr	r3, [r3, #28]
 80096c8:	f003 0308 	and.w	r3, r3, #8
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d110      	bne.n	80096f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2208      	movs	r2, #8
 80096d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 f95b 	bl	8009994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2208      	movs	r2, #8
 80096e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e029      	b.n	8009746 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009700:	d111      	bne.n	8009726 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800970a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 f941 	bl	8009994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e00f      	b.n	8009746 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69da      	ldr	r2, [r3, #28]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	4013      	ands	r3, r2
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	429a      	cmp	r2, r3
 8009734:	bf0c      	ite	eq
 8009736:	2301      	moveq	r3, #1
 8009738:	2300      	movne	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	429a      	cmp	r2, r3
 8009742:	d0a0      	beq.n	8009686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009750:	b480      	push	{r7}
 8009752:	b0a3      	sub	sp, #140	@ 0x8c
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	4613      	mov	r3, r2
 800975c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	88fa      	ldrh	r2, [r7, #6]
 8009768:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	88fa      	ldrh	r2, [r7, #6]
 8009770:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009782:	d10e      	bne.n	80097a2 <UART_Start_Receive_IT+0x52>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d105      	bne.n	8009798 <UART_Start_Receive_IT+0x48>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009792:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009796:	e02d      	b.n	80097f4 <UART_Start_Receive_IT+0xa4>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	22ff      	movs	r2, #255	@ 0xff
 800979c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097a0:	e028      	b.n	80097f4 <UART_Start_Receive_IT+0xa4>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10d      	bne.n	80097c6 <UART_Start_Receive_IT+0x76>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d104      	bne.n	80097bc <UART_Start_Receive_IT+0x6c>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	22ff      	movs	r2, #255	@ 0xff
 80097b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097ba:	e01b      	b.n	80097f4 <UART_Start_Receive_IT+0xa4>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	227f      	movs	r2, #127	@ 0x7f
 80097c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097c4:	e016      	b.n	80097f4 <UART_Start_Receive_IT+0xa4>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ce:	d10d      	bne.n	80097ec <UART_Start_Receive_IT+0x9c>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d104      	bne.n	80097e2 <UART_Start_Receive_IT+0x92>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	227f      	movs	r2, #127	@ 0x7f
 80097dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097e0:	e008      	b.n	80097f4 <UART_Start_Receive_IT+0xa4>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	223f      	movs	r2, #63	@ 0x3f
 80097e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80097ea:	e003      	b.n	80097f4 <UART_Start_Receive_IT+0xa4>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2222      	movs	r2, #34	@ 0x22
 8009800:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3308      	adds	r3, #8
 800980a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800980e:	e853 3f00 	ldrex	r3, [r3]
 8009812:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009816:	f043 0301 	orr.w	r3, r3, #1
 800981a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3308      	adds	r3, #8
 8009824:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009828:	673a      	str	r2, [r7, #112]	@ 0x70
 800982a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800982e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009830:	e841 2300 	strex	r3, r2, [r1]
 8009834:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1e3      	bne.n	8009804 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009844:	d14f      	bne.n	80098e6 <UART_Start_Receive_IT+0x196>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800984c:	88fa      	ldrh	r2, [r7, #6]
 800984e:	429a      	cmp	r2, r3
 8009850:	d349      	bcc.n	80098e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800985a:	d107      	bne.n	800986c <UART_Start_Receive_IT+0x11c>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d103      	bne.n	800986c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4a47      	ldr	r2, [pc, #284]	@ (8009984 <UART_Start_Receive_IT+0x234>)
 8009868:	675a      	str	r2, [r3, #116]	@ 0x74
 800986a:	e002      	b.n	8009872 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4a46      	ldr	r2, [pc, #280]	@ (8009988 <UART_Start_Receive_IT+0x238>)
 8009870:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d01a      	beq.n	80098b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800988a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800988e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	461a      	mov	r2, r3
 8009898:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800989c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800989e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80098a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80098a4:	e841 2300 	strex	r3, r2, [r1]
 80098a8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80098aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e4      	bne.n	800987a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	3308      	adds	r3, #8
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ba:	e853 3f00 	ldrex	r3, [r3]
 80098be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3308      	adds	r3, #8
 80098ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80098d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80098d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80098d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098d8:	e841 2300 	strex	r3, r2, [r1]
 80098dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80098de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1e5      	bne.n	80098b0 <UART_Start_Receive_IT+0x160>
 80098e4:	e046      	b.n	8009974 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ee:	d107      	bne.n	8009900 <UART_Start_Receive_IT+0x1b0>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d103      	bne.n	8009900 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4a24      	ldr	r2, [pc, #144]	@ (800998c <UART_Start_Receive_IT+0x23c>)
 80098fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80098fe:	e002      	b.n	8009906 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4a23      	ldr	r2, [pc, #140]	@ (8009990 <UART_Start_Receive_IT+0x240>)
 8009904:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d019      	beq.n	8009942 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009916:	e853 3f00 	ldrex	r3, [r3]
 800991a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800991c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009922:	677b      	str	r3, [r7, #116]	@ 0x74
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	461a      	mov	r2, r3
 800992a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800992c:	637b      	str	r3, [r7, #52]	@ 0x34
 800992e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009930:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009932:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009934:	e841 2300 	strex	r3, r2, [r1]
 8009938:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800993a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1e6      	bne.n	800990e <UART_Start_Receive_IT+0x1be>
 8009940:	e018      	b.n	8009974 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	613b      	str	r3, [r7, #16]
   return(result);
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	f043 0320 	orr.w	r3, r3, #32
 8009956:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	461a      	mov	r2, r3
 800995e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009960:	623b      	str	r3, [r7, #32]
 8009962:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009964:	69f9      	ldr	r1, [r7, #28]
 8009966:	6a3a      	ldr	r2, [r7, #32]
 8009968:	e841 2300 	strex	r3, r2, [r1]
 800996c:	61bb      	str	r3, [r7, #24]
   return(result);
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1e6      	bne.n	8009942 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	378c      	adds	r7, #140	@ 0x8c
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	0800a1b1 	.word	0x0800a1b1
 8009988:	08009e4d 	.word	0x08009e4d
 800998c:	08009c95 	.word	0x08009c95
 8009990:	08009add 	.word	0x08009add

08009994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009994:	b480      	push	{r7}
 8009996:	b095      	sub	sp, #84	@ 0x54
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80099bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099c2:	e841 2300 	strex	r3, r2, [r1]
 80099c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1e6      	bne.n	800999c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3308      	adds	r3, #8
 80099d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	e853 3f00 	ldrex	r3, [r3]
 80099dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099e4:	f023 0301 	bic.w	r3, r3, #1
 80099e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e3      	bne.n	80099ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d118      	bne.n	8009a40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f023 0310 	bic.w	r3, r3, #16
 8009a22:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a2c:	61bb      	str	r3, [r7, #24]
 8009a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	6979      	ldr	r1, [r7, #20]
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	613b      	str	r3, [r7, #16]
   return(result);
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e6      	bne.n	8009a0e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2220      	movs	r2, #32
 8009a44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a54:	bf00      	nop
 8009a56:	3754      	adds	r7, #84	@ 0x54
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f7ff f99e 	bl	8008db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a7c:	bf00      	nop
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b088      	sub	sp, #32
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	e853 3f00 	ldrex	r3, [r3]
 8009a98:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009aa0:	61fb      	str	r3, [r7, #28]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	61bb      	str	r3, [r7, #24]
 8009aac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aae:	6979      	ldr	r1, [r7, #20]
 8009ab0:	69ba      	ldr	r2, [r7, #24]
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1e6      	bne.n	8009a8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff f969 	bl	8008da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ad2:	bf00      	nop
 8009ad4:	3720      	adds	r7, #32
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b09c      	sub	sp, #112	@ 0x70
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009aea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009af4:	2b22      	cmp	r3, #34	@ 0x22
 8009af6:	f040 80be 	bne.w	8009c76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009b08:	b2d9      	uxtb	r1, r3
 8009b0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b14:	400a      	ands	r2, r1
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f040 80a1 	bne.w	8009c86 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1e6      	bne.n	8009b44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b88:	f023 0301 	bic.w	r3, r3, #1
 8009b8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3308      	adds	r3, #8
 8009b94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b96:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e5      	bne.n	8009b76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2220      	movs	r2, #32
 8009bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a33      	ldr	r2, [pc, #204]	@ (8009c90 <UART_RxISR_8BIT+0x1b4>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d01f      	beq.n	8009c08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d018      	beq.n	8009c08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	623b      	str	r3, [r7, #32]
   return(result);
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009bea:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e6      	bne.n	8009bd6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d12e      	bne.n	8009c6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	e853 3f00 	ldrex	r3, [r3]
 8009c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f023 0310 	bic.w	r3, r3, #16
 8009c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c34:	61fb      	str	r3, [r7, #28]
 8009c36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c38:	69b9      	ldr	r1, [r7, #24]
 8009c3a:	69fa      	ldr	r2, [r7, #28]
 8009c3c:	e841 2300 	strex	r3, r2, [r1]
 8009c40:	617b      	str	r3, [r7, #20]
   return(result);
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1e6      	bne.n	8009c16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	f003 0310 	and.w	r3, r3, #16
 8009c52:	2b10      	cmp	r3, #16
 8009c54:	d103      	bne.n	8009c5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2210      	movs	r2, #16
 8009c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7ff f8b0 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c6c:	e00b      	b.n	8009c86 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7f9 f8a4 	bl	8002dbc <HAL_UART_RxCpltCallback>
}
 8009c74:	e007      	b.n	8009c86 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	699a      	ldr	r2, [r3, #24]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f042 0208 	orr.w	r2, r2, #8
 8009c84:	619a      	str	r2, [r3, #24]
}
 8009c86:	bf00      	nop
 8009c88:	3770      	adds	r7, #112	@ 0x70
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	40008000 	.word	0x40008000

08009c94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b09c      	sub	sp, #112	@ 0x70
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ca2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cac:	2b22      	cmp	r3, #34	@ 0x22
 8009cae:	f040 80be 	bne.w	8009e2e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009cc2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009cc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009cca:	4013      	ands	r3, r2
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd6:	1c9a      	adds	r2, r3, #2
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f040 80a1 	bne.w	8009e3e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d10:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d1c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009d20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d22:	e841 2300 	strex	r3, r2, [r1]
 8009d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1e6      	bne.n	8009cfc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3308      	adds	r3, #8
 8009d34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d40:	f023 0301 	bic.w	r3, r3, #1
 8009d44:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d56:	e841 2300 	strex	r3, r2, [r1]
 8009d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e5      	bne.n	8009d2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a33      	ldr	r2, [pc, #204]	@ (8009e48 <UART_RxISR_16BIT+0x1b4>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d01f      	beq.n	8009dc0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d018      	beq.n	8009dc0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	e853 3f00 	ldrex	r3, [r3]
 8009d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	461a      	mov	r2, r3
 8009daa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009db4:	e841 2300 	strex	r3, r2, [r1]
 8009db8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1e6      	bne.n	8009d8e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d12e      	bne.n	8009e26 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	e853 3f00 	ldrex	r3, [r3]
 8009dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f023 0310 	bic.w	r3, r3, #16
 8009de2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	461a      	mov	r2, r3
 8009dea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009dec:	61bb      	str	r3, [r7, #24]
 8009dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df0:	6979      	ldr	r1, [r7, #20]
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	e841 2300 	strex	r3, r2, [r1]
 8009df8:	613b      	str	r3, [r7, #16]
   return(result);
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1e6      	bne.n	8009dce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	f003 0310 	and.w	r3, r3, #16
 8009e0a:	2b10      	cmp	r3, #16
 8009e0c:	d103      	bne.n	8009e16 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2210      	movs	r2, #16
 8009e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7fe ffd4 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e24:	e00b      	b.n	8009e3e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7f8 ffc8 	bl	8002dbc <HAL_UART_RxCpltCallback>
}
 8009e2c:	e007      	b.n	8009e3e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	699a      	ldr	r2, [r3, #24]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f042 0208 	orr.w	r2, r2, #8
 8009e3c:	619a      	str	r2, [r3, #24]
}
 8009e3e:	bf00      	nop
 8009e40:	3770      	adds	r7, #112	@ 0x70
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	40008000 	.word	0x40008000

08009e4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b0ac      	sub	sp, #176	@ 0xb0
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009e5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	69db      	ldr	r3, [r3, #28]
 8009e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e82:	2b22      	cmp	r3, #34	@ 0x22
 8009e84:	f040 8183 	bne.w	800a18e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e8e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e92:	e126      	b.n	800a0e2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e9a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009e9e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009ea2:	b2d9      	uxtb	r1, r3
 8009ea4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eae:	400a      	ands	r2, r1
 8009eb0:	b2d2      	uxtb	r2, r2
 8009eb2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d053      	beq.n	8009f8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d011      	beq.n	8009f16 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009ef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00b      	beq.n	8009f16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2201      	movs	r2, #1
 8009f04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f0c:	f043 0201 	orr.w	r2, r3, #1
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d011      	beq.n	8009f46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00b      	beq.n	8009f46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2202      	movs	r2, #2
 8009f34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f3c:	f043 0204 	orr.w	r2, r3, #4
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d011      	beq.n	8009f76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00b      	beq.n	8009f76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2204      	movs	r2, #4
 8009f64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f6c:	f043 0202 	orr.w	r2, r3, #2
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d006      	beq.n	8009f8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7fe ff19 	bl	8008db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f040 80a3 	bne.w	800a0e2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009fc0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009fc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009fc6:	e841 2300 	strex	r3, r2, [r1]
 8009fca:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009fcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1e4      	bne.n	8009f9c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fdc:	e853 3f00 	ldrex	r3, [r3]
 8009fe0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009fe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fe8:	f023 0301 	bic.w	r3, r3, #1
 8009fec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ffa:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009ffc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a000:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a008:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e1      	bne.n	8009fd2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a60      	ldr	r2, [pc, #384]	@ (800a1a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d021      	beq.n	800a070 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a036:	2b00      	cmp	r3, #0
 800a038:	d01a      	beq.n	800a070 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a042:	e853 3f00 	ldrex	r3, [r3]
 800a046:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a04a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a04e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a05c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a05e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a062:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a06a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e4      	bne.n	800a03a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a074:	2b01      	cmp	r3, #1
 800a076:	d130      	bne.n	800a0da <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a086:	e853 3f00 	ldrex	r3, [r3]
 800a08a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08e:	f023 0310 	bic.w	r3, r3, #16
 800a092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0a8:	e841 2300 	strex	r3, r2, [r1]
 800a0ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1e4      	bne.n	800a07e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	f003 0310 	and.w	r3, r3, #16
 800a0be:	2b10      	cmp	r3, #16
 800a0c0:	d103      	bne.n	800a0ca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2210      	movs	r2, #16
 800a0c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7fe fe7a 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a0d8:	e00e      	b.n	800a0f8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7f8 fe6e 	bl	8002dbc <HAL_UART_RxCpltCallback>
        break;
 800a0e0:	e00a      	b.n	800a0f8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0e2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d006      	beq.n	800a0f8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800a0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0ee:	f003 0320 	and.w	r3, r3, #32
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f47f aece 	bne.w	8009e94 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0fe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a102:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a106:	2b00      	cmp	r3, #0
 800a108:	d049      	beq.n	800a19e <UART_RxISR_8BIT_FIFOEN+0x352>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a110:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a114:	429a      	cmp	r2, r3
 800a116:	d242      	bcs.n	800a19e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3308      	adds	r3, #8
 800a11e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	e853 3f00 	ldrex	r3, [r3]
 800a126:	61fb      	str	r3, [r7, #28]
   return(result);
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a12e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3308      	adds	r3, #8
 800a138:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a13c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a13e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a144:	e841 2300 	strex	r3, r2, [r1]
 800a148:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1e3      	bne.n	800a118 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a16      	ldr	r2, [pc, #88]	@ (800a1ac <UART_RxISR_8BIT_FIFOEN+0x360>)
 800a154:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	e853 3f00 	ldrex	r3, [r3]
 800a162:	60bb      	str	r3, [r7, #8]
   return(result);
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	f043 0320 	orr.w	r3, r3, #32
 800a16a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a178:	61bb      	str	r3, [r7, #24]
 800a17a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6979      	ldr	r1, [r7, #20]
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	613b      	str	r3, [r7, #16]
   return(result);
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e4      	bne.n	800a156 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a18c:	e007      	b.n	800a19e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	699a      	ldr	r2, [r3, #24]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f042 0208 	orr.w	r2, r2, #8
 800a19c:	619a      	str	r2, [r3, #24]
}
 800a19e:	bf00      	nop
 800a1a0:	37b0      	adds	r7, #176	@ 0xb0
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	40008000 	.word	0x40008000
 800a1ac:	08009add 	.word	0x08009add

0800a1b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b0ae      	sub	sp, #184	@ 0xb8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a1be:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1e6:	2b22      	cmp	r3, #34	@ 0x22
 800a1e8:	f040 8187 	bne.w	800a4fa <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a1f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a1f6:	e12a      	b.n	800a44e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a20a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a20e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a212:	4013      	ands	r3, r2
 800a214:	b29a      	uxth	r2, r3
 800a216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a21a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a220:	1c9a      	adds	r2, r3, #2
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	3b01      	subs	r3, #1
 800a230:	b29a      	uxth	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d053      	beq.n	800a2f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a24e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d011      	beq.n	800a27e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a25a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a25e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00b      	beq.n	800a27e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2201      	movs	r2, #1
 800a26c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a274:	f043 0201 	orr.w	r2, r3, #1
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a27e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a282:	f003 0302 	and.w	r3, r3, #2
 800a286:	2b00      	cmp	r3, #0
 800a288:	d011      	beq.n	800a2ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a28a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00b      	beq.n	800a2ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2202      	movs	r2, #2
 800a29c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a4:	f043 0204 	orr.w	r2, r3, #4
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a2b2:	f003 0304 	and.w	r3, r3, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d011      	beq.n	800a2de <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a2ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00b      	beq.n	800a2de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2204      	movs	r2, #4
 800a2cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2d4:	f043 0202 	orr.w	r2, r3, #2
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d006      	beq.n	800a2f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7fe fd65 	bl	8008db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f040 80a5 	bne.w	800a44e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a30c:	e853 3f00 	ldrex	r3, [r3]
 800a310:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a318:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	461a      	mov	r2, r3
 800a322:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a326:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a32a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a32e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a332:	e841 2300 	strex	r3, r2, [r1]
 800a336:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1e2      	bne.n	800a304 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3308      	adds	r3, #8
 800a344:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a34e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a354:	f023 0301 	bic.w	r3, r3, #1
 800a358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3308      	adds	r3, #8
 800a362:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a36c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a36e:	e841 2300 	strex	r3, r2, [r1]
 800a372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1e1      	bne.n	800a33e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2220      	movs	r2, #32
 800a37e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a60      	ldr	r2, [pc, #384]	@ (800a514 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d021      	beq.n	800a3dc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d01a      	beq.n	800a3dc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a3ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a3c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3d0:	e841 2300 	strex	r3, r2, [r1]
 800a3d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e4      	bne.n	800a3a6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d130      	bne.n	800a446 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f2:	e853 3f00 	ldrex	r3, [r3]
 800a3f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fa:	f023 0310 	bic.w	r3, r3, #16
 800a3fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a40c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a40e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a414:	e841 2300 	strex	r3, r2, [r1]
 800a418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e4      	bne.n	800a3ea <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f003 0310 	and.w	r3, r3, #16
 800a42a:	2b10      	cmp	r3, #16
 800a42c:	d103      	bne.n	800a436 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2210      	movs	r2, #16
 800a434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7fe fcc4 	bl	8008dcc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a444:	e00e      	b.n	800a464 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7f8 fcb8 	bl	8002dbc <HAL_UART_RxCpltCallback>
        break;
 800a44c:	e00a      	b.n	800a464 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a44e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a452:	2b00      	cmp	r3, #0
 800a454:	d006      	beq.n	800a464 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800a456:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a45a:	f003 0320 	and.w	r3, r3, #32
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f47f aeca 	bne.w	800a1f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a46a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a46e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a472:	2b00      	cmp	r3, #0
 800a474:	d049      	beq.n	800a50a <UART_RxISR_16BIT_FIFOEN+0x35a>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a47c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a480:	429a      	cmp	r2, r3
 800a482:	d242      	bcs.n	800a50a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3308      	adds	r3, #8
 800a48a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48e:	e853 3f00 	ldrex	r3, [r3]
 800a492:	623b      	str	r3, [r7, #32]
   return(result);
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a49a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3308      	adds	r3, #8
 800a4a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a4a8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4b0:	e841 2300 	strex	r3, r2, [r1]
 800a4b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e3      	bne.n	800a484 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a16      	ldr	r2, [pc, #88]	@ (800a518 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a4c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f043 0320 	orr.w	r3, r3, #32
 800a4d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a4e4:	61fb      	str	r3, [r7, #28]
 800a4e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	69b9      	ldr	r1, [r7, #24]
 800a4ea:	69fa      	ldr	r2, [r7, #28]
 800a4ec:	e841 2300 	strex	r3, r2, [r1]
 800a4f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e4      	bne.n	800a4c2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4f8:	e007      	b.n	800a50a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	699a      	ldr	r2, [r3, #24]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f042 0208 	orr.w	r2, r2, #8
 800a508:	619a      	str	r2, [r3, #24]
}
 800a50a:	bf00      	nop
 800a50c:	37b8      	adds	r7, #184	@ 0xb8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	40008000 	.word	0x40008000
 800a518:	08009c95 	.word	0x08009c95

0800a51c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a566:	2b01      	cmp	r3, #1
 800a568:	d101      	bne.n	800a56e <HAL_UARTEx_DisableFifoMode+0x16>
 800a56a:	2302      	movs	r3, #2
 800a56c:	e027      	b.n	800a5be <HAL_UARTEx_DisableFifoMode+0x66>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2224      	movs	r2, #36	@ 0x24
 800a57a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f022 0201 	bic.w	r2, r2, #1
 800a594:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a59c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d101      	bne.n	800a5e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e02d      	b.n	800a63e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2224      	movs	r2, #36	@ 0x24
 800a5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 0201 	bic.w	r2, r2, #1
 800a608:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	430a      	orrs	r2, r1
 800a61c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f850 	bl	800a6c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2220      	movs	r2, #32
 800a630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a656:	2b01      	cmp	r3, #1
 800a658:	d101      	bne.n	800a65e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a65a:	2302      	movs	r3, #2
 800a65c:	e02d      	b.n	800a6ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2224      	movs	r2, #36	@ 0x24
 800a66a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f022 0201 	bic.w	r2, r2, #1
 800a684:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	430a      	orrs	r2, r1
 800a698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f812 	bl	800a6c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
	...

0800a6c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d108      	bne.n	800a6e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6e4:	e031      	b.n	800a74a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6e6:	2308      	movs	r3, #8
 800a6e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6ea:	2308      	movs	r3, #8
 800a6ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	0e5b      	lsrs	r3, r3, #25
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	f003 0307 	and.w	r3, r3, #7
 800a6fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	0f5b      	lsrs	r3, r3, #29
 800a706:	b2db      	uxtb	r3, r3
 800a708:	f003 0307 	and.w	r3, r3, #7
 800a70c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	7b3a      	ldrb	r2, [r7, #12]
 800a712:	4911      	ldr	r1, [pc, #68]	@ (800a758 <UARTEx_SetNbDataToProcess+0x94>)
 800a714:	5c8a      	ldrb	r2, [r1, r2]
 800a716:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a71a:	7b3a      	ldrb	r2, [r7, #12]
 800a71c:	490f      	ldr	r1, [pc, #60]	@ (800a75c <UARTEx_SetNbDataToProcess+0x98>)
 800a71e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a720:	fb93 f3f2 	sdiv	r3, r3, r2
 800a724:	b29a      	uxth	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	7b7a      	ldrb	r2, [r7, #13]
 800a730:	4909      	ldr	r1, [pc, #36]	@ (800a758 <UARTEx_SetNbDataToProcess+0x94>)
 800a732:	5c8a      	ldrb	r2, [r1, r2]
 800a734:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a738:	7b7a      	ldrb	r2, [r7, #13]
 800a73a:	4908      	ldr	r1, [pc, #32]	@ (800a75c <UARTEx_SetNbDataToProcess+0x98>)
 800a73c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a73e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a742:	b29a      	uxth	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a74a:	bf00      	nop
 800a74c:	3714      	adds	r7, #20
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	0800d940 	.word	0x0800d940
 800a75c:	0800d948 	.word	0x0800d948

0800a760 <atoi>:
 800a760:	220a      	movs	r2, #10
 800a762:	2100      	movs	r1, #0
 800a764:	f000 b87a 	b.w	800a85c <strtol>

0800a768 <_strtol_l.constprop.0>:
 800a768:	2b24      	cmp	r3, #36	@ 0x24
 800a76a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a76e:	4686      	mov	lr, r0
 800a770:	4690      	mov	r8, r2
 800a772:	d801      	bhi.n	800a778 <_strtol_l.constprop.0+0x10>
 800a774:	2b01      	cmp	r3, #1
 800a776:	d106      	bne.n	800a786 <_strtol_l.constprop.0+0x1e>
 800a778:	f000 feba 	bl	800b4f0 <__errno>
 800a77c:	2316      	movs	r3, #22
 800a77e:	6003      	str	r3, [r0, #0]
 800a780:	2000      	movs	r0, #0
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	4834      	ldr	r0, [pc, #208]	@ (800a858 <_strtol_l.constprop.0+0xf0>)
 800a788:	460d      	mov	r5, r1
 800a78a:	462a      	mov	r2, r5
 800a78c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a790:	5d06      	ldrb	r6, [r0, r4]
 800a792:	f016 0608 	ands.w	r6, r6, #8
 800a796:	d1f8      	bne.n	800a78a <_strtol_l.constprop.0+0x22>
 800a798:	2c2d      	cmp	r4, #45	@ 0x2d
 800a79a:	d12d      	bne.n	800a7f8 <_strtol_l.constprop.0+0x90>
 800a79c:	782c      	ldrb	r4, [r5, #0]
 800a79e:	2601      	movs	r6, #1
 800a7a0:	1c95      	adds	r5, r2, #2
 800a7a2:	f033 0210 	bics.w	r2, r3, #16
 800a7a6:	d109      	bne.n	800a7bc <_strtol_l.constprop.0+0x54>
 800a7a8:	2c30      	cmp	r4, #48	@ 0x30
 800a7aa:	d12a      	bne.n	800a802 <_strtol_l.constprop.0+0x9a>
 800a7ac:	782a      	ldrb	r2, [r5, #0]
 800a7ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a7b2:	2a58      	cmp	r2, #88	@ 0x58
 800a7b4:	d125      	bne.n	800a802 <_strtol_l.constprop.0+0x9a>
 800a7b6:	786c      	ldrb	r4, [r5, #1]
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	3502      	adds	r5, #2
 800a7bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a7c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	fbbc f9f3 	udiv	r9, ip, r3
 800a7ca:	4610      	mov	r0, r2
 800a7cc:	fb03 ca19 	mls	sl, r3, r9, ip
 800a7d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a7d4:	2f09      	cmp	r7, #9
 800a7d6:	d81b      	bhi.n	800a810 <_strtol_l.constprop.0+0xa8>
 800a7d8:	463c      	mov	r4, r7
 800a7da:	42a3      	cmp	r3, r4
 800a7dc:	dd27      	ble.n	800a82e <_strtol_l.constprop.0+0xc6>
 800a7de:	1c57      	adds	r7, r2, #1
 800a7e0:	d007      	beq.n	800a7f2 <_strtol_l.constprop.0+0x8a>
 800a7e2:	4581      	cmp	r9, r0
 800a7e4:	d320      	bcc.n	800a828 <_strtol_l.constprop.0+0xc0>
 800a7e6:	d101      	bne.n	800a7ec <_strtol_l.constprop.0+0x84>
 800a7e8:	45a2      	cmp	sl, r4
 800a7ea:	db1d      	blt.n	800a828 <_strtol_l.constprop.0+0xc0>
 800a7ec:	fb00 4003 	mla	r0, r0, r3, r4
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f6:	e7eb      	b.n	800a7d0 <_strtol_l.constprop.0+0x68>
 800a7f8:	2c2b      	cmp	r4, #43	@ 0x2b
 800a7fa:	bf04      	itt	eq
 800a7fc:	782c      	ldrbeq	r4, [r5, #0]
 800a7fe:	1c95      	addeq	r5, r2, #2
 800a800:	e7cf      	b.n	800a7a2 <_strtol_l.constprop.0+0x3a>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1da      	bne.n	800a7bc <_strtol_l.constprop.0+0x54>
 800a806:	2c30      	cmp	r4, #48	@ 0x30
 800a808:	bf0c      	ite	eq
 800a80a:	2308      	moveq	r3, #8
 800a80c:	230a      	movne	r3, #10
 800a80e:	e7d5      	b.n	800a7bc <_strtol_l.constprop.0+0x54>
 800a810:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a814:	2f19      	cmp	r7, #25
 800a816:	d801      	bhi.n	800a81c <_strtol_l.constprop.0+0xb4>
 800a818:	3c37      	subs	r4, #55	@ 0x37
 800a81a:	e7de      	b.n	800a7da <_strtol_l.constprop.0+0x72>
 800a81c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a820:	2f19      	cmp	r7, #25
 800a822:	d804      	bhi.n	800a82e <_strtol_l.constprop.0+0xc6>
 800a824:	3c57      	subs	r4, #87	@ 0x57
 800a826:	e7d8      	b.n	800a7da <_strtol_l.constprop.0+0x72>
 800a828:	f04f 32ff 	mov.w	r2, #4294967295
 800a82c:	e7e1      	b.n	800a7f2 <_strtol_l.constprop.0+0x8a>
 800a82e:	1c53      	adds	r3, r2, #1
 800a830:	d108      	bne.n	800a844 <_strtol_l.constprop.0+0xdc>
 800a832:	2322      	movs	r3, #34	@ 0x22
 800a834:	f8ce 3000 	str.w	r3, [lr]
 800a838:	4660      	mov	r0, ip
 800a83a:	f1b8 0f00 	cmp.w	r8, #0
 800a83e:	d0a0      	beq.n	800a782 <_strtol_l.constprop.0+0x1a>
 800a840:	1e69      	subs	r1, r5, #1
 800a842:	e006      	b.n	800a852 <_strtol_l.constprop.0+0xea>
 800a844:	b106      	cbz	r6, 800a848 <_strtol_l.constprop.0+0xe0>
 800a846:	4240      	negs	r0, r0
 800a848:	f1b8 0f00 	cmp.w	r8, #0
 800a84c:	d099      	beq.n	800a782 <_strtol_l.constprop.0+0x1a>
 800a84e:	2a00      	cmp	r2, #0
 800a850:	d1f6      	bne.n	800a840 <_strtol_l.constprop.0+0xd8>
 800a852:	f8c8 1000 	str.w	r1, [r8]
 800a856:	e794      	b.n	800a782 <_strtol_l.constprop.0+0x1a>
 800a858:	0800d951 	.word	0x0800d951

0800a85c <strtol>:
 800a85c:	4613      	mov	r3, r2
 800a85e:	460a      	mov	r2, r1
 800a860:	4601      	mov	r1, r0
 800a862:	4802      	ldr	r0, [pc, #8]	@ (800a86c <strtol+0x10>)
 800a864:	6800      	ldr	r0, [r0, #0]
 800a866:	f7ff bf7f 	b.w	800a768 <_strtol_l.constprop.0>
 800a86a:	bf00      	nop
 800a86c:	200000e0 	.word	0x200000e0

0800a870 <__cvt>:
 800a870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a874:	ec57 6b10 	vmov	r6, r7, d0
 800a878:	2f00      	cmp	r7, #0
 800a87a:	460c      	mov	r4, r1
 800a87c:	4619      	mov	r1, r3
 800a87e:	463b      	mov	r3, r7
 800a880:	bfbb      	ittet	lt
 800a882:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a886:	461f      	movlt	r7, r3
 800a888:	2300      	movge	r3, #0
 800a88a:	232d      	movlt	r3, #45	@ 0x2d
 800a88c:	700b      	strb	r3, [r1, #0]
 800a88e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a890:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a894:	4691      	mov	r9, r2
 800a896:	f023 0820 	bic.w	r8, r3, #32
 800a89a:	bfbc      	itt	lt
 800a89c:	4632      	movlt	r2, r6
 800a89e:	4616      	movlt	r6, r2
 800a8a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8a4:	d005      	beq.n	800a8b2 <__cvt+0x42>
 800a8a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a8aa:	d100      	bne.n	800a8ae <__cvt+0x3e>
 800a8ac:	3401      	adds	r4, #1
 800a8ae:	2102      	movs	r1, #2
 800a8b0:	e000      	b.n	800a8b4 <__cvt+0x44>
 800a8b2:	2103      	movs	r1, #3
 800a8b4:	ab03      	add	r3, sp, #12
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	ab02      	add	r3, sp, #8
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	ec47 6b10 	vmov	d0, r6, r7
 800a8c0:	4653      	mov	r3, sl
 800a8c2:	4622      	mov	r2, r4
 800a8c4:	f000 fee8 	bl	800b698 <_dtoa_r>
 800a8c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a8cc:	4605      	mov	r5, r0
 800a8ce:	d119      	bne.n	800a904 <__cvt+0x94>
 800a8d0:	f019 0f01 	tst.w	r9, #1
 800a8d4:	d00e      	beq.n	800a8f4 <__cvt+0x84>
 800a8d6:	eb00 0904 	add.w	r9, r0, r4
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2300      	movs	r3, #0
 800a8de:	4630      	mov	r0, r6
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	f7f6 f929 	bl	8000b38 <__aeabi_dcmpeq>
 800a8e6:	b108      	cbz	r0, 800a8ec <__cvt+0x7c>
 800a8e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8ec:	2230      	movs	r2, #48	@ 0x30
 800a8ee:	9b03      	ldr	r3, [sp, #12]
 800a8f0:	454b      	cmp	r3, r9
 800a8f2:	d31e      	bcc.n	800a932 <__cvt+0xc2>
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8f8:	1b5b      	subs	r3, r3, r5
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	b004      	add	sp, #16
 800a900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a904:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a908:	eb00 0904 	add.w	r9, r0, r4
 800a90c:	d1e5      	bne.n	800a8da <__cvt+0x6a>
 800a90e:	7803      	ldrb	r3, [r0, #0]
 800a910:	2b30      	cmp	r3, #48	@ 0x30
 800a912:	d10a      	bne.n	800a92a <__cvt+0xba>
 800a914:	2200      	movs	r2, #0
 800a916:	2300      	movs	r3, #0
 800a918:	4630      	mov	r0, r6
 800a91a:	4639      	mov	r1, r7
 800a91c:	f7f6 f90c 	bl	8000b38 <__aeabi_dcmpeq>
 800a920:	b918      	cbnz	r0, 800a92a <__cvt+0xba>
 800a922:	f1c4 0401 	rsb	r4, r4, #1
 800a926:	f8ca 4000 	str.w	r4, [sl]
 800a92a:	f8da 3000 	ldr.w	r3, [sl]
 800a92e:	4499      	add	r9, r3
 800a930:	e7d3      	b.n	800a8da <__cvt+0x6a>
 800a932:	1c59      	adds	r1, r3, #1
 800a934:	9103      	str	r1, [sp, #12]
 800a936:	701a      	strb	r2, [r3, #0]
 800a938:	e7d9      	b.n	800a8ee <__cvt+0x7e>

0800a93a <__exponent>:
 800a93a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a93c:	2900      	cmp	r1, #0
 800a93e:	bfba      	itte	lt
 800a940:	4249      	neglt	r1, r1
 800a942:	232d      	movlt	r3, #45	@ 0x2d
 800a944:	232b      	movge	r3, #43	@ 0x2b
 800a946:	2909      	cmp	r1, #9
 800a948:	7002      	strb	r2, [r0, #0]
 800a94a:	7043      	strb	r3, [r0, #1]
 800a94c:	dd29      	ble.n	800a9a2 <__exponent+0x68>
 800a94e:	f10d 0307 	add.w	r3, sp, #7
 800a952:	461d      	mov	r5, r3
 800a954:	270a      	movs	r7, #10
 800a956:	461a      	mov	r2, r3
 800a958:	fbb1 f6f7 	udiv	r6, r1, r7
 800a95c:	fb07 1416 	mls	r4, r7, r6, r1
 800a960:	3430      	adds	r4, #48	@ 0x30
 800a962:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a966:	460c      	mov	r4, r1
 800a968:	2c63      	cmp	r4, #99	@ 0x63
 800a96a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a96e:	4631      	mov	r1, r6
 800a970:	dcf1      	bgt.n	800a956 <__exponent+0x1c>
 800a972:	3130      	adds	r1, #48	@ 0x30
 800a974:	1e94      	subs	r4, r2, #2
 800a976:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a97a:	1c41      	adds	r1, r0, #1
 800a97c:	4623      	mov	r3, r4
 800a97e:	42ab      	cmp	r3, r5
 800a980:	d30a      	bcc.n	800a998 <__exponent+0x5e>
 800a982:	f10d 0309 	add.w	r3, sp, #9
 800a986:	1a9b      	subs	r3, r3, r2
 800a988:	42ac      	cmp	r4, r5
 800a98a:	bf88      	it	hi
 800a98c:	2300      	movhi	r3, #0
 800a98e:	3302      	adds	r3, #2
 800a990:	4403      	add	r3, r0
 800a992:	1a18      	subs	r0, r3, r0
 800a994:	b003      	add	sp, #12
 800a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a998:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a99c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a9a0:	e7ed      	b.n	800a97e <__exponent+0x44>
 800a9a2:	2330      	movs	r3, #48	@ 0x30
 800a9a4:	3130      	adds	r1, #48	@ 0x30
 800a9a6:	7083      	strb	r3, [r0, #2]
 800a9a8:	70c1      	strb	r1, [r0, #3]
 800a9aa:	1d03      	adds	r3, r0, #4
 800a9ac:	e7f1      	b.n	800a992 <__exponent+0x58>
	...

0800a9b0 <_printf_float>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	b08d      	sub	sp, #52	@ 0x34
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a9bc:	4616      	mov	r6, r2
 800a9be:	461f      	mov	r7, r3
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	f000 fd4b 	bl	800b45c <_localeconv_r>
 800a9c6:	6803      	ldr	r3, [r0, #0]
 800a9c8:	9304      	str	r3, [sp, #16]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7f5 fc88 	bl	80002e0 <strlen>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9d8:	9005      	str	r0, [sp, #20]
 800a9da:	3307      	adds	r3, #7
 800a9dc:	f023 0307 	bic.w	r3, r3, #7
 800a9e0:	f103 0208 	add.w	r2, r3, #8
 800a9e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a9e8:	f8d4 b000 	ldr.w	fp, [r4]
 800a9ec:	f8c8 2000 	str.w	r2, [r8]
 800a9f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a9f8:	9307      	str	r3, [sp, #28]
 800a9fa:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aa02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa06:	4b9c      	ldr	r3, [pc, #624]	@ (800ac78 <_printf_float+0x2c8>)
 800aa08:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0c:	f7f6 f8c6 	bl	8000b9c <__aeabi_dcmpun>
 800aa10:	bb70      	cbnz	r0, 800aa70 <_printf_float+0xc0>
 800aa12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa16:	4b98      	ldr	r3, [pc, #608]	@ (800ac78 <_printf_float+0x2c8>)
 800aa18:	f04f 32ff 	mov.w	r2, #4294967295
 800aa1c:	f7f6 f8a0 	bl	8000b60 <__aeabi_dcmple>
 800aa20:	bb30      	cbnz	r0, 800aa70 <_printf_float+0xc0>
 800aa22:	2200      	movs	r2, #0
 800aa24:	2300      	movs	r3, #0
 800aa26:	4640      	mov	r0, r8
 800aa28:	4649      	mov	r1, r9
 800aa2a:	f7f6 f88f 	bl	8000b4c <__aeabi_dcmplt>
 800aa2e:	b110      	cbz	r0, 800aa36 <_printf_float+0x86>
 800aa30:	232d      	movs	r3, #45	@ 0x2d
 800aa32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa36:	4a91      	ldr	r2, [pc, #580]	@ (800ac7c <_printf_float+0x2cc>)
 800aa38:	4b91      	ldr	r3, [pc, #580]	@ (800ac80 <_printf_float+0x2d0>)
 800aa3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa3e:	bf94      	ite	ls
 800aa40:	4690      	movls	r8, r2
 800aa42:	4698      	movhi	r8, r3
 800aa44:	2303      	movs	r3, #3
 800aa46:	6123      	str	r3, [r4, #16]
 800aa48:	f02b 0304 	bic.w	r3, fp, #4
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	f04f 0900 	mov.w	r9, #0
 800aa52:	9700      	str	r7, [sp, #0]
 800aa54:	4633      	mov	r3, r6
 800aa56:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f000 f9d2 	bl	800ae04 <_printf_common>
 800aa60:	3001      	adds	r0, #1
 800aa62:	f040 808d 	bne.w	800ab80 <_printf_float+0x1d0>
 800aa66:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6a:	b00d      	add	sp, #52	@ 0x34
 800aa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa70:	4642      	mov	r2, r8
 800aa72:	464b      	mov	r3, r9
 800aa74:	4640      	mov	r0, r8
 800aa76:	4649      	mov	r1, r9
 800aa78:	f7f6 f890 	bl	8000b9c <__aeabi_dcmpun>
 800aa7c:	b140      	cbz	r0, 800aa90 <_printf_float+0xe0>
 800aa7e:	464b      	mov	r3, r9
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	bfbc      	itt	lt
 800aa84:	232d      	movlt	r3, #45	@ 0x2d
 800aa86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aa8a:	4a7e      	ldr	r2, [pc, #504]	@ (800ac84 <_printf_float+0x2d4>)
 800aa8c:	4b7e      	ldr	r3, [pc, #504]	@ (800ac88 <_printf_float+0x2d8>)
 800aa8e:	e7d4      	b.n	800aa3a <_printf_float+0x8a>
 800aa90:	6863      	ldr	r3, [r4, #4]
 800aa92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aa96:	9206      	str	r2, [sp, #24]
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	d13b      	bne.n	800ab14 <_printf_float+0x164>
 800aa9c:	2306      	movs	r3, #6
 800aa9e:	6063      	str	r3, [r4, #4]
 800aaa0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	6022      	str	r2, [r4, #0]
 800aaa8:	9303      	str	r3, [sp, #12]
 800aaaa:	ab0a      	add	r3, sp, #40	@ 0x28
 800aaac:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aab0:	ab09      	add	r3, sp, #36	@ 0x24
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	6861      	ldr	r1, [r4, #4]
 800aab6:	ec49 8b10 	vmov	d0, r8, r9
 800aaba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aabe:	4628      	mov	r0, r5
 800aac0:	f7ff fed6 	bl	800a870 <__cvt>
 800aac4:	9b06      	ldr	r3, [sp, #24]
 800aac6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aac8:	2b47      	cmp	r3, #71	@ 0x47
 800aaca:	4680      	mov	r8, r0
 800aacc:	d129      	bne.n	800ab22 <_printf_float+0x172>
 800aace:	1cc8      	adds	r0, r1, #3
 800aad0:	db02      	blt.n	800aad8 <_printf_float+0x128>
 800aad2:	6863      	ldr	r3, [r4, #4]
 800aad4:	4299      	cmp	r1, r3
 800aad6:	dd41      	ble.n	800ab5c <_printf_float+0x1ac>
 800aad8:	f1aa 0a02 	sub.w	sl, sl, #2
 800aadc:	fa5f fa8a 	uxtb.w	sl, sl
 800aae0:	3901      	subs	r1, #1
 800aae2:	4652      	mov	r2, sl
 800aae4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aae8:	9109      	str	r1, [sp, #36]	@ 0x24
 800aaea:	f7ff ff26 	bl	800a93a <__exponent>
 800aaee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aaf0:	1813      	adds	r3, r2, r0
 800aaf2:	2a01      	cmp	r2, #1
 800aaf4:	4681      	mov	r9, r0
 800aaf6:	6123      	str	r3, [r4, #16]
 800aaf8:	dc02      	bgt.n	800ab00 <_printf_float+0x150>
 800aafa:	6822      	ldr	r2, [r4, #0]
 800aafc:	07d2      	lsls	r2, r2, #31
 800aafe:	d501      	bpl.n	800ab04 <_printf_float+0x154>
 800ab00:	3301      	adds	r3, #1
 800ab02:	6123      	str	r3, [r4, #16]
 800ab04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d0a2      	beq.n	800aa52 <_printf_float+0xa2>
 800ab0c:	232d      	movs	r3, #45	@ 0x2d
 800ab0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab12:	e79e      	b.n	800aa52 <_printf_float+0xa2>
 800ab14:	9a06      	ldr	r2, [sp, #24]
 800ab16:	2a47      	cmp	r2, #71	@ 0x47
 800ab18:	d1c2      	bne.n	800aaa0 <_printf_float+0xf0>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1c0      	bne.n	800aaa0 <_printf_float+0xf0>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e7bd      	b.n	800aa9e <_printf_float+0xee>
 800ab22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab26:	d9db      	bls.n	800aae0 <_printf_float+0x130>
 800ab28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ab2c:	d118      	bne.n	800ab60 <_printf_float+0x1b0>
 800ab2e:	2900      	cmp	r1, #0
 800ab30:	6863      	ldr	r3, [r4, #4]
 800ab32:	dd0b      	ble.n	800ab4c <_printf_float+0x19c>
 800ab34:	6121      	str	r1, [r4, #16]
 800ab36:	b913      	cbnz	r3, 800ab3e <_printf_float+0x18e>
 800ab38:	6822      	ldr	r2, [r4, #0]
 800ab3a:	07d0      	lsls	r0, r2, #31
 800ab3c:	d502      	bpl.n	800ab44 <_printf_float+0x194>
 800ab3e:	3301      	adds	r3, #1
 800ab40:	440b      	add	r3, r1
 800ab42:	6123      	str	r3, [r4, #16]
 800ab44:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab46:	f04f 0900 	mov.w	r9, #0
 800ab4a:	e7db      	b.n	800ab04 <_printf_float+0x154>
 800ab4c:	b913      	cbnz	r3, 800ab54 <_printf_float+0x1a4>
 800ab4e:	6822      	ldr	r2, [r4, #0]
 800ab50:	07d2      	lsls	r2, r2, #31
 800ab52:	d501      	bpl.n	800ab58 <_printf_float+0x1a8>
 800ab54:	3302      	adds	r3, #2
 800ab56:	e7f4      	b.n	800ab42 <_printf_float+0x192>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e7f2      	b.n	800ab42 <_printf_float+0x192>
 800ab5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ab60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab62:	4299      	cmp	r1, r3
 800ab64:	db05      	blt.n	800ab72 <_printf_float+0x1c2>
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	6121      	str	r1, [r4, #16]
 800ab6a:	07d8      	lsls	r0, r3, #31
 800ab6c:	d5ea      	bpl.n	800ab44 <_printf_float+0x194>
 800ab6e:	1c4b      	adds	r3, r1, #1
 800ab70:	e7e7      	b.n	800ab42 <_printf_float+0x192>
 800ab72:	2900      	cmp	r1, #0
 800ab74:	bfd4      	ite	le
 800ab76:	f1c1 0202 	rsble	r2, r1, #2
 800ab7a:	2201      	movgt	r2, #1
 800ab7c:	4413      	add	r3, r2
 800ab7e:	e7e0      	b.n	800ab42 <_printf_float+0x192>
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	055a      	lsls	r2, r3, #21
 800ab84:	d407      	bmi.n	800ab96 <_printf_float+0x1e6>
 800ab86:	6923      	ldr	r3, [r4, #16]
 800ab88:	4642      	mov	r2, r8
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	47b8      	blx	r7
 800ab90:	3001      	adds	r0, #1
 800ab92:	d12b      	bne.n	800abec <_printf_float+0x23c>
 800ab94:	e767      	b.n	800aa66 <_printf_float+0xb6>
 800ab96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab9a:	f240 80dd 	bls.w	800ad58 <_printf_float+0x3a8>
 800ab9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aba2:	2200      	movs	r2, #0
 800aba4:	2300      	movs	r3, #0
 800aba6:	f7f5 ffc7 	bl	8000b38 <__aeabi_dcmpeq>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d033      	beq.n	800ac16 <_printf_float+0x266>
 800abae:	4a37      	ldr	r2, [pc, #220]	@ (800ac8c <_printf_float+0x2dc>)
 800abb0:	2301      	movs	r3, #1
 800abb2:	4631      	mov	r1, r6
 800abb4:	4628      	mov	r0, r5
 800abb6:	47b8      	blx	r7
 800abb8:	3001      	adds	r0, #1
 800abba:	f43f af54 	beq.w	800aa66 <_printf_float+0xb6>
 800abbe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800abc2:	4543      	cmp	r3, r8
 800abc4:	db02      	blt.n	800abcc <_printf_float+0x21c>
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	07d8      	lsls	r0, r3, #31
 800abca:	d50f      	bpl.n	800abec <_printf_float+0x23c>
 800abcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abd0:	4631      	mov	r1, r6
 800abd2:	4628      	mov	r0, r5
 800abd4:	47b8      	blx	r7
 800abd6:	3001      	adds	r0, #1
 800abd8:	f43f af45 	beq.w	800aa66 <_printf_float+0xb6>
 800abdc:	f04f 0900 	mov.w	r9, #0
 800abe0:	f108 38ff 	add.w	r8, r8, #4294967295
 800abe4:	f104 0a1a 	add.w	sl, r4, #26
 800abe8:	45c8      	cmp	r8, r9
 800abea:	dc09      	bgt.n	800ac00 <_printf_float+0x250>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	079b      	lsls	r3, r3, #30
 800abf0:	f100 8103 	bmi.w	800adfa <_printf_float+0x44a>
 800abf4:	68e0      	ldr	r0, [r4, #12]
 800abf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abf8:	4298      	cmp	r0, r3
 800abfa:	bfb8      	it	lt
 800abfc:	4618      	movlt	r0, r3
 800abfe:	e734      	b.n	800aa6a <_printf_float+0xba>
 800ac00:	2301      	movs	r3, #1
 800ac02:	4652      	mov	r2, sl
 800ac04:	4631      	mov	r1, r6
 800ac06:	4628      	mov	r0, r5
 800ac08:	47b8      	blx	r7
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	f43f af2b 	beq.w	800aa66 <_printf_float+0xb6>
 800ac10:	f109 0901 	add.w	r9, r9, #1
 800ac14:	e7e8      	b.n	800abe8 <_printf_float+0x238>
 800ac16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	dc39      	bgt.n	800ac90 <_printf_float+0x2e0>
 800ac1c:	4a1b      	ldr	r2, [pc, #108]	@ (800ac8c <_printf_float+0x2dc>)
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4631      	mov	r1, r6
 800ac22:	4628      	mov	r0, r5
 800ac24:	47b8      	blx	r7
 800ac26:	3001      	adds	r0, #1
 800ac28:	f43f af1d 	beq.w	800aa66 <_printf_float+0xb6>
 800ac2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ac30:	ea59 0303 	orrs.w	r3, r9, r3
 800ac34:	d102      	bne.n	800ac3c <_printf_float+0x28c>
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	07d9      	lsls	r1, r3, #31
 800ac3a:	d5d7      	bpl.n	800abec <_printf_float+0x23c>
 800ac3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac40:	4631      	mov	r1, r6
 800ac42:	4628      	mov	r0, r5
 800ac44:	47b8      	blx	r7
 800ac46:	3001      	adds	r0, #1
 800ac48:	f43f af0d 	beq.w	800aa66 <_printf_float+0xb6>
 800ac4c:	f04f 0a00 	mov.w	sl, #0
 800ac50:	f104 0b1a 	add.w	fp, r4, #26
 800ac54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac56:	425b      	negs	r3, r3
 800ac58:	4553      	cmp	r3, sl
 800ac5a:	dc01      	bgt.n	800ac60 <_printf_float+0x2b0>
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	e793      	b.n	800ab88 <_printf_float+0x1d8>
 800ac60:	2301      	movs	r3, #1
 800ac62:	465a      	mov	r2, fp
 800ac64:	4631      	mov	r1, r6
 800ac66:	4628      	mov	r0, r5
 800ac68:	47b8      	blx	r7
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	f43f aefb 	beq.w	800aa66 <_printf_float+0xb6>
 800ac70:	f10a 0a01 	add.w	sl, sl, #1
 800ac74:	e7ee      	b.n	800ac54 <_printf_float+0x2a4>
 800ac76:	bf00      	nop
 800ac78:	7fefffff 	.word	0x7fefffff
 800ac7c:	0800da51 	.word	0x0800da51
 800ac80:	0800da55 	.word	0x0800da55
 800ac84:	0800da59 	.word	0x0800da59
 800ac88:	0800da5d 	.word	0x0800da5d
 800ac8c:	0800da61 	.word	0x0800da61
 800ac90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac96:	4553      	cmp	r3, sl
 800ac98:	bfa8      	it	ge
 800ac9a:	4653      	movge	r3, sl
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	4699      	mov	r9, r3
 800aca0:	dc36      	bgt.n	800ad10 <_printf_float+0x360>
 800aca2:	f04f 0b00 	mov.w	fp, #0
 800aca6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acaa:	f104 021a 	add.w	r2, r4, #26
 800acae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800acb0:	9306      	str	r3, [sp, #24]
 800acb2:	eba3 0309 	sub.w	r3, r3, r9
 800acb6:	455b      	cmp	r3, fp
 800acb8:	dc31      	bgt.n	800ad1e <_printf_float+0x36e>
 800acba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acbc:	459a      	cmp	sl, r3
 800acbe:	dc3a      	bgt.n	800ad36 <_printf_float+0x386>
 800acc0:	6823      	ldr	r3, [r4, #0]
 800acc2:	07da      	lsls	r2, r3, #31
 800acc4:	d437      	bmi.n	800ad36 <_printf_float+0x386>
 800acc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc8:	ebaa 0903 	sub.w	r9, sl, r3
 800accc:	9b06      	ldr	r3, [sp, #24]
 800acce:	ebaa 0303 	sub.w	r3, sl, r3
 800acd2:	4599      	cmp	r9, r3
 800acd4:	bfa8      	it	ge
 800acd6:	4699      	movge	r9, r3
 800acd8:	f1b9 0f00 	cmp.w	r9, #0
 800acdc:	dc33      	bgt.n	800ad46 <_printf_float+0x396>
 800acde:	f04f 0800 	mov.w	r8, #0
 800ace2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ace6:	f104 0b1a 	add.w	fp, r4, #26
 800acea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acec:	ebaa 0303 	sub.w	r3, sl, r3
 800acf0:	eba3 0309 	sub.w	r3, r3, r9
 800acf4:	4543      	cmp	r3, r8
 800acf6:	f77f af79 	ble.w	800abec <_printf_float+0x23c>
 800acfa:	2301      	movs	r3, #1
 800acfc:	465a      	mov	r2, fp
 800acfe:	4631      	mov	r1, r6
 800ad00:	4628      	mov	r0, r5
 800ad02:	47b8      	blx	r7
 800ad04:	3001      	adds	r0, #1
 800ad06:	f43f aeae 	beq.w	800aa66 <_printf_float+0xb6>
 800ad0a:	f108 0801 	add.w	r8, r8, #1
 800ad0e:	e7ec      	b.n	800acea <_printf_float+0x33a>
 800ad10:	4642      	mov	r2, r8
 800ad12:	4631      	mov	r1, r6
 800ad14:	4628      	mov	r0, r5
 800ad16:	47b8      	blx	r7
 800ad18:	3001      	adds	r0, #1
 800ad1a:	d1c2      	bne.n	800aca2 <_printf_float+0x2f2>
 800ad1c:	e6a3      	b.n	800aa66 <_printf_float+0xb6>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4631      	mov	r1, r6
 800ad22:	4628      	mov	r0, r5
 800ad24:	9206      	str	r2, [sp, #24]
 800ad26:	47b8      	blx	r7
 800ad28:	3001      	adds	r0, #1
 800ad2a:	f43f ae9c 	beq.w	800aa66 <_printf_float+0xb6>
 800ad2e:	9a06      	ldr	r2, [sp, #24]
 800ad30:	f10b 0b01 	add.w	fp, fp, #1
 800ad34:	e7bb      	b.n	800acae <_printf_float+0x2fe>
 800ad36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	47b8      	blx	r7
 800ad40:	3001      	adds	r0, #1
 800ad42:	d1c0      	bne.n	800acc6 <_printf_float+0x316>
 800ad44:	e68f      	b.n	800aa66 <_printf_float+0xb6>
 800ad46:	9a06      	ldr	r2, [sp, #24]
 800ad48:	464b      	mov	r3, r9
 800ad4a:	4442      	add	r2, r8
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b8      	blx	r7
 800ad52:	3001      	adds	r0, #1
 800ad54:	d1c3      	bne.n	800acde <_printf_float+0x32e>
 800ad56:	e686      	b.n	800aa66 <_printf_float+0xb6>
 800ad58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad5c:	f1ba 0f01 	cmp.w	sl, #1
 800ad60:	dc01      	bgt.n	800ad66 <_printf_float+0x3b6>
 800ad62:	07db      	lsls	r3, r3, #31
 800ad64:	d536      	bpl.n	800add4 <_printf_float+0x424>
 800ad66:	2301      	movs	r3, #1
 800ad68:	4642      	mov	r2, r8
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	47b8      	blx	r7
 800ad70:	3001      	adds	r0, #1
 800ad72:	f43f ae78 	beq.w	800aa66 <_printf_float+0xb6>
 800ad76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	47b8      	blx	r7
 800ad80:	3001      	adds	r0, #1
 800ad82:	f43f ae70 	beq.w	800aa66 <_printf_float+0xb6>
 800ad86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad92:	f7f5 fed1 	bl	8000b38 <__aeabi_dcmpeq>
 800ad96:	b9c0      	cbnz	r0, 800adca <_printf_float+0x41a>
 800ad98:	4653      	mov	r3, sl
 800ad9a:	f108 0201 	add.w	r2, r8, #1
 800ad9e:	4631      	mov	r1, r6
 800ada0:	4628      	mov	r0, r5
 800ada2:	47b8      	blx	r7
 800ada4:	3001      	adds	r0, #1
 800ada6:	d10c      	bne.n	800adc2 <_printf_float+0x412>
 800ada8:	e65d      	b.n	800aa66 <_printf_float+0xb6>
 800adaa:	2301      	movs	r3, #1
 800adac:	465a      	mov	r2, fp
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	f43f ae56 	beq.w	800aa66 <_printf_float+0xb6>
 800adba:	f108 0801 	add.w	r8, r8, #1
 800adbe:	45d0      	cmp	r8, sl
 800adc0:	dbf3      	blt.n	800adaa <_printf_float+0x3fa>
 800adc2:	464b      	mov	r3, r9
 800adc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800adc8:	e6df      	b.n	800ab8a <_printf_float+0x1da>
 800adca:	f04f 0800 	mov.w	r8, #0
 800adce:	f104 0b1a 	add.w	fp, r4, #26
 800add2:	e7f4      	b.n	800adbe <_printf_float+0x40e>
 800add4:	2301      	movs	r3, #1
 800add6:	4642      	mov	r2, r8
 800add8:	e7e1      	b.n	800ad9e <_printf_float+0x3ee>
 800adda:	2301      	movs	r3, #1
 800addc:	464a      	mov	r2, r9
 800adde:	4631      	mov	r1, r6
 800ade0:	4628      	mov	r0, r5
 800ade2:	47b8      	blx	r7
 800ade4:	3001      	adds	r0, #1
 800ade6:	f43f ae3e 	beq.w	800aa66 <_printf_float+0xb6>
 800adea:	f108 0801 	add.w	r8, r8, #1
 800adee:	68e3      	ldr	r3, [r4, #12]
 800adf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adf2:	1a5b      	subs	r3, r3, r1
 800adf4:	4543      	cmp	r3, r8
 800adf6:	dcf0      	bgt.n	800adda <_printf_float+0x42a>
 800adf8:	e6fc      	b.n	800abf4 <_printf_float+0x244>
 800adfa:	f04f 0800 	mov.w	r8, #0
 800adfe:	f104 0919 	add.w	r9, r4, #25
 800ae02:	e7f4      	b.n	800adee <_printf_float+0x43e>

0800ae04 <_printf_common>:
 800ae04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae08:	4616      	mov	r6, r2
 800ae0a:	4698      	mov	r8, r3
 800ae0c:	688a      	ldr	r2, [r1, #8]
 800ae0e:	690b      	ldr	r3, [r1, #16]
 800ae10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae14:	4293      	cmp	r3, r2
 800ae16:	bfb8      	it	lt
 800ae18:	4613      	movlt	r3, r2
 800ae1a:	6033      	str	r3, [r6, #0]
 800ae1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae20:	4607      	mov	r7, r0
 800ae22:	460c      	mov	r4, r1
 800ae24:	b10a      	cbz	r2, 800ae2a <_printf_common+0x26>
 800ae26:	3301      	adds	r3, #1
 800ae28:	6033      	str	r3, [r6, #0]
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	0699      	lsls	r1, r3, #26
 800ae2e:	bf42      	ittt	mi
 800ae30:	6833      	ldrmi	r3, [r6, #0]
 800ae32:	3302      	addmi	r3, #2
 800ae34:	6033      	strmi	r3, [r6, #0]
 800ae36:	6825      	ldr	r5, [r4, #0]
 800ae38:	f015 0506 	ands.w	r5, r5, #6
 800ae3c:	d106      	bne.n	800ae4c <_printf_common+0x48>
 800ae3e:	f104 0a19 	add.w	sl, r4, #25
 800ae42:	68e3      	ldr	r3, [r4, #12]
 800ae44:	6832      	ldr	r2, [r6, #0]
 800ae46:	1a9b      	subs	r3, r3, r2
 800ae48:	42ab      	cmp	r3, r5
 800ae4a:	dc26      	bgt.n	800ae9a <_printf_common+0x96>
 800ae4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae50:	6822      	ldr	r2, [r4, #0]
 800ae52:	3b00      	subs	r3, #0
 800ae54:	bf18      	it	ne
 800ae56:	2301      	movne	r3, #1
 800ae58:	0692      	lsls	r2, r2, #26
 800ae5a:	d42b      	bmi.n	800aeb4 <_printf_common+0xb0>
 800ae5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae60:	4641      	mov	r1, r8
 800ae62:	4638      	mov	r0, r7
 800ae64:	47c8      	blx	r9
 800ae66:	3001      	adds	r0, #1
 800ae68:	d01e      	beq.n	800aea8 <_printf_common+0xa4>
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	6922      	ldr	r2, [r4, #16]
 800ae6e:	f003 0306 	and.w	r3, r3, #6
 800ae72:	2b04      	cmp	r3, #4
 800ae74:	bf02      	ittt	eq
 800ae76:	68e5      	ldreq	r5, [r4, #12]
 800ae78:	6833      	ldreq	r3, [r6, #0]
 800ae7a:	1aed      	subeq	r5, r5, r3
 800ae7c:	68a3      	ldr	r3, [r4, #8]
 800ae7e:	bf0c      	ite	eq
 800ae80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae84:	2500      	movne	r5, #0
 800ae86:	4293      	cmp	r3, r2
 800ae88:	bfc4      	itt	gt
 800ae8a:	1a9b      	subgt	r3, r3, r2
 800ae8c:	18ed      	addgt	r5, r5, r3
 800ae8e:	2600      	movs	r6, #0
 800ae90:	341a      	adds	r4, #26
 800ae92:	42b5      	cmp	r5, r6
 800ae94:	d11a      	bne.n	800aecc <_printf_common+0xc8>
 800ae96:	2000      	movs	r0, #0
 800ae98:	e008      	b.n	800aeac <_printf_common+0xa8>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	4652      	mov	r2, sl
 800ae9e:	4641      	mov	r1, r8
 800aea0:	4638      	mov	r0, r7
 800aea2:	47c8      	blx	r9
 800aea4:	3001      	adds	r0, #1
 800aea6:	d103      	bne.n	800aeb0 <_printf_common+0xac>
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb0:	3501      	adds	r5, #1
 800aeb2:	e7c6      	b.n	800ae42 <_printf_common+0x3e>
 800aeb4:	18e1      	adds	r1, r4, r3
 800aeb6:	1c5a      	adds	r2, r3, #1
 800aeb8:	2030      	movs	r0, #48	@ 0x30
 800aeba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aebe:	4422      	add	r2, r4
 800aec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aec4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aec8:	3302      	adds	r3, #2
 800aeca:	e7c7      	b.n	800ae5c <_printf_common+0x58>
 800aecc:	2301      	movs	r3, #1
 800aece:	4622      	mov	r2, r4
 800aed0:	4641      	mov	r1, r8
 800aed2:	4638      	mov	r0, r7
 800aed4:	47c8      	blx	r9
 800aed6:	3001      	adds	r0, #1
 800aed8:	d0e6      	beq.n	800aea8 <_printf_common+0xa4>
 800aeda:	3601      	adds	r6, #1
 800aedc:	e7d9      	b.n	800ae92 <_printf_common+0x8e>
	...

0800aee0 <_printf_i>:
 800aee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aee4:	7e0f      	ldrb	r7, [r1, #24]
 800aee6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aee8:	2f78      	cmp	r7, #120	@ 0x78
 800aeea:	4691      	mov	r9, r2
 800aeec:	4680      	mov	r8, r0
 800aeee:	460c      	mov	r4, r1
 800aef0:	469a      	mov	sl, r3
 800aef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aef6:	d807      	bhi.n	800af08 <_printf_i+0x28>
 800aef8:	2f62      	cmp	r7, #98	@ 0x62
 800aefa:	d80a      	bhi.n	800af12 <_printf_i+0x32>
 800aefc:	2f00      	cmp	r7, #0
 800aefe:	f000 80d2 	beq.w	800b0a6 <_printf_i+0x1c6>
 800af02:	2f58      	cmp	r7, #88	@ 0x58
 800af04:	f000 80b9 	beq.w	800b07a <_printf_i+0x19a>
 800af08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af10:	e03a      	b.n	800af88 <_printf_i+0xa8>
 800af12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af16:	2b15      	cmp	r3, #21
 800af18:	d8f6      	bhi.n	800af08 <_printf_i+0x28>
 800af1a:	a101      	add	r1, pc, #4	@ (adr r1, 800af20 <_printf_i+0x40>)
 800af1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af20:	0800af79 	.word	0x0800af79
 800af24:	0800af8d 	.word	0x0800af8d
 800af28:	0800af09 	.word	0x0800af09
 800af2c:	0800af09 	.word	0x0800af09
 800af30:	0800af09 	.word	0x0800af09
 800af34:	0800af09 	.word	0x0800af09
 800af38:	0800af8d 	.word	0x0800af8d
 800af3c:	0800af09 	.word	0x0800af09
 800af40:	0800af09 	.word	0x0800af09
 800af44:	0800af09 	.word	0x0800af09
 800af48:	0800af09 	.word	0x0800af09
 800af4c:	0800b08d 	.word	0x0800b08d
 800af50:	0800afb7 	.word	0x0800afb7
 800af54:	0800b047 	.word	0x0800b047
 800af58:	0800af09 	.word	0x0800af09
 800af5c:	0800af09 	.word	0x0800af09
 800af60:	0800b0af 	.word	0x0800b0af
 800af64:	0800af09 	.word	0x0800af09
 800af68:	0800afb7 	.word	0x0800afb7
 800af6c:	0800af09 	.word	0x0800af09
 800af70:	0800af09 	.word	0x0800af09
 800af74:	0800b04f 	.word	0x0800b04f
 800af78:	6833      	ldr	r3, [r6, #0]
 800af7a:	1d1a      	adds	r2, r3, #4
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	6032      	str	r2, [r6, #0]
 800af80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af88:	2301      	movs	r3, #1
 800af8a:	e09d      	b.n	800b0c8 <_printf_i+0x1e8>
 800af8c:	6833      	ldr	r3, [r6, #0]
 800af8e:	6820      	ldr	r0, [r4, #0]
 800af90:	1d19      	adds	r1, r3, #4
 800af92:	6031      	str	r1, [r6, #0]
 800af94:	0606      	lsls	r6, r0, #24
 800af96:	d501      	bpl.n	800af9c <_printf_i+0xbc>
 800af98:	681d      	ldr	r5, [r3, #0]
 800af9a:	e003      	b.n	800afa4 <_printf_i+0xc4>
 800af9c:	0645      	lsls	r5, r0, #25
 800af9e:	d5fb      	bpl.n	800af98 <_printf_i+0xb8>
 800afa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800afa4:	2d00      	cmp	r5, #0
 800afa6:	da03      	bge.n	800afb0 <_printf_i+0xd0>
 800afa8:	232d      	movs	r3, #45	@ 0x2d
 800afaa:	426d      	negs	r5, r5
 800afac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afb0:	4859      	ldr	r0, [pc, #356]	@ (800b118 <_printf_i+0x238>)
 800afb2:	230a      	movs	r3, #10
 800afb4:	e011      	b.n	800afda <_printf_i+0xfa>
 800afb6:	6821      	ldr	r1, [r4, #0]
 800afb8:	6833      	ldr	r3, [r6, #0]
 800afba:	0608      	lsls	r0, r1, #24
 800afbc:	f853 5b04 	ldr.w	r5, [r3], #4
 800afc0:	d402      	bmi.n	800afc8 <_printf_i+0xe8>
 800afc2:	0649      	lsls	r1, r1, #25
 800afc4:	bf48      	it	mi
 800afc6:	b2ad      	uxthmi	r5, r5
 800afc8:	2f6f      	cmp	r7, #111	@ 0x6f
 800afca:	4853      	ldr	r0, [pc, #332]	@ (800b118 <_printf_i+0x238>)
 800afcc:	6033      	str	r3, [r6, #0]
 800afce:	bf14      	ite	ne
 800afd0:	230a      	movne	r3, #10
 800afd2:	2308      	moveq	r3, #8
 800afd4:	2100      	movs	r1, #0
 800afd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800afda:	6866      	ldr	r6, [r4, #4]
 800afdc:	60a6      	str	r6, [r4, #8]
 800afde:	2e00      	cmp	r6, #0
 800afe0:	bfa2      	ittt	ge
 800afe2:	6821      	ldrge	r1, [r4, #0]
 800afe4:	f021 0104 	bicge.w	r1, r1, #4
 800afe8:	6021      	strge	r1, [r4, #0]
 800afea:	b90d      	cbnz	r5, 800aff0 <_printf_i+0x110>
 800afec:	2e00      	cmp	r6, #0
 800afee:	d04b      	beq.n	800b088 <_printf_i+0x1a8>
 800aff0:	4616      	mov	r6, r2
 800aff2:	fbb5 f1f3 	udiv	r1, r5, r3
 800aff6:	fb03 5711 	mls	r7, r3, r1, r5
 800affa:	5dc7      	ldrb	r7, [r0, r7]
 800affc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b000:	462f      	mov	r7, r5
 800b002:	42bb      	cmp	r3, r7
 800b004:	460d      	mov	r5, r1
 800b006:	d9f4      	bls.n	800aff2 <_printf_i+0x112>
 800b008:	2b08      	cmp	r3, #8
 800b00a:	d10b      	bne.n	800b024 <_printf_i+0x144>
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	07df      	lsls	r7, r3, #31
 800b010:	d508      	bpl.n	800b024 <_printf_i+0x144>
 800b012:	6923      	ldr	r3, [r4, #16]
 800b014:	6861      	ldr	r1, [r4, #4]
 800b016:	4299      	cmp	r1, r3
 800b018:	bfde      	ittt	le
 800b01a:	2330      	movle	r3, #48	@ 0x30
 800b01c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b020:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b024:	1b92      	subs	r2, r2, r6
 800b026:	6122      	str	r2, [r4, #16]
 800b028:	f8cd a000 	str.w	sl, [sp]
 800b02c:	464b      	mov	r3, r9
 800b02e:	aa03      	add	r2, sp, #12
 800b030:	4621      	mov	r1, r4
 800b032:	4640      	mov	r0, r8
 800b034:	f7ff fee6 	bl	800ae04 <_printf_common>
 800b038:	3001      	adds	r0, #1
 800b03a:	d14a      	bne.n	800b0d2 <_printf_i+0x1f2>
 800b03c:	f04f 30ff 	mov.w	r0, #4294967295
 800b040:	b004      	add	sp, #16
 800b042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	f043 0320 	orr.w	r3, r3, #32
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	4833      	ldr	r0, [pc, #204]	@ (800b11c <_printf_i+0x23c>)
 800b050:	2778      	movs	r7, #120	@ 0x78
 800b052:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	6831      	ldr	r1, [r6, #0]
 800b05a:	061f      	lsls	r7, r3, #24
 800b05c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b060:	d402      	bmi.n	800b068 <_printf_i+0x188>
 800b062:	065f      	lsls	r7, r3, #25
 800b064:	bf48      	it	mi
 800b066:	b2ad      	uxthmi	r5, r5
 800b068:	6031      	str	r1, [r6, #0]
 800b06a:	07d9      	lsls	r1, r3, #31
 800b06c:	bf44      	itt	mi
 800b06e:	f043 0320 	orrmi.w	r3, r3, #32
 800b072:	6023      	strmi	r3, [r4, #0]
 800b074:	b11d      	cbz	r5, 800b07e <_printf_i+0x19e>
 800b076:	2310      	movs	r3, #16
 800b078:	e7ac      	b.n	800afd4 <_printf_i+0xf4>
 800b07a:	4827      	ldr	r0, [pc, #156]	@ (800b118 <_printf_i+0x238>)
 800b07c:	e7e9      	b.n	800b052 <_printf_i+0x172>
 800b07e:	6823      	ldr	r3, [r4, #0]
 800b080:	f023 0320 	bic.w	r3, r3, #32
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	e7f6      	b.n	800b076 <_printf_i+0x196>
 800b088:	4616      	mov	r6, r2
 800b08a:	e7bd      	b.n	800b008 <_printf_i+0x128>
 800b08c:	6833      	ldr	r3, [r6, #0]
 800b08e:	6825      	ldr	r5, [r4, #0]
 800b090:	6961      	ldr	r1, [r4, #20]
 800b092:	1d18      	adds	r0, r3, #4
 800b094:	6030      	str	r0, [r6, #0]
 800b096:	062e      	lsls	r6, r5, #24
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	d501      	bpl.n	800b0a0 <_printf_i+0x1c0>
 800b09c:	6019      	str	r1, [r3, #0]
 800b09e:	e002      	b.n	800b0a6 <_printf_i+0x1c6>
 800b0a0:	0668      	lsls	r0, r5, #25
 800b0a2:	d5fb      	bpl.n	800b09c <_printf_i+0x1bc>
 800b0a4:	8019      	strh	r1, [r3, #0]
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	6123      	str	r3, [r4, #16]
 800b0aa:	4616      	mov	r6, r2
 800b0ac:	e7bc      	b.n	800b028 <_printf_i+0x148>
 800b0ae:	6833      	ldr	r3, [r6, #0]
 800b0b0:	1d1a      	adds	r2, r3, #4
 800b0b2:	6032      	str	r2, [r6, #0]
 800b0b4:	681e      	ldr	r6, [r3, #0]
 800b0b6:	6862      	ldr	r2, [r4, #4]
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f7f5 f8c0 	bl	8000240 <memchr>
 800b0c0:	b108      	cbz	r0, 800b0c6 <_printf_i+0x1e6>
 800b0c2:	1b80      	subs	r0, r0, r6
 800b0c4:	6060      	str	r0, [r4, #4]
 800b0c6:	6863      	ldr	r3, [r4, #4]
 800b0c8:	6123      	str	r3, [r4, #16]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0d0:	e7aa      	b.n	800b028 <_printf_i+0x148>
 800b0d2:	6923      	ldr	r3, [r4, #16]
 800b0d4:	4632      	mov	r2, r6
 800b0d6:	4649      	mov	r1, r9
 800b0d8:	4640      	mov	r0, r8
 800b0da:	47d0      	blx	sl
 800b0dc:	3001      	adds	r0, #1
 800b0de:	d0ad      	beq.n	800b03c <_printf_i+0x15c>
 800b0e0:	6823      	ldr	r3, [r4, #0]
 800b0e2:	079b      	lsls	r3, r3, #30
 800b0e4:	d413      	bmi.n	800b10e <_printf_i+0x22e>
 800b0e6:	68e0      	ldr	r0, [r4, #12]
 800b0e8:	9b03      	ldr	r3, [sp, #12]
 800b0ea:	4298      	cmp	r0, r3
 800b0ec:	bfb8      	it	lt
 800b0ee:	4618      	movlt	r0, r3
 800b0f0:	e7a6      	b.n	800b040 <_printf_i+0x160>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	4632      	mov	r2, r6
 800b0f6:	4649      	mov	r1, r9
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	47d0      	blx	sl
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	d09d      	beq.n	800b03c <_printf_i+0x15c>
 800b100:	3501      	adds	r5, #1
 800b102:	68e3      	ldr	r3, [r4, #12]
 800b104:	9903      	ldr	r1, [sp, #12]
 800b106:	1a5b      	subs	r3, r3, r1
 800b108:	42ab      	cmp	r3, r5
 800b10a:	dcf2      	bgt.n	800b0f2 <_printf_i+0x212>
 800b10c:	e7eb      	b.n	800b0e6 <_printf_i+0x206>
 800b10e:	2500      	movs	r5, #0
 800b110:	f104 0619 	add.w	r6, r4, #25
 800b114:	e7f5      	b.n	800b102 <_printf_i+0x222>
 800b116:	bf00      	nop
 800b118:	0800da63 	.word	0x0800da63
 800b11c:	0800da74 	.word	0x0800da74

0800b120 <std>:
 800b120:	2300      	movs	r3, #0
 800b122:	b510      	push	{r4, lr}
 800b124:	4604      	mov	r4, r0
 800b126:	e9c0 3300 	strd	r3, r3, [r0]
 800b12a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b12e:	6083      	str	r3, [r0, #8]
 800b130:	8181      	strh	r1, [r0, #12]
 800b132:	6643      	str	r3, [r0, #100]	@ 0x64
 800b134:	81c2      	strh	r2, [r0, #14]
 800b136:	6183      	str	r3, [r0, #24]
 800b138:	4619      	mov	r1, r3
 800b13a:	2208      	movs	r2, #8
 800b13c:	305c      	adds	r0, #92	@ 0x5c
 800b13e:	f000 f928 	bl	800b392 <memset>
 800b142:	4b0d      	ldr	r3, [pc, #52]	@ (800b178 <std+0x58>)
 800b144:	6263      	str	r3, [r4, #36]	@ 0x24
 800b146:	4b0d      	ldr	r3, [pc, #52]	@ (800b17c <std+0x5c>)
 800b148:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b14a:	4b0d      	ldr	r3, [pc, #52]	@ (800b180 <std+0x60>)
 800b14c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b14e:	4b0d      	ldr	r3, [pc, #52]	@ (800b184 <std+0x64>)
 800b150:	6323      	str	r3, [r4, #48]	@ 0x30
 800b152:	4b0d      	ldr	r3, [pc, #52]	@ (800b188 <std+0x68>)
 800b154:	6224      	str	r4, [r4, #32]
 800b156:	429c      	cmp	r4, r3
 800b158:	d006      	beq.n	800b168 <std+0x48>
 800b15a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b15e:	4294      	cmp	r4, r2
 800b160:	d002      	beq.n	800b168 <std+0x48>
 800b162:	33d0      	adds	r3, #208	@ 0xd0
 800b164:	429c      	cmp	r4, r3
 800b166:	d105      	bne.n	800b174 <std+0x54>
 800b168:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b170:	f000 b9e8 	b.w	800b544 <__retarget_lock_init_recursive>
 800b174:	bd10      	pop	{r4, pc}
 800b176:	bf00      	nop
 800b178:	0800b30d 	.word	0x0800b30d
 800b17c:	0800b32f 	.word	0x0800b32f
 800b180:	0800b367 	.word	0x0800b367
 800b184:	0800b38b 	.word	0x0800b38b
 800b188:	200007b4 	.word	0x200007b4

0800b18c <stdio_exit_handler>:
 800b18c:	4a02      	ldr	r2, [pc, #8]	@ (800b198 <stdio_exit_handler+0xc>)
 800b18e:	4903      	ldr	r1, [pc, #12]	@ (800b19c <stdio_exit_handler+0x10>)
 800b190:	4803      	ldr	r0, [pc, #12]	@ (800b1a0 <stdio_exit_handler+0x14>)
 800b192:	f000 b869 	b.w	800b268 <_fwalk_sglue>
 800b196:	bf00      	nop
 800b198:	200000d4 	.word	0x200000d4
 800b19c:	0800cedd 	.word	0x0800cedd
 800b1a0:	200000e4 	.word	0x200000e4

0800b1a4 <cleanup_stdio>:
 800b1a4:	6841      	ldr	r1, [r0, #4]
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d8 <cleanup_stdio+0x34>)
 800b1a8:	4299      	cmp	r1, r3
 800b1aa:	b510      	push	{r4, lr}
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	d001      	beq.n	800b1b4 <cleanup_stdio+0x10>
 800b1b0:	f001 fe94 	bl	800cedc <_fflush_r>
 800b1b4:	68a1      	ldr	r1, [r4, #8]
 800b1b6:	4b09      	ldr	r3, [pc, #36]	@ (800b1dc <cleanup_stdio+0x38>)
 800b1b8:	4299      	cmp	r1, r3
 800b1ba:	d002      	beq.n	800b1c2 <cleanup_stdio+0x1e>
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f001 fe8d 	bl	800cedc <_fflush_r>
 800b1c2:	68e1      	ldr	r1, [r4, #12]
 800b1c4:	4b06      	ldr	r3, [pc, #24]	@ (800b1e0 <cleanup_stdio+0x3c>)
 800b1c6:	4299      	cmp	r1, r3
 800b1c8:	d004      	beq.n	800b1d4 <cleanup_stdio+0x30>
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1d0:	f001 be84 	b.w	800cedc <_fflush_r>
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	bf00      	nop
 800b1d8:	200007b4 	.word	0x200007b4
 800b1dc:	2000081c 	.word	0x2000081c
 800b1e0:	20000884 	.word	0x20000884

0800b1e4 <global_stdio_init.part.0>:
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b214 <global_stdio_init.part.0+0x30>)
 800b1e8:	4c0b      	ldr	r4, [pc, #44]	@ (800b218 <global_stdio_init.part.0+0x34>)
 800b1ea:	4a0c      	ldr	r2, [pc, #48]	@ (800b21c <global_stdio_init.part.0+0x38>)
 800b1ec:	601a      	str	r2, [r3, #0]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	2104      	movs	r1, #4
 800b1f4:	f7ff ff94 	bl	800b120 <std>
 800b1f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	2109      	movs	r1, #9
 800b200:	f7ff ff8e 	bl	800b120 <std>
 800b204:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b208:	2202      	movs	r2, #2
 800b20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b20e:	2112      	movs	r1, #18
 800b210:	f7ff bf86 	b.w	800b120 <std>
 800b214:	200008ec 	.word	0x200008ec
 800b218:	200007b4 	.word	0x200007b4
 800b21c:	0800b18d 	.word	0x0800b18d

0800b220 <__sfp_lock_acquire>:
 800b220:	4801      	ldr	r0, [pc, #4]	@ (800b228 <__sfp_lock_acquire+0x8>)
 800b222:	f000 b990 	b.w	800b546 <__retarget_lock_acquire_recursive>
 800b226:	bf00      	nop
 800b228:	200008f5 	.word	0x200008f5

0800b22c <__sfp_lock_release>:
 800b22c:	4801      	ldr	r0, [pc, #4]	@ (800b234 <__sfp_lock_release+0x8>)
 800b22e:	f000 b98b 	b.w	800b548 <__retarget_lock_release_recursive>
 800b232:	bf00      	nop
 800b234:	200008f5 	.word	0x200008f5

0800b238 <__sinit>:
 800b238:	b510      	push	{r4, lr}
 800b23a:	4604      	mov	r4, r0
 800b23c:	f7ff fff0 	bl	800b220 <__sfp_lock_acquire>
 800b240:	6a23      	ldr	r3, [r4, #32]
 800b242:	b11b      	cbz	r3, 800b24c <__sinit+0x14>
 800b244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b248:	f7ff bff0 	b.w	800b22c <__sfp_lock_release>
 800b24c:	4b04      	ldr	r3, [pc, #16]	@ (800b260 <__sinit+0x28>)
 800b24e:	6223      	str	r3, [r4, #32]
 800b250:	4b04      	ldr	r3, [pc, #16]	@ (800b264 <__sinit+0x2c>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1f5      	bne.n	800b244 <__sinit+0xc>
 800b258:	f7ff ffc4 	bl	800b1e4 <global_stdio_init.part.0>
 800b25c:	e7f2      	b.n	800b244 <__sinit+0xc>
 800b25e:	bf00      	nop
 800b260:	0800b1a5 	.word	0x0800b1a5
 800b264:	200008ec 	.word	0x200008ec

0800b268 <_fwalk_sglue>:
 800b268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b26c:	4607      	mov	r7, r0
 800b26e:	4688      	mov	r8, r1
 800b270:	4614      	mov	r4, r2
 800b272:	2600      	movs	r6, #0
 800b274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b278:	f1b9 0901 	subs.w	r9, r9, #1
 800b27c:	d505      	bpl.n	800b28a <_fwalk_sglue+0x22>
 800b27e:	6824      	ldr	r4, [r4, #0]
 800b280:	2c00      	cmp	r4, #0
 800b282:	d1f7      	bne.n	800b274 <_fwalk_sglue+0xc>
 800b284:	4630      	mov	r0, r6
 800b286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b28a:	89ab      	ldrh	r3, [r5, #12]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d907      	bls.n	800b2a0 <_fwalk_sglue+0x38>
 800b290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b294:	3301      	adds	r3, #1
 800b296:	d003      	beq.n	800b2a0 <_fwalk_sglue+0x38>
 800b298:	4629      	mov	r1, r5
 800b29a:	4638      	mov	r0, r7
 800b29c:	47c0      	blx	r8
 800b29e:	4306      	orrs	r6, r0
 800b2a0:	3568      	adds	r5, #104	@ 0x68
 800b2a2:	e7e9      	b.n	800b278 <_fwalk_sglue+0x10>

0800b2a4 <sniprintf>:
 800b2a4:	b40c      	push	{r2, r3}
 800b2a6:	b530      	push	{r4, r5, lr}
 800b2a8:	4b17      	ldr	r3, [pc, #92]	@ (800b308 <sniprintf+0x64>)
 800b2aa:	1e0c      	subs	r4, r1, #0
 800b2ac:	681d      	ldr	r5, [r3, #0]
 800b2ae:	b09d      	sub	sp, #116	@ 0x74
 800b2b0:	da08      	bge.n	800b2c4 <sniprintf+0x20>
 800b2b2:	238b      	movs	r3, #139	@ 0x8b
 800b2b4:	602b      	str	r3, [r5, #0]
 800b2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ba:	b01d      	add	sp, #116	@ 0x74
 800b2bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2c0:	b002      	add	sp, #8
 800b2c2:	4770      	bx	lr
 800b2c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b2c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b2cc:	bf14      	ite	ne
 800b2ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2d2:	4623      	moveq	r3, r4
 800b2d4:	9304      	str	r3, [sp, #16]
 800b2d6:	9307      	str	r3, [sp, #28]
 800b2d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2dc:	9002      	str	r0, [sp, #8]
 800b2de:	9006      	str	r0, [sp, #24]
 800b2e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b2e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b2e6:	ab21      	add	r3, sp, #132	@ 0x84
 800b2e8:	a902      	add	r1, sp, #8
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	9301      	str	r3, [sp, #4]
 800b2ee:	f001 fc75 	bl	800cbdc <_svfiprintf_r>
 800b2f2:	1c43      	adds	r3, r0, #1
 800b2f4:	bfbc      	itt	lt
 800b2f6:	238b      	movlt	r3, #139	@ 0x8b
 800b2f8:	602b      	strlt	r3, [r5, #0]
 800b2fa:	2c00      	cmp	r4, #0
 800b2fc:	d0dd      	beq.n	800b2ba <sniprintf+0x16>
 800b2fe:	9b02      	ldr	r3, [sp, #8]
 800b300:	2200      	movs	r2, #0
 800b302:	701a      	strb	r2, [r3, #0]
 800b304:	e7d9      	b.n	800b2ba <sniprintf+0x16>
 800b306:	bf00      	nop
 800b308:	200000e0 	.word	0x200000e0

0800b30c <__sread>:
 800b30c:	b510      	push	{r4, lr}
 800b30e:	460c      	mov	r4, r1
 800b310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b314:	f000 f8c8 	bl	800b4a8 <_read_r>
 800b318:	2800      	cmp	r0, #0
 800b31a:	bfab      	itete	ge
 800b31c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b31e:	89a3      	ldrhlt	r3, [r4, #12]
 800b320:	181b      	addge	r3, r3, r0
 800b322:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b326:	bfac      	ite	ge
 800b328:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b32a:	81a3      	strhlt	r3, [r4, #12]
 800b32c:	bd10      	pop	{r4, pc}

0800b32e <__swrite>:
 800b32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b332:	461f      	mov	r7, r3
 800b334:	898b      	ldrh	r3, [r1, #12]
 800b336:	05db      	lsls	r3, r3, #23
 800b338:	4605      	mov	r5, r0
 800b33a:	460c      	mov	r4, r1
 800b33c:	4616      	mov	r6, r2
 800b33e:	d505      	bpl.n	800b34c <__swrite+0x1e>
 800b340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b344:	2302      	movs	r3, #2
 800b346:	2200      	movs	r2, #0
 800b348:	f000 f89c 	bl	800b484 <_lseek_r>
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b352:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b356:	81a3      	strh	r3, [r4, #12]
 800b358:	4632      	mov	r2, r6
 800b35a:	463b      	mov	r3, r7
 800b35c:	4628      	mov	r0, r5
 800b35e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b362:	f000 b8b3 	b.w	800b4cc <_write_r>

0800b366 <__sseek>:
 800b366:	b510      	push	{r4, lr}
 800b368:	460c      	mov	r4, r1
 800b36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36e:	f000 f889 	bl	800b484 <_lseek_r>
 800b372:	1c43      	adds	r3, r0, #1
 800b374:	89a3      	ldrh	r3, [r4, #12]
 800b376:	bf15      	itete	ne
 800b378:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b37a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b37e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b382:	81a3      	strheq	r3, [r4, #12]
 800b384:	bf18      	it	ne
 800b386:	81a3      	strhne	r3, [r4, #12]
 800b388:	bd10      	pop	{r4, pc}

0800b38a <__sclose>:
 800b38a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b38e:	f000 b869 	b.w	800b464 <_close_r>

0800b392 <memset>:
 800b392:	4402      	add	r2, r0
 800b394:	4603      	mov	r3, r0
 800b396:	4293      	cmp	r3, r2
 800b398:	d100      	bne.n	800b39c <memset+0xa>
 800b39a:	4770      	bx	lr
 800b39c:	f803 1b01 	strb.w	r1, [r3], #1
 800b3a0:	e7f9      	b.n	800b396 <memset+0x4>
	...

0800b3a4 <strtok>:
 800b3a4:	4b16      	ldr	r3, [pc, #88]	@ (800b400 <strtok+0x5c>)
 800b3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3aa:	681f      	ldr	r7, [r3, #0]
 800b3ac:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	460e      	mov	r6, r1
 800b3b2:	b9ec      	cbnz	r4, 800b3f0 <strtok+0x4c>
 800b3b4:	2050      	movs	r0, #80	@ 0x50
 800b3b6:	f000 ff7d 	bl	800c2b4 <malloc>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	6478      	str	r0, [r7, #68]	@ 0x44
 800b3be:	b920      	cbnz	r0, 800b3ca <strtok+0x26>
 800b3c0:	4b10      	ldr	r3, [pc, #64]	@ (800b404 <strtok+0x60>)
 800b3c2:	4811      	ldr	r0, [pc, #68]	@ (800b408 <strtok+0x64>)
 800b3c4:	215b      	movs	r1, #91	@ 0x5b
 800b3c6:	f000 f8c1 	bl	800b54c <__assert_func>
 800b3ca:	e9c0 4400 	strd	r4, r4, [r0]
 800b3ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b3d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b3d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b3da:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b3de:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b3e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b3e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b3ea:	6184      	str	r4, [r0, #24]
 800b3ec:	7704      	strb	r4, [r0, #28]
 800b3ee:	6244      	str	r4, [r0, #36]	@ 0x24
 800b3f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fc:	f000 b806 	b.w	800b40c <__strtok_r>
 800b400:	200000e0 	.word	0x200000e0
 800b404:	0800da85 	.word	0x0800da85
 800b408:	0800da9c 	.word	0x0800da9c

0800b40c <__strtok_r>:
 800b40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b40e:	4604      	mov	r4, r0
 800b410:	b908      	cbnz	r0, 800b416 <__strtok_r+0xa>
 800b412:	6814      	ldr	r4, [r2, #0]
 800b414:	b144      	cbz	r4, 800b428 <__strtok_r+0x1c>
 800b416:	4620      	mov	r0, r4
 800b418:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b41c:	460f      	mov	r7, r1
 800b41e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b422:	b91e      	cbnz	r6, 800b42c <__strtok_r+0x20>
 800b424:	b965      	cbnz	r5, 800b440 <__strtok_r+0x34>
 800b426:	6015      	str	r5, [r2, #0]
 800b428:	2000      	movs	r0, #0
 800b42a:	e005      	b.n	800b438 <__strtok_r+0x2c>
 800b42c:	42b5      	cmp	r5, r6
 800b42e:	d1f6      	bne.n	800b41e <__strtok_r+0x12>
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1f0      	bne.n	800b416 <__strtok_r+0xa>
 800b434:	6014      	str	r4, [r2, #0]
 800b436:	7003      	strb	r3, [r0, #0]
 800b438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b43a:	461c      	mov	r4, r3
 800b43c:	e00c      	b.n	800b458 <__strtok_r+0x4c>
 800b43e:	b915      	cbnz	r5, 800b446 <__strtok_r+0x3a>
 800b440:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b444:	460e      	mov	r6, r1
 800b446:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b44a:	42ab      	cmp	r3, r5
 800b44c:	d1f7      	bne.n	800b43e <__strtok_r+0x32>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0f3      	beq.n	800b43a <__strtok_r+0x2e>
 800b452:	2300      	movs	r3, #0
 800b454:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b458:	6014      	str	r4, [r2, #0]
 800b45a:	e7ed      	b.n	800b438 <__strtok_r+0x2c>

0800b45c <_localeconv_r>:
 800b45c:	4800      	ldr	r0, [pc, #0]	@ (800b460 <_localeconv_r+0x4>)
 800b45e:	4770      	bx	lr
 800b460:	20000220 	.word	0x20000220

0800b464 <_close_r>:
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	4d06      	ldr	r5, [pc, #24]	@ (800b480 <_close_r+0x1c>)
 800b468:	2300      	movs	r3, #0
 800b46a:	4604      	mov	r4, r0
 800b46c:	4608      	mov	r0, r1
 800b46e:	602b      	str	r3, [r5, #0]
 800b470:	f7f6 fb38 	bl	8001ae4 <_close>
 800b474:	1c43      	adds	r3, r0, #1
 800b476:	d102      	bne.n	800b47e <_close_r+0x1a>
 800b478:	682b      	ldr	r3, [r5, #0]
 800b47a:	b103      	cbz	r3, 800b47e <_close_r+0x1a>
 800b47c:	6023      	str	r3, [r4, #0]
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	200008f0 	.word	0x200008f0

0800b484 <_lseek_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4d07      	ldr	r5, [pc, #28]	@ (800b4a4 <_lseek_r+0x20>)
 800b488:	4604      	mov	r4, r0
 800b48a:	4608      	mov	r0, r1
 800b48c:	4611      	mov	r1, r2
 800b48e:	2200      	movs	r2, #0
 800b490:	602a      	str	r2, [r5, #0]
 800b492:	461a      	mov	r2, r3
 800b494:	f7f6 fb4d 	bl	8001b32 <_lseek>
 800b498:	1c43      	adds	r3, r0, #1
 800b49a:	d102      	bne.n	800b4a2 <_lseek_r+0x1e>
 800b49c:	682b      	ldr	r3, [r5, #0]
 800b49e:	b103      	cbz	r3, 800b4a2 <_lseek_r+0x1e>
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	bd38      	pop	{r3, r4, r5, pc}
 800b4a4:	200008f0 	.word	0x200008f0

0800b4a8 <_read_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4d07      	ldr	r5, [pc, #28]	@ (800b4c8 <_read_r+0x20>)
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	4608      	mov	r0, r1
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	602a      	str	r2, [r5, #0]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f7f6 fadb 	bl	8001a72 <_read>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d102      	bne.n	800b4c6 <_read_r+0x1e>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	b103      	cbz	r3, 800b4c6 <_read_r+0x1e>
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	200008f0 	.word	0x200008f0

0800b4cc <_write_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4d07      	ldr	r5, [pc, #28]	@ (800b4ec <_write_r+0x20>)
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	4608      	mov	r0, r1
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	602a      	str	r2, [r5, #0]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	f7f6 fae6 	bl	8001aac <_write>
 800b4e0:	1c43      	adds	r3, r0, #1
 800b4e2:	d102      	bne.n	800b4ea <_write_r+0x1e>
 800b4e4:	682b      	ldr	r3, [r5, #0]
 800b4e6:	b103      	cbz	r3, 800b4ea <_write_r+0x1e>
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	bd38      	pop	{r3, r4, r5, pc}
 800b4ec:	200008f0 	.word	0x200008f0

0800b4f0 <__errno>:
 800b4f0:	4b01      	ldr	r3, [pc, #4]	@ (800b4f8 <__errno+0x8>)
 800b4f2:	6818      	ldr	r0, [r3, #0]
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	200000e0 	.word	0x200000e0

0800b4fc <__libc_init_array>:
 800b4fc:	b570      	push	{r4, r5, r6, lr}
 800b4fe:	4d0d      	ldr	r5, [pc, #52]	@ (800b534 <__libc_init_array+0x38>)
 800b500:	4c0d      	ldr	r4, [pc, #52]	@ (800b538 <__libc_init_array+0x3c>)
 800b502:	1b64      	subs	r4, r4, r5
 800b504:	10a4      	asrs	r4, r4, #2
 800b506:	2600      	movs	r6, #0
 800b508:	42a6      	cmp	r6, r4
 800b50a:	d109      	bne.n	800b520 <__libc_init_array+0x24>
 800b50c:	4d0b      	ldr	r5, [pc, #44]	@ (800b53c <__libc_init_array+0x40>)
 800b50e:	4c0c      	ldr	r4, [pc, #48]	@ (800b540 <__libc_init_array+0x44>)
 800b510:	f002 f864 	bl	800d5dc <_init>
 800b514:	1b64      	subs	r4, r4, r5
 800b516:	10a4      	asrs	r4, r4, #2
 800b518:	2600      	movs	r6, #0
 800b51a:	42a6      	cmp	r6, r4
 800b51c:	d105      	bne.n	800b52a <__libc_init_array+0x2e>
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
 800b520:	f855 3b04 	ldr.w	r3, [r5], #4
 800b524:	4798      	blx	r3
 800b526:	3601      	adds	r6, #1
 800b528:	e7ee      	b.n	800b508 <__libc_init_array+0xc>
 800b52a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b52e:	4798      	blx	r3
 800b530:	3601      	adds	r6, #1
 800b532:	e7f2      	b.n	800b51a <__libc_init_array+0x1e>
 800b534:	0800dd24 	.word	0x0800dd24
 800b538:	0800dd24 	.word	0x0800dd24
 800b53c:	0800dd24 	.word	0x0800dd24
 800b540:	0800dd28 	.word	0x0800dd28

0800b544 <__retarget_lock_init_recursive>:
 800b544:	4770      	bx	lr

0800b546 <__retarget_lock_acquire_recursive>:
 800b546:	4770      	bx	lr

0800b548 <__retarget_lock_release_recursive>:
 800b548:	4770      	bx	lr
	...

0800b54c <__assert_func>:
 800b54c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b54e:	4614      	mov	r4, r2
 800b550:	461a      	mov	r2, r3
 800b552:	4b09      	ldr	r3, [pc, #36]	@ (800b578 <__assert_func+0x2c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4605      	mov	r5, r0
 800b558:	68d8      	ldr	r0, [r3, #12]
 800b55a:	b954      	cbnz	r4, 800b572 <__assert_func+0x26>
 800b55c:	4b07      	ldr	r3, [pc, #28]	@ (800b57c <__assert_func+0x30>)
 800b55e:	461c      	mov	r4, r3
 800b560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b564:	9100      	str	r1, [sp, #0]
 800b566:	462b      	mov	r3, r5
 800b568:	4905      	ldr	r1, [pc, #20]	@ (800b580 <__assert_func+0x34>)
 800b56a:	f001 fcdf 	bl	800cf2c <fiprintf>
 800b56e:	f001 fd27 	bl	800cfc0 <abort>
 800b572:	4b04      	ldr	r3, [pc, #16]	@ (800b584 <__assert_func+0x38>)
 800b574:	e7f4      	b.n	800b560 <__assert_func+0x14>
 800b576:	bf00      	nop
 800b578:	200000e0 	.word	0x200000e0
 800b57c:	0800db31 	.word	0x0800db31
 800b580:	0800db03 	.word	0x0800db03
 800b584:	0800daf6 	.word	0x0800daf6

0800b588 <quorem>:
 800b588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	6903      	ldr	r3, [r0, #16]
 800b58e:	690c      	ldr	r4, [r1, #16]
 800b590:	42a3      	cmp	r3, r4
 800b592:	4607      	mov	r7, r0
 800b594:	db7e      	blt.n	800b694 <quorem+0x10c>
 800b596:	3c01      	subs	r4, #1
 800b598:	f101 0814 	add.w	r8, r1, #20
 800b59c:	00a3      	lsls	r3, r4, #2
 800b59e:	f100 0514 	add.w	r5, r0, #20
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5a8:	9301      	str	r3, [sp, #4]
 800b5aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5be:	d32e      	bcc.n	800b61e <quorem+0x96>
 800b5c0:	f04f 0a00 	mov.w	sl, #0
 800b5c4:	46c4      	mov	ip, r8
 800b5c6:	46ae      	mov	lr, r5
 800b5c8:	46d3      	mov	fp, sl
 800b5ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5ce:	b298      	uxth	r0, r3
 800b5d0:	fb06 a000 	mla	r0, r6, r0, sl
 800b5d4:	0c02      	lsrs	r2, r0, #16
 800b5d6:	0c1b      	lsrs	r3, r3, #16
 800b5d8:	fb06 2303 	mla	r3, r6, r3, r2
 800b5dc:	f8de 2000 	ldr.w	r2, [lr]
 800b5e0:	b280      	uxth	r0, r0
 800b5e2:	b292      	uxth	r2, r2
 800b5e4:	1a12      	subs	r2, r2, r0
 800b5e6:	445a      	add	r2, fp
 800b5e8:	f8de 0000 	ldr.w	r0, [lr]
 800b5ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b5f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b5fa:	b292      	uxth	r2, r2
 800b5fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b600:	45e1      	cmp	r9, ip
 800b602:	f84e 2b04 	str.w	r2, [lr], #4
 800b606:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b60a:	d2de      	bcs.n	800b5ca <quorem+0x42>
 800b60c:	9b00      	ldr	r3, [sp, #0]
 800b60e:	58eb      	ldr	r3, [r5, r3]
 800b610:	b92b      	cbnz	r3, 800b61e <quorem+0x96>
 800b612:	9b01      	ldr	r3, [sp, #4]
 800b614:	3b04      	subs	r3, #4
 800b616:	429d      	cmp	r5, r3
 800b618:	461a      	mov	r2, r3
 800b61a:	d32f      	bcc.n	800b67c <quorem+0xf4>
 800b61c:	613c      	str	r4, [r7, #16]
 800b61e:	4638      	mov	r0, r7
 800b620:	f001 f978 	bl	800c914 <__mcmp>
 800b624:	2800      	cmp	r0, #0
 800b626:	db25      	blt.n	800b674 <quorem+0xec>
 800b628:	4629      	mov	r1, r5
 800b62a:	2000      	movs	r0, #0
 800b62c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b630:	f8d1 c000 	ldr.w	ip, [r1]
 800b634:	fa1f fe82 	uxth.w	lr, r2
 800b638:	fa1f f38c 	uxth.w	r3, ip
 800b63c:	eba3 030e 	sub.w	r3, r3, lr
 800b640:	4403      	add	r3, r0
 800b642:	0c12      	lsrs	r2, r2, #16
 800b644:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b648:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b652:	45c1      	cmp	r9, r8
 800b654:	f841 3b04 	str.w	r3, [r1], #4
 800b658:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b65c:	d2e6      	bcs.n	800b62c <quorem+0xa4>
 800b65e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b666:	b922      	cbnz	r2, 800b672 <quorem+0xea>
 800b668:	3b04      	subs	r3, #4
 800b66a:	429d      	cmp	r5, r3
 800b66c:	461a      	mov	r2, r3
 800b66e:	d30b      	bcc.n	800b688 <quorem+0x100>
 800b670:	613c      	str	r4, [r7, #16]
 800b672:	3601      	adds	r6, #1
 800b674:	4630      	mov	r0, r6
 800b676:	b003      	add	sp, #12
 800b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67c:	6812      	ldr	r2, [r2, #0]
 800b67e:	3b04      	subs	r3, #4
 800b680:	2a00      	cmp	r2, #0
 800b682:	d1cb      	bne.n	800b61c <quorem+0x94>
 800b684:	3c01      	subs	r4, #1
 800b686:	e7c6      	b.n	800b616 <quorem+0x8e>
 800b688:	6812      	ldr	r2, [r2, #0]
 800b68a:	3b04      	subs	r3, #4
 800b68c:	2a00      	cmp	r2, #0
 800b68e:	d1ef      	bne.n	800b670 <quorem+0xe8>
 800b690:	3c01      	subs	r4, #1
 800b692:	e7ea      	b.n	800b66a <quorem+0xe2>
 800b694:	2000      	movs	r0, #0
 800b696:	e7ee      	b.n	800b676 <quorem+0xee>

0800b698 <_dtoa_r>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	69c7      	ldr	r7, [r0, #28]
 800b69e:	b099      	sub	sp, #100	@ 0x64
 800b6a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6a4:	ec55 4b10 	vmov	r4, r5, d0
 800b6a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b6aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6ac:	4683      	mov	fp, r0
 800b6ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b6b2:	b97f      	cbnz	r7, 800b6d4 <_dtoa_r+0x3c>
 800b6b4:	2010      	movs	r0, #16
 800b6b6:	f000 fdfd 	bl	800c2b4 <malloc>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b6c0:	b920      	cbnz	r0, 800b6cc <_dtoa_r+0x34>
 800b6c2:	4ba7      	ldr	r3, [pc, #668]	@ (800b960 <_dtoa_r+0x2c8>)
 800b6c4:	21ef      	movs	r1, #239	@ 0xef
 800b6c6:	48a7      	ldr	r0, [pc, #668]	@ (800b964 <_dtoa_r+0x2cc>)
 800b6c8:	f7ff ff40 	bl	800b54c <__assert_func>
 800b6cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b6d0:	6007      	str	r7, [r0, #0]
 800b6d2:	60c7      	str	r7, [r0, #12]
 800b6d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6d8:	6819      	ldr	r1, [r3, #0]
 800b6da:	b159      	cbz	r1, 800b6f4 <_dtoa_r+0x5c>
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	604a      	str	r2, [r1, #4]
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	4093      	lsls	r3, r2
 800b6e4:	608b      	str	r3, [r1, #8]
 800b6e6:	4658      	mov	r0, fp
 800b6e8:	f000 feda 	bl	800c4a0 <_Bfree>
 800b6ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	1e2b      	subs	r3, r5, #0
 800b6f6:	bfb9      	ittee	lt
 800b6f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b6fc:	9303      	strlt	r3, [sp, #12]
 800b6fe:	2300      	movge	r3, #0
 800b700:	6033      	strge	r3, [r6, #0]
 800b702:	9f03      	ldr	r7, [sp, #12]
 800b704:	4b98      	ldr	r3, [pc, #608]	@ (800b968 <_dtoa_r+0x2d0>)
 800b706:	bfbc      	itt	lt
 800b708:	2201      	movlt	r2, #1
 800b70a:	6032      	strlt	r2, [r6, #0]
 800b70c:	43bb      	bics	r3, r7
 800b70e:	d112      	bne.n	800b736 <_dtoa_r+0x9e>
 800b710:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b712:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b716:	6013      	str	r3, [r2, #0]
 800b718:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b71c:	4323      	orrs	r3, r4
 800b71e:	f000 854d 	beq.w	800c1bc <_dtoa_r+0xb24>
 800b722:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b724:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b97c <_dtoa_r+0x2e4>
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 854f 	beq.w	800c1cc <_dtoa_r+0xb34>
 800b72e:	f10a 0303 	add.w	r3, sl, #3
 800b732:	f000 bd49 	b.w	800c1c8 <_dtoa_r+0xb30>
 800b736:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b73a:	2200      	movs	r2, #0
 800b73c:	ec51 0b17 	vmov	r0, r1, d7
 800b740:	2300      	movs	r3, #0
 800b742:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b746:	f7f5 f9f7 	bl	8000b38 <__aeabi_dcmpeq>
 800b74a:	4680      	mov	r8, r0
 800b74c:	b158      	cbz	r0, 800b766 <_dtoa_r+0xce>
 800b74e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b750:	2301      	movs	r3, #1
 800b752:	6013      	str	r3, [r2, #0]
 800b754:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b756:	b113      	cbz	r3, 800b75e <_dtoa_r+0xc6>
 800b758:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b75a:	4b84      	ldr	r3, [pc, #528]	@ (800b96c <_dtoa_r+0x2d4>)
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b980 <_dtoa_r+0x2e8>
 800b762:	f000 bd33 	b.w	800c1cc <_dtoa_r+0xb34>
 800b766:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b76a:	aa16      	add	r2, sp, #88	@ 0x58
 800b76c:	a917      	add	r1, sp, #92	@ 0x5c
 800b76e:	4658      	mov	r0, fp
 800b770:	f001 f980 	bl	800ca74 <__d2b>
 800b774:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b778:	4681      	mov	r9, r0
 800b77a:	2e00      	cmp	r6, #0
 800b77c:	d077      	beq.n	800b86e <_dtoa_r+0x1d6>
 800b77e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b780:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b78c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b790:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b794:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b798:	4619      	mov	r1, r3
 800b79a:	2200      	movs	r2, #0
 800b79c:	4b74      	ldr	r3, [pc, #464]	@ (800b970 <_dtoa_r+0x2d8>)
 800b79e:	f7f4 fdab 	bl	80002f8 <__aeabi_dsub>
 800b7a2:	a369      	add	r3, pc, #420	@ (adr r3, 800b948 <_dtoa_r+0x2b0>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f7f4 ff5e 	bl	8000668 <__aeabi_dmul>
 800b7ac:	a368      	add	r3, pc, #416	@ (adr r3, 800b950 <_dtoa_r+0x2b8>)
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	f7f4 fda3 	bl	80002fc <__adddf3>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	f7f4 feea 	bl	8000594 <__aeabi_i2d>
 800b7c0:	a365      	add	r3, pc, #404	@ (adr r3, 800b958 <_dtoa_r+0x2c0>)
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f7f4 ff4f 	bl	8000668 <__aeabi_dmul>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	f7f4 fd93 	bl	80002fc <__adddf3>
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	460d      	mov	r5, r1
 800b7da:	f7f5 f9f5 	bl	8000bc8 <__aeabi_d2iz>
 800b7de:	2200      	movs	r2, #0
 800b7e0:	4607      	mov	r7, r0
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	f7f5 f9b0 	bl	8000b4c <__aeabi_dcmplt>
 800b7ec:	b140      	cbz	r0, 800b800 <_dtoa_r+0x168>
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	f7f4 fed0 	bl	8000594 <__aeabi_i2d>
 800b7f4:	4622      	mov	r2, r4
 800b7f6:	462b      	mov	r3, r5
 800b7f8:	f7f5 f99e 	bl	8000b38 <__aeabi_dcmpeq>
 800b7fc:	b900      	cbnz	r0, 800b800 <_dtoa_r+0x168>
 800b7fe:	3f01      	subs	r7, #1
 800b800:	2f16      	cmp	r7, #22
 800b802:	d851      	bhi.n	800b8a8 <_dtoa_r+0x210>
 800b804:	4b5b      	ldr	r3, [pc, #364]	@ (800b974 <_dtoa_r+0x2dc>)
 800b806:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b812:	f7f5 f99b 	bl	8000b4c <__aeabi_dcmplt>
 800b816:	2800      	cmp	r0, #0
 800b818:	d048      	beq.n	800b8ac <_dtoa_r+0x214>
 800b81a:	3f01      	subs	r7, #1
 800b81c:	2300      	movs	r3, #0
 800b81e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b820:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b822:	1b9b      	subs	r3, r3, r6
 800b824:	1e5a      	subs	r2, r3, #1
 800b826:	bf44      	itt	mi
 800b828:	f1c3 0801 	rsbmi	r8, r3, #1
 800b82c:	2300      	movmi	r3, #0
 800b82e:	9208      	str	r2, [sp, #32]
 800b830:	bf54      	ite	pl
 800b832:	f04f 0800 	movpl.w	r8, #0
 800b836:	9308      	strmi	r3, [sp, #32]
 800b838:	2f00      	cmp	r7, #0
 800b83a:	db39      	blt.n	800b8b0 <_dtoa_r+0x218>
 800b83c:	9b08      	ldr	r3, [sp, #32]
 800b83e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b840:	443b      	add	r3, r7
 800b842:	9308      	str	r3, [sp, #32]
 800b844:	2300      	movs	r3, #0
 800b846:	930a      	str	r3, [sp, #40]	@ 0x28
 800b848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b84a:	2b09      	cmp	r3, #9
 800b84c:	d864      	bhi.n	800b918 <_dtoa_r+0x280>
 800b84e:	2b05      	cmp	r3, #5
 800b850:	bfc4      	itt	gt
 800b852:	3b04      	subgt	r3, #4
 800b854:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b858:	f1a3 0302 	sub.w	r3, r3, #2
 800b85c:	bfcc      	ite	gt
 800b85e:	2400      	movgt	r4, #0
 800b860:	2401      	movle	r4, #1
 800b862:	2b03      	cmp	r3, #3
 800b864:	d863      	bhi.n	800b92e <_dtoa_r+0x296>
 800b866:	e8df f003 	tbb	[pc, r3]
 800b86a:	372a      	.short	0x372a
 800b86c:	5535      	.short	0x5535
 800b86e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b872:	441e      	add	r6, r3
 800b874:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b878:	2b20      	cmp	r3, #32
 800b87a:	bfc1      	itttt	gt
 800b87c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b880:	409f      	lslgt	r7, r3
 800b882:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b886:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b88a:	bfd6      	itet	le
 800b88c:	f1c3 0320 	rsble	r3, r3, #32
 800b890:	ea47 0003 	orrgt.w	r0, r7, r3
 800b894:	fa04 f003 	lslle.w	r0, r4, r3
 800b898:	f7f4 fe6c 	bl	8000574 <__aeabi_ui2d>
 800b89c:	2201      	movs	r2, #1
 800b89e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b8a2:	3e01      	subs	r6, #1
 800b8a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b8a6:	e777      	b.n	800b798 <_dtoa_r+0x100>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e7b8      	b.n	800b81e <_dtoa_r+0x186>
 800b8ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800b8ae:	e7b7      	b.n	800b820 <_dtoa_r+0x188>
 800b8b0:	427b      	negs	r3, r7
 800b8b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	eba8 0807 	sub.w	r8, r8, r7
 800b8ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8bc:	e7c4      	b.n	800b848 <_dtoa_r+0x1b0>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	dc35      	bgt.n	800b934 <_dtoa_r+0x29c>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	9307      	str	r3, [sp, #28]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8d2:	e00b      	b.n	800b8ec <_dtoa_r+0x254>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e7f3      	b.n	800b8c0 <_dtoa_r+0x228>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8de:	18fb      	adds	r3, r7, r3
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	9307      	str	r3, [sp, #28]
 800b8e8:	bfb8      	it	lt
 800b8ea:	2301      	movlt	r3, #1
 800b8ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	2204      	movs	r2, #4
 800b8f4:	f102 0514 	add.w	r5, r2, #20
 800b8f8:	429d      	cmp	r5, r3
 800b8fa:	d91f      	bls.n	800b93c <_dtoa_r+0x2a4>
 800b8fc:	6041      	str	r1, [r0, #4]
 800b8fe:	4658      	mov	r0, fp
 800b900:	f000 fd8e 	bl	800c420 <_Balloc>
 800b904:	4682      	mov	sl, r0
 800b906:	2800      	cmp	r0, #0
 800b908:	d13c      	bne.n	800b984 <_dtoa_r+0x2ec>
 800b90a:	4b1b      	ldr	r3, [pc, #108]	@ (800b978 <_dtoa_r+0x2e0>)
 800b90c:	4602      	mov	r2, r0
 800b90e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b912:	e6d8      	b.n	800b6c6 <_dtoa_r+0x2e>
 800b914:	2301      	movs	r3, #1
 800b916:	e7e0      	b.n	800b8da <_dtoa_r+0x242>
 800b918:	2401      	movs	r4, #1
 800b91a:	2300      	movs	r3, #0
 800b91c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b91e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b920:	f04f 33ff 	mov.w	r3, #4294967295
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	9307      	str	r3, [sp, #28]
 800b928:	2200      	movs	r2, #0
 800b92a:	2312      	movs	r3, #18
 800b92c:	e7d0      	b.n	800b8d0 <_dtoa_r+0x238>
 800b92e:	2301      	movs	r3, #1
 800b930:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b932:	e7f5      	b.n	800b920 <_dtoa_r+0x288>
 800b934:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	9307      	str	r3, [sp, #28]
 800b93a:	e7d7      	b.n	800b8ec <_dtoa_r+0x254>
 800b93c:	3101      	adds	r1, #1
 800b93e:	0052      	lsls	r2, r2, #1
 800b940:	e7d8      	b.n	800b8f4 <_dtoa_r+0x25c>
 800b942:	bf00      	nop
 800b944:	f3af 8000 	nop.w
 800b948:	636f4361 	.word	0x636f4361
 800b94c:	3fd287a7 	.word	0x3fd287a7
 800b950:	8b60c8b3 	.word	0x8b60c8b3
 800b954:	3fc68a28 	.word	0x3fc68a28
 800b958:	509f79fb 	.word	0x509f79fb
 800b95c:	3fd34413 	.word	0x3fd34413
 800b960:	0800da85 	.word	0x0800da85
 800b964:	0800db3f 	.word	0x0800db3f
 800b968:	7ff00000 	.word	0x7ff00000
 800b96c:	0800da62 	.word	0x0800da62
 800b970:	3ff80000 	.word	0x3ff80000
 800b974:	0800dc38 	.word	0x0800dc38
 800b978:	0800db97 	.word	0x0800db97
 800b97c:	0800db3b 	.word	0x0800db3b
 800b980:	0800da61 	.word	0x0800da61
 800b984:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b988:	6018      	str	r0, [r3, #0]
 800b98a:	9b07      	ldr	r3, [sp, #28]
 800b98c:	2b0e      	cmp	r3, #14
 800b98e:	f200 80a4 	bhi.w	800bada <_dtoa_r+0x442>
 800b992:	2c00      	cmp	r4, #0
 800b994:	f000 80a1 	beq.w	800bada <_dtoa_r+0x442>
 800b998:	2f00      	cmp	r7, #0
 800b99a:	dd33      	ble.n	800ba04 <_dtoa_r+0x36c>
 800b99c:	4bad      	ldr	r3, [pc, #692]	@ (800bc54 <_dtoa_r+0x5bc>)
 800b99e:	f007 020f 	and.w	r2, r7, #15
 800b9a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9a6:	ed93 7b00 	vldr	d7, [r3]
 800b9aa:	05f8      	lsls	r0, r7, #23
 800b9ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b9b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b9b4:	d516      	bpl.n	800b9e4 <_dtoa_r+0x34c>
 800b9b6:	4ba8      	ldr	r3, [pc, #672]	@ (800bc58 <_dtoa_r+0x5c0>)
 800b9b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9c0:	f7f4 ff7c 	bl	80008bc <__aeabi_ddiv>
 800b9c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9c8:	f004 040f 	and.w	r4, r4, #15
 800b9cc:	2603      	movs	r6, #3
 800b9ce:	4da2      	ldr	r5, [pc, #648]	@ (800bc58 <_dtoa_r+0x5c0>)
 800b9d0:	b954      	cbnz	r4, 800b9e8 <_dtoa_r+0x350>
 800b9d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9da:	f7f4 ff6f 	bl	80008bc <__aeabi_ddiv>
 800b9de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e2:	e028      	b.n	800ba36 <_dtoa_r+0x39e>
 800b9e4:	2602      	movs	r6, #2
 800b9e6:	e7f2      	b.n	800b9ce <_dtoa_r+0x336>
 800b9e8:	07e1      	lsls	r1, r4, #31
 800b9ea:	d508      	bpl.n	800b9fe <_dtoa_r+0x366>
 800b9ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9f4:	f7f4 fe38 	bl	8000668 <__aeabi_dmul>
 800b9f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9fc:	3601      	adds	r6, #1
 800b9fe:	1064      	asrs	r4, r4, #1
 800ba00:	3508      	adds	r5, #8
 800ba02:	e7e5      	b.n	800b9d0 <_dtoa_r+0x338>
 800ba04:	f000 80d2 	beq.w	800bbac <_dtoa_r+0x514>
 800ba08:	427c      	negs	r4, r7
 800ba0a:	4b92      	ldr	r3, [pc, #584]	@ (800bc54 <_dtoa_r+0x5bc>)
 800ba0c:	4d92      	ldr	r5, [pc, #584]	@ (800bc58 <_dtoa_r+0x5c0>)
 800ba0e:	f004 020f 	and.w	r2, r4, #15
 800ba12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba1e:	f7f4 fe23 	bl	8000668 <__aeabi_dmul>
 800ba22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba26:	1124      	asrs	r4, r4, #4
 800ba28:	2300      	movs	r3, #0
 800ba2a:	2602      	movs	r6, #2
 800ba2c:	2c00      	cmp	r4, #0
 800ba2e:	f040 80b2 	bne.w	800bb96 <_dtoa_r+0x4fe>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1d3      	bne.n	800b9de <_dtoa_r+0x346>
 800ba36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 80b7 	beq.w	800bbb0 <_dtoa_r+0x518>
 800ba42:	4b86      	ldr	r3, [pc, #536]	@ (800bc5c <_dtoa_r+0x5c4>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	4620      	mov	r0, r4
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7f5 f87f 	bl	8000b4c <__aeabi_dcmplt>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f000 80ae 	beq.w	800bbb0 <_dtoa_r+0x518>
 800ba54:	9b07      	ldr	r3, [sp, #28]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 80aa 	beq.w	800bbb0 <_dtoa_r+0x518>
 800ba5c:	9b00      	ldr	r3, [sp, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	dd37      	ble.n	800bad2 <_dtoa_r+0x43a>
 800ba62:	1e7b      	subs	r3, r7, #1
 800ba64:	9304      	str	r3, [sp, #16]
 800ba66:	4620      	mov	r0, r4
 800ba68:	4b7d      	ldr	r3, [pc, #500]	@ (800bc60 <_dtoa_r+0x5c8>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	f7f4 fdfb 	bl	8000668 <__aeabi_dmul>
 800ba72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba76:	9c00      	ldr	r4, [sp, #0]
 800ba78:	3601      	adds	r6, #1
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f7f4 fd8a 	bl	8000594 <__aeabi_i2d>
 800ba80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba84:	f7f4 fdf0 	bl	8000668 <__aeabi_dmul>
 800ba88:	4b76      	ldr	r3, [pc, #472]	@ (800bc64 <_dtoa_r+0x5cc>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f7f4 fc36 	bl	80002fc <__adddf3>
 800ba90:	4605      	mov	r5, r0
 800ba92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba96:	2c00      	cmp	r4, #0
 800ba98:	f040 808d 	bne.w	800bbb6 <_dtoa_r+0x51e>
 800ba9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baa0:	4b71      	ldr	r3, [pc, #452]	@ (800bc68 <_dtoa_r+0x5d0>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	f7f4 fc28 	bl	80002f8 <__aeabi_dsub>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bab0:	462a      	mov	r2, r5
 800bab2:	4633      	mov	r3, r6
 800bab4:	f7f5 f868 	bl	8000b88 <__aeabi_dcmpgt>
 800bab8:	2800      	cmp	r0, #0
 800baba:	f040 828b 	bne.w	800bfd4 <_dtoa_r+0x93c>
 800babe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac2:	462a      	mov	r2, r5
 800bac4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bac8:	f7f5 f840 	bl	8000b4c <__aeabi_dcmplt>
 800bacc:	2800      	cmp	r0, #0
 800bace:	f040 8128 	bne.w	800bd22 <_dtoa_r+0x68a>
 800bad2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bad6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bada:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800badc:	2b00      	cmp	r3, #0
 800bade:	f2c0 815a 	blt.w	800bd96 <_dtoa_r+0x6fe>
 800bae2:	2f0e      	cmp	r7, #14
 800bae4:	f300 8157 	bgt.w	800bd96 <_dtoa_r+0x6fe>
 800bae8:	4b5a      	ldr	r3, [pc, #360]	@ (800bc54 <_dtoa_r+0x5bc>)
 800baea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800baee:	ed93 7b00 	vldr	d7, [r3]
 800baf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	ed8d 7b00 	vstr	d7, [sp]
 800bafa:	da03      	bge.n	800bb04 <_dtoa_r+0x46c>
 800bafc:	9b07      	ldr	r3, [sp, #28]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f340 8101 	ble.w	800bd06 <_dtoa_r+0x66e>
 800bb04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb08:	4656      	mov	r6, sl
 800bb0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb0e:	4620      	mov	r0, r4
 800bb10:	4629      	mov	r1, r5
 800bb12:	f7f4 fed3 	bl	80008bc <__aeabi_ddiv>
 800bb16:	f7f5 f857 	bl	8000bc8 <__aeabi_d2iz>
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	f7f4 fd3a 	bl	8000594 <__aeabi_i2d>
 800bb20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb24:	f7f4 fda0 	bl	8000668 <__aeabi_dmul>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	4629      	mov	r1, r5
 800bb30:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bb34:	f7f4 fbe0 	bl	80002f8 <__aeabi_dsub>
 800bb38:	f806 4b01 	strb.w	r4, [r6], #1
 800bb3c:	9d07      	ldr	r5, [sp, #28]
 800bb3e:	eba6 040a 	sub.w	r4, r6, sl
 800bb42:	42a5      	cmp	r5, r4
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	f040 8117 	bne.w	800bd7a <_dtoa_r+0x6e2>
 800bb4c:	f7f4 fbd6 	bl	80002fc <__adddf3>
 800bb50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb54:	4604      	mov	r4, r0
 800bb56:	460d      	mov	r5, r1
 800bb58:	f7f5 f816 	bl	8000b88 <__aeabi_dcmpgt>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f040 80f9 	bne.w	800bd54 <_dtoa_r+0x6bc>
 800bb62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb66:	4620      	mov	r0, r4
 800bb68:	4629      	mov	r1, r5
 800bb6a:	f7f4 ffe5 	bl	8000b38 <__aeabi_dcmpeq>
 800bb6e:	b118      	cbz	r0, 800bb78 <_dtoa_r+0x4e0>
 800bb70:	f018 0f01 	tst.w	r8, #1
 800bb74:	f040 80ee 	bne.w	800bd54 <_dtoa_r+0x6bc>
 800bb78:	4649      	mov	r1, r9
 800bb7a:	4658      	mov	r0, fp
 800bb7c:	f000 fc90 	bl	800c4a0 <_Bfree>
 800bb80:	2300      	movs	r3, #0
 800bb82:	7033      	strb	r3, [r6, #0]
 800bb84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb86:	3701      	adds	r7, #1
 800bb88:	601f      	str	r7, [r3, #0]
 800bb8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 831d 	beq.w	800c1cc <_dtoa_r+0xb34>
 800bb92:	601e      	str	r6, [r3, #0]
 800bb94:	e31a      	b.n	800c1cc <_dtoa_r+0xb34>
 800bb96:	07e2      	lsls	r2, r4, #31
 800bb98:	d505      	bpl.n	800bba6 <_dtoa_r+0x50e>
 800bb9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb9e:	f7f4 fd63 	bl	8000668 <__aeabi_dmul>
 800bba2:	3601      	adds	r6, #1
 800bba4:	2301      	movs	r3, #1
 800bba6:	1064      	asrs	r4, r4, #1
 800bba8:	3508      	adds	r5, #8
 800bbaa:	e73f      	b.n	800ba2c <_dtoa_r+0x394>
 800bbac:	2602      	movs	r6, #2
 800bbae:	e742      	b.n	800ba36 <_dtoa_r+0x39e>
 800bbb0:	9c07      	ldr	r4, [sp, #28]
 800bbb2:	9704      	str	r7, [sp, #16]
 800bbb4:	e761      	b.n	800ba7a <_dtoa_r+0x3e2>
 800bbb6:	4b27      	ldr	r3, [pc, #156]	@ (800bc54 <_dtoa_r+0x5bc>)
 800bbb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bbbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbc2:	4454      	add	r4, sl
 800bbc4:	2900      	cmp	r1, #0
 800bbc6:	d053      	beq.n	800bc70 <_dtoa_r+0x5d8>
 800bbc8:	4928      	ldr	r1, [pc, #160]	@ (800bc6c <_dtoa_r+0x5d4>)
 800bbca:	2000      	movs	r0, #0
 800bbcc:	f7f4 fe76 	bl	80008bc <__aeabi_ddiv>
 800bbd0:	4633      	mov	r3, r6
 800bbd2:	462a      	mov	r2, r5
 800bbd4:	f7f4 fb90 	bl	80002f8 <__aeabi_dsub>
 800bbd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbdc:	4656      	mov	r6, sl
 800bbde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbe2:	f7f4 fff1 	bl	8000bc8 <__aeabi_d2iz>
 800bbe6:	4605      	mov	r5, r0
 800bbe8:	f7f4 fcd4 	bl	8000594 <__aeabi_i2d>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf4:	f7f4 fb80 	bl	80002f8 <__aeabi_dsub>
 800bbf8:	3530      	adds	r5, #48	@ 0x30
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc02:	f806 5b01 	strb.w	r5, [r6], #1
 800bc06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc0a:	f7f4 ff9f 	bl	8000b4c <__aeabi_dcmplt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d171      	bne.n	800bcf6 <_dtoa_r+0x65e>
 800bc12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc16:	4911      	ldr	r1, [pc, #68]	@ (800bc5c <_dtoa_r+0x5c4>)
 800bc18:	2000      	movs	r0, #0
 800bc1a:	f7f4 fb6d 	bl	80002f8 <__aeabi_dsub>
 800bc1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc22:	f7f4 ff93 	bl	8000b4c <__aeabi_dcmplt>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f040 8095 	bne.w	800bd56 <_dtoa_r+0x6be>
 800bc2c:	42a6      	cmp	r6, r4
 800bc2e:	f43f af50 	beq.w	800bad2 <_dtoa_r+0x43a>
 800bc32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc36:	4b0a      	ldr	r3, [pc, #40]	@ (800bc60 <_dtoa_r+0x5c8>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f7f4 fd15 	bl	8000668 <__aeabi_dmul>
 800bc3e:	4b08      	ldr	r3, [pc, #32]	@ (800bc60 <_dtoa_r+0x5c8>)
 800bc40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc44:	2200      	movs	r2, #0
 800bc46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc4a:	f7f4 fd0d 	bl	8000668 <__aeabi_dmul>
 800bc4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc52:	e7c4      	b.n	800bbde <_dtoa_r+0x546>
 800bc54:	0800dc38 	.word	0x0800dc38
 800bc58:	0800dc10 	.word	0x0800dc10
 800bc5c:	3ff00000 	.word	0x3ff00000
 800bc60:	40240000 	.word	0x40240000
 800bc64:	401c0000 	.word	0x401c0000
 800bc68:	40140000 	.word	0x40140000
 800bc6c:	3fe00000 	.word	0x3fe00000
 800bc70:	4631      	mov	r1, r6
 800bc72:	4628      	mov	r0, r5
 800bc74:	f7f4 fcf8 	bl	8000668 <__aeabi_dmul>
 800bc78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc7c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bc7e:	4656      	mov	r6, sl
 800bc80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc84:	f7f4 ffa0 	bl	8000bc8 <__aeabi_d2iz>
 800bc88:	4605      	mov	r5, r0
 800bc8a:	f7f4 fc83 	bl	8000594 <__aeabi_i2d>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	460b      	mov	r3, r1
 800bc92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc96:	f7f4 fb2f 	bl	80002f8 <__aeabi_dsub>
 800bc9a:	3530      	adds	r5, #48	@ 0x30
 800bc9c:	f806 5b01 	strb.w	r5, [r6], #1
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	42a6      	cmp	r6, r4
 800bca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcaa:	f04f 0200 	mov.w	r2, #0
 800bcae:	d124      	bne.n	800bcfa <_dtoa_r+0x662>
 800bcb0:	4bac      	ldr	r3, [pc, #688]	@ (800bf64 <_dtoa_r+0x8cc>)
 800bcb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcb6:	f7f4 fb21 	bl	80002fc <__adddf3>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc2:	f7f4 ff61 	bl	8000b88 <__aeabi_dcmpgt>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d145      	bne.n	800bd56 <_dtoa_r+0x6be>
 800bcca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcce:	49a5      	ldr	r1, [pc, #660]	@ (800bf64 <_dtoa_r+0x8cc>)
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	f7f4 fb11 	bl	80002f8 <__aeabi_dsub>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcde:	f7f4 ff35 	bl	8000b4c <__aeabi_dcmplt>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	f43f aef5 	beq.w	800bad2 <_dtoa_r+0x43a>
 800bce8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bcea:	1e73      	subs	r3, r6, #1
 800bcec:	9315      	str	r3, [sp, #84]	@ 0x54
 800bcee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bcf2:	2b30      	cmp	r3, #48	@ 0x30
 800bcf4:	d0f8      	beq.n	800bce8 <_dtoa_r+0x650>
 800bcf6:	9f04      	ldr	r7, [sp, #16]
 800bcf8:	e73e      	b.n	800bb78 <_dtoa_r+0x4e0>
 800bcfa:	4b9b      	ldr	r3, [pc, #620]	@ (800bf68 <_dtoa_r+0x8d0>)
 800bcfc:	f7f4 fcb4 	bl	8000668 <__aeabi_dmul>
 800bd00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd04:	e7bc      	b.n	800bc80 <_dtoa_r+0x5e8>
 800bd06:	d10c      	bne.n	800bd22 <_dtoa_r+0x68a>
 800bd08:	4b98      	ldr	r3, [pc, #608]	@ (800bf6c <_dtoa_r+0x8d4>)
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd10:	f7f4 fcaa 	bl	8000668 <__aeabi_dmul>
 800bd14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd18:	f7f4 ff2c 	bl	8000b74 <__aeabi_dcmpge>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	f000 8157 	beq.w	800bfd0 <_dtoa_r+0x938>
 800bd22:	2400      	movs	r4, #0
 800bd24:	4625      	mov	r5, r4
 800bd26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd28:	43db      	mvns	r3, r3
 800bd2a:	9304      	str	r3, [sp, #16]
 800bd2c:	4656      	mov	r6, sl
 800bd2e:	2700      	movs	r7, #0
 800bd30:	4621      	mov	r1, r4
 800bd32:	4658      	mov	r0, fp
 800bd34:	f000 fbb4 	bl	800c4a0 <_Bfree>
 800bd38:	2d00      	cmp	r5, #0
 800bd3a:	d0dc      	beq.n	800bcf6 <_dtoa_r+0x65e>
 800bd3c:	b12f      	cbz	r7, 800bd4a <_dtoa_r+0x6b2>
 800bd3e:	42af      	cmp	r7, r5
 800bd40:	d003      	beq.n	800bd4a <_dtoa_r+0x6b2>
 800bd42:	4639      	mov	r1, r7
 800bd44:	4658      	mov	r0, fp
 800bd46:	f000 fbab 	bl	800c4a0 <_Bfree>
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	4658      	mov	r0, fp
 800bd4e:	f000 fba7 	bl	800c4a0 <_Bfree>
 800bd52:	e7d0      	b.n	800bcf6 <_dtoa_r+0x65e>
 800bd54:	9704      	str	r7, [sp, #16]
 800bd56:	4633      	mov	r3, r6
 800bd58:	461e      	mov	r6, r3
 800bd5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd5e:	2a39      	cmp	r2, #57	@ 0x39
 800bd60:	d107      	bne.n	800bd72 <_dtoa_r+0x6da>
 800bd62:	459a      	cmp	sl, r3
 800bd64:	d1f8      	bne.n	800bd58 <_dtoa_r+0x6c0>
 800bd66:	9a04      	ldr	r2, [sp, #16]
 800bd68:	3201      	adds	r2, #1
 800bd6a:	9204      	str	r2, [sp, #16]
 800bd6c:	2230      	movs	r2, #48	@ 0x30
 800bd6e:	f88a 2000 	strb.w	r2, [sl]
 800bd72:	781a      	ldrb	r2, [r3, #0]
 800bd74:	3201      	adds	r2, #1
 800bd76:	701a      	strb	r2, [r3, #0]
 800bd78:	e7bd      	b.n	800bcf6 <_dtoa_r+0x65e>
 800bd7a:	4b7b      	ldr	r3, [pc, #492]	@ (800bf68 <_dtoa_r+0x8d0>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f7f4 fc73 	bl	8000668 <__aeabi_dmul>
 800bd82:	2200      	movs	r2, #0
 800bd84:	2300      	movs	r3, #0
 800bd86:	4604      	mov	r4, r0
 800bd88:	460d      	mov	r5, r1
 800bd8a:	f7f4 fed5 	bl	8000b38 <__aeabi_dcmpeq>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f43f aebb 	beq.w	800bb0a <_dtoa_r+0x472>
 800bd94:	e6f0      	b.n	800bb78 <_dtoa_r+0x4e0>
 800bd96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd98:	2a00      	cmp	r2, #0
 800bd9a:	f000 80db 	beq.w	800bf54 <_dtoa_r+0x8bc>
 800bd9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bda0:	2a01      	cmp	r2, #1
 800bda2:	f300 80bf 	bgt.w	800bf24 <_dtoa_r+0x88c>
 800bda6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bda8:	2a00      	cmp	r2, #0
 800bdaa:	f000 80b7 	beq.w	800bf1c <_dtoa_r+0x884>
 800bdae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bdb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bdb4:	4646      	mov	r6, r8
 800bdb6:	9a08      	ldr	r2, [sp, #32]
 800bdb8:	2101      	movs	r1, #1
 800bdba:	441a      	add	r2, r3
 800bdbc:	4658      	mov	r0, fp
 800bdbe:	4498      	add	r8, r3
 800bdc0:	9208      	str	r2, [sp, #32]
 800bdc2:	f000 fc21 	bl	800c608 <__i2b>
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	b15e      	cbz	r6, 800bde2 <_dtoa_r+0x74a>
 800bdca:	9b08      	ldr	r3, [sp, #32]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	dd08      	ble.n	800bde2 <_dtoa_r+0x74a>
 800bdd0:	42b3      	cmp	r3, r6
 800bdd2:	9a08      	ldr	r2, [sp, #32]
 800bdd4:	bfa8      	it	ge
 800bdd6:	4633      	movge	r3, r6
 800bdd8:	eba8 0803 	sub.w	r8, r8, r3
 800bddc:	1af6      	subs	r6, r6, r3
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	9308      	str	r3, [sp, #32]
 800bde2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bde4:	b1f3      	cbz	r3, 800be24 <_dtoa_r+0x78c>
 800bde6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f000 80b7 	beq.w	800bf5c <_dtoa_r+0x8c4>
 800bdee:	b18c      	cbz	r4, 800be14 <_dtoa_r+0x77c>
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	4658      	mov	r0, fp
 800bdf6:	f000 fcc7 	bl	800c788 <__pow5mult>
 800bdfa:	464a      	mov	r2, r9
 800bdfc:	4601      	mov	r1, r0
 800bdfe:	4605      	mov	r5, r0
 800be00:	4658      	mov	r0, fp
 800be02:	f000 fc17 	bl	800c634 <__multiply>
 800be06:	4649      	mov	r1, r9
 800be08:	9004      	str	r0, [sp, #16]
 800be0a:	4658      	mov	r0, fp
 800be0c:	f000 fb48 	bl	800c4a0 <_Bfree>
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	4699      	mov	r9, r3
 800be14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be16:	1b1a      	subs	r2, r3, r4
 800be18:	d004      	beq.n	800be24 <_dtoa_r+0x78c>
 800be1a:	4649      	mov	r1, r9
 800be1c:	4658      	mov	r0, fp
 800be1e:	f000 fcb3 	bl	800c788 <__pow5mult>
 800be22:	4681      	mov	r9, r0
 800be24:	2101      	movs	r1, #1
 800be26:	4658      	mov	r0, fp
 800be28:	f000 fbee 	bl	800c608 <__i2b>
 800be2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be2e:	4604      	mov	r4, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 81cf 	beq.w	800c1d4 <_dtoa_r+0xb3c>
 800be36:	461a      	mov	r2, r3
 800be38:	4601      	mov	r1, r0
 800be3a:	4658      	mov	r0, fp
 800be3c:	f000 fca4 	bl	800c788 <__pow5mult>
 800be40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be42:	2b01      	cmp	r3, #1
 800be44:	4604      	mov	r4, r0
 800be46:	f300 8095 	bgt.w	800bf74 <_dtoa_r+0x8dc>
 800be4a:	9b02      	ldr	r3, [sp, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f040 8087 	bne.w	800bf60 <_dtoa_r+0x8c8>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f040 8089 	bne.w	800bf70 <_dtoa_r+0x8d8>
 800be5e:	9b03      	ldr	r3, [sp, #12]
 800be60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be64:	0d1b      	lsrs	r3, r3, #20
 800be66:	051b      	lsls	r3, r3, #20
 800be68:	b12b      	cbz	r3, 800be76 <_dtoa_r+0x7de>
 800be6a:	9b08      	ldr	r3, [sp, #32]
 800be6c:	3301      	adds	r3, #1
 800be6e:	9308      	str	r3, [sp, #32]
 800be70:	f108 0801 	add.w	r8, r8, #1
 800be74:	2301      	movs	r3, #1
 800be76:	930a      	str	r3, [sp, #40]	@ 0x28
 800be78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 81b0 	beq.w	800c1e0 <_dtoa_r+0xb48>
 800be80:	6923      	ldr	r3, [r4, #16]
 800be82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be86:	6918      	ldr	r0, [r3, #16]
 800be88:	f000 fb72 	bl	800c570 <__hi0bits>
 800be8c:	f1c0 0020 	rsb	r0, r0, #32
 800be90:	9b08      	ldr	r3, [sp, #32]
 800be92:	4418      	add	r0, r3
 800be94:	f010 001f 	ands.w	r0, r0, #31
 800be98:	d077      	beq.n	800bf8a <_dtoa_r+0x8f2>
 800be9a:	f1c0 0320 	rsb	r3, r0, #32
 800be9e:	2b04      	cmp	r3, #4
 800bea0:	dd6b      	ble.n	800bf7a <_dtoa_r+0x8e2>
 800bea2:	9b08      	ldr	r3, [sp, #32]
 800bea4:	f1c0 001c 	rsb	r0, r0, #28
 800bea8:	4403      	add	r3, r0
 800beaa:	4480      	add	r8, r0
 800beac:	4406      	add	r6, r0
 800beae:	9308      	str	r3, [sp, #32]
 800beb0:	f1b8 0f00 	cmp.w	r8, #0
 800beb4:	dd05      	ble.n	800bec2 <_dtoa_r+0x82a>
 800beb6:	4649      	mov	r1, r9
 800beb8:	4642      	mov	r2, r8
 800beba:	4658      	mov	r0, fp
 800bebc:	f000 fcbe 	bl	800c83c <__lshift>
 800bec0:	4681      	mov	r9, r0
 800bec2:	9b08      	ldr	r3, [sp, #32]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	dd05      	ble.n	800bed4 <_dtoa_r+0x83c>
 800bec8:	4621      	mov	r1, r4
 800beca:	461a      	mov	r2, r3
 800becc:	4658      	mov	r0, fp
 800bece:	f000 fcb5 	bl	800c83c <__lshift>
 800bed2:	4604      	mov	r4, r0
 800bed4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d059      	beq.n	800bf8e <_dtoa_r+0x8f6>
 800beda:	4621      	mov	r1, r4
 800bedc:	4648      	mov	r0, r9
 800bede:	f000 fd19 	bl	800c914 <__mcmp>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	da53      	bge.n	800bf8e <_dtoa_r+0x8f6>
 800bee6:	1e7b      	subs	r3, r7, #1
 800bee8:	9304      	str	r3, [sp, #16]
 800beea:	4649      	mov	r1, r9
 800beec:	2300      	movs	r3, #0
 800beee:	220a      	movs	r2, #10
 800bef0:	4658      	mov	r0, fp
 800bef2:	f000 faf7 	bl	800c4e4 <__multadd>
 800bef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bef8:	4681      	mov	r9, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 8172 	beq.w	800c1e4 <_dtoa_r+0xb4c>
 800bf00:	2300      	movs	r3, #0
 800bf02:	4629      	mov	r1, r5
 800bf04:	220a      	movs	r2, #10
 800bf06:	4658      	mov	r0, fp
 800bf08:	f000 faec 	bl	800c4e4 <__multadd>
 800bf0c:	9b00      	ldr	r3, [sp, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	4605      	mov	r5, r0
 800bf12:	dc67      	bgt.n	800bfe4 <_dtoa_r+0x94c>
 800bf14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	dc41      	bgt.n	800bf9e <_dtoa_r+0x906>
 800bf1a:	e063      	b.n	800bfe4 <_dtoa_r+0x94c>
 800bf1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bf22:	e746      	b.n	800bdb2 <_dtoa_r+0x71a>
 800bf24:	9b07      	ldr	r3, [sp, #28]
 800bf26:	1e5c      	subs	r4, r3, #1
 800bf28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf2a:	42a3      	cmp	r3, r4
 800bf2c:	bfbf      	itttt	lt
 800bf2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bf30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bf32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bf34:	1ae3      	sublt	r3, r4, r3
 800bf36:	bfb4      	ite	lt
 800bf38:	18d2      	addlt	r2, r2, r3
 800bf3a:	1b1c      	subge	r4, r3, r4
 800bf3c:	9b07      	ldr	r3, [sp, #28]
 800bf3e:	bfbc      	itt	lt
 800bf40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bf42:	2400      	movlt	r4, #0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	bfb5      	itete	lt
 800bf48:	eba8 0603 	sublt.w	r6, r8, r3
 800bf4c:	9b07      	ldrge	r3, [sp, #28]
 800bf4e:	2300      	movlt	r3, #0
 800bf50:	4646      	movge	r6, r8
 800bf52:	e730      	b.n	800bdb6 <_dtoa_r+0x71e>
 800bf54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf58:	4646      	mov	r6, r8
 800bf5a:	e735      	b.n	800bdc8 <_dtoa_r+0x730>
 800bf5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf5e:	e75c      	b.n	800be1a <_dtoa_r+0x782>
 800bf60:	2300      	movs	r3, #0
 800bf62:	e788      	b.n	800be76 <_dtoa_r+0x7de>
 800bf64:	3fe00000 	.word	0x3fe00000
 800bf68:	40240000 	.word	0x40240000
 800bf6c:	40140000 	.word	0x40140000
 800bf70:	9b02      	ldr	r3, [sp, #8]
 800bf72:	e780      	b.n	800be76 <_dtoa_r+0x7de>
 800bf74:	2300      	movs	r3, #0
 800bf76:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf78:	e782      	b.n	800be80 <_dtoa_r+0x7e8>
 800bf7a:	d099      	beq.n	800beb0 <_dtoa_r+0x818>
 800bf7c:	9a08      	ldr	r2, [sp, #32]
 800bf7e:	331c      	adds	r3, #28
 800bf80:	441a      	add	r2, r3
 800bf82:	4498      	add	r8, r3
 800bf84:	441e      	add	r6, r3
 800bf86:	9208      	str	r2, [sp, #32]
 800bf88:	e792      	b.n	800beb0 <_dtoa_r+0x818>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	e7f6      	b.n	800bf7c <_dtoa_r+0x8e4>
 800bf8e:	9b07      	ldr	r3, [sp, #28]
 800bf90:	9704      	str	r7, [sp, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	dc20      	bgt.n	800bfd8 <_dtoa_r+0x940>
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	dd1e      	ble.n	800bfdc <_dtoa_r+0x944>
 800bf9e:	9b00      	ldr	r3, [sp, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f47f aec0 	bne.w	800bd26 <_dtoa_r+0x68e>
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	2205      	movs	r2, #5
 800bfaa:	4658      	mov	r0, fp
 800bfac:	f000 fa9a 	bl	800c4e4 <__multadd>
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	4648      	mov	r0, r9
 800bfb6:	f000 fcad 	bl	800c914 <__mcmp>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	f77f aeb3 	ble.w	800bd26 <_dtoa_r+0x68e>
 800bfc0:	4656      	mov	r6, sl
 800bfc2:	2331      	movs	r3, #49	@ 0x31
 800bfc4:	f806 3b01 	strb.w	r3, [r6], #1
 800bfc8:	9b04      	ldr	r3, [sp, #16]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	9304      	str	r3, [sp, #16]
 800bfce:	e6ae      	b.n	800bd2e <_dtoa_r+0x696>
 800bfd0:	9c07      	ldr	r4, [sp, #28]
 800bfd2:	9704      	str	r7, [sp, #16]
 800bfd4:	4625      	mov	r5, r4
 800bfd6:	e7f3      	b.n	800bfc0 <_dtoa_r+0x928>
 800bfd8:	9b07      	ldr	r3, [sp, #28]
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f000 8104 	beq.w	800c1ec <_dtoa_r+0xb54>
 800bfe4:	2e00      	cmp	r6, #0
 800bfe6:	dd05      	ble.n	800bff4 <_dtoa_r+0x95c>
 800bfe8:	4629      	mov	r1, r5
 800bfea:	4632      	mov	r2, r6
 800bfec:	4658      	mov	r0, fp
 800bfee:	f000 fc25 	bl	800c83c <__lshift>
 800bff2:	4605      	mov	r5, r0
 800bff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d05a      	beq.n	800c0b0 <_dtoa_r+0xa18>
 800bffa:	6869      	ldr	r1, [r5, #4]
 800bffc:	4658      	mov	r0, fp
 800bffe:	f000 fa0f 	bl	800c420 <_Balloc>
 800c002:	4606      	mov	r6, r0
 800c004:	b928      	cbnz	r0, 800c012 <_dtoa_r+0x97a>
 800c006:	4b84      	ldr	r3, [pc, #528]	@ (800c218 <_dtoa_r+0xb80>)
 800c008:	4602      	mov	r2, r0
 800c00a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c00e:	f7ff bb5a 	b.w	800b6c6 <_dtoa_r+0x2e>
 800c012:	692a      	ldr	r2, [r5, #16]
 800c014:	3202      	adds	r2, #2
 800c016:	0092      	lsls	r2, r2, #2
 800c018:	f105 010c 	add.w	r1, r5, #12
 800c01c:	300c      	adds	r0, #12
 800c01e:	f000 ffc1 	bl	800cfa4 <memcpy>
 800c022:	2201      	movs	r2, #1
 800c024:	4631      	mov	r1, r6
 800c026:	4658      	mov	r0, fp
 800c028:	f000 fc08 	bl	800c83c <__lshift>
 800c02c:	f10a 0301 	add.w	r3, sl, #1
 800c030:	9307      	str	r3, [sp, #28]
 800c032:	9b00      	ldr	r3, [sp, #0]
 800c034:	4453      	add	r3, sl
 800c036:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c038:	9b02      	ldr	r3, [sp, #8]
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	462f      	mov	r7, r5
 800c040:	930a      	str	r3, [sp, #40]	@ 0x28
 800c042:	4605      	mov	r5, r0
 800c044:	9b07      	ldr	r3, [sp, #28]
 800c046:	4621      	mov	r1, r4
 800c048:	3b01      	subs	r3, #1
 800c04a:	4648      	mov	r0, r9
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	f7ff fa9b 	bl	800b588 <quorem>
 800c052:	4639      	mov	r1, r7
 800c054:	9002      	str	r0, [sp, #8]
 800c056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c05a:	4648      	mov	r0, r9
 800c05c:	f000 fc5a 	bl	800c914 <__mcmp>
 800c060:	462a      	mov	r2, r5
 800c062:	9008      	str	r0, [sp, #32]
 800c064:	4621      	mov	r1, r4
 800c066:	4658      	mov	r0, fp
 800c068:	f000 fc70 	bl	800c94c <__mdiff>
 800c06c:	68c2      	ldr	r2, [r0, #12]
 800c06e:	4606      	mov	r6, r0
 800c070:	bb02      	cbnz	r2, 800c0b4 <_dtoa_r+0xa1c>
 800c072:	4601      	mov	r1, r0
 800c074:	4648      	mov	r0, r9
 800c076:	f000 fc4d 	bl	800c914 <__mcmp>
 800c07a:	4602      	mov	r2, r0
 800c07c:	4631      	mov	r1, r6
 800c07e:	4658      	mov	r0, fp
 800c080:	920e      	str	r2, [sp, #56]	@ 0x38
 800c082:	f000 fa0d 	bl	800c4a0 <_Bfree>
 800c086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c088:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c08a:	9e07      	ldr	r6, [sp, #28]
 800c08c:	ea43 0102 	orr.w	r1, r3, r2
 800c090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c092:	4319      	orrs	r1, r3
 800c094:	d110      	bne.n	800c0b8 <_dtoa_r+0xa20>
 800c096:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c09a:	d029      	beq.n	800c0f0 <_dtoa_r+0xa58>
 800c09c:	9b08      	ldr	r3, [sp, #32]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	dd02      	ble.n	800c0a8 <_dtoa_r+0xa10>
 800c0a2:	9b02      	ldr	r3, [sp, #8]
 800c0a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c0a8:	9b00      	ldr	r3, [sp, #0]
 800c0aa:	f883 8000 	strb.w	r8, [r3]
 800c0ae:	e63f      	b.n	800bd30 <_dtoa_r+0x698>
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	e7bb      	b.n	800c02c <_dtoa_r+0x994>
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	e7e1      	b.n	800c07c <_dtoa_r+0x9e4>
 800c0b8:	9b08      	ldr	r3, [sp, #32]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	db04      	blt.n	800c0c8 <_dtoa_r+0xa30>
 800c0be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0c0:	430b      	orrs	r3, r1
 800c0c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0c4:	430b      	orrs	r3, r1
 800c0c6:	d120      	bne.n	800c10a <_dtoa_r+0xa72>
 800c0c8:	2a00      	cmp	r2, #0
 800c0ca:	dded      	ble.n	800c0a8 <_dtoa_r+0xa10>
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	4658      	mov	r0, fp
 800c0d2:	f000 fbb3 	bl	800c83c <__lshift>
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4681      	mov	r9, r0
 800c0da:	f000 fc1b 	bl	800c914 <__mcmp>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	dc03      	bgt.n	800c0ea <_dtoa_r+0xa52>
 800c0e2:	d1e1      	bne.n	800c0a8 <_dtoa_r+0xa10>
 800c0e4:	f018 0f01 	tst.w	r8, #1
 800c0e8:	d0de      	beq.n	800c0a8 <_dtoa_r+0xa10>
 800c0ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0ee:	d1d8      	bne.n	800c0a2 <_dtoa_r+0xa0a>
 800c0f0:	9a00      	ldr	r2, [sp, #0]
 800c0f2:	2339      	movs	r3, #57	@ 0x39
 800c0f4:	7013      	strb	r3, [r2, #0]
 800c0f6:	4633      	mov	r3, r6
 800c0f8:	461e      	mov	r6, r3
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c100:	2a39      	cmp	r2, #57	@ 0x39
 800c102:	d052      	beq.n	800c1aa <_dtoa_r+0xb12>
 800c104:	3201      	adds	r2, #1
 800c106:	701a      	strb	r2, [r3, #0]
 800c108:	e612      	b.n	800bd30 <_dtoa_r+0x698>
 800c10a:	2a00      	cmp	r2, #0
 800c10c:	dd07      	ble.n	800c11e <_dtoa_r+0xa86>
 800c10e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c112:	d0ed      	beq.n	800c0f0 <_dtoa_r+0xa58>
 800c114:	9a00      	ldr	r2, [sp, #0]
 800c116:	f108 0301 	add.w	r3, r8, #1
 800c11a:	7013      	strb	r3, [r2, #0]
 800c11c:	e608      	b.n	800bd30 <_dtoa_r+0x698>
 800c11e:	9b07      	ldr	r3, [sp, #28]
 800c120:	9a07      	ldr	r2, [sp, #28]
 800c122:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c128:	4293      	cmp	r3, r2
 800c12a:	d028      	beq.n	800c17e <_dtoa_r+0xae6>
 800c12c:	4649      	mov	r1, r9
 800c12e:	2300      	movs	r3, #0
 800c130:	220a      	movs	r2, #10
 800c132:	4658      	mov	r0, fp
 800c134:	f000 f9d6 	bl	800c4e4 <__multadd>
 800c138:	42af      	cmp	r7, r5
 800c13a:	4681      	mov	r9, r0
 800c13c:	f04f 0300 	mov.w	r3, #0
 800c140:	f04f 020a 	mov.w	r2, #10
 800c144:	4639      	mov	r1, r7
 800c146:	4658      	mov	r0, fp
 800c148:	d107      	bne.n	800c15a <_dtoa_r+0xac2>
 800c14a:	f000 f9cb 	bl	800c4e4 <__multadd>
 800c14e:	4607      	mov	r7, r0
 800c150:	4605      	mov	r5, r0
 800c152:	9b07      	ldr	r3, [sp, #28]
 800c154:	3301      	adds	r3, #1
 800c156:	9307      	str	r3, [sp, #28]
 800c158:	e774      	b.n	800c044 <_dtoa_r+0x9ac>
 800c15a:	f000 f9c3 	bl	800c4e4 <__multadd>
 800c15e:	4629      	mov	r1, r5
 800c160:	4607      	mov	r7, r0
 800c162:	2300      	movs	r3, #0
 800c164:	220a      	movs	r2, #10
 800c166:	4658      	mov	r0, fp
 800c168:	f000 f9bc 	bl	800c4e4 <__multadd>
 800c16c:	4605      	mov	r5, r0
 800c16e:	e7f0      	b.n	800c152 <_dtoa_r+0xaba>
 800c170:	9b00      	ldr	r3, [sp, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	bfcc      	ite	gt
 800c176:	461e      	movgt	r6, r3
 800c178:	2601      	movle	r6, #1
 800c17a:	4456      	add	r6, sl
 800c17c:	2700      	movs	r7, #0
 800c17e:	4649      	mov	r1, r9
 800c180:	2201      	movs	r2, #1
 800c182:	4658      	mov	r0, fp
 800c184:	f000 fb5a 	bl	800c83c <__lshift>
 800c188:	4621      	mov	r1, r4
 800c18a:	4681      	mov	r9, r0
 800c18c:	f000 fbc2 	bl	800c914 <__mcmp>
 800c190:	2800      	cmp	r0, #0
 800c192:	dcb0      	bgt.n	800c0f6 <_dtoa_r+0xa5e>
 800c194:	d102      	bne.n	800c19c <_dtoa_r+0xb04>
 800c196:	f018 0f01 	tst.w	r8, #1
 800c19a:	d1ac      	bne.n	800c0f6 <_dtoa_r+0xa5e>
 800c19c:	4633      	mov	r3, r6
 800c19e:	461e      	mov	r6, r3
 800c1a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1a4:	2a30      	cmp	r2, #48	@ 0x30
 800c1a6:	d0fa      	beq.n	800c19e <_dtoa_r+0xb06>
 800c1a8:	e5c2      	b.n	800bd30 <_dtoa_r+0x698>
 800c1aa:	459a      	cmp	sl, r3
 800c1ac:	d1a4      	bne.n	800c0f8 <_dtoa_r+0xa60>
 800c1ae:	9b04      	ldr	r3, [sp, #16]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	9304      	str	r3, [sp, #16]
 800c1b4:	2331      	movs	r3, #49	@ 0x31
 800c1b6:	f88a 3000 	strb.w	r3, [sl]
 800c1ba:	e5b9      	b.n	800bd30 <_dtoa_r+0x698>
 800c1bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c21c <_dtoa_r+0xb84>
 800c1c2:	b11b      	cbz	r3, 800c1cc <_dtoa_r+0xb34>
 800c1c4:	f10a 0308 	add.w	r3, sl, #8
 800c1c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c1ca:	6013      	str	r3, [r2, #0]
 800c1cc:	4650      	mov	r0, sl
 800c1ce:	b019      	add	sp, #100	@ 0x64
 800c1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	f77f ae37 	ble.w	800be4a <_dtoa_r+0x7b2>
 800c1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1de:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1e0:	2001      	movs	r0, #1
 800c1e2:	e655      	b.n	800be90 <_dtoa_r+0x7f8>
 800c1e4:	9b00      	ldr	r3, [sp, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f77f aed6 	ble.w	800bf98 <_dtoa_r+0x900>
 800c1ec:	4656      	mov	r6, sl
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	4648      	mov	r0, r9
 800c1f2:	f7ff f9c9 	bl	800b588 <quorem>
 800c1f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1fa:	f806 8b01 	strb.w	r8, [r6], #1
 800c1fe:	9b00      	ldr	r3, [sp, #0]
 800c200:	eba6 020a 	sub.w	r2, r6, sl
 800c204:	4293      	cmp	r3, r2
 800c206:	ddb3      	ble.n	800c170 <_dtoa_r+0xad8>
 800c208:	4649      	mov	r1, r9
 800c20a:	2300      	movs	r3, #0
 800c20c:	220a      	movs	r2, #10
 800c20e:	4658      	mov	r0, fp
 800c210:	f000 f968 	bl	800c4e4 <__multadd>
 800c214:	4681      	mov	r9, r0
 800c216:	e7ea      	b.n	800c1ee <_dtoa_r+0xb56>
 800c218:	0800db97 	.word	0x0800db97
 800c21c:	0800db32 	.word	0x0800db32

0800c220 <_free_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4605      	mov	r5, r0
 800c224:	2900      	cmp	r1, #0
 800c226:	d041      	beq.n	800c2ac <_free_r+0x8c>
 800c228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c22c:	1f0c      	subs	r4, r1, #4
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bfb8      	it	lt
 800c232:	18e4      	addlt	r4, r4, r3
 800c234:	f000 f8e8 	bl	800c408 <__malloc_lock>
 800c238:	4a1d      	ldr	r2, [pc, #116]	@ (800c2b0 <_free_r+0x90>)
 800c23a:	6813      	ldr	r3, [r2, #0]
 800c23c:	b933      	cbnz	r3, 800c24c <_free_r+0x2c>
 800c23e:	6063      	str	r3, [r4, #4]
 800c240:	6014      	str	r4, [r2, #0]
 800c242:	4628      	mov	r0, r5
 800c244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c248:	f000 b8e4 	b.w	800c414 <__malloc_unlock>
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	d908      	bls.n	800c262 <_free_r+0x42>
 800c250:	6820      	ldr	r0, [r4, #0]
 800c252:	1821      	adds	r1, r4, r0
 800c254:	428b      	cmp	r3, r1
 800c256:	bf01      	itttt	eq
 800c258:	6819      	ldreq	r1, [r3, #0]
 800c25a:	685b      	ldreq	r3, [r3, #4]
 800c25c:	1809      	addeq	r1, r1, r0
 800c25e:	6021      	streq	r1, [r4, #0]
 800c260:	e7ed      	b.n	800c23e <_free_r+0x1e>
 800c262:	461a      	mov	r2, r3
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	b10b      	cbz	r3, 800c26c <_free_r+0x4c>
 800c268:	42a3      	cmp	r3, r4
 800c26a:	d9fa      	bls.n	800c262 <_free_r+0x42>
 800c26c:	6811      	ldr	r1, [r2, #0]
 800c26e:	1850      	adds	r0, r2, r1
 800c270:	42a0      	cmp	r0, r4
 800c272:	d10b      	bne.n	800c28c <_free_r+0x6c>
 800c274:	6820      	ldr	r0, [r4, #0]
 800c276:	4401      	add	r1, r0
 800c278:	1850      	adds	r0, r2, r1
 800c27a:	4283      	cmp	r3, r0
 800c27c:	6011      	str	r1, [r2, #0]
 800c27e:	d1e0      	bne.n	800c242 <_free_r+0x22>
 800c280:	6818      	ldr	r0, [r3, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	6053      	str	r3, [r2, #4]
 800c286:	4408      	add	r0, r1
 800c288:	6010      	str	r0, [r2, #0]
 800c28a:	e7da      	b.n	800c242 <_free_r+0x22>
 800c28c:	d902      	bls.n	800c294 <_free_r+0x74>
 800c28e:	230c      	movs	r3, #12
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	e7d6      	b.n	800c242 <_free_r+0x22>
 800c294:	6820      	ldr	r0, [r4, #0]
 800c296:	1821      	adds	r1, r4, r0
 800c298:	428b      	cmp	r3, r1
 800c29a:	bf04      	itt	eq
 800c29c:	6819      	ldreq	r1, [r3, #0]
 800c29e:	685b      	ldreq	r3, [r3, #4]
 800c2a0:	6063      	str	r3, [r4, #4]
 800c2a2:	bf04      	itt	eq
 800c2a4:	1809      	addeq	r1, r1, r0
 800c2a6:	6021      	streq	r1, [r4, #0]
 800c2a8:	6054      	str	r4, [r2, #4]
 800c2aa:	e7ca      	b.n	800c242 <_free_r+0x22>
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
 800c2ae:	bf00      	nop
 800c2b0:	200008fc 	.word	0x200008fc

0800c2b4 <malloc>:
 800c2b4:	4b02      	ldr	r3, [pc, #8]	@ (800c2c0 <malloc+0xc>)
 800c2b6:	4601      	mov	r1, r0
 800c2b8:	6818      	ldr	r0, [r3, #0]
 800c2ba:	f000 b825 	b.w	800c308 <_malloc_r>
 800c2be:	bf00      	nop
 800c2c0:	200000e0 	.word	0x200000e0

0800c2c4 <sbrk_aligned>:
 800c2c4:	b570      	push	{r4, r5, r6, lr}
 800c2c6:	4e0f      	ldr	r6, [pc, #60]	@ (800c304 <sbrk_aligned+0x40>)
 800c2c8:	460c      	mov	r4, r1
 800c2ca:	6831      	ldr	r1, [r6, #0]
 800c2cc:	4605      	mov	r5, r0
 800c2ce:	b911      	cbnz	r1, 800c2d6 <sbrk_aligned+0x12>
 800c2d0:	f000 fe58 	bl	800cf84 <_sbrk_r>
 800c2d4:	6030      	str	r0, [r6, #0]
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	4628      	mov	r0, r5
 800c2da:	f000 fe53 	bl	800cf84 <_sbrk_r>
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	d103      	bne.n	800c2ea <sbrk_aligned+0x26>
 800c2e2:	f04f 34ff 	mov.w	r4, #4294967295
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	bd70      	pop	{r4, r5, r6, pc}
 800c2ea:	1cc4      	adds	r4, r0, #3
 800c2ec:	f024 0403 	bic.w	r4, r4, #3
 800c2f0:	42a0      	cmp	r0, r4
 800c2f2:	d0f8      	beq.n	800c2e6 <sbrk_aligned+0x22>
 800c2f4:	1a21      	subs	r1, r4, r0
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f000 fe44 	bl	800cf84 <_sbrk_r>
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	d1f2      	bne.n	800c2e6 <sbrk_aligned+0x22>
 800c300:	e7ef      	b.n	800c2e2 <sbrk_aligned+0x1e>
 800c302:	bf00      	nop
 800c304:	200008f8 	.word	0x200008f8

0800c308 <_malloc_r>:
 800c308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c30c:	1ccd      	adds	r5, r1, #3
 800c30e:	f025 0503 	bic.w	r5, r5, #3
 800c312:	3508      	adds	r5, #8
 800c314:	2d0c      	cmp	r5, #12
 800c316:	bf38      	it	cc
 800c318:	250c      	movcc	r5, #12
 800c31a:	2d00      	cmp	r5, #0
 800c31c:	4606      	mov	r6, r0
 800c31e:	db01      	blt.n	800c324 <_malloc_r+0x1c>
 800c320:	42a9      	cmp	r1, r5
 800c322:	d904      	bls.n	800c32e <_malloc_r+0x26>
 800c324:	230c      	movs	r3, #12
 800c326:	6033      	str	r3, [r6, #0]
 800c328:	2000      	movs	r0, #0
 800c32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c32e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c404 <_malloc_r+0xfc>
 800c332:	f000 f869 	bl	800c408 <__malloc_lock>
 800c336:	f8d8 3000 	ldr.w	r3, [r8]
 800c33a:	461c      	mov	r4, r3
 800c33c:	bb44      	cbnz	r4, 800c390 <_malloc_r+0x88>
 800c33e:	4629      	mov	r1, r5
 800c340:	4630      	mov	r0, r6
 800c342:	f7ff ffbf 	bl	800c2c4 <sbrk_aligned>
 800c346:	1c43      	adds	r3, r0, #1
 800c348:	4604      	mov	r4, r0
 800c34a:	d158      	bne.n	800c3fe <_malloc_r+0xf6>
 800c34c:	f8d8 4000 	ldr.w	r4, [r8]
 800c350:	4627      	mov	r7, r4
 800c352:	2f00      	cmp	r7, #0
 800c354:	d143      	bne.n	800c3de <_malloc_r+0xd6>
 800c356:	2c00      	cmp	r4, #0
 800c358:	d04b      	beq.n	800c3f2 <_malloc_r+0xea>
 800c35a:	6823      	ldr	r3, [r4, #0]
 800c35c:	4639      	mov	r1, r7
 800c35e:	4630      	mov	r0, r6
 800c360:	eb04 0903 	add.w	r9, r4, r3
 800c364:	f000 fe0e 	bl	800cf84 <_sbrk_r>
 800c368:	4581      	cmp	r9, r0
 800c36a:	d142      	bne.n	800c3f2 <_malloc_r+0xea>
 800c36c:	6821      	ldr	r1, [r4, #0]
 800c36e:	1a6d      	subs	r5, r5, r1
 800c370:	4629      	mov	r1, r5
 800c372:	4630      	mov	r0, r6
 800c374:	f7ff ffa6 	bl	800c2c4 <sbrk_aligned>
 800c378:	3001      	adds	r0, #1
 800c37a:	d03a      	beq.n	800c3f2 <_malloc_r+0xea>
 800c37c:	6823      	ldr	r3, [r4, #0]
 800c37e:	442b      	add	r3, r5
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	f8d8 3000 	ldr.w	r3, [r8]
 800c386:	685a      	ldr	r2, [r3, #4]
 800c388:	bb62      	cbnz	r2, 800c3e4 <_malloc_r+0xdc>
 800c38a:	f8c8 7000 	str.w	r7, [r8]
 800c38e:	e00f      	b.n	800c3b0 <_malloc_r+0xa8>
 800c390:	6822      	ldr	r2, [r4, #0]
 800c392:	1b52      	subs	r2, r2, r5
 800c394:	d420      	bmi.n	800c3d8 <_malloc_r+0xd0>
 800c396:	2a0b      	cmp	r2, #11
 800c398:	d917      	bls.n	800c3ca <_malloc_r+0xc2>
 800c39a:	1961      	adds	r1, r4, r5
 800c39c:	42a3      	cmp	r3, r4
 800c39e:	6025      	str	r5, [r4, #0]
 800c3a0:	bf18      	it	ne
 800c3a2:	6059      	strne	r1, [r3, #4]
 800c3a4:	6863      	ldr	r3, [r4, #4]
 800c3a6:	bf08      	it	eq
 800c3a8:	f8c8 1000 	streq.w	r1, [r8]
 800c3ac:	5162      	str	r2, [r4, r5]
 800c3ae:	604b      	str	r3, [r1, #4]
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	f000 f82f 	bl	800c414 <__malloc_unlock>
 800c3b6:	f104 000b 	add.w	r0, r4, #11
 800c3ba:	1d23      	adds	r3, r4, #4
 800c3bc:	f020 0007 	bic.w	r0, r0, #7
 800c3c0:	1ac2      	subs	r2, r0, r3
 800c3c2:	bf1c      	itt	ne
 800c3c4:	1a1b      	subne	r3, r3, r0
 800c3c6:	50a3      	strne	r3, [r4, r2]
 800c3c8:	e7af      	b.n	800c32a <_malloc_r+0x22>
 800c3ca:	6862      	ldr	r2, [r4, #4]
 800c3cc:	42a3      	cmp	r3, r4
 800c3ce:	bf0c      	ite	eq
 800c3d0:	f8c8 2000 	streq.w	r2, [r8]
 800c3d4:	605a      	strne	r2, [r3, #4]
 800c3d6:	e7eb      	b.n	800c3b0 <_malloc_r+0xa8>
 800c3d8:	4623      	mov	r3, r4
 800c3da:	6864      	ldr	r4, [r4, #4]
 800c3dc:	e7ae      	b.n	800c33c <_malloc_r+0x34>
 800c3de:	463c      	mov	r4, r7
 800c3e0:	687f      	ldr	r7, [r7, #4]
 800c3e2:	e7b6      	b.n	800c352 <_malloc_r+0x4a>
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	d1fb      	bne.n	800c3e4 <_malloc_r+0xdc>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	6053      	str	r3, [r2, #4]
 800c3f0:	e7de      	b.n	800c3b0 <_malloc_r+0xa8>
 800c3f2:	230c      	movs	r3, #12
 800c3f4:	6033      	str	r3, [r6, #0]
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	f000 f80c 	bl	800c414 <__malloc_unlock>
 800c3fc:	e794      	b.n	800c328 <_malloc_r+0x20>
 800c3fe:	6005      	str	r5, [r0, #0]
 800c400:	e7d6      	b.n	800c3b0 <_malloc_r+0xa8>
 800c402:	bf00      	nop
 800c404:	200008fc 	.word	0x200008fc

0800c408 <__malloc_lock>:
 800c408:	4801      	ldr	r0, [pc, #4]	@ (800c410 <__malloc_lock+0x8>)
 800c40a:	f7ff b89c 	b.w	800b546 <__retarget_lock_acquire_recursive>
 800c40e:	bf00      	nop
 800c410:	200008f4 	.word	0x200008f4

0800c414 <__malloc_unlock>:
 800c414:	4801      	ldr	r0, [pc, #4]	@ (800c41c <__malloc_unlock+0x8>)
 800c416:	f7ff b897 	b.w	800b548 <__retarget_lock_release_recursive>
 800c41a:	bf00      	nop
 800c41c:	200008f4 	.word	0x200008f4

0800c420 <_Balloc>:
 800c420:	b570      	push	{r4, r5, r6, lr}
 800c422:	69c6      	ldr	r6, [r0, #28]
 800c424:	4604      	mov	r4, r0
 800c426:	460d      	mov	r5, r1
 800c428:	b976      	cbnz	r6, 800c448 <_Balloc+0x28>
 800c42a:	2010      	movs	r0, #16
 800c42c:	f7ff ff42 	bl	800c2b4 <malloc>
 800c430:	4602      	mov	r2, r0
 800c432:	61e0      	str	r0, [r4, #28]
 800c434:	b920      	cbnz	r0, 800c440 <_Balloc+0x20>
 800c436:	4b18      	ldr	r3, [pc, #96]	@ (800c498 <_Balloc+0x78>)
 800c438:	4818      	ldr	r0, [pc, #96]	@ (800c49c <_Balloc+0x7c>)
 800c43a:	216b      	movs	r1, #107	@ 0x6b
 800c43c:	f7ff f886 	bl	800b54c <__assert_func>
 800c440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c444:	6006      	str	r6, [r0, #0]
 800c446:	60c6      	str	r6, [r0, #12]
 800c448:	69e6      	ldr	r6, [r4, #28]
 800c44a:	68f3      	ldr	r3, [r6, #12]
 800c44c:	b183      	cbz	r3, 800c470 <_Balloc+0x50>
 800c44e:	69e3      	ldr	r3, [r4, #28]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c456:	b9b8      	cbnz	r0, 800c488 <_Balloc+0x68>
 800c458:	2101      	movs	r1, #1
 800c45a:	fa01 f605 	lsl.w	r6, r1, r5
 800c45e:	1d72      	adds	r2, r6, #5
 800c460:	0092      	lsls	r2, r2, #2
 800c462:	4620      	mov	r0, r4
 800c464:	f000 fdb3 	bl	800cfce <_calloc_r>
 800c468:	b160      	cbz	r0, 800c484 <_Balloc+0x64>
 800c46a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c46e:	e00e      	b.n	800c48e <_Balloc+0x6e>
 800c470:	2221      	movs	r2, #33	@ 0x21
 800c472:	2104      	movs	r1, #4
 800c474:	4620      	mov	r0, r4
 800c476:	f000 fdaa 	bl	800cfce <_calloc_r>
 800c47a:	69e3      	ldr	r3, [r4, #28]
 800c47c:	60f0      	str	r0, [r6, #12]
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e4      	bne.n	800c44e <_Balloc+0x2e>
 800c484:	2000      	movs	r0, #0
 800c486:	bd70      	pop	{r4, r5, r6, pc}
 800c488:	6802      	ldr	r2, [r0, #0]
 800c48a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c48e:	2300      	movs	r3, #0
 800c490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c494:	e7f7      	b.n	800c486 <_Balloc+0x66>
 800c496:	bf00      	nop
 800c498:	0800da85 	.word	0x0800da85
 800c49c:	0800dba8 	.word	0x0800dba8

0800c4a0 <_Bfree>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	69c6      	ldr	r6, [r0, #28]
 800c4a4:	4605      	mov	r5, r0
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	b976      	cbnz	r6, 800c4c8 <_Bfree+0x28>
 800c4aa:	2010      	movs	r0, #16
 800c4ac:	f7ff ff02 	bl	800c2b4 <malloc>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	61e8      	str	r0, [r5, #28]
 800c4b4:	b920      	cbnz	r0, 800c4c0 <_Bfree+0x20>
 800c4b6:	4b09      	ldr	r3, [pc, #36]	@ (800c4dc <_Bfree+0x3c>)
 800c4b8:	4809      	ldr	r0, [pc, #36]	@ (800c4e0 <_Bfree+0x40>)
 800c4ba:	218f      	movs	r1, #143	@ 0x8f
 800c4bc:	f7ff f846 	bl	800b54c <__assert_func>
 800c4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4c4:	6006      	str	r6, [r0, #0]
 800c4c6:	60c6      	str	r6, [r0, #12]
 800c4c8:	b13c      	cbz	r4, 800c4da <_Bfree+0x3a>
 800c4ca:	69eb      	ldr	r3, [r5, #28]
 800c4cc:	6862      	ldr	r2, [r4, #4]
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4d4:	6021      	str	r1, [r4, #0]
 800c4d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4da:	bd70      	pop	{r4, r5, r6, pc}
 800c4dc:	0800da85 	.word	0x0800da85
 800c4e0:	0800dba8 	.word	0x0800dba8

0800c4e4 <__multadd>:
 800c4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e8:	690d      	ldr	r5, [r1, #16]
 800c4ea:	4607      	mov	r7, r0
 800c4ec:	460c      	mov	r4, r1
 800c4ee:	461e      	mov	r6, r3
 800c4f0:	f101 0c14 	add.w	ip, r1, #20
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	f8dc 3000 	ldr.w	r3, [ip]
 800c4fa:	b299      	uxth	r1, r3
 800c4fc:	fb02 6101 	mla	r1, r2, r1, r6
 800c500:	0c1e      	lsrs	r6, r3, #16
 800c502:	0c0b      	lsrs	r3, r1, #16
 800c504:	fb02 3306 	mla	r3, r2, r6, r3
 800c508:	b289      	uxth	r1, r1
 800c50a:	3001      	adds	r0, #1
 800c50c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c510:	4285      	cmp	r5, r0
 800c512:	f84c 1b04 	str.w	r1, [ip], #4
 800c516:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c51a:	dcec      	bgt.n	800c4f6 <__multadd+0x12>
 800c51c:	b30e      	cbz	r6, 800c562 <__multadd+0x7e>
 800c51e:	68a3      	ldr	r3, [r4, #8]
 800c520:	42ab      	cmp	r3, r5
 800c522:	dc19      	bgt.n	800c558 <__multadd+0x74>
 800c524:	6861      	ldr	r1, [r4, #4]
 800c526:	4638      	mov	r0, r7
 800c528:	3101      	adds	r1, #1
 800c52a:	f7ff ff79 	bl	800c420 <_Balloc>
 800c52e:	4680      	mov	r8, r0
 800c530:	b928      	cbnz	r0, 800c53e <__multadd+0x5a>
 800c532:	4602      	mov	r2, r0
 800c534:	4b0c      	ldr	r3, [pc, #48]	@ (800c568 <__multadd+0x84>)
 800c536:	480d      	ldr	r0, [pc, #52]	@ (800c56c <__multadd+0x88>)
 800c538:	21ba      	movs	r1, #186	@ 0xba
 800c53a:	f7ff f807 	bl	800b54c <__assert_func>
 800c53e:	6922      	ldr	r2, [r4, #16]
 800c540:	3202      	adds	r2, #2
 800c542:	f104 010c 	add.w	r1, r4, #12
 800c546:	0092      	lsls	r2, r2, #2
 800c548:	300c      	adds	r0, #12
 800c54a:	f000 fd2b 	bl	800cfa4 <memcpy>
 800c54e:	4621      	mov	r1, r4
 800c550:	4638      	mov	r0, r7
 800c552:	f7ff ffa5 	bl	800c4a0 <_Bfree>
 800c556:	4644      	mov	r4, r8
 800c558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c55c:	3501      	adds	r5, #1
 800c55e:	615e      	str	r6, [r3, #20]
 800c560:	6125      	str	r5, [r4, #16]
 800c562:	4620      	mov	r0, r4
 800c564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c568:	0800db97 	.word	0x0800db97
 800c56c:	0800dba8 	.word	0x0800dba8

0800c570 <__hi0bits>:
 800c570:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c574:	4603      	mov	r3, r0
 800c576:	bf36      	itet	cc
 800c578:	0403      	lslcc	r3, r0, #16
 800c57a:	2000      	movcs	r0, #0
 800c57c:	2010      	movcc	r0, #16
 800c57e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c582:	bf3c      	itt	cc
 800c584:	021b      	lslcc	r3, r3, #8
 800c586:	3008      	addcc	r0, #8
 800c588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c58c:	bf3c      	itt	cc
 800c58e:	011b      	lslcc	r3, r3, #4
 800c590:	3004      	addcc	r0, #4
 800c592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c596:	bf3c      	itt	cc
 800c598:	009b      	lslcc	r3, r3, #2
 800c59a:	3002      	addcc	r0, #2
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	db05      	blt.n	800c5ac <__hi0bits+0x3c>
 800c5a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c5a4:	f100 0001 	add.w	r0, r0, #1
 800c5a8:	bf08      	it	eq
 800c5aa:	2020      	moveq	r0, #32
 800c5ac:	4770      	bx	lr

0800c5ae <__lo0bits>:
 800c5ae:	6803      	ldr	r3, [r0, #0]
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	f013 0007 	ands.w	r0, r3, #7
 800c5b6:	d00b      	beq.n	800c5d0 <__lo0bits+0x22>
 800c5b8:	07d9      	lsls	r1, r3, #31
 800c5ba:	d421      	bmi.n	800c600 <__lo0bits+0x52>
 800c5bc:	0798      	lsls	r0, r3, #30
 800c5be:	bf49      	itett	mi
 800c5c0:	085b      	lsrmi	r3, r3, #1
 800c5c2:	089b      	lsrpl	r3, r3, #2
 800c5c4:	2001      	movmi	r0, #1
 800c5c6:	6013      	strmi	r3, [r2, #0]
 800c5c8:	bf5c      	itt	pl
 800c5ca:	6013      	strpl	r3, [r2, #0]
 800c5cc:	2002      	movpl	r0, #2
 800c5ce:	4770      	bx	lr
 800c5d0:	b299      	uxth	r1, r3
 800c5d2:	b909      	cbnz	r1, 800c5d8 <__lo0bits+0x2a>
 800c5d4:	0c1b      	lsrs	r3, r3, #16
 800c5d6:	2010      	movs	r0, #16
 800c5d8:	b2d9      	uxtb	r1, r3
 800c5da:	b909      	cbnz	r1, 800c5e0 <__lo0bits+0x32>
 800c5dc:	3008      	adds	r0, #8
 800c5de:	0a1b      	lsrs	r3, r3, #8
 800c5e0:	0719      	lsls	r1, r3, #28
 800c5e2:	bf04      	itt	eq
 800c5e4:	091b      	lsreq	r3, r3, #4
 800c5e6:	3004      	addeq	r0, #4
 800c5e8:	0799      	lsls	r1, r3, #30
 800c5ea:	bf04      	itt	eq
 800c5ec:	089b      	lsreq	r3, r3, #2
 800c5ee:	3002      	addeq	r0, #2
 800c5f0:	07d9      	lsls	r1, r3, #31
 800c5f2:	d403      	bmi.n	800c5fc <__lo0bits+0x4e>
 800c5f4:	085b      	lsrs	r3, r3, #1
 800c5f6:	f100 0001 	add.w	r0, r0, #1
 800c5fa:	d003      	beq.n	800c604 <__lo0bits+0x56>
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	4770      	bx	lr
 800c600:	2000      	movs	r0, #0
 800c602:	4770      	bx	lr
 800c604:	2020      	movs	r0, #32
 800c606:	4770      	bx	lr

0800c608 <__i2b>:
 800c608:	b510      	push	{r4, lr}
 800c60a:	460c      	mov	r4, r1
 800c60c:	2101      	movs	r1, #1
 800c60e:	f7ff ff07 	bl	800c420 <_Balloc>
 800c612:	4602      	mov	r2, r0
 800c614:	b928      	cbnz	r0, 800c622 <__i2b+0x1a>
 800c616:	4b05      	ldr	r3, [pc, #20]	@ (800c62c <__i2b+0x24>)
 800c618:	4805      	ldr	r0, [pc, #20]	@ (800c630 <__i2b+0x28>)
 800c61a:	f240 1145 	movw	r1, #325	@ 0x145
 800c61e:	f7fe ff95 	bl	800b54c <__assert_func>
 800c622:	2301      	movs	r3, #1
 800c624:	6144      	str	r4, [r0, #20]
 800c626:	6103      	str	r3, [r0, #16]
 800c628:	bd10      	pop	{r4, pc}
 800c62a:	bf00      	nop
 800c62c:	0800db97 	.word	0x0800db97
 800c630:	0800dba8 	.word	0x0800dba8

0800c634 <__multiply>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	4614      	mov	r4, r2
 800c63a:	690a      	ldr	r2, [r1, #16]
 800c63c:	6923      	ldr	r3, [r4, #16]
 800c63e:	429a      	cmp	r2, r3
 800c640:	bfa8      	it	ge
 800c642:	4623      	movge	r3, r4
 800c644:	460f      	mov	r7, r1
 800c646:	bfa4      	itt	ge
 800c648:	460c      	movge	r4, r1
 800c64a:	461f      	movge	r7, r3
 800c64c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c650:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c654:	68a3      	ldr	r3, [r4, #8]
 800c656:	6861      	ldr	r1, [r4, #4]
 800c658:	eb0a 0609 	add.w	r6, sl, r9
 800c65c:	42b3      	cmp	r3, r6
 800c65e:	b085      	sub	sp, #20
 800c660:	bfb8      	it	lt
 800c662:	3101      	addlt	r1, #1
 800c664:	f7ff fedc 	bl	800c420 <_Balloc>
 800c668:	b930      	cbnz	r0, 800c678 <__multiply+0x44>
 800c66a:	4602      	mov	r2, r0
 800c66c:	4b44      	ldr	r3, [pc, #272]	@ (800c780 <__multiply+0x14c>)
 800c66e:	4845      	ldr	r0, [pc, #276]	@ (800c784 <__multiply+0x150>)
 800c670:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c674:	f7fe ff6a 	bl	800b54c <__assert_func>
 800c678:	f100 0514 	add.w	r5, r0, #20
 800c67c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c680:	462b      	mov	r3, r5
 800c682:	2200      	movs	r2, #0
 800c684:	4543      	cmp	r3, r8
 800c686:	d321      	bcc.n	800c6cc <__multiply+0x98>
 800c688:	f107 0114 	add.w	r1, r7, #20
 800c68c:	f104 0214 	add.w	r2, r4, #20
 800c690:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c694:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c698:	9302      	str	r3, [sp, #8]
 800c69a:	1b13      	subs	r3, r2, r4
 800c69c:	3b15      	subs	r3, #21
 800c69e:	f023 0303 	bic.w	r3, r3, #3
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	f104 0715 	add.w	r7, r4, #21
 800c6a8:	42ba      	cmp	r2, r7
 800c6aa:	bf38      	it	cc
 800c6ac:	2304      	movcc	r3, #4
 800c6ae:	9301      	str	r3, [sp, #4]
 800c6b0:	9b02      	ldr	r3, [sp, #8]
 800c6b2:	9103      	str	r1, [sp, #12]
 800c6b4:	428b      	cmp	r3, r1
 800c6b6:	d80c      	bhi.n	800c6d2 <__multiply+0x9e>
 800c6b8:	2e00      	cmp	r6, #0
 800c6ba:	dd03      	ble.n	800c6c4 <__multiply+0x90>
 800c6bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d05b      	beq.n	800c77c <__multiply+0x148>
 800c6c4:	6106      	str	r6, [r0, #16]
 800c6c6:	b005      	add	sp, #20
 800c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6cc:	f843 2b04 	str.w	r2, [r3], #4
 800c6d0:	e7d8      	b.n	800c684 <__multiply+0x50>
 800c6d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c6d6:	f1ba 0f00 	cmp.w	sl, #0
 800c6da:	d024      	beq.n	800c726 <__multiply+0xf2>
 800c6dc:	f104 0e14 	add.w	lr, r4, #20
 800c6e0:	46a9      	mov	r9, r5
 800c6e2:	f04f 0c00 	mov.w	ip, #0
 800c6e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c6ea:	f8d9 3000 	ldr.w	r3, [r9]
 800c6ee:	fa1f fb87 	uxth.w	fp, r7
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c6f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c6fc:	f8d9 7000 	ldr.w	r7, [r9]
 800c700:	4463      	add	r3, ip
 800c702:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c706:	fb0a c70b 	mla	r7, sl, fp, ip
 800c70a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c70e:	b29b      	uxth	r3, r3
 800c710:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c714:	4572      	cmp	r2, lr
 800c716:	f849 3b04 	str.w	r3, [r9], #4
 800c71a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c71e:	d8e2      	bhi.n	800c6e6 <__multiply+0xb2>
 800c720:	9b01      	ldr	r3, [sp, #4]
 800c722:	f845 c003 	str.w	ip, [r5, r3]
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c72c:	3104      	adds	r1, #4
 800c72e:	f1b9 0f00 	cmp.w	r9, #0
 800c732:	d021      	beq.n	800c778 <__multiply+0x144>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	f104 0c14 	add.w	ip, r4, #20
 800c73a:	46ae      	mov	lr, r5
 800c73c:	f04f 0a00 	mov.w	sl, #0
 800c740:	f8bc b000 	ldrh.w	fp, [ip]
 800c744:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c748:	fb09 770b 	mla	r7, r9, fp, r7
 800c74c:	4457      	add	r7, sl
 800c74e:	b29b      	uxth	r3, r3
 800c750:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c754:	f84e 3b04 	str.w	r3, [lr], #4
 800c758:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c75c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c760:	f8be 3000 	ldrh.w	r3, [lr]
 800c764:	fb09 330a 	mla	r3, r9, sl, r3
 800c768:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c76c:	4562      	cmp	r2, ip
 800c76e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c772:	d8e5      	bhi.n	800c740 <__multiply+0x10c>
 800c774:	9f01      	ldr	r7, [sp, #4]
 800c776:	51eb      	str	r3, [r5, r7]
 800c778:	3504      	adds	r5, #4
 800c77a:	e799      	b.n	800c6b0 <__multiply+0x7c>
 800c77c:	3e01      	subs	r6, #1
 800c77e:	e79b      	b.n	800c6b8 <__multiply+0x84>
 800c780:	0800db97 	.word	0x0800db97
 800c784:	0800dba8 	.word	0x0800dba8

0800c788 <__pow5mult>:
 800c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c78c:	4615      	mov	r5, r2
 800c78e:	f012 0203 	ands.w	r2, r2, #3
 800c792:	4607      	mov	r7, r0
 800c794:	460e      	mov	r6, r1
 800c796:	d007      	beq.n	800c7a8 <__pow5mult+0x20>
 800c798:	4c25      	ldr	r4, [pc, #148]	@ (800c830 <__pow5mult+0xa8>)
 800c79a:	3a01      	subs	r2, #1
 800c79c:	2300      	movs	r3, #0
 800c79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7a2:	f7ff fe9f 	bl	800c4e4 <__multadd>
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	10ad      	asrs	r5, r5, #2
 800c7aa:	d03d      	beq.n	800c828 <__pow5mult+0xa0>
 800c7ac:	69fc      	ldr	r4, [r7, #28]
 800c7ae:	b97c      	cbnz	r4, 800c7d0 <__pow5mult+0x48>
 800c7b0:	2010      	movs	r0, #16
 800c7b2:	f7ff fd7f 	bl	800c2b4 <malloc>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	61f8      	str	r0, [r7, #28]
 800c7ba:	b928      	cbnz	r0, 800c7c8 <__pow5mult+0x40>
 800c7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800c834 <__pow5mult+0xac>)
 800c7be:	481e      	ldr	r0, [pc, #120]	@ (800c838 <__pow5mult+0xb0>)
 800c7c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c7c4:	f7fe fec2 	bl	800b54c <__assert_func>
 800c7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7cc:	6004      	str	r4, [r0, #0]
 800c7ce:	60c4      	str	r4, [r0, #12]
 800c7d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c7d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7d8:	b94c      	cbnz	r4, 800c7ee <__pow5mult+0x66>
 800c7da:	f240 2171 	movw	r1, #625	@ 0x271
 800c7de:	4638      	mov	r0, r7
 800c7e0:	f7ff ff12 	bl	800c608 <__i2b>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	6003      	str	r3, [r0, #0]
 800c7ee:	f04f 0900 	mov.w	r9, #0
 800c7f2:	07eb      	lsls	r3, r5, #31
 800c7f4:	d50a      	bpl.n	800c80c <__pow5mult+0x84>
 800c7f6:	4631      	mov	r1, r6
 800c7f8:	4622      	mov	r2, r4
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	f7ff ff1a 	bl	800c634 <__multiply>
 800c800:	4631      	mov	r1, r6
 800c802:	4680      	mov	r8, r0
 800c804:	4638      	mov	r0, r7
 800c806:	f7ff fe4b 	bl	800c4a0 <_Bfree>
 800c80a:	4646      	mov	r6, r8
 800c80c:	106d      	asrs	r5, r5, #1
 800c80e:	d00b      	beq.n	800c828 <__pow5mult+0xa0>
 800c810:	6820      	ldr	r0, [r4, #0]
 800c812:	b938      	cbnz	r0, 800c824 <__pow5mult+0x9c>
 800c814:	4622      	mov	r2, r4
 800c816:	4621      	mov	r1, r4
 800c818:	4638      	mov	r0, r7
 800c81a:	f7ff ff0b 	bl	800c634 <__multiply>
 800c81e:	6020      	str	r0, [r4, #0]
 800c820:	f8c0 9000 	str.w	r9, [r0]
 800c824:	4604      	mov	r4, r0
 800c826:	e7e4      	b.n	800c7f2 <__pow5mult+0x6a>
 800c828:	4630      	mov	r0, r6
 800c82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c82e:	bf00      	nop
 800c830:	0800dc04 	.word	0x0800dc04
 800c834:	0800da85 	.word	0x0800da85
 800c838:	0800dba8 	.word	0x0800dba8

0800c83c <__lshift>:
 800c83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c840:	460c      	mov	r4, r1
 800c842:	6849      	ldr	r1, [r1, #4]
 800c844:	6923      	ldr	r3, [r4, #16]
 800c846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c84a:	68a3      	ldr	r3, [r4, #8]
 800c84c:	4607      	mov	r7, r0
 800c84e:	4691      	mov	r9, r2
 800c850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c854:	f108 0601 	add.w	r6, r8, #1
 800c858:	42b3      	cmp	r3, r6
 800c85a:	db0b      	blt.n	800c874 <__lshift+0x38>
 800c85c:	4638      	mov	r0, r7
 800c85e:	f7ff fddf 	bl	800c420 <_Balloc>
 800c862:	4605      	mov	r5, r0
 800c864:	b948      	cbnz	r0, 800c87a <__lshift+0x3e>
 800c866:	4602      	mov	r2, r0
 800c868:	4b28      	ldr	r3, [pc, #160]	@ (800c90c <__lshift+0xd0>)
 800c86a:	4829      	ldr	r0, [pc, #164]	@ (800c910 <__lshift+0xd4>)
 800c86c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c870:	f7fe fe6c 	bl	800b54c <__assert_func>
 800c874:	3101      	adds	r1, #1
 800c876:	005b      	lsls	r3, r3, #1
 800c878:	e7ee      	b.n	800c858 <__lshift+0x1c>
 800c87a:	2300      	movs	r3, #0
 800c87c:	f100 0114 	add.w	r1, r0, #20
 800c880:	f100 0210 	add.w	r2, r0, #16
 800c884:	4618      	mov	r0, r3
 800c886:	4553      	cmp	r3, sl
 800c888:	db33      	blt.n	800c8f2 <__lshift+0xb6>
 800c88a:	6920      	ldr	r0, [r4, #16]
 800c88c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c890:	f104 0314 	add.w	r3, r4, #20
 800c894:	f019 091f 	ands.w	r9, r9, #31
 800c898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c89c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8a0:	d02b      	beq.n	800c8fa <__lshift+0xbe>
 800c8a2:	f1c9 0e20 	rsb	lr, r9, #32
 800c8a6:	468a      	mov	sl, r1
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	6818      	ldr	r0, [r3, #0]
 800c8ac:	fa00 f009 	lsl.w	r0, r0, r9
 800c8b0:	4310      	orrs	r0, r2
 800c8b2:	f84a 0b04 	str.w	r0, [sl], #4
 800c8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ba:	459c      	cmp	ip, r3
 800c8bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8c0:	d8f3      	bhi.n	800c8aa <__lshift+0x6e>
 800c8c2:	ebac 0304 	sub.w	r3, ip, r4
 800c8c6:	3b15      	subs	r3, #21
 800c8c8:	f023 0303 	bic.w	r3, r3, #3
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	f104 0015 	add.w	r0, r4, #21
 800c8d2:	4584      	cmp	ip, r0
 800c8d4:	bf38      	it	cc
 800c8d6:	2304      	movcc	r3, #4
 800c8d8:	50ca      	str	r2, [r1, r3]
 800c8da:	b10a      	cbz	r2, 800c8e0 <__lshift+0xa4>
 800c8dc:	f108 0602 	add.w	r6, r8, #2
 800c8e0:	3e01      	subs	r6, #1
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	612e      	str	r6, [r5, #16]
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	f7ff fdda 	bl	800c4a0 <_Bfree>
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	e7c5      	b.n	800c886 <__lshift+0x4a>
 800c8fa:	3904      	subs	r1, #4
 800c8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c900:	f841 2f04 	str.w	r2, [r1, #4]!
 800c904:	459c      	cmp	ip, r3
 800c906:	d8f9      	bhi.n	800c8fc <__lshift+0xc0>
 800c908:	e7ea      	b.n	800c8e0 <__lshift+0xa4>
 800c90a:	bf00      	nop
 800c90c:	0800db97 	.word	0x0800db97
 800c910:	0800dba8 	.word	0x0800dba8

0800c914 <__mcmp>:
 800c914:	690a      	ldr	r2, [r1, #16]
 800c916:	4603      	mov	r3, r0
 800c918:	6900      	ldr	r0, [r0, #16]
 800c91a:	1a80      	subs	r0, r0, r2
 800c91c:	b530      	push	{r4, r5, lr}
 800c91e:	d10e      	bne.n	800c93e <__mcmp+0x2a>
 800c920:	3314      	adds	r3, #20
 800c922:	3114      	adds	r1, #20
 800c924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c92c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c934:	4295      	cmp	r5, r2
 800c936:	d003      	beq.n	800c940 <__mcmp+0x2c>
 800c938:	d205      	bcs.n	800c946 <__mcmp+0x32>
 800c93a:	f04f 30ff 	mov.w	r0, #4294967295
 800c93e:	bd30      	pop	{r4, r5, pc}
 800c940:	42a3      	cmp	r3, r4
 800c942:	d3f3      	bcc.n	800c92c <__mcmp+0x18>
 800c944:	e7fb      	b.n	800c93e <__mcmp+0x2a>
 800c946:	2001      	movs	r0, #1
 800c948:	e7f9      	b.n	800c93e <__mcmp+0x2a>
	...

0800c94c <__mdiff>:
 800c94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c950:	4689      	mov	r9, r1
 800c952:	4606      	mov	r6, r0
 800c954:	4611      	mov	r1, r2
 800c956:	4648      	mov	r0, r9
 800c958:	4614      	mov	r4, r2
 800c95a:	f7ff ffdb 	bl	800c914 <__mcmp>
 800c95e:	1e05      	subs	r5, r0, #0
 800c960:	d112      	bne.n	800c988 <__mdiff+0x3c>
 800c962:	4629      	mov	r1, r5
 800c964:	4630      	mov	r0, r6
 800c966:	f7ff fd5b 	bl	800c420 <_Balloc>
 800c96a:	4602      	mov	r2, r0
 800c96c:	b928      	cbnz	r0, 800c97a <__mdiff+0x2e>
 800c96e:	4b3f      	ldr	r3, [pc, #252]	@ (800ca6c <__mdiff+0x120>)
 800c970:	f240 2137 	movw	r1, #567	@ 0x237
 800c974:	483e      	ldr	r0, [pc, #248]	@ (800ca70 <__mdiff+0x124>)
 800c976:	f7fe fde9 	bl	800b54c <__assert_func>
 800c97a:	2301      	movs	r3, #1
 800c97c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c980:	4610      	mov	r0, r2
 800c982:	b003      	add	sp, #12
 800c984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c988:	bfbc      	itt	lt
 800c98a:	464b      	movlt	r3, r9
 800c98c:	46a1      	movlt	r9, r4
 800c98e:	4630      	mov	r0, r6
 800c990:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c994:	bfba      	itte	lt
 800c996:	461c      	movlt	r4, r3
 800c998:	2501      	movlt	r5, #1
 800c99a:	2500      	movge	r5, #0
 800c99c:	f7ff fd40 	bl	800c420 <_Balloc>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	b918      	cbnz	r0, 800c9ac <__mdiff+0x60>
 800c9a4:	4b31      	ldr	r3, [pc, #196]	@ (800ca6c <__mdiff+0x120>)
 800c9a6:	f240 2145 	movw	r1, #581	@ 0x245
 800c9aa:	e7e3      	b.n	800c974 <__mdiff+0x28>
 800c9ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c9b0:	6926      	ldr	r6, [r4, #16]
 800c9b2:	60c5      	str	r5, [r0, #12]
 800c9b4:	f109 0310 	add.w	r3, r9, #16
 800c9b8:	f109 0514 	add.w	r5, r9, #20
 800c9bc:	f104 0e14 	add.w	lr, r4, #20
 800c9c0:	f100 0b14 	add.w	fp, r0, #20
 800c9c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c9c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c9cc:	9301      	str	r3, [sp, #4]
 800c9ce:	46d9      	mov	r9, fp
 800c9d0:	f04f 0c00 	mov.w	ip, #0
 800c9d4:	9b01      	ldr	r3, [sp, #4]
 800c9d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c9da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	fa1f f38a 	uxth.w	r3, sl
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	b283      	uxth	r3, r0
 800c9e8:	1acb      	subs	r3, r1, r3
 800c9ea:	0c00      	lsrs	r0, r0, #16
 800c9ec:	4463      	add	r3, ip
 800c9ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c9f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c9fc:	4576      	cmp	r6, lr
 800c9fe:	f849 3b04 	str.w	r3, [r9], #4
 800ca02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca06:	d8e5      	bhi.n	800c9d4 <__mdiff+0x88>
 800ca08:	1b33      	subs	r3, r6, r4
 800ca0a:	3b15      	subs	r3, #21
 800ca0c:	f023 0303 	bic.w	r3, r3, #3
 800ca10:	3415      	adds	r4, #21
 800ca12:	3304      	adds	r3, #4
 800ca14:	42a6      	cmp	r6, r4
 800ca16:	bf38      	it	cc
 800ca18:	2304      	movcc	r3, #4
 800ca1a:	441d      	add	r5, r3
 800ca1c:	445b      	add	r3, fp
 800ca1e:	461e      	mov	r6, r3
 800ca20:	462c      	mov	r4, r5
 800ca22:	4544      	cmp	r4, r8
 800ca24:	d30e      	bcc.n	800ca44 <__mdiff+0xf8>
 800ca26:	f108 0103 	add.w	r1, r8, #3
 800ca2a:	1b49      	subs	r1, r1, r5
 800ca2c:	f021 0103 	bic.w	r1, r1, #3
 800ca30:	3d03      	subs	r5, #3
 800ca32:	45a8      	cmp	r8, r5
 800ca34:	bf38      	it	cc
 800ca36:	2100      	movcc	r1, #0
 800ca38:	440b      	add	r3, r1
 800ca3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca3e:	b191      	cbz	r1, 800ca66 <__mdiff+0x11a>
 800ca40:	6117      	str	r7, [r2, #16]
 800ca42:	e79d      	b.n	800c980 <__mdiff+0x34>
 800ca44:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca48:	46e6      	mov	lr, ip
 800ca4a:	0c08      	lsrs	r0, r1, #16
 800ca4c:	fa1c fc81 	uxtah	ip, ip, r1
 800ca50:	4471      	add	r1, lr
 800ca52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca56:	b289      	uxth	r1, r1
 800ca58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca5c:	f846 1b04 	str.w	r1, [r6], #4
 800ca60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca64:	e7dd      	b.n	800ca22 <__mdiff+0xd6>
 800ca66:	3f01      	subs	r7, #1
 800ca68:	e7e7      	b.n	800ca3a <__mdiff+0xee>
 800ca6a:	bf00      	nop
 800ca6c:	0800db97 	.word	0x0800db97
 800ca70:	0800dba8 	.word	0x0800dba8

0800ca74 <__d2b>:
 800ca74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca78:	460f      	mov	r7, r1
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	ec59 8b10 	vmov	r8, r9, d0
 800ca80:	4616      	mov	r6, r2
 800ca82:	f7ff fccd 	bl	800c420 <_Balloc>
 800ca86:	4604      	mov	r4, r0
 800ca88:	b930      	cbnz	r0, 800ca98 <__d2b+0x24>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b23      	ldr	r3, [pc, #140]	@ (800cb1c <__d2b+0xa8>)
 800ca8e:	4824      	ldr	r0, [pc, #144]	@ (800cb20 <__d2b+0xac>)
 800ca90:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca94:	f7fe fd5a 	bl	800b54c <__assert_func>
 800ca98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800caa0:	b10d      	cbz	r5, 800caa6 <__d2b+0x32>
 800caa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800caa6:	9301      	str	r3, [sp, #4]
 800caa8:	f1b8 0300 	subs.w	r3, r8, #0
 800caac:	d023      	beq.n	800caf6 <__d2b+0x82>
 800caae:	4668      	mov	r0, sp
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	f7ff fd7c 	bl	800c5ae <__lo0bits>
 800cab6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800caba:	b1d0      	cbz	r0, 800caf2 <__d2b+0x7e>
 800cabc:	f1c0 0320 	rsb	r3, r0, #32
 800cac0:	fa02 f303 	lsl.w	r3, r2, r3
 800cac4:	430b      	orrs	r3, r1
 800cac6:	40c2      	lsrs	r2, r0
 800cac8:	6163      	str	r3, [r4, #20]
 800caca:	9201      	str	r2, [sp, #4]
 800cacc:	9b01      	ldr	r3, [sp, #4]
 800cace:	61a3      	str	r3, [r4, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	bf0c      	ite	eq
 800cad4:	2201      	moveq	r2, #1
 800cad6:	2202      	movne	r2, #2
 800cad8:	6122      	str	r2, [r4, #16]
 800cada:	b1a5      	cbz	r5, 800cb06 <__d2b+0x92>
 800cadc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cae0:	4405      	add	r5, r0
 800cae2:	603d      	str	r5, [r7, #0]
 800cae4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cae8:	6030      	str	r0, [r6, #0]
 800caea:	4620      	mov	r0, r4
 800caec:	b003      	add	sp, #12
 800caee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caf2:	6161      	str	r1, [r4, #20]
 800caf4:	e7ea      	b.n	800cacc <__d2b+0x58>
 800caf6:	a801      	add	r0, sp, #4
 800caf8:	f7ff fd59 	bl	800c5ae <__lo0bits>
 800cafc:	9b01      	ldr	r3, [sp, #4]
 800cafe:	6163      	str	r3, [r4, #20]
 800cb00:	3020      	adds	r0, #32
 800cb02:	2201      	movs	r2, #1
 800cb04:	e7e8      	b.n	800cad8 <__d2b+0x64>
 800cb06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cb0e:	6038      	str	r0, [r7, #0]
 800cb10:	6918      	ldr	r0, [r3, #16]
 800cb12:	f7ff fd2d 	bl	800c570 <__hi0bits>
 800cb16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb1a:	e7e5      	b.n	800cae8 <__d2b+0x74>
 800cb1c:	0800db97 	.word	0x0800db97
 800cb20:	0800dba8 	.word	0x0800dba8

0800cb24 <__ssputs_r>:
 800cb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb28:	688e      	ldr	r6, [r1, #8]
 800cb2a:	461f      	mov	r7, r3
 800cb2c:	42be      	cmp	r6, r7
 800cb2e:	680b      	ldr	r3, [r1, #0]
 800cb30:	4682      	mov	sl, r0
 800cb32:	460c      	mov	r4, r1
 800cb34:	4690      	mov	r8, r2
 800cb36:	d82d      	bhi.n	800cb94 <__ssputs_r+0x70>
 800cb38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb40:	d026      	beq.n	800cb90 <__ssputs_r+0x6c>
 800cb42:	6965      	ldr	r5, [r4, #20]
 800cb44:	6909      	ldr	r1, [r1, #16]
 800cb46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb4a:	eba3 0901 	sub.w	r9, r3, r1
 800cb4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb52:	1c7b      	adds	r3, r7, #1
 800cb54:	444b      	add	r3, r9
 800cb56:	106d      	asrs	r5, r5, #1
 800cb58:	429d      	cmp	r5, r3
 800cb5a:	bf38      	it	cc
 800cb5c:	461d      	movcc	r5, r3
 800cb5e:	0553      	lsls	r3, r2, #21
 800cb60:	d527      	bpl.n	800cbb2 <__ssputs_r+0x8e>
 800cb62:	4629      	mov	r1, r5
 800cb64:	f7ff fbd0 	bl	800c308 <_malloc_r>
 800cb68:	4606      	mov	r6, r0
 800cb6a:	b360      	cbz	r0, 800cbc6 <__ssputs_r+0xa2>
 800cb6c:	6921      	ldr	r1, [r4, #16]
 800cb6e:	464a      	mov	r2, r9
 800cb70:	f000 fa18 	bl	800cfa4 <memcpy>
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb7e:	81a3      	strh	r3, [r4, #12]
 800cb80:	6126      	str	r6, [r4, #16]
 800cb82:	6165      	str	r5, [r4, #20]
 800cb84:	444e      	add	r6, r9
 800cb86:	eba5 0509 	sub.w	r5, r5, r9
 800cb8a:	6026      	str	r6, [r4, #0]
 800cb8c:	60a5      	str	r5, [r4, #8]
 800cb8e:	463e      	mov	r6, r7
 800cb90:	42be      	cmp	r6, r7
 800cb92:	d900      	bls.n	800cb96 <__ssputs_r+0x72>
 800cb94:	463e      	mov	r6, r7
 800cb96:	6820      	ldr	r0, [r4, #0]
 800cb98:	4632      	mov	r2, r6
 800cb9a:	4641      	mov	r1, r8
 800cb9c:	f000 f9d8 	bl	800cf50 <memmove>
 800cba0:	68a3      	ldr	r3, [r4, #8]
 800cba2:	1b9b      	subs	r3, r3, r6
 800cba4:	60a3      	str	r3, [r4, #8]
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	4433      	add	r3, r6
 800cbaa:	6023      	str	r3, [r4, #0]
 800cbac:	2000      	movs	r0, #0
 800cbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbb2:	462a      	mov	r2, r5
 800cbb4:	f000 fa31 	bl	800d01a <_realloc_r>
 800cbb8:	4606      	mov	r6, r0
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d1e0      	bne.n	800cb80 <__ssputs_r+0x5c>
 800cbbe:	6921      	ldr	r1, [r4, #16]
 800cbc0:	4650      	mov	r0, sl
 800cbc2:	f7ff fb2d 	bl	800c220 <_free_r>
 800cbc6:	230c      	movs	r3, #12
 800cbc8:	f8ca 3000 	str.w	r3, [sl]
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbd2:	81a3      	strh	r3, [r4, #12]
 800cbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd8:	e7e9      	b.n	800cbae <__ssputs_r+0x8a>
	...

0800cbdc <_svfiprintf_r>:
 800cbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe0:	4698      	mov	r8, r3
 800cbe2:	898b      	ldrh	r3, [r1, #12]
 800cbe4:	061b      	lsls	r3, r3, #24
 800cbe6:	b09d      	sub	sp, #116	@ 0x74
 800cbe8:	4607      	mov	r7, r0
 800cbea:	460d      	mov	r5, r1
 800cbec:	4614      	mov	r4, r2
 800cbee:	d510      	bpl.n	800cc12 <_svfiprintf_r+0x36>
 800cbf0:	690b      	ldr	r3, [r1, #16]
 800cbf2:	b973      	cbnz	r3, 800cc12 <_svfiprintf_r+0x36>
 800cbf4:	2140      	movs	r1, #64	@ 0x40
 800cbf6:	f7ff fb87 	bl	800c308 <_malloc_r>
 800cbfa:	6028      	str	r0, [r5, #0]
 800cbfc:	6128      	str	r0, [r5, #16]
 800cbfe:	b930      	cbnz	r0, 800cc0e <_svfiprintf_r+0x32>
 800cc00:	230c      	movs	r3, #12
 800cc02:	603b      	str	r3, [r7, #0]
 800cc04:	f04f 30ff 	mov.w	r0, #4294967295
 800cc08:	b01d      	add	sp, #116	@ 0x74
 800cc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc0e:	2340      	movs	r3, #64	@ 0x40
 800cc10:	616b      	str	r3, [r5, #20]
 800cc12:	2300      	movs	r3, #0
 800cc14:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc16:	2320      	movs	r3, #32
 800cc18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc20:	2330      	movs	r3, #48	@ 0x30
 800cc22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cdc0 <_svfiprintf_r+0x1e4>
 800cc26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc2a:	f04f 0901 	mov.w	r9, #1
 800cc2e:	4623      	mov	r3, r4
 800cc30:	469a      	mov	sl, r3
 800cc32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc36:	b10a      	cbz	r2, 800cc3c <_svfiprintf_r+0x60>
 800cc38:	2a25      	cmp	r2, #37	@ 0x25
 800cc3a:	d1f9      	bne.n	800cc30 <_svfiprintf_r+0x54>
 800cc3c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc40:	d00b      	beq.n	800cc5a <_svfiprintf_r+0x7e>
 800cc42:	465b      	mov	r3, fp
 800cc44:	4622      	mov	r2, r4
 800cc46:	4629      	mov	r1, r5
 800cc48:	4638      	mov	r0, r7
 800cc4a:	f7ff ff6b 	bl	800cb24 <__ssputs_r>
 800cc4e:	3001      	adds	r0, #1
 800cc50:	f000 80a7 	beq.w	800cda2 <_svfiprintf_r+0x1c6>
 800cc54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc56:	445a      	add	r2, fp
 800cc58:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f000 809f 	beq.w	800cda2 <_svfiprintf_r+0x1c6>
 800cc64:	2300      	movs	r3, #0
 800cc66:	f04f 32ff 	mov.w	r2, #4294967295
 800cc6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc6e:	f10a 0a01 	add.w	sl, sl, #1
 800cc72:	9304      	str	r3, [sp, #16]
 800cc74:	9307      	str	r3, [sp, #28]
 800cc76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc7c:	4654      	mov	r4, sl
 800cc7e:	2205      	movs	r2, #5
 800cc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc84:	484e      	ldr	r0, [pc, #312]	@ (800cdc0 <_svfiprintf_r+0x1e4>)
 800cc86:	f7f3 fadb 	bl	8000240 <memchr>
 800cc8a:	9a04      	ldr	r2, [sp, #16]
 800cc8c:	b9d8      	cbnz	r0, 800ccc6 <_svfiprintf_r+0xea>
 800cc8e:	06d0      	lsls	r0, r2, #27
 800cc90:	bf44      	itt	mi
 800cc92:	2320      	movmi	r3, #32
 800cc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc98:	0711      	lsls	r1, r2, #28
 800cc9a:	bf44      	itt	mi
 800cc9c:	232b      	movmi	r3, #43	@ 0x2b
 800cc9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cca2:	f89a 3000 	ldrb.w	r3, [sl]
 800cca6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cca8:	d015      	beq.n	800ccd6 <_svfiprintf_r+0xfa>
 800ccaa:	9a07      	ldr	r2, [sp, #28]
 800ccac:	4654      	mov	r4, sl
 800ccae:	2000      	movs	r0, #0
 800ccb0:	f04f 0c0a 	mov.w	ip, #10
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccba:	3b30      	subs	r3, #48	@ 0x30
 800ccbc:	2b09      	cmp	r3, #9
 800ccbe:	d94b      	bls.n	800cd58 <_svfiprintf_r+0x17c>
 800ccc0:	b1b0      	cbz	r0, 800ccf0 <_svfiprintf_r+0x114>
 800ccc2:	9207      	str	r2, [sp, #28]
 800ccc4:	e014      	b.n	800ccf0 <_svfiprintf_r+0x114>
 800ccc6:	eba0 0308 	sub.w	r3, r0, r8
 800ccca:	fa09 f303 	lsl.w	r3, r9, r3
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	9304      	str	r3, [sp, #16]
 800ccd2:	46a2      	mov	sl, r4
 800ccd4:	e7d2      	b.n	800cc7c <_svfiprintf_r+0xa0>
 800ccd6:	9b03      	ldr	r3, [sp, #12]
 800ccd8:	1d19      	adds	r1, r3, #4
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	9103      	str	r1, [sp, #12]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	bfbb      	ittet	lt
 800cce2:	425b      	neglt	r3, r3
 800cce4:	f042 0202 	orrlt.w	r2, r2, #2
 800cce8:	9307      	strge	r3, [sp, #28]
 800ccea:	9307      	strlt	r3, [sp, #28]
 800ccec:	bfb8      	it	lt
 800ccee:	9204      	strlt	r2, [sp, #16]
 800ccf0:	7823      	ldrb	r3, [r4, #0]
 800ccf2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccf4:	d10a      	bne.n	800cd0c <_svfiprintf_r+0x130>
 800ccf6:	7863      	ldrb	r3, [r4, #1]
 800ccf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccfa:	d132      	bne.n	800cd62 <_svfiprintf_r+0x186>
 800ccfc:	9b03      	ldr	r3, [sp, #12]
 800ccfe:	1d1a      	adds	r2, r3, #4
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	9203      	str	r2, [sp, #12]
 800cd04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd08:	3402      	adds	r4, #2
 800cd0a:	9305      	str	r3, [sp, #20]
 800cd0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cdd0 <_svfiprintf_r+0x1f4>
 800cd10:	7821      	ldrb	r1, [r4, #0]
 800cd12:	2203      	movs	r2, #3
 800cd14:	4650      	mov	r0, sl
 800cd16:	f7f3 fa93 	bl	8000240 <memchr>
 800cd1a:	b138      	cbz	r0, 800cd2c <_svfiprintf_r+0x150>
 800cd1c:	9b04      	ldr	r3, [sp, #16]
 800cd1e:	eba0 000a 	sub.w	r0, r0, sl
 800cd22:	2240      	movs	r2, #64	@ 0x40
 800cd24:	4082      	lsls	r2, r0
 800cd26:	4313      	orrs	r3, r2
 800cd28:	3401      	adds	r4, #1
 800cd2a:	9304      	str	r3, [sp, #16]
 800cd2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd30:	4824      	ldr	r0, [pc, #144]	@ (800cdc4 <_svfiprintf_r+0x1e8>)
 800cd32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd36:	2206      	movs	r2, #6
 800cd38:	f7f3 fa82 	bl	8000240 <memchr>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d036      	beq.n	800cdae <_svfiprintf_r+0x1d2>
 800cd40:	4b21      	ldr	r3, [pc, #132]	@ (800cdc8 <_svfiprintf_r+0x1ec>)
 800cd42:	bb1b      	cbnz	r3, 800cd8c <_svfiprintf_r+0x1b0>
 800cd44:	9b03      	ldr	r3, [sp, #12]
 800cd46:	3307      	adds	r3, #7
 800cd48:	f023 0307 	bic.w	r3, r3, #7
 800cd4c:	3308      	adds	r3, #8
 800cd4e:	9303      	str	r3, [sp, #12]
 800cd50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd52:	4433      	add	r3, r6
 800cd54:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd56:	e76a      	b.n	800cc2e <_svfiprintf_r+0x52>
 800cd58:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd5c:	460c      	mov	r4, r1
 800cd5e:	2001      	movs	r0, #1
 800cd60:	e7a8      	b.n	800ccb4 <_svfiprintf_r+0xd8>
 800cd62:	2300      	movs	r3, #0
 800cd64:	3401      	adds	r4, #1
 800cd66:	9305      	str	r3, [sp, #20]
 800cd68:	4619      	mov	r1, r3
 800cd6a:	f04f 0c0a 	mov.w	ip, #10
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd74:	3a30      	subs	r2, #48	@ 0x30
 800cd76:	2a09      	cmp	r2, #9
 800cd78:	d903      	bls.n	800cd82 <_svfiprintf_r+0x1a6>
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d0c6      	beq.n	800cd0c <_svfiprintf_r+0x130>
 800cd7e:	9105      	str	r1, [sp, #20]
 800cd80:	e7c4      	b.n	800cd0c <_svfiprintf_r+0x130>
 800cd82:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd86:	4604      	mov	r4, r0
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e7f0      	b.n	800cd6e <_svfiprintf_r+0x192>
 800cd8c:	ab03      	add	r3, sp, #12
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	462a      	mov	r2, r5
 800cd92:	4b0e      	ldr	r3, [pc, #56]	@ (800cdcc <_svfiprintf_r+0x1f0>)
 800cd94:	a904      	add	r1, sp, #16
 800cd96:	4638      	mov	r0, r7
 800cd98:	f7fd fe0a 	bl	800a9b0 <_printf_float>
 800cd9c:	1c42      	adds	r2, r0, #1
 800cd9e:	4606      	mov	r6, r0
 800cda0:	d1d6      	bne.n	800cd50 <_svfiprintf_r+0x174>
 800cda2:	89ab      	ldrh	r3, [r5, #12]
 800cda4:	065b      	lsls	r3, r3, #25
 800cda6:	f53f af2d 	bmi.w	800cc04 <_svfiprintf_r+0x28>
 800cdaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cdac:	e72c      	b.n	800cc08 <_svfiprintf_r+0x2c>
 800cdae:	ab03      	add	r3, sp, #12
 800cdb0:	9300      	str	r3, [sp, #0]
 800cdb2:	462a      	mov	r2, r5
 800cdb4:	4b05      	ldr	r3, [pc, #20]	@ (800cdcc <_svfiprintf_r+0x1f0>)
 800cdb6:	a904      	add	r1, sp, #16
 800cdb8:	4638      	mov	r0, r7
 800cdba:	f7fe f891 	bl	800aee0 <_printf_i>
 800cdbe:	e7ed      	b.n	800cd9c <_svfiprintf_r+0x1c0>
 800cdc0:	0800dd00 	.word	0x0800dd00
 800cdc4:	0800dd0a 	.word	0x0800dd0a
 800cdc8:	0800a9b1 	.word	0x0800a9b1
 800cdcc:	0800cb25 	.word	0x0800cb25
 800cdd0:	0800dd06 	.word	0x0800dd06

0800cdd4 <__sflush_r>:
 800cdd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cddc:	0716      	lsls	r6, r2, #28
 800cdde:	4605      	mov	r5, r0
 800cde0:	460c      	mov	r4, r1
 800cde2:	d454      	bmi.n	800ce8e <__sflush_r+0xba>
 800cde4:	684b      	ldr	r3, [r1, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	dc02      	bgt.n	800cdf0 <__sflush_r+0x1c>
 800cdea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	dd48      	ble.n	800ce82 <__sflush_r+0xae>
 800cdf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdf2:	2e00      	cmp	r6, #0
 800cdf4:	d045      	beq.n	800ce82 <__sflush_r+0xae>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cdfc:	682f      	ldr	r7, [r5, #0]
 800cdfe:	6a21      	ldr	r1, [r4, #32]
 800ce00:	602b      	str	r3, [r5, #0]
 800ce02:	d030      	beq.n	800ce66 <__sflush_r+0x92>
 800ce04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	0759      	lsls	r1, r3, #29
 800ce0a:	d505      	bpl.n	800ce18 <__sflush_r+0x44>
 800ce0c:	6863      	ldr	r3, [r4, #4]
 800ce0e:	1ad2      	subs	r2, r2, r3
 800ce10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce12:	b10b      	cbz	r3, 800ce18 <__sflush_r+0x44>
 800ce14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce16:	1ad2      	subs	r2, r2, r3
 800ce18:	2300      	movs	r3, #0
 800ce1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce1c:	6a21      	ldr	r1, [r4, #32]
 800ce1e:	4628      	mov	r0, r5
 800ce20:	47b0      	blx	r6
 800ce22:	1c43      	adds	r3, r0, #1
 800ce24:	89a3      	ldrh	r3, [r4, #12]
 800ce26:	d106      	bne.n	800ce36 <__sflush_r+0x62>
 800ce28:	6829      	ldr	r1, [r5, #0]
 800ce2a:	291d      	cmp	r1, #29
 800ce2c:	d82b      	bhi.n	800ce86 <__sflush_r+0xb2>
 800ce2e:	4a2a      	ldr	r2, [pc, #168]	@ (800ced8 <__sflush_r+0x104>)
 800ce30:	410a      	asrs	r2, r1
 800ce32:	07d6      	lsls	r6, r2, #31
 800ce34:	d427      	bmi.n	800ce86 <__sflush_r+0xb2>
 800ce36:	2200      	movs	r2, #0
 800ce38:	6062      	str	r2, [r4, #4]
 800ce3a:	04d9      	lsls	r1, r3, #19
 800ce3c:	6922      	ldr	r2, [r4, #16]
 800ce3e:	6022      	str	r2, [r4, #0]
 800ce40:	d504      	bpl.n	800ce4c <__sflush_r+0x78>
 800ce42:	1c42      	adds	r2, r0, #1
 800ce44:	d101      	bne.n	800ce4a <__sflush_r+0x76>
 800ce46:	682b      	ldr	r3, [r5, #0]
 800ce48:	b903      	cbnz	r3, 800ce4c <__sflush_r+0x78>
 800ce4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ce4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce4e:	602f      	str	r7, [r5, #0]
 800ce50:	b1b9      	cbz	r1, 800ce82 <__sflush_r+0xae>
 800ce52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce56:	4299      	cmp	r1, r3
 800ce58:	d002      	beq.n	800ce60 <__sflush_r+0x8c>
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	f7ff f9e0 	bl	800c220 <_free_r>
 800ce60:	2300      	movs	r3, #0
 800ce62:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce64:	e00d      	b.n	800ce82 <__sflush_r+0xae>
 800ce66:	2301      	movs	r3, #1
 800ce68:	4628      	mov	r0, r5
 800ce6a:	47b0      	blx	r6
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	1c50      	adds	r0, r2, #1
 800ce70:	d1c9      	bne.n	800ce06 <__sflush_r+0x32>
 800ce72:	682b      	ldr	r3, [r5, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d0c6      	beq.n	800ce06 <__sflush_r+0x32>
 800ce78:	2b1d      	cmp	r3, #29
 800ce7a:	d001      	beq.n	800ce80 <__sflush_r+0xac>
 800ce7c:	2b16      	cmp	r3, #22
 800ce7e:	d11e      	bne.n	800cebe <__sflush_r+0xea>
 800ce80:	602f      	str	r7, [r5, #0]
 800ce82:	2000      	movs	r0, #0
 800ce84:	e022      	b.n	800cecc <__sflush_r+0xf8>
 800ce86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce8a:	b21b      	sxth	r3, r3
 800ce8c:	e01b      	b.n	800cec6 <__sflush_r+0xf2>
 800ce8e:	690f      	ldr	r7, [r1, #16]
 800ce90:	2f00      	cmp	r7, #0
 800ce92:	d0f6      	beq.n	800ce82 <__sflush_r+0xae>
 800ce94:	0793      	lsls	r3, r2, #30
 800ce96:	680e      	ldr	r6, [r1, #0]
 800ce98:	bf08      	it	eq
 800ce9a:	694b      	ldreq	r3, [r1, #20]
 800ce9c:	600f      	str	r7, [r1, #0]
 800ce9e:	bf18      	it	ne
 800cea0:	2300      	movne	r3, #0
 800cea2:	eba6 0807 	sub.w	r8, r6, r7
 800cea6:	608b      	str	r3, [r1, #8]
 800cea8:	f1b8 0f00 	cmp.w	r8, #0
 800ceac:	dde9      	ble.n	800ce82 <__sflush_r+0xae>
 800ceae:	6a21      	ldr	r1, [r4, #32]
 800ceb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ceb2:	4643      	mov	r3, r8
 800ceb4:	463a      	mov	r2, r7
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	47b0      	blx	r6
 800ceba:	2800      	cmp	r0, #0
 800cebc:	dc08      	bgt.n	800ced0 <__sflush_r+0xfc>
 800cebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cec6:	81a3      	strh	r3, [r4, #12]
 800cec8:	f04f 30ff 	mov.w	r0, #4294967295
 800cecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced0:	4407      	add	r7, r0
 800ced2:	eba8 0800 	sub.w	r8, r8, r0
 800ced6:	e7e7      	b.n	800cea8 <__sflush_r+0xd4>
 800ced8:	dfbffffe 	.word	0xdfbffffe

0800cedc <_fflush_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	690b      	ldr	r3, [r1, #16]
 800cee0:	4605      	mov	r5, r0
 800cee2:	460c      	mov	r4, r1
 800cee4:	b913      	cbnz	r3, 800ceec <_fflush_r+0x10>
 800cee6:	2500      	movs	r5, #0
 800cee8:	4628      	mov	r0, r5
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	b118      	cbz	r0, 800cef6 <_fflush_r+0x1a>
 800ceee:	6a03      	ldr	r3, [r0, #32]
 800cef0:	b90b      	cbnz	r3, 800cef6 <_fflush_r+0x1a>
 800cef2:	f7fe f9a1 	bl	800b238 <__sinit>
 800cef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d0f3      	beq.n	800cee6 <_fflush_r+0xa>
 800cefe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf00:	07d0      	lsls	r0, r2, #31
 800cf02:	d404      	bmi.n	800cf0e <_fflush_r+0x32>
 800cf04:	0599      	lsls	r1, r3, #22
 800cf06:	d402      	bmi.n	800cf0e <_fflush_r+0x32>
 800cf08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf0a:	f7fe fb1c 	bl	800b546 <__retarget_lock_acquire_recursive>
 800cf0e:	4628      	mov	r0, r5
 800cf10:	4621      	mov	r1, r4
 800cf12:	f7ff ff5f 	bl	800cdd4 <__sflush_r>
 800cf16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf18:	07da      	lsls	r2, r3, #31
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	d4e4      	bmi.n	800cee8 <_fflush_r+0xc>
 800cf1e:	89a3      	ldrh	r3, [r4, #12]
 800cf20:	059b      	lsls	r3, r3, #22
 800cf22:	d4e1      	bmi.n	800cee8 <_fflush_r+0xc>
 800cf24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf26:	f7fe fb0f 	bl	800b548 <__retarget_lock_release_recursive>
 800cf2a:	e7dd      	b.n	800cee8 <_fflush_r+0xc>

0800cf2c <fiprintf>:
 800cf2c:	b40e      	push	{r1, r2, r3}
 800cf2e:	b503      	push	{r0, r1, lr}
 800cf30:	4601      	mov	r1, r0
 800cf32:	ab03      	add	r3, sp, #12
 800cf34:	4805      	ldr	r0, [pc, #20]	@ (800cf4c <fiprintf+0x20>)
 800cf36:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf3a:	6800      	ldr	r0, [r0, #0]
 800cf3c:	9301      	str	r3, [sp, #4]
 800cf3e:	f000 f8d1 	bl	800d0e4 <_vfiprintf_r>
 800cf42:	b002      	add	sp, #8
 800cf44:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf48:	b003      	add	sp, #12
 800cf4a:	4770      	bx	lr
 800cf4c:	200000e0 	.word	0x200000e0

0800cf50 <memmove>:
 800cf50:	4288      	cmp	r0, r1
 800cf52:	b510      	push	{r4, lr}
 800cf54:	eb01 0402 	add.w	r4, r1, r2
 800cf58:	d902      	bls.n	800cf60 <memmove+0x10>
 800cf5a:	4284      	cmp	r4, r0
 800cf5c:	4623      	mov	r3, r4
 800cf5e:	d807      	bhi.n	800cf70 <memmove+0x20>
 800cf60:	1e43      	subs	r3, r0, #1
 800cf62:	42a1      	cmp	r1, r4
 800cf64:	d008      	beq.n	800cf78 <memmove+0x28>
 800cf66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf6e:	e7f8      	b.n	800cf62 <memmove+0x12>
 800cf70:	4402      	add	r2, r0
 800cf72:	4601      	mov	r1, r0
 800cf74:	428a      	cmp	r2, r1
 800cf76:	d100      	bne.n	800cf7a <memmove+0x2a>
 800cf78:	bd10      	pop	{r4, pc}
 800cf7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf82:	e7f7      	b.n	800cf74 <memmove+0x24>

0800cf84 <_sbrk_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	4d06      	ldr	r5, [pc, #24]	@ (800cfa0 <_sbrk_r+0x1c>)
 800cf88:	2300      	movs	r3, #0
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	4608      	mov	r0, r1
 800cf8e:	602b      	str	r3, [r5, #0]
 800cf90:	f7f4 fddc 	bl	8001b4c <_sbrk>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d102      	bne.n	800cf9e <_sbrk_r+0x1a>
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	b103      	cbz	r3, 800cf9e <_sbrk_r+0x1a>
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	200008f0 	.word	0x200008f0

0800cfa4 <memcpy>:
 800cfa4:	440a      	add	r2, r1
 800cfa6:	4291      	cmp	r1, r2
 800cfa8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfac:	d100      	bne.n	800cfb0 <memcpy+0xc>
 800cfae:	4770      	bx	lr
 800cfb0:	b510      	push	{r4, lr}
 800cfb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfba:	4291      	cmp	r1, r2
 800cfbc:	d1f9      	bne.n	800cfb2 <memcpy+0xe>
 800cfbe:	bd10      	pop	{r4, pc}

0800cfc0 <abort>:
 800cfc0:	b508      	push	{r3, lr}
 800cfc2:	2006      	movs	r0, #6
 800cfc4:	f000 fa62 	bl	800d48c <raise>
 800cfc8:	2001      	movs	r0, #1
 800cfca:	f7f4 fd47 	bl	8001a5c <_exit>

0800cfce <_calloc_r>:
 800cfce:	b570      	push	{r4, r5, r6, lr}
 800cfd0:	fba1 5402 	umull	r5, r4, r1, r2
 800cfd4:	b93c      	cbnz	r4, 800cfe6 <_calloc_r+0x18>
 800cfd6:	4629      	mov	r1, r5
 800cfd8:	f7ff f996 	bl	800c308 <_malloc_r>
 800cfdc:	4606      	mov	r6, r0
 800cfde:	b928      	cbnz	r0, 800cfec <_calloc_r+0x1e>
 800cfe0:	2600      	movs	r6, #0
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	bd70      	pop	{r4, r5, r6, pc}
 800cfe6:	220c      	movs	r2, #12
 800cfe8:	6002      	str	r2, [r0, #0]
 800cfea:	e7f9      	b.n	800cfe0 <_calloc_r+0x12>
 800cfec:	462a      	mov	r2, r5
 800cfee:	4621      	mov	r1, r4
 800cff0:	f7fe f9cf 	bl	800b392 <memset>
 800cff4:	e7f5      	b.n	800cfe2 <_calloc_r+0x14>

0800cff6 <__ascii_mbtowc>:
 800cff6:	b082      	sub	sp, #8
 800cff8:	b901      	cbnz	r1, 800cffc <__ascii_mbtowc+0x6>
 800cffa:	a901      	add	r1, sp, #4
 800cffc:	b142      	cbz	r2, 800d010 <__ascii_mbtowc+0x1a>
 800cffe:	b14b      	cbz	r3, 800d014 <__ascii_mbtowc+0x1e>
 800d000:	7813      	ldrb	r3, [r2, #0]
 800d002:	600b      	str	r3, [r1, #0]
 800d004:	7812      	ldrb	r2, [r2, #0]
 800d006:	1e10      	subs	r0, r2, #0
 800d008:	bf18      	it	ne
 800d00a:	2001      	movne	r0, #1
 800d00c:	b002      	add	sp, #8
 800d00e:	4770      	bx	lr
 800d010:	4610      	mov	r0, r2
 800d012:	e7fb      	b.n	800d00c <__ascii_mbtowc+0x16>
 800d014:	f06f 0001 	mvn.w	r0, #1
 800d018:	e7f8      	b.n	800d00c <__ascii_mbtowc+0x16>

0800d01a <_realloc_r>:
 800d01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d01e:	4680      	mov	r8, r0
 800d020:	4615      	mov	r5, r2
 800d022:	460c      	mov	r4, r1
 800d024:	b921      	cbnz	r1, 800d030 <_realloc_r+0x16>
 800d026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d02a:	4611      	mov	r1, r2
 800d02c:	f7ff b96c 	b.w	800c308 <_malloc_r>
 800d030:	b92a      	cbnz	r2, 800d03e <_realloc_r+0x24>
 800d032:	f7ff f8f5 	bl	800c220 <_free_r>
 800d036:	2400      	movs	r4, #0
 800d038:	4620      	mov	r0, r4
 800d03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03e:	f000 fa41 	bl	800d4c4 <_malloc_usable_size_r>
 800d042:	4285      	cmp	r5, r0
 800d044:	4606      	mov	r6, r0
 800d046:	d802      	bhi.n	800d04e <_realloc_r+0x34>
 800d048:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d04c:	d8f4      	bhi.n	800d038 <_realloc_r+0x1e>
 800d04e:	4629      	mov	r1, r5
 800d050:	4640      	mov	r0, r8
 800d052:	f7ff f959 	bl	800c308 <_malloc_r>
 800d056:	4607      	mov	r7, r0
 800d058:	2800      	cmp	r0, #0
 800d05a:	d0ec      	beq.n	800d036 <_realloc_r+0x1c>
 800d05c:	42b5      	cmp	r5, r6
 800d05e:	462a      	mov	r2, r5
 800d060:	4621      	mov	r1, r4
 800d062:	bf28      	it	cs
 800d064:	4632      	movcs	r2, r6
 800d066:	f7ff ff9d 	bl	800cfa4 <memcpy>
 800d06a:	4621      	mov	r1, r4
 800d06c:	4640      	mov	r0, r8
 800d06e:	f7ff f8d7 	bl	800c220 <_free_r>
 800d072:	463c      	mov	r4, r7
 800d074:	e7e0      	b.n	800d038 <_realloc_r+0x1e>

0800d076 <__ascii_wctomb>:
 800d076:	4603      	mov	r3, r0
 800d078:	4608      	mov	r0, r1
 800d07a:	b141      	cbz	r1, 800d08e <__ascii_wctomb+0x18>
 800d07c:	2aff      	cmp	r2, #255	@ 0xff
 800d07e:	d904      	bls.n	800d08a <__ascii_wctomb+0x14>
 800d080:	228a      	movs	r2, #138	@ 0x8a
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	f04f 30ff 	mov.w	r0, #4294967295
 800d088:	4770      	bx	lr
 800d08a:	700a      	strb	r2, [r1, #0]
 800d08c:	2001      	movs	r0, #1
 800d08e:	4770      	bx	lr

0800d090 <__sfputc_r>:
 800d090:	6893      	ldr	r3, [r2, #8]
 800d092:	3b01      	subs	r3, #1
 800d094:	2b00      	cmp	r3, #0
 800d096:	b410      	push	{r4}
 800d098:	6093      	str	r3, [r2, #8]
 800d09a:	da08      	bge.n	800d0ae <__sfputc_r+0x1e>
 800d09c:	6994      	ldr	r4, [r2, #24]
 800d09e:	42a3      	cmp	r3, r4
 800d0a0:	db01      	blt.n	800d0a6 <__sfputc_r+0x16>
 800d0a2:	290a      	cmp	r1, #10
 800d0a4:	d103      	bne.n	800d0ae <__sfputc_r+0x1e>
 800d0a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0aa:	f000 b933 	b.w	800d314 <__swbuf_r>
 800d0ae:	6813      	ldr	r3, [r2, #0]
 800d0b0:	1c58      	adds	r0, r3, #1
 800d0b2:	6010      	str	r0, [r2, #0]
 800d0b4:	7019      	strb	r1, [r3, #0]
 800d0b6:	4608      	mov	r0, r1
 800d0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <__sfputs_r>:
 800d0be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c0:	4606      	mov	r6, r0
 800d0c2:	460f      	mov	r7, r1
 800d0c4:	4614      	mov	r4, r2
 800d0c6:	18d5      	adds	r5, r2, r3
 800d0c8:	42ac      	cmp	r4, r5
 800d0ca:	d101      	bne.n	800d0d0 <__sfputs_r+0x12>
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	e007      	b.n	800d0e0 <__sfputs_r+0x22>
 800d0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0d4:	463a      	mov	r2, r7
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f7ff ffda 	bl	800d090 <__sfputc_r>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	d1f3      	bne.n	800d0c8 <__sfputs_r+0xa>
 800d0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0e4 <_vfiprintf_r>:
 800d0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e8:	460d      	mov	r5, r1
 800d0ea:	b09d      	sub	sp, #116	@ 0x74
 800d0ec:	4614      	mov	r4, r2
 800d0ee:	4698      	mov	r8, r3
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	b118      	cbz	r0, 800d0fc <_vfiprintf_r+0x18>
 800d0f4:	6a03      	ldr	r3, [r0, #32]
 800d0f6:	b90b      	cbnz	r3, 800d0fc <_vfiprintf_r+0x18>
 800d0f8:	f7fe f89e 	bl	800b238 <__sinit>
 800d0fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0fe:	07d9      	lsls	r1, r3, #31
 800d100:	d405      	bmi.n	800d10e <_vfiprintf_r+0x2a>
 800d102:	89ab      	ldrh	r3, [r5, #12]
 800d104:	059a      	lsls	r2, r3, #22
 800d106:	d402      	bmi.n	800d10e <_vfiprintf_r+0x2a>
 800d108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d10a:	f7fe fa1c 	bl	800b546 <__retarget_lock_acquire_recursive>
 800d10e:	89ab      	ldrh	r3, [r5, #12]
 800d110:	071b      	lsls	r3, r3, #28
 800d112:	d501      	bpl.n	800d118 <_vfiprintf_r+0x34>
 800d114:	692b      	ldr	r3, [r5, #16]
 800d116:	b99b      	cbnz	r3, 800d140 <_vfiprintf_r+0x5c>
 800d118:	4629      	mov	r1, r5
 800d11a:	4630      	mov	r0, r6
 800d11c:	f000 f938 	bl	800d390 <__swsetup_r>
 800d120:	b170      	cbz	r0, 800d140 <_vfiprintf_r+0x5c>
 800d122:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d124:	07dc      	lsls	r4, r3, #31
 800d126:	d504      	bpl.n	800d132 <_vfiprintf_r+0x4e>
 800d128:	f04f 30ff 	mov.w	r0, #4294967295
 800d12c:	b01d      	add	sp, #116	@ 0x74
 800d12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d132:	89ab      	ldrh	r3, [r5, #12]
 800d134:	0598      	lsls	r0, r3, #22
 800d136:	d4f7      	bmi.n	800d128 <_vfiprintf_r+0x44>
 800d138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d13a:	f7fe fa05 	bl	800b548 <__retarget_lock_release_recursive>
 800d13e:	e7f3      	b.n	800d128 <_vfiprintf_r+0x44>
 800d140:	2300      	movs	r3, #0
 800d142:	9309      	str	r3, [sp, #36]	@ 0x24
 800d144:	2320      	movs	r3, #32
 800d146:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d14a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d14e:	2330      	movs	r3, #48	@ 0x30
 800d150:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d300 <_vfiprintf_r+0x21c>
 800d154:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d158:	f04f 0901 	mov.w	r9, #1
 800d15c:	4623      	mov	r3, r4
 800d15e:	469a      	mov	sl, r3
 800d160:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d164:	b10a      	cbz	r2, 800d16a <_vfiprintf_r+0x86>
 800d166:	2a25      	cmp	r2, #37	@ 0x25
 800d168:	d1f9      	bne.n	800d15e <_vfiprintf_r+0x7a>
 800d16a:	ebba 0b04 	subs.w	fp, sl, r4
 800d16e:	d00b      	beq.n	800d188 <_vfiprintf_r+0xa4>
 800d170:	465b      	mov	r3, fp
 800d172:	4622      	mov	r2, r4
 800d174:	4629      	mov	r1, r5
 800d176:	4630      	mov	r0, r6
 800d178:	f7ff ffa1 	bl	800d0be <__sfputs_r>
 800d17c:	3001      	adds	r0, #1
 800d17e:	f000 80a7 	beq.w	800d2d0 <_vfiprintf_r+0x1ec>
 800d182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d184:	445a      	add	r2, fp
 800d186:	9209      	str	r2, [sp, #36]	@ 0x24
 800d188:	f89a 3000 	ldrb.w	r3, [sl]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f000 809f 	beq.w	800d2d0 <_vfiprintf_r+0x1ec>
 800d192:	2300      	movs	r3, #0
 800d194:	f04f 32ff 	mov.w	r2, #4294967295
 800d198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d19c:	f10a 0a01 	add.w	sl, sl, #1
 800d1a0:	9304      	str	r3, [sp, #16]
 800d1a2:	9307      	str	r3, [sp, #28]
 800d1a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1aa:	4654      	mov	r4, sl
 800d1ac:	2205      	movs	r2, #5
 800d1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b2:	4853      	ldr	r0, [pc, #332]	@ (800d300 <_vfiprintf_r+0x21c>)
 800d1b4:	f7f3 f844 	bl	8000240 <memchr>
 800d1b8:	9a04      	ldr	r2, [sp, #16]
 800d1ba:	b9d8      	cbnz	r0, 800d1f4 <_vfiprintf_r+0x110>
 800d1bc:	06d1      	lsls	r1, r2, #27
 800d1be:	bf44      	itt	mi
 800d1c0:	2320      	movmi	r3, #32
 800d1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1c6:	0713      	lsls	r3, r2, #28
 800d1c8:	bf44      	itt	mi
 800d1ca:	232b      	movmi	r3, #43	@ 0x2b
 800d1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1d6:	d015      	beq.n	800d204 <_vfiprintf_r+0x120>
 800d1d8:	9a07      	ldr	r2, [sp, #28]
 800d1da:	4654      	mov	r4, sl
 800d1dc:	2000      	movs	r0, #0
 800d1de:	f04f 0c0a 	mov.w	ip, #10
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1e8:	3b30      	subs	r3, #48	@ 0x30
 800d1ea:	2b09      	cmp	r3, #9
 800d1ec:	d94b      	bls.n	800d286 <_vfiprintf_r+0x1a2>
 800d1ee:	b1b0      	cbz	r0, 800d21e <_vfiprintf_r+0x13a>
 800d1f0:	9207      	str	r2, [sp, #28]
 800d1f2:	e014      	b.n	800d21e <_vfiprintf_r+0x13a>
 800d1f4:	eba0 0308 	sub.w	r3, r0, r8
 800d1f8:	fa09 f303 	lsl.w	r3, r9, r3
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	9304      	str	r3, [sp, #16]
 800d200:	46a2      	mov	sl, r4
 800d202:	e7d2      	b.n	800d1aa <_vfiprintf_r+0xc6>
 800d204:	9b03      	ldr	r3, [sp, #12]
 800d206:	1d19      	adds	r1, r3, #4
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	9103      	str	r1, [sp, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	bfbb      	ittet	lt
 800d210:	425b      	neglt	r3, r3
 800d212:	f042 0202 	orrlt.w	r2, r2, #2
 800d216:	9307      	strge	r3, [sp, #28]
 800d218:	9307      	strlt	r3, [sp, #28]
 800d21a:	bfb8      	it	lt
 800d21c:	9204      	strlt	r2, [sp, #16]
 800d21e:	7823      	ldrb	r3, [r4, #0]
 800d220:	2b2e      	cmp	r3, #46	@ 0x2e
 800d222:	d10a      	bne.n	800d23a <_vfiprintf_r+0x156>
 800d224:	7863      	ldrb	r3, [r4, #1]
 800d226:	2b2a      	cmp	r3, #42	@ 0x2a
 800d228:	d132      	bne.n	800d290 <_vfiprintf_r+0x1ac>
 800d22a:	9b03      	ldr	r3, [sp, #12]
 800d22c:	1d1a      	adds	r2, r3, #4
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	9203      	str	r2, [sp, #12]
 800d232:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d236:	3402      	adds	r4, #2
 800d238:	9305      	str	r3, [sp, #20]
 800d23a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d310 <_vfiprintf_r+0x22c>
 800d23e:	7821      	ldrb	r1, [r4, #0]
 800d240:	2203      	movs	r2, #3
 800d242:	4650      	mov	r0, sl
 800d244:	f7f2 fffc 	bl	8000240 <memchr>
 800d248:	b138      	cbz	r0, 800d25a <_vfiprintf_r+0x176>
 800d24a:	9b04      	ldr	r3, [sp, #16]
 800d24c:	eba0 000a 	sub.w	r0, r0, sl
 800d250:	2240      	movs	r2, #64	@ 0x40
 800d252:	4082      	lsls	r2, r0
 800d254:	4313      	orrs	r3, r2
 800d256:	3401      	adds	r4, #1
 800d258:	9304      	str	r3, [sp, #16]
 800d25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d25e:	4829      	ldr	r0, [pc, #164]	@ (800d304 <_vfiprintf_r+0x220>)
 800d260:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d264:	2206      	movs	r2, #6
 800d266:	f7f2 ffeb 	bl	8000240 <memchr>
 800d26a:	2800      	cmp	r0, #0
 800d26c:	d03f      	beq.n	800d2ee <_vfiprintf_r+0x20a>
 800d26e:	4b26      	ldr	r3, [pc, #152]	@ (800d308 <_vfiprintf_r+0x224>)
 800d270:	bb1b      	cbnz	r3, 800d2ba <_vfiprintf_r+0x1d6>
 800d272:	9b03      	ldr	r3, [sp, #12]
 800d274:	3307      	adds	r3, #7
 800d276:	f023 0307 	bic.w	r3, r3, #7
 800d27a:	3308      	adds	r3, #8
 800d27c:	9303      	str	r3, [sp, #12]
 800d27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d280:	443b      	add	r3, r7
 800d282:	9309      	str	r3, [sp, #36]	@ 0x24
 800d284:	e76a      	b.n	800d15c <_vfiprintf_r+0x78>
 800d286:	fb0c 3202 	mla	r2, ip, r2, r3
 800d28a:	460c      	mov	r4, r1
 800d28c:	2001      	movs	r0, #1
 800d28e:	e7a8      	b.n	800d1e2 <_vfiprintf_r+0xfe>
 800d290:	2300      	movs	r3, #0
 800d292:	3401      	adds	r4, #1
 800d294:	9305      	str	r3, [sp, #20]
 800d296:	4619      	mov	r1, r3
 800d298:	f04f 0c0a 	mov.w	ip, #10
 800d29c:	4620      	mov	r0, r4
 800d29e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2a2:	3a30      	subs	r2, #48	@ 0x30
 800d2a4:	2a09      	cmp	r2, #9
 800d2a6:	d903      	bls.n	800d2b0 <_vfiprintf_r+0x1cc>
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0c6      	beq.n	800d23a <_vfiprintf_r+0x156>
 800d2ac:	9105      	str	r1, [sp, #20]
 800d2ae:	e7c4      	b.n	800d23a <_vfiprintf_r+0x156>
 800d2b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e7f0      	b.n	800d29c <_vfiprintf_r+0x1b8>
 800d2ba:	ab03      	add	r3, sp, #12
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	462a      	mov	r2, r5
 800d2c0:	4b12      	ldr	r3, [pc, #72]	@ (800d30c <_vfiprintf_r+0x228>)
 800d2c2:	a904      	add	r1, sp, #16
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7fd fb73 	bl	800a9b0 <_printf_float>
 800d2ca:	4607      	mov	r7, r0
 800d2cc:	1c78      	adds	r0, r7, #1
 800d2ce:	d1d6      	bne.n	800d27e <_vfiprintf_r+0x19a>
 800d2d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2d2:	07d9      	lsls	r1, r3, #31
 800d2d4:	d405      	bmi.n	800d2e2 <_vfiprintf_r+0x1fe>
 800d2d6:	89ab      	ldrh	r3, [r5, #12]
 800d2d8:	059a      	lsls	r2, r3, #22
 800d2da:	d402      	bmi.n	800d2e2 <_vfiprintf_r+0x1fe>
 800d2dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2de:	f7fe f933 	bl	800b548 <__retarget_lock_release_recursive>
 800d2e2:	89ab      	ldrh	r3, [r5, #12]
 800d2e4:	065b      	lsls	r3, r3, #25
 800d2e6:	f53f af1f 	bmi.w	800d128 <_vfiprintf_r+0x44>
 800d2ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2ec:	e71e      	b.n	800d12c <_vfiprintf_r+0x48>
 800d2ee:	ab03      	add	r3, sp, #12
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	462a      	mov	r2, r5
 800d2f4:	4b05      	ldr	r3, [pc, #20]	@ (800d30c <_vfiprintf_r+0x228>)
 800d2f6:	a904      	add	r1, sp, #16
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f7fd fdf1 	bl	800aee0 <_printf_i>
 800d2fe:	e7e4      	b.n	800d2ca <_vfiprintf_r+0x1e6>
 800d300:	0800dd00 	.word	0x0800dd00
 800d304:	0800dd0a 	.word	0x0800dd0a
 800d308:	0800a9b1 	.word	0x0800a9b1
 800d30c:	0800d0bf 	.word	0x0800d0bf
 800d310:	0800dd06 	.word	0x0800dd06

0800d314 <__swbuf_r>:
 800d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d316:	460e      	mov	r6, r1
 800d318:	4614      	mov	r4, r2
 800d31a:	4605      	mov	r5, r0
 800d31c:	b118      	cbz	r0, 800d326 <__swbuf_r+0x12>
 800d31e:	6a03      	ldr	r3, [r0, #32]
 800d320:	b90b      	cbnz	r3, 800d326 <__swbuf_r+0x12>
 800d322:	f7fd ff89 	bl	800b238 <__sinit>
 800d326:	69a3      	ldr	r3, [r4, #24]
 800d328:	60a3      	str	r3, [r4, #8]
 800d32a:	89a3      	ldrh	r3, [r4, #12]
 800d32c:	071a      	lsls	r2, r3, #28
 800d32e:	d501      	bpl.n	800d334 <__swbuf_r+0x20>
 800d330:	6923      	ldr	r3, [r4, #16]
 800d332:	b943      	cbnz	r3, 800d346 <__swbuf_r+0x32>
 800d334:	4621      	mov	r1, r4
 800d336:	4628      	mov	r0, r5
 800d338:	f000 f82a 	bl	800d390 <__swsetup_r>
 800d33c:	b118      	cbz	r0, 800d346 <__swbuf_r+0x32>
 800d33e:	f04f 37ff 	mov.w	r7, #4294967295
 800d342:	4638      	mov	r0, r7
 800d344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	6922      	ldr	r2, [r4, #16]
 800d34a:	1a98      	subs	r0, r3, r2
 800d34c:	6963      	ldr	r3, [r4, #20]
 800d34e:	b2f6      	uxtb	r6, r6
 800d350:	4283      	cmp	r3, r0
 800d352:	4637      	mov	r7, r6
 800d354:	dc05      	bgt.n	800d362 <__swbuf_r+0x4e>
 800d356:	4621      	mov	r1, r4
 800d358:	4628      	mov	r0, r5
 800d35a:	f7ff fdbf 	bl	800cedc <_fflush_r>
 800d35e:	2800      	cmp	r0, #0
 800d360:	d1ed      	bne.n	800d33e <__swbuf_r+0x2a>
 800d362:	68a3      	ldr	r3, [r4, #8]
 800d364:	3b01      	subs	r3, #1
 800d366:	60a3      	str	r3, [r4, #8]
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	6022      	str	r2, [r4, #0]
 800d36e:	701e      	strb	r6, [r3, #0]
 800d370:	6962      	ldr	r2, [r4, #20]
 800d372:	1c43      	adds	r3, r0, #1
 800d374:	429a      	cmp	r2, r3
 800d376:	d004      	beq.n	800d382 <__swbuf_r+0x6e>
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	07db      	lsls	r3, r3, #31
 800d37c:	d5e1      	bpl.n	800d342 <__swbuf_r+0x2e>
 800d37e:	2e0a      	cmp	r6, #10
 800d380:	d1df      	bne.n	800d342 <__swbuf_r+0x2e>
 800d382:	4621      	mov	r1, r4
 800d384:	4628      	mov	r0, r5
 800d386:	f7ff fda9 	bl	800cedc <_fflush_r>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d0d9      	beq.n	800d342 <__swbuf_r+0x2e>
 800d38e:	e7d6      	b.n	800d33e <__swbuf_r+0x2a>

0800d390 <__swsetup_r>:
 800d390:	b538      	push	{r3, r4, r5, lr}
 800d392:	4b29      	ldr	r3, [pc, #164]	@ (800d438 <__swsetup_r+0xa8>)
 800d394:	4605      	mov	r5, r0
 800d396:	6818      	ldr	r0, [r3, #0]
 800d398:	460c      	mov	r4, r1
 800d39a:	b118      	cbz	r0, 800d3a4 <__swsetup_r+0x14>
 800d39c:	6a03      	ldr	r3, [r0, #32]
 800d39e:	b90b      	cbnz	r3, 800d3a4 <__swsetup_r+0x14>
 800d3a0:	f7fd ff4a 	bl	800b238 <__sinit>
 800d3a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3a8:	0719      	lsls	r1, r3, #28
 800d3aa:	d422      	bmi.n	800d3f2 <__swsetup_r+0x62>
 800d3ac:	06da      	lsls	r2, r3, #27
 800d3ae:	d407      	bmi.n	800d3c0 <__swsetup_r+0x30>
 800d3b0:	2209      	movs	r2, #9
 800d3b2:	602a      	str	r2, [r5, #0]
 800d3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3b8:	81a3      	strh	r3, [r4, #12]
 800d3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d3be:	e033      	b.n	800d428 <__swsetup_r+0x98>
 800d3c0:	0758      	lsls	r0, r3, #29
 800d3c2:	d512      	bpl.n	800d3ea <__swsetup_r+0x5a>
 800d3c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3c6:	b141      	cbz	r1, 800d3da <__swsetup_r+0x4a>
 800d3c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3cc:	4299      	cmp	r1, r3
 800d3ce:	d002      	beq.n	800d3d6 <__swsetup_r+0x46>
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f7fe ff25 	bl	800c220 <_free_r>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3da:	89a3      	ldrh	r3, [r4, #12]
 800d3dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d3e0:	81a3      	strh	r3, [r4, #12]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	6063      	str	r3, [r4, #4]
 800d3e6:	6923      	ldr	r3, [r4, #16]
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	89a3      	ldrh	r3, [r4, #12]
 800d3ec:	f043 0308 	orr.w	r3, r3, #8
 800d3f0:	81a3      	strh	r3, [r4, #12]
 800d3f2:	6923      	ldr	r3, [r4, #16]
 800d3f4:	b94b      	cbnz	r3, 800d40a <__swsetup_r+0x7a>
 800d3f6:	89a3      	ldrh	r3, [r4, #12]
 800d3f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d3fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d400:	d003      	beq.n	800d40a <__swsetup_r+0x7a>
 800d402:	4621      	mov	r1, r4
 800d404:	4628      	mov	r0, r5
 800d406:	f000 f88b 	bl	800d520 <__smakebuf_r>
 800d40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d40e:	f013 0201 	ands.w	r2, r3, #1
 800d412:	d00a      	beq.n	800d42a <__swsetup_r+0x9a>
 800d414:	2200      	movs	r2, #0
 800d416:	60a2      	str	r2, [r4, #8]
 800d418:	6962      	ldr	r2, [r4, #20]
 800d41a:	4252      	negs	r2, r2
 800d41c:	61a2      	str	r2, [r4, #24]
 800d41e:	6922      	ldr	r2, [r4, #16]
 800d420:	b942      	cbnz	r2, 800d434 <__swsetup_r+0xa4>
 800d422:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d426:	d1c5      	bne.n	800d3b4 <__swsetup_r+0x24>
 800d428:	bd38      	pop	{r3, r4, r5, pc}
 800d42a:	0799      	lsls	r1, r3, #30
 800d42c:	bf58      	it	pl
 800d42e:	6962      	ldrpl	r2, [r4, #20]
 800d430:	60a2      	str	r2, [r4, #8]
 800d432:	e7f4      	b.n	800d41e <__swsetup_r+0x8e>
 800d434:	2000      	movs	r0, #0
 800d436:	e7f7      	b.n	800d428 <__swsetup_r+0x98>
 800d438:	200000e0 	.word	0x200000e0

0800d43c <_raise_r>:
 800d43c:	291f      	cmp	r1, #31
 800d43e:	b538      	push	{r3, r4, r5, lr}
 800d440:	4605      	mov	r5, r0
 800d442:	460c      	mov	r4, r1
 800d444:	d904      	bls.n	800d450 <_raise_r+0x14>
 800d446:	2316      	movs	r3, #22
 800d448:	6003      	str	r3, [r0, #0]
 800d44a:	f04f 30ff 	mov.w	r0, #4294967295
 800d44e:	bd38      	pop	{r3, r4, r5, pc}
 800d450:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d452:	b112      	cbz	r2, 800d45a <_raise_r+0x1e>
 800d454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d458:	b94b      	cbnz	r3, 800d46e <_raise_r+0x32>
 800d45a:	4628      	mov	r0, r5
 800d45c:	f000 f830 	bl	800d4c0 <_getpid_r>
 800d460:	4622      	mov	r2, r4
 800d462:	4601      	mov	r1, r0
 800d464:	4628      	mov	r0, r5
 800d466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d46a:	f000 b817 	b.w	800d49c <_kill_r>
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d00a      	beq.n	800d488 <_raise_r+0x4c>
 800d472:	1c59      	adds	r1, r3, #1
 800d474:	d103      	bne.n	800d47e <_raise_r+0x42>
 800d476:	2316      	movs	r3, #22
 800d478:	6003      	str	r3, [r0, #0]
 800d47a:	2001      	movs	r0, #1
 800d47c:	e7e7      	b.n	800d44e <_raise_r+0x12>
 800d47e:	2100      	movs	r1, #0
 800d480:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d484:	4620      	mov	r0, r4
 800d486:	4798      	blx	r3
 800d488:	2000      	movs	r0, #0
 800d48a:	e7e0      	b.n	800d44e <_raise_r+0x12>

0800d48c <raise>:
 800d48c:	4b02      	ldr	r3, [pc, #8]	@ (800d498 <raise+0xc>)
 800d48e:	4601      	mov	r1, r0
 800d490:	6818      	ldr	r0, [r3, #0]
 800d492:	f7ff bfd3 	b.w	800d43c <_raise_r>
 800d496:	bf00      	nop
 800d498:	200000e0 	.word	0x200000e0

0800d49c <_kill_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	4d07      	ldr	r5, [pc, #28]	@ (800d4bc <_kill_r+0x20>)
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	4608      	mov	r0, r1
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	602b      	str	r3, [r5, #0]
 800d4aa:	f7f4 fac7 	bl	8001a3c <_kill>
 800d4ae:	1c43      	adds	r3, r0, #1
 800d4b0:	d102      	bne.n	800d4b8 <_kill_r+0x1c>
 800d4b2:	682b      	ldr	r3, [r5, #0]
 800d4b4:	b103      	cbz	r3, 800d4b8 <_kill_r+0x1c>
 800d4b6:	6023      	str	r3, [r4, #0]
 800d4b8:	bd38      	pop	{r3, r4, r5, pc}
 800d4ba:	bf00      	nop
 800d4bc:	200008f0 	.word	0x200008f0

0800d4c0 <_getpid_r>:
 800d4c0:	f7f4 bab4 	b.w	8001a2c <_getpid>

0800d4c4 <_malloc_usable_size_r>:
 800d4c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4c8:	1f18      	subs	r0, r3, #4
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	bfbc      	itt	lt
 800d4ce:	580b      	ldrlt	r3, [r1, r0]
 800d4d0:	18c0      	addlt	r0, r0, r3
 800d4d2:	4770      	bx	lr

0800d4d4 <__swhatbuf_r>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4dc:	2900      	cmp	r1, #0
 800d4de:	b096      	sub	sp, #88	@ 0x58
 800d4e0:	4615      	mov	r5, r2
 800d4e2:	461e      	mov	r6, r3
 800d4e4:	da0d      	bge.n	800d502 <__swhatbuf_r+0x2e>
 800d4e6:	89a3      	ldrh	r3, [r4, #12]
 800d4e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d4ec:	f04f 0100 	mov.w	r1, #0
 800d4f0:	bf14      	ite	ne
 800d4f2:	2340      	movne	r3, #64	@ 0x40
 800d4f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	6031      	str	r1, [r6, #0]
 800d4fc:	602b      	str	r3, [r5, #0]
 800d4fe:	b016      	add	sp, #88	@ 0x58
 800d500:	bd70      	pop	{r4, r5, r6, pc}
 800d502:	466a      	mov	r2, sp
 800d504:	f000 f848 	bl	800d598 <_fstat_r>
 800d508:	2800      	cmp	r0, #0
 800d50a:	dbec      	blt.n	800d4e6 <__swhatbuf_r+0x12>
 800d50c:	9901      	ldr	r1, [sp, #4]
 800d50e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d512:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d516:	4259      	negs	r1, r3
 800d518:	4159      	adcs	r1, r3
 800d51a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d51e:	e7eb      	b.n	800d4f8 <__swhatbuf_r+0x24>

0800d520 <__smakebuf_r>:
 800d520:	898b      	ldrh	r3, [r1, #12]
 800d522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d524:	079d      	lsls	r5, r3, #30
 800d526:	4606      	mov	r6, r0
 800d528:	460c      	mov	r4, r1
 800d52a:	d507      	bpl.n	800d53c <__smakebuf_r+0x1c>
 800d52c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d530:	6023      	str	r3, [r4, #0]
 800d532:	6123      	str	r3, [r4, #16]
 800d534:	2301      	movs	r3, #1
 800d536:	6163      	str	r3, [r4, #20]
 800d538:	b003      	add	sp, #12
 800d53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d53c:	ab01      	add	r3, sp, #4
 800d53e:	466a      	mov	r2, sp
 800d540:	f7ff ffc8 	bl	800d4d4 <__swhatbuf_r>
 800d544:	9f00      	ldr	r7, [sp, #0]
 800d546:	4605      	mov	r5, r0
 800d548:	4639      	mov	r1, r7
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7fe fedc 	bl	800c308 <_malloc_r>
 800d550:	b948      	cbnz	r0, 800d566 <__smakebuf_r+0x46>
 800d552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d556:	059a      	lsls	r2, r3, #22
 800d558:	d4ee      	bmi.n	800d538 <__smakebuf_r+0x18>
 800d55a:	f023 0303 	bic.w	r3, r3, #3
 800d55e:	f043 0302 	orr.w	r3, r3, #2
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	e7e2      	b.n	800d52c <__smakebuf_r+0xc>
 800d566:	89a3      	ldrh	r3, [r4, #12]
 800d568:	6020      	str	r0, [r4, #0]
 800d56a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d56e:	81a3      	strh	r3, [r4, #12]
 800d570:	9b01      	ldr	r3, [sp, #4]
 800d572:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d576:	b15b      	cbz	r3, 800d590 <__smakebuf_r+0x70>
 800d578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d57c:	4630      	mov	r0, r6
 800d57e:	f000 f81d 	bl	800d5bc <_isatty_r>
 800d582:	b128      	cbz	r0, 800d590 <__smakebuf_r+0x70>
 800d584:	89a3      	ldrh	r3, [r4, #12]
 800d586:	f023 0303 	bic.w	r3, r3, #3
 800d58a:	f043 0301 	orr.w	r3, r3, #1
 800d58e:	81a3      	strh	r3, [r4, #12]
 800d590:	89a3      	ldrh	r3, [r4, #12]
 800d592:	431d      	orrs	r5, r3
 800d594:	81a5      	strh	r5, [r4, #12]
 800d596:	e7cf      	b.n	800d538 <__smakebuf_r+0x18>

0800d598 <_fstat_r>:
 800d598:	b538      	push	{r3, r4, r5, lr}
 800d59a:	4d07      	ldr	r5, [pc, #28]	@ (800d5b8 <_fstat_r+0x20>)
 800d59c:	2300      	movs	r3, #0
 800d59e:	4604      	mov	r4, r0
 800d5a0:	4608      	mov	r0, r1
 800d5a2:	4611      	mov	r1, r2
 800d5a4:	602b      	str	r3, [r5, #0]
 800d5a6:	f7f4 faa9 	bl	8001afc <_fstat>
 800d5aa:	1c43      	adds	r3, r0, #1
 800d5ac:	d102      	bne.n	800d5b4 <_fstat_r+0x1c>
 800d5ae:	682b      	ldr	r3, [r5, #0]
 800d5b0:	b103      	cbz	r3, 800d5b4 <_fstat_r+0x1c>
 800d5b2:	6023      	str	r3, [r4, #0]
 800d5b4:	bd38      	pop	{r3, r4, r5, pc}
 800d5b6:	bf00      	nop
 800d5b8:	200008f0 	.word	0x200008f0

0800d5bc <_isatty_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d06      	ldr	r5, [pc, #24]	@ (800d5d8 <_isatty_r+0x1c>)
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	602b      	str	r3, [r5, #0]
 800d5c8:	f7f4 faa8 	bl	8001b1c <_isatty>
 800d5cc:	1c43      	adds	r3, r0, #1
 800d5ce:	d102      	bne.n	800d5d6 <_isatty_r+0x1a>
 800d5d0:	682b      	ldr	r3, [r5, #0]
 800d5d2:	b103      	cbz	r3, 800d5d6 <_isatty_r+0x1a>
 800d5d4:	6023      	str	r3, [r4, #0]
 800d5d6:	bd38      	pop	{r3, r4, r5, pc}
 800d5d8:	200008f0 	.word	0x200008f0

0800d5dc <_init>:
 800d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5de:	bf00      	nop
 800d5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e2:	bc08      	pop	{r3}
 800d5e4:	469e      	mov	lr, r3
 800d5e6:	4770      	bx	lr

0800d5e8 <_fini>:
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ea:	bf00      	nop
 800d5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ee:	bc08      	pop	{r3}
 800d5f0:	469e      	mov	lr, r3
 800d5f2:	4770      	bx	lr
