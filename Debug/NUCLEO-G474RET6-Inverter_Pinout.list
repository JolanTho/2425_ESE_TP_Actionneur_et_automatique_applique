
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b098  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800b278  0800b278  0000c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6bc  0800b6bc  0000d12c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6bc  0800b6bc  0000c6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6c4  0800b6c4  0000d12c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6c4  0800b6c4  0000c6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6c8  0800b6c8  0000c6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0800b6cc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  2000012c  0800b7f8  0000d12c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  0800b7f8  0000d7bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d12c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf87  00000000  00000000  0000d15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c77  00000000  00000000  0002a0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  0002dd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ba  00000000  00000000  0002f460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a9ef  00000000  00000000  0003061a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d263  00000000  00000000  0005b009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114ba0  00000000  00000000  0007826c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0018ce0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c24  00000000  00000000  0018ce94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00193ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000012c 	.word	0x2000012c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b260 	.word	0x0800b260

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000130 	.word	0x20000130
 800021c:	0800b260 	.word	0x0800b260

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f009 fd84 	bl	800a106 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b3a      	ldr	r3, [pc, #232]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b38      	ldr	r3, [pc, #224]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b36      	ldr	r3, [pc, #216]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b34      	ldr	r3, [pc, #208]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b33      	ldr	r3, [pc, #204]	@ (80006e8 <MX_ADC1_Init+0x108>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000620:	4b31      	ldr	r3, [pc, #196]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000622:	2201      	movs	r2, #1
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b30      	ldr	r3, [pc, #192]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <MX_ADC1_Init+0x108>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000632:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000634:	2201      	movs	r2, #1
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000638:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <MX_ADC1_Init+0x108>)
 800063a:	2202      	movs	r2, #2
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000648:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000656:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000658:	2201      	movs	r2, #1
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	481e      	ldr	r0, [pc, #120]	@ (80006e8 <MX_ADC1_Init+0x108>)
 800066e:	f002 f803 	bl	8002678 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000678:	f000 fb78 	bl	8000d6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	4818      	ldr	r0, [pc, #96]	@ (80006e8 <MX_ADC1_Init+0x108>)
 8000688:	f003 fbb4 	bl	8003df4 <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000692:	f000 fb6b 	bl	8000d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_ADC1_Init+0x10c>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800069e:	2307      	movs	r3, #7
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	@ 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <MX_ADC1_Init+0x108>)
 80006b4:	f002 fcee 	bl	8003094 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006be:	f000 fb55 	bl	8000d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_ADC1_Init+0x110>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c6:	230c      	movs	r3, #12
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <MX_ADC1_Init+0x108>)
 80006d0:	f002 fce0 	bl	8003094 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006da:	f000 fb47 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3730      	adds	r7, #48	@ 0x30
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000148 	.word	0x20000148
 80006ec:	08600004 	.word	0x08600004
 80006f0:	32601000 	.word	0x32601000

080006f4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2220      	movs	r2, #32
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f009 fd00 	bl	800a106 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000706:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000708:	4a2c      	ldr	r2, [pc, #176]	@ (80007bc <MX_ADC2_Init+0xc8>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b2a      	ldr	r3, [pc, #168]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800070e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000712:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071a:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000720:	4b25      	ldr	r3, [pc, #148]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000726:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b22      	ldr	r3, [pc, #136]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800072e:	2204      	movs	r2, #4
 8000730:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000732:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000734:	2200      	movs	r2, #0
 8000736:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000738:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800073a:	2201      	movs	r2, #1
 800073c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800073e:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000740:	2201      	movs	r2, #1
 8000742:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800074c:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800074e:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000756:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800075a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800075c:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800075e:	2201      	movs	r2, #1
 8000760:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000772:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000774:	f001 ff80 	bl	8002678 <HAL_ADC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800077e:	f000 faf5 	bl	8000d6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_ADC2_Init+0xcc>)
 8000784:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000786:	2306      	movs	r3, #6
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800078a:	2307      	movs	r3, #7
 800078c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078e:	237f      	movs	r3, #127	@ 0x7f
 8000790:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000792:	2304      	movs	r3, #4
 8000794:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 80007a0:	f002 fc78 	bl	8003094 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80007aa:	f000 fadf 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200001b4 	.word	0x200001b4
 80007bc:	50000100 	.word	0x50000100
 80007c0:	04300002 	.word	0x04300002

080007c4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0a4      	sub	sp, #144	@ 0x90
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e0:	2254      	movs	r2, #84	@ 0x54
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f009 fc8e 	bl	800a106 <memset>
  if(adcHandle->Instance==ADC1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007f2:	f040 80a8 	bne.w	8000946 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007fc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000800:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000806:	4618      	mov	r0, r3
 8000808:	f004 fffa 	bl	8005800 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000812:	f000 faab 	bl	8000d6c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000816:	4b97      	ldr	r3, [pc, #604]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a95      	ldr	r2, [pc, #596]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 800081e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000820:	4b94      	ldr	r3, [pc, #592]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10b      	bne.n	8000840 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000828:	4b93      	ldr	r3, [pc, #588]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082c:	4a92      	ldr	r2, [pc, #584]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800082e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000834:	4b90      	ldr	r3, [pc, #576]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
 800083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000840:	4b8d      	ldr	r3, [pc, #564]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000844:	4a8c      	ldr	r2, [pc, #560]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084c:	4b8a      	ldr	r3, [pc, #552]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	623b      	str	r3, [r7, #32]
 8000856:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b87      	ldr	r3, [pc, #540]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085c:	4a86      	ldr	r2, [pc, #536]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000864:	4b84      	ldr	r3, [pc, #528]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
 800086e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000870:	4b81      	ldr	r3, [pc, #516]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000874:	4a80      	ldr	r2, [pc, #512]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
 8000886:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000888:	2304      	movs	r3, #4
 800088a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800089c:	4619      	mov	r1, r3
 800089e:	4877      	ldr	r0, [pc, #476]	@ (8000a7c <HAL_ADC_MspInit+0x2b8>)
 80008a0:	f003 ffc2 	bl	8004828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80008a4:	2302      	movs	r3, #2
 80008a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f003 ffb3 	bl	8004828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008c2:	2303      	movs	r3, #3
 80008c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c6:	2303      	movs	r3, #3
 80008c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008d6:	4619      	mov	r1, r3
 80008d8:	4869      	ldr	r0, [pc, #420]	@ (8000a80 <HAL_ADC_MspInit+0x2bc>)
 80008da:	f003 ffa5 	bl	8004828 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008de:	4b69      	ldr	r3, [pc, #420]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008e0:	4a69      	ldr	r2, [pc, #420]	@ (8000a88 <HAL_ADC_MspInit+0x2c4>)
 80008e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008e4:	4b67      	ldr	r3, [pc, #412]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008e6:	2205      	movs	r2, #5
 80008e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ea:	4b66      	ldr	r3, [pc, #408]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f0:	4b64      	ldr	r3, [pc, #400]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008f6:	4b63      	ldr	r3, [pc, #396]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008f8:	2280      	movs	r2, #128	@ 0x80
 80008fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008fc:	4b61      	ldr	r3, [pc, #388]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 80008fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000902:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000904:	4b5f      	ldr	r3, [pc, #380]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 8000906:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800090a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800090c:	4b5d      	ldr	r3, [pc, #372]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 800090e:	2220      	movs	r2, #32
 8000910:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000912:	4b5c      	ldr	r3, [pc, #368]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000918:	485a      	ldr	r0, [pc, #360]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 800091a:	f003 fc53 	bl	80041c4 <HAL_DMA_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8000924:	f000 fa22 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a56      	ldr	r2, [pc, #344]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 800092c:	655a      	str	r2, [r3, #84]	@ 0x54
 800092e:	4a55      	ldr	r2, [pc, #340]	@ (8000a84 <HAL_ADC_MspInit+0x2c0>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2012      	movs	r0, #18
 800093a:	f003 fc1b 	bl	8004174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800093e:	2012      	movs	r0, #18
 8000940:	f003 fc32 	bl	80041a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000944:	e092      	b.n	8000a6c <HAL_ADC_MspInit+0x2a8>
  else if(adcHandle->Instance==ADC2)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a50      	ldr	r2, [pc, #320]	@ (8000a8c <HAL_ADC_MspInit+0x2c8>)
 800094c:	4293      	cmp	r3, r2
 800094e:	f040 808d 	bne.w	8000a6c <HAL_ADC_MspInit+0x2a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000958:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800095c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000962:	4618      	mov	r0, r3
 8000964:	f004 ff4c 	bl	8005800 <HAL_RCCEx_PeriphCLKConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 800096e:	f000 f9fd 	bl	8000d6c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000972:	4b40      	ldr	r3, [pc, #256]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a3e      	ldr	r2, [pc, #248]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 800097a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800097c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a74 <HAL_ADC_MspInit+0x2b0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d10b      	bne.n	800099c <HAL_ADC_MspInit+0x1d8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000984:	4b3c      	ldr	r3, [pc, #240]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000988:	4a3b      	ldr	r2, [pc, #236]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800098a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800098e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000990:	4b39      	ldr	r3, [pc, #228]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	4b36      	ldr	r3, [pc, #216]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a0:	4a35      	ldr	r2, [pc, #212]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a8:	4b33      	ldr	r3, [pc, #204]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b30      	ldr	r3, [pc, #192]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a78 <HAL_ADC_MspInit+0x2b4>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80009cc:	230b      	movs	r3, #11
 80009ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d0:	2303      	movs	r3, #3
 80009d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009e0:	4619      	mov	r1, r3
 80009e2:	4826      	ldr	r0, [pc, #152]	@ (8000a7c <HAL_ADC_MspInit+0x2b8>)
 80009e4:	f003 ff20 	bl	8004828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80009e8:	2301      	movs	r3, #1
 80009ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009fc:	4619      	mov	r1, r3
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a02:	f003 ff11 	bl	8004828 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000a06:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a08:	4a22      	ldr	r2, [pc, #136]	@ (8000a94 <HAL_ADC_MspInit+0x2d0>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a0e:	2224      	movs	r2, #36	@ 0x24
 8000a10:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a20:	2280      	movs	r2, #128	@ 0x80
 8000a22:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a2a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a32:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a36:	2220      	movs	r2, #32
 8000a38:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a40:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a42:	f003 fbbf 	bl	80041c4 <HAL_DMA_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_ADC_MspInit+0x28c>
      Error_Handler();
 8000a4c:	f000 f98e 	bl	8000d6c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a54:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a56:	4a0e      	ldr	r2, [pc, #56]	@ (8000a90 <HAL_ADC_MspInit+0x2cc>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2012      	movs	r0, #18
 8000a62:	f003 fb87 	bl	8004174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a66:	2012      	movs	r0, #18
 8000a68:	f003 fb9e 	bl	80041a8 <HAL_NVIC_EnableIRQ>
}
 8000a6c:	bf00      	nop
 8000a6e:	3790      	adds	r7, #144	@ 0x90
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200002e0 	.word	0x200002e0
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48000800 	.word	0x48000800
 8000a80:	48000400 	.word	0x48000400
 8000a84:	20000220 	.word	0x20000220
 8000a88:	40020008 	.word	0x40020008
 8000a8c:	50000100 	.word	0x50000100
 8000a90:	20000280 	.word	0x20000280
 8000a94:	4002001c 	.word	0x4002001c

08000a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aa2:	4a15      	ldr	r2, [pc, #84]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000aaa:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aba:	4a0f      	ldr	r2, [pc, #60]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <MX_DMA_Init+0x60>)
 8000ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	200b      	movs	r0, #11
 8000ad4:	f003 fb4e 	bl	8004174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ad8:	200b      	movs	r0, #11
 8000ada:	f003 fb65 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f003 fb46 	bl	8004174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ae8:	200c      	movs	r0, #12
 8000aea:	f003 fb5d 	bl	80041a8 <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	@ 0x28
 8000b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b3f      	ldr	r3, [pc, #252]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a3e      	ldr	r2, [pc, #248]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2a:	4b39      	ldr	r3, [pc, #228]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a38      	ldr	r2, [pc, #224]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b30:	f043 0320 	orr.w	r3, r3, #32
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b36      	ldr	r3, [pc, #216]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0320 	and.w	r3, r3, #32
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b33      	ldr	r3, [pc, #204]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a32      	ldr	r2, [pc, #200]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a26      	ldr	r2, [pc, #152]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f003 ffcb 	bl	8004b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2104      	movs	r1, #4
 8000b9a:	481e      	ldr	r0, [pc, #120]	@ (8000c14 <MX_GPIO_Init+0x118>)
 8000b9c:	f003 ffc6 	bl	8004b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4818      	ldr	r0, [pc, #96]	@ (8000c18 <MX_GPIO_Init+0x11c>)
 8000bb8:	f003 fe36 	bl	8004828 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000bbc:	2320      	movs	r3, #32
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd6:	f003 fe27 	bl	8004828 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_SafetyUC_Pin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4808      	ldr	r0, [pc, #32]	@ (8000c14 <MX_GPIO_Init+0x118>)
 8000bf2:	f003 fe19 	bl	8004828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2028      	movs	r0, #40	@ 0x28
 8000bfc:	f003 faba 	bl	8004174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c00:	2028      	movs	r0, #40	@ 0x28
 8000c02:	f003 fad1 	bl	80041a8 <HAL_NVIC_EnableIRQ>

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	@ 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000c00 	.word	0x48000c00
 8000c18:	48000800 	.word	0x48000800

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f001 fa6b 	bl	80020fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f83c 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f7ff ff68 	bl	8000afc <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2c:	f7ff ff34 	bl	8000a98 <MX_DMA_Init>
  MX_ADC2_Init();
 8000c30:	f7ff fd60 	bl	80006f4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000c34:	f7ff fcd4 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c38:	f000 faba 	bl	80011b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c3c:	f000 fbbc 	bl	80013b8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 fd6e 	bl	8001720 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c44:	f000 fdb8 	bl	80017b8 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8000c48:	f000 fc0c 	bl	8001464 <MX_TIM16_Init>
  MX_TIM2_Init();
 8000c4c:	f000 fb66 	bl	800131c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init(); // init du shell
 8000c50:	f000 ffa0 	bl	8001b94 <Shell_Init>

	pwm_start(); // Depart des pwm
 8000c54:	f000 ff08 	bl	8001a68 <pwm_start>
	codeur_start(); // Depart de l'encodeur
 8000c58:	f000 fea2 	bl	80019a0 <codeur_start>

	HAL_TIM_Base_Start_IT(&htim16);
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <main+0x70>)
 8000c5e:	f005 f875 	bl	8005d4c <HAL_TIM_Base_Start_IT>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c62:	217f      	movs	r1, #127	@ 0x7f
 8000c64:	480a      	ldr	r0, [pc, #40]	@ (8000c90 <main+0x74>)
 8000c66:	f003 f831 	bl	8003ccc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint16_t*)&value_adc1,2);
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	4909      	ldr	r1, [pc, #36]	@ (8000c94 <main+0x78>)
 8000c6e:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <main+0x74>)
 8000c70:	f001 febe 	bl	80029f0 <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000c74:	217f      	movs	r1, #127	@ 0x7f
 8000c76:	4808      	ldr	r0, [pc, #32]	@ (8000c98 <main+0x7c>)
 8000c78:	f003 f828 	bl	8003ccc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2,(uint16_t*)&value_adc2,1);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4907      	ldr	r1, [pc, #28]	@ (8000c9c <main+0x80>)
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <main+0x7c>)
 8000c82:	f001 feb5 	bl	80029f0 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000c86:	f000 ffc5 	bl	8001c14 <Shell_Loop>
 8000c8a:	e7fc      	b.n	8000c86 <main+0x6a>
 8000c8c:	20000424 	.word	0x20000424
 8000c90:	20000148 	.word	0x20000148
 8000c94:	200002e4 	.word	0x200002e4
 8000c98:	200001b4 	.word	0x200001b4
 8000c9c:	200002e8 	.word	0x200002e8

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	@ 0x50
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	2238      	movs	r2, #56	@ 0x38
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f009 fa29 	bl	800a106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f003 ff88 	bl	8004bd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ccc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000cda:	2306      	movs	r3, #6
 8000cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cde:	2355      	movs	r3, #85	@ 0x55
 8000ce0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f004 f824 	bl	8004d40 <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000cfe:	f000 f835 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2303      	movs	r3, #3
 8000d08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2104      	movs	r1, #4
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f004 fb22 	bl	8005364 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d26:	f000 f821 	bl	8000d6c <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	@ 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
//	cpt = (cpt + 1)%20000;
//	if(cpt == 0) HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a04      	ldr	r2, [pc, #16]	@ (8000d68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d101      	bne.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5a:	f001 f9e7 	bl	800212c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40001000 	.word	0x40001000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <Error_Handler+0x8>

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d82:	4a0e      	ldr	r2, [pc, #56]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_MspInit+0x44>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dae:	f003 ffb7 	bl	8004d20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	@ 0x30
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <HAL_InitTick+0xc4>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e84 <HAL_InitTick+0xc4>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ddc:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <HAL_InitTick+0xc4>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de8:	f107 020c 	add.w	r2, r7, #12
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 fc8c 	bl	8005710 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000df8:	f004 fc5e 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 8000dfc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <HAL_InitTick+0xc8>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	0c9b      	lsrs	r3, r3, #18
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <HAL_InitTick+0xcc>)
 8000e0e:	4a20      	ldr	r2, [pc, #128]	@ (8000e90 <HAL_InitTick+0xd0>)
 8000e10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <HAL_InitTick+0xcc>)
 8000e14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <HAL_InitTick+0xcc>)
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_InitTick+0xcc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_InitTick+0xcc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e2c:	4817      	ldr	r0, [pc, #92]	@ (8000e8c <HAL_InitTick+0xcc>)
 8000e2e:	f004 ff35 	bl	8005c9c <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d11b      	bne.n	8000e78 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e40:	4812      	ldr	r0, [pc, #72]	@ (8000e8c <HAL_InitTick+0xcc>)
 8000e42:	f004 ff83 	bl	8005d4c <HAL_TIM_Base_Start_IT>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d111      	bne.n	8000e78 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e54:	2036      	movs	r0, #54	@ 0x36
 8000e56:	f003 f9a7 	bl	80041a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d808      	bhi.n	8000e72 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	2036      	movs	r0, #54	@ 0x36
 8000e66:	f003 f985 	bl	8004174 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_InitTick+0xd4>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	e002      	b.n	8000e78 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3730      	adds	r7, #48	@ 0x30
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000
 8000e88:	431bde83 	.word	0x431bde83
 8000e8c:	200002ec 	.word	0x200002ec
 8000e90:	40001000 	.word	0x40001000
 8000e94:	200000c8 	.word	0x200000c8

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <DMA1_Channel1_IRQHandler+0x10>)
 8000efe:	f003 fb44 	bl	800458a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000220 	.word	0x20000220

08000f0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <DMA1_Channel2_IRQHandler+0x10>)
 8000f12:	f003 fb3a 	bl	800458a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000280 	.word	0x20000280

08000f20 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <ADC1_2_IRQHandler+0x14>)
 8000f26:	f001 fe37 	bl	8002b98 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f2a:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <ADC1_2_IRQHandler+0x18>)
 8000f2c:	f001 fe34 	bl	8002b98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000148 	.word	0x20000148
 8000f38:	200001b4 	.word	0x200001b4

08000f3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f40:	480e      	ldr	r0, [pc, #56]	@ (8000f7c <TIM1_UP_TIM16_IRQHandler+0x40>)
 8000f42:	f005 fad5 	bl	80064f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000f46:	480e      	ldr	r0, [pc, #56]	@ (8000f80 <TIM1_UP_TIM16_IRQHandler+0x44>)
 8000f48:	f005 fad2 	bl	80064f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  if(idx == dt){
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <TIM1_UP_TIM16_IRQHandler+0x48>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <TIM1_UP_TIM16_IRQHandler+0x4c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d109      	bne.n	8000f6c <TIM1_UP_TIM16_IRQHandler+0x30>
	  idx =0;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <TIM1_UP_TIM16_IRQHandler+0x48>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
	  calc_speed();
 8000f5e:	f000 fd43 	bl	80019e8 <calc_speed>
	  HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8000f62:	2120      	movs	r1, #32
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f68:	f003 fdf8 	bl	8004b5c <HAL_GPIO_TogglePin>
  }

  idx++;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <TIM1_UP_TIM16_IRQHandler+0x48>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <TIM1_UP_TIM16_IRQHandler+0x48>)
 8000f74:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000340 	.word	0x20000340
 8000f80:	20000424 	.word	0x20000424
 8000f84:	20000338 	.word	0x20000338
 8000f88:	20000004 	.word	0x20000004

08000f8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <TIM2_IRQHandler+0x10>)
 8000f92:	f005 faad 	bl	80064f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000038c 	.word	0x2000038c

08000fa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <TIM3_IRQHandler+0x10>)
 8000fa6:	f005 faa3 	bl	80064f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200003d8 	.word	0x200003d8

08000fb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <USART2_IRQHandler+0x10>)
 8000fba:	f006 fec3 	bl	8007d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000470 	.word	0x20000470

08000fc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <USART3_IRQHandler+0x10>)
 8000fce:	f006 feb9 	bl	8007d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000504 	.word	0x20000504

08000fdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000fe0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fe4:	f003 fdd4 	bl	8004b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <TIM6_DAC_IRQHandler+0x10>)
 8000ff2:	f005 fa7d 	bl	80064f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200002ec 	.word	0x200002ec

08001000 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return 1;
 8001004:	2301      	movs	r3, #1
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_kill>:

int _kill(int pid, int sig)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800101a:	f009 f91f 	bl	800a25c <__errno>
 800101e:	4603      	mov	r3, r0
 8001020:	2216      	movs	r2, #22
 8001022:	601a      	str	r2, [r3, #0]
  return -1;
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_exit>:

void _exit (int status)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ffe7 	bl	8001010 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001042:	bf00      	nop
 8001044:	e7fd      	b.n	8001042 <_exit+0x12>

08001046 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e00a      	b.n	800106e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001058:	f3af 8000 	nop.w
 800105c:	4601      	mov	r1, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	60ba      	str	r2, [r7, #8]
 8001064:	b2ca      	uxtb	r2, r1
 8001066:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3301      	adds	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	429a      	cmp	r2, r3
 8001074:	dbf0      	blt.n	8001058 <_read+0x12>
  }

  return len;
 8001076:	687b      	ldr	r3, [r7, #4]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e009      	b.n	80010a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	60ba      	str	r2, [r7, #8]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dbf1      	blt.n	8001092 <_write+0x12>
  }
  return len;
 80010ae:	687b      	ldr	r3, [r7, #4]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_close>:

int _close(int file)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010e0:	605a      	str	r2, [r3, #4]
  return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_isatty>:

int _isatty(int file)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001106:	b480      	push	{r7}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	@ (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f009 f884 	bl	800a25c <__errno>
 8001154:	4603      	mov	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <_sbrk+0x64>)
 8001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20020000 	.word	0x20020000
 8001180:	00000400 	.word	0x00000400
 8001184:	2000033c 	.word	0x2000033c
 8001188:	200007c0 	.word	0x200007c0

0800118c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <SystemInit+0x20>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <SystemInit+0x20>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b098      	sub	sp, #96	@ 0x60
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2234      	movs	r2, #52	@ 0x34
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f008 ff92 	bl	800a106 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001314 <MX_TIM1_Init+0x164>)
 80011e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001318 <MX_TIM1_Init+0x168>)
 80011e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001314 <MX_TIM1_Init+0x164>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80011ee:	4b49      	ldr	r3, [pc, #292]	@ (8001314 <MX_TIM1_Init+0x164>)
 80011f0:	2220      	movs	r2, #32
 80011f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 80011f4:	4b47      	ldr	r3, [pc, #284]	@ (8001314 <MX_TIM1_Init+0x164>)
 80011f6:	f242 1233 	movw	r2, #8499	@ 0x2133
 80011fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b45      	ldr	r3, [pc, #276]	@ (8001314 <MX_TIM1_Init+0x164>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001202:	4b44      	ldr	r3, [pc, #272]	@ (8001314 <MX_TIM1_Init+0x164>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b42      	ldr	r3, [pc, #264]	@ (8001314 <MX_TIM1_Init+0x164>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800120e:	4841      	ldr	r0, [pc, #260]	@ (8001314 <MX_TIM1_Init+0x164>)
 8001210:	f004 fe14 	bl	8005e3c <HAL_TIM_PWM_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800121a:	f7ff fda7 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800121e:	2320      	movs	r3, #32
 8001220:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001222:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001226:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001230:	4619      	mov	r1, r3
 8001232:	4838      	ldr	r0, [pc, #224]	@ (8001314 <MX_TIM1_Init+0x164>)
 8001234:	f006 fab4 	bl	80077a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800123e:	f7ff fd95 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001242:	2360      	movs	r3, #96	@ 0x60
 8001244:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5100;
 8001246:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 800124a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124c:	2300      	movs	r3, #0
 800124e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001250:	2300      	movs	r3, #0
 8001252:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001260:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	482a      	ldr	r0, [pc, #168]	@ (8001314 <MX_TIM1_Init+0x164>)
 800126a:	f005 fa91 	bl	8006790 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001274:	f7ff fd7a 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.Pulse = 3400;
 8001278:	f640 5348 	movw	r3, #3400	@ 0xd48
 800127c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800127e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001282:	2204      	movs	r2, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4823      	ldr	r0, [pc, #140]	@ (8001314 <MX_TIM1_Init+0x164>)
 8001288:	f005 fa82 	bl	8006790 <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8001292:	f7ff fd6b 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.Pulse = 5100;
 8001296:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800129c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012a0:	2208      	movs	r2, #8
 80012a2:	4619      	mov	r1, r3
 80012a4:	481b      	ldr	r0, [pc, #108]	@ (8001314 <MX_TIM1_Init+0x164>)
 80012a6:	f005 fa73 	bl	8006790 <HAL_TIM_PWM_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80012b0:	f7ff fd5c 	bl	8000d6c <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80012b4:	4817      	ldr	r0, [pc, #92]	@ (8001314 <MX_TIM1_Init+0x164>)
 80012b6:	f006 fb9d 	bl	80079f4 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 80012c6:	2311      	movs	r3, #17
 80012c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	@ (8001314 <MX_TIM1_Init+0x164>)
 80012f8:	f006 fae8 	bl	80078cc <HAL_TIMEx_ConfigBreakDeadTime>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8001302:	f7ff fd33 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001306:	4803      	ldr	r0, [pc, #12]	@ (8001314 <MX_TIM1_Init+0x164>)
 8001308:	f000 f9a2 	bl	8001650 <HAL_TIM_MspPostInit>

}
 800130c:	bf00      	nop
 800130e:	3760      	adds	r7, #96	@ 0x60
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000340 	.word	0x20000340
 8001318:	40012c00 	.word	0x40012c00

0800131c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800133a:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800133c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001340:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001342:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169999;
 800134e:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001350:	4a18      	ldr	r2, [pc, #96]	@ (80013b4 <MX_TIM2_Init+0x98>)
 8001352:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001360:	4813      	ldr	r0, [pc, #76]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001362:	f004 fc9b 	bl	8005c9c <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800136c:	f7ff fcfe 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001374:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4619      	mov	r1, r3
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800137e:	f005 fb1b 	bl	80069b8 <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001388:	f7ff fcf0 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800139a:	f006 fa01 	bl	80077a0 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f7ff fce2 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000038c 	.word	0x2000038c
 80013b4:	0002980f 	.word	0x0002980f

080013b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	@ 0x30
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2224      	movs	r2, #36	@ 0x24
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f008 fe9d 	bl	800a106 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d6:	4b21      	ldr	r3, [pc, #132]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013d8:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <MX_TIM3_Init+0xa8>)
 80013da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <MX_TIM3_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013fc:	2303      	movs	r3, #3
 80013fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001404:	2301      	movs	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001414:	2301      	movs	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	480d      	ldr	r0, [pc, #52]	@ (800145c <MX_TIM3_Init+0xa4>)
 8001428:	f004 ff0e 	bl	8006248 <HAL_TIM_Encoder_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001432:	f7ff fc9b 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	@ (800145c <MX_TIM3_Init+0xa4>)
 8001444:	f006 f9ac 	bl	80077a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800144e:	f7ff fc8d 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3730      	adds	r7, #48	@ 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200003d8 	.word	0x200003d8
 8001460:	40000400 	.word	0x40000400

08001464 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <MX_TIM16_Init+0x44>)
 800146a:	4a10      	ldr	r2, [pc, #64]	@ (80014ac <MX_TIM16_Init+0x48>)
 800146c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_TIM16_Init+0x44>)
 8001470:	2204      	movs	r2, #4
 8001472:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_TIM16_Init+0x44>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 33999;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MX_TIM16_Init+0x44>)
 800147c:	f248 42cf 	movw	r2, #33999	@ 0x84cf
 8001480:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_TIM16_Init+0x44>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <MX_TIM16_Init+0x44>)
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_TIM16_Init+0x44>)
 8001490:	2280      	movs	r2, #128	@ 0x80
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_TIM16_Init+0x44>)
 8001496:	f004 fc01 	bl	8005c9c <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80014a0:	f7ff fc64 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000424 	.word	0x20000424
 80014ac:	40014400 	.word	0x40014400

080014b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <HAL_TIM_PWM_MspInit+0x44>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d113      	bne.n	80014ea <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <HAL_TIM_PWM_MspInit+0x48>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c6:	4a0c      	ldr	r2, [pc, #48]	@ (80014f8 <HAL_TIM_PWM_MspInit+0x48>)
 80014c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_TIM_PWM_MspInit+0x48>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2019      	movs	r0, #25
 80014e0:	f002 fe48 	bl	8004174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014e4:	2019      	movs	r0, #25
 80014e6:	f002 fe5f 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40012c00 	.word	0x40012c00
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800150c:	d114      	bne.n	8001538 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150e:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <HAL_TIM_Base_MspInit+0x78>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <HAL_TIM_Base_MspInit+0x78>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6593      	str	r3, [r2, #88]	@ 0x58
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <HAL_TIM_Base_MspInit+0x78>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	201c      	movs	r0, #28
 800152c:	f002 fe22 	bl	8004174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001530:	201c      	movs	r0, #28
 8001532:	f002 fe39 	bl	80041a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001536:	e018      	b.n	800156a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0e      	ldr	r2, [pc, #56]	@ (8001578 <HAL_TIM_Base_MspInit+0x7c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d113      	bne.n	800156a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <HAL_TIM_Base_MspInit+0x78>)
 8001544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001546:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <HAL_TIM_Base_MspInit+0x78>)
 8001548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154c:	6613      	str	r3, [r2, #96]	@ 0x60
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_TIM_Base_MspInit+0x78>)
 8001550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2019      	movs	r0, #25
 8001560:	f002 fe08 	bl	8004174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001564:	2019      	movs	r0, #25
 8001566:	f002 fe1f 	bl	80041a8 <HAL_NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	40014400 	.word	0x40014400

0800157c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a2a      	ldr	r2, [pc, #168]	@ (8001644 <HAL_TIM_Encoder_MspInit+0xc8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d14d      	bne.n	800163a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800159e:	4b2a      	ldr	r3, [pc, #168]	@ (8001648 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a2:	4a29      	ldr	r2, [pc, #164]	@ (8001648 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015aa:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	4a23      	ldr	r2, [pc, #140]	@ (8001648 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c2:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001648 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015da:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80015e6:	2350      	movs	r3, #80	@ 0x50
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015f6:	2302      	movs	r3, #2
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001604:	f003 f910 	bl	8004828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800161a:	2302      	movs	r3, #2
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4809      	ldr	r0, [pc, #36]	@ (800164c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001626:	f003 f8ff 	bl	8004828 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	201d      	movs	r0, #29
 8001630:	f002 fda0 	bl	8004174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001634:	201d      	movs	r0, #29
 8001636:	f002 fdb7 	bl	80041a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40000400 	.word	0x40000400
 8001648:	40021000 	.word	0x40021000
 800164c:	48000800 	.word	0x48000800

08001650 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a29      	ldr	r2, [pc, #164]	@ (8001714 <HAL_TIM_MspPostInit+0xc4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d14b      	bne.n	800170a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4b29      	ldr	r3, [pc, #164]	@ (8001718 <HAL_TIM_MspPostInit+0xc8>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	4a28      	ldr	r2, [pc, #160]	@ (8001718 <HAL_TIM_MspPostInit+0xc8>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167e:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <HAL_TIM_MspPostInit+0xc8>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <HAL_TIM_MspPostInit+0xc8>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	4a22      	ldr	r2, [pc, #136]	@ (8001718 <HAL_TIM_MspPostInit+0xc8>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001696:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <HAL_TIM_MspPostInit+0xc8>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80016a2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016b4:	2306      	movs	r3, #6
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4817      	ldr	r0, [pc, #92]	@ (800171c <HAL_TIM_MspPostInit+0xcc>)
 80016c0:	f003 f8b2 	bl	8004828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80016c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80016d6:	2304      	movs	r3, #4
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	480e      	ldr	r0, [pc, #56]	@ (800171c <HAL_TIM_MspPostInit+0xcc>)
 80016e2:	f003 f8a1 	bl	8004828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80016e6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016f8:	2306      	movs	r3, #6
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001706:	f003 f88f 	bl	8004828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	@ 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40012c00 	.word	0x40012c00
 8001718:	40021000 	.word	0x40021000
 800171c:	48000400 	.word	0x48000400

08001720 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001724:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001726:	4a23      	ldr	r2, [pc, #140]	@ (80017b4 <MX_USART2_UART_Init+0x94>)
 8001728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172a:	4b21      	ldr	r3, [pc, #132]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173e:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001756:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001768:	4811      	ldr	r0, [pc, #68]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800176a:	f006 f9c1 	bl	8007af0 <HAL_UART_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001774:	f7ff fafa 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001778:	2100      	movs	r1, #0
 800177a:	480d      	ldr	r0, [pc, #52]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800177c:	f008 fa37 	bl	8009bee <HAL_UARTEx_SetTxFifoThreshold>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001786:	f7ff faf1 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800178a:	2100      	movs	r1, #0
 800178c:	4808      	ldr	r0, [pc, #32]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800178e:	f008 fa6c 	bl	8009c6a <HAL_UARTEx_SetRxFifoThreshold>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001798:	f7ff fae8 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <MX_USART2_UART_Init+0x90>)
 800179e:	f008 f9ed 	bl	8009b7c <HAL_UARTEx_DisableFifoMode>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017a8:	f7ff fae0 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000470 	.word	0x20000470
 80017b4:	40004400 	.word	0x40004400

080017b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017bc:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017be:	4a23      	ldr	r2, [pc, #140]	@ (800184c <MX_USART3_UART_Init+0x94>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017c2:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001800:	4811      	ldr	r0, [pc, #68]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001802:	f006 f975 	bl	8007af0 <HAL_UART_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800180c:	f7ff faae 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	480d      	ldr	r0, [pc, #52]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001814:	f008 f9eb 	bl	8009bee <HAL_UARTEx_SetTxFifoThreshold>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800181e:	f7ff faa5 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001822:	2100      	movs	r1, #0
 8001824:	4808      	ldr	r0, [pc, #32]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001826:	f008 fa20 	bl	8009c6a <HAL_UARTEx_SetRxFifoThreshold>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001830:	f7ff fa9c 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	@ (8001848 <MX_USART3_UART_Init+0x90>)
 8001836:	f008 f9a1 	bl	8009b7c <HAL_UARTEx_DisableFifoMode>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001840:	f7ff fa94 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000504 	.word	0x20000504
 800184c:	40004800 	.word	0x40004800

08001850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0a0      	sub	sp, #128	@ 0x80
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	2254      	movs	r2, #84	@ 0x54
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f008 fc48 	bl	800a106 <memset>
  if(uartHandle->Instance==USART2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a45      	ldr	r2, [pc, #276]	@ (8001990 <HAL_UART_MspInit+0x140>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d13f      	bne.n	8001900 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001880:	2302      	movs	r3, #2
 8001882:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	f107 0318 	add.w	r3, r7, #24
 800188c:	4618      	mov	r0, r3
 800188e:	f003 ffb7 	bl	8005800 <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001898:	f7ff fa68 	bl	8000d6c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800189c:	4b3d      	ldr	r3, [pc, #244]	@ (8001994 <HAL_UART_MspInit+0x144>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	4a3c      	ldr	r2, [pc, #240]	@ (8001994 <HAL_UART_MspInit+0x144>)
 80018a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001994 <HAL_UART_MspInit+0x144>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b37      	ldr	r3, [pc, #220]	@ (8001994 <HAL_UART_MspInit+0x144>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b8:	4a36      	ldr	r2, [pc, #216]	@ (8001994 <HAL_UART_MspInit+0x144>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c0:	4b34      	ldr	r3, [pc, #208]	@ (8001994 <HAL_UART_MspInit+0x144>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018cc:	230c      	movs	r3, #12
 80018ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018dc:	2307      	movs	r3, #7
 80018de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ea:	f002 ff9d 	bl	8004828 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2026      	movs	r0, #38	@ 0x26
 80018f4:	f002 fc3e 	bl	8004174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018f8:	2026      	movs	r0, #38	@ 0x26
 80018fa:	f002 fc55 	bl	80041a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018fe:	e043      	b.n	8001988 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a24      	ldr	r2, [pc, #144]	@ (8001998 <HAL_UART_MspInit+0x148>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d13e      	bne.n	8001988 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800190a:	2304      	movs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001912:	f107 0318 	add.w	r3, r7, #24
 8001916:	4618      	mov	r0, r3
 8001918:	f003 ff72 	bl	8005800 <HAL_RCCEx_PeriphCLKConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001922:	f7ff fa23 	bl	8000d6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_UART_MspInit+0x144>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	4a1a      	ldr	r2, [pc, #104]	@ (8001994 <HAL_UART_MspInit+0x144>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001930:	6593      	str	r3, [r2, #88]	@ 0x58
 8001932:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <HAL_UART_MspInit+0x144>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_UART_MspInit+0x144>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001942:	4a14      	ldr	r2, [pc, #80]	@ (8001994 <HAL_UART_MspInit+0x144>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194a:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_UART_MspInit+0x144>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001956:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800195a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001968:	2307      	movs	r3, #7
 800196a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001970:	4619      	mov	r1, r3
 8001972:	480a      	ldr	r0, [pc, #40]	@ (800199c <HAL_UART_MspInit+0x14c>)
 8001974:	f002 ff58 	bl	8004828 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	2027      	movs	r0, #39	@ 0x27
 800197e:	f002 fbf9 	bl	8004174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001982:	2027      	movs	r0, #39	@ 0x27
 8001984:	f002 fc10 	bl	80041a8 <HAL_NVIC_EnableIRQ>
}
 8001988:	bf00      	nop
 800198a:	3780      	adds	r7, #128	@ 0x80
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40004400 	.word	0x40004400
 8001994:	40021000 	.word	0x40021000
 8001998:	40004800 	.word	0x40004800
 800199c:	48000800 	.word	0x48000800

080019a0 <codeur_start>:
float vitesse[3] ={0};   //vitesse du moteur (le signe donne le sens)
int dt=100; 			 //mesure de la vitesse toutes les 100ms
float resolution = 4096; //nombre d'incrément du compteur pour un tour du moteur


void codeur_start(void){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 80019a4:	213c      	movs	r1, #60	@ 0x3c
 80019a6:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <codeur_start+0x10>)
 80019a8:	f004 fcf4 	bl	8006394 <HAL_TIM_Encoder_Start_IT>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200003d8 	.word	0x200003d8

080019b4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(&htim3); //valeur du compteur absolue
 80019bc:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <HAL_TIM_IC_CaptureCallback+0x28>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80019c4:	6013      	str	r3, [r2, #0]
	pos = (int16_t)counter; 				 //valeur du compteur avec les valeurs négatives
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <HAL_TIM_IC_CaptureCallback+0x30>)
 80019ce:	801a      	strh	r2, [r3, #0]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	200003d8 	.word	0x200003d8
 80019e0:	20000598 	.word	0x20000598
 80019e4:	2000059c 	.word	0x2000059c

080019e8 <calc_speed>:

void calc_speed(){
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
	vitesse[0]=vitesse[1];
 80019ec:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <calc_speed+0x68>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a17      	ldr	r2, [pc, #92]	@ (8001a50 <calc_speed+0x68>)
 80019f2:	6013      	str	r3, [r2, #0]
	vitesse[1]=vitesse[2];
 80019f4:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <calc_speed+0x68>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a15      	ldr	r2, [pc, #84]	@ (8001a50 <calc_speed+0x68>)
 80019fa:	6053      	str	r3, [r2, #4]
	vitesse[2] = (((pos - oldpos)/dt)/resolution)*ms_To_s*10;
 80019fc:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <calc_speed+0x6c>)
 80019fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <calc_speed+0x70>)
 8001a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0a:	1ad2      	subs	r2, r2, r3
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <calc_speed+0x74>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <calc_speed+0x78>)
 8001a1e:	ed93 7a00 	vldr	s14, [r3]
 8001a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a26:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001a64 <calc_speed+0x7c>
 8001a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <calc_speed+0x68>)
 8001a38:	edc3 7a02 	vstr	s15, [r3, #8]
	oldpos = pos;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <calc_speed+0x6c>)
 8001a3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a42:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <calc_speed+0x70>)
 8001a44:	801a      	strh	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	200005a0 	.word	0x200005a0
 8001a54:	2000059c 	.word	0x2000059c
 8001a58:	2000059e 	.word	0x2000059e
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	20000008 	.word	0x20000008
 8001a64:	447a0000 	.word	0x447a0000

08001a68 <pwm_start>:
#include "mylibs/pwm.h"
#include "tim.h"

int aTemp;

void pwm_start(void){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

	aTemp=50;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <pwm_start+0x30>)
 8001a6e:	2232      	movs	r2, #50	@ 0x32
 8001a70:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a72:	2100      	movs	r1, #0
 8001a74:	4809      	ldr	r0, [pc, #36]	@ (8001a9c <pwm_start+0x34>)
 8001a76:	f004 fa39 	bl	8005eec <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4807      	ldr	r0, [pc, #28]	@ (8001a9c <pwm_start+0x34>)
 8001a7e:	f005 fd6f 	bl	8007560 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a82:	2104      	movs	r1, #4
 8001a84:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <pwm_start+0x34>)
 8001a86:	f004 fa31 	bl	8005eec <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	4803      	ldr	r0, [pc, #12]	@ (8001a9c <pwm_start+0x34>)
 8001a8e:	f005 fd67 	bl	8007560 <HAL_TIMEx_PWMN_Start>


}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200005ac 	.word	0x200005ac
 8001a9c:	20000340 	.word	0x20000340

08001aa0 <pwm_stop>:


void pwm_stop(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	set_pwm_alpha(50);
 8001aa4:	2032      	movs	r0, #50	@ 0x32
 8001aa6:	f000 f815 	bl	8001ad4 <set_pwm_alpha>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4808      	ldr	r0, [pc, #32]	@ (8001ad0 <pwm_stop+0x30>)
 8001aae:	f004 fb2f 	bl	8006110 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4806      	ldr	r0, [pc, #24]	@ (8001ad0 <pwm_stop+0x30>)
 8001ab6:	f005 fe15 	bl	80076e4 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001aba:	2104      	movs	r1, #4
 8001abc:	4804      	ldr	r0, [pc, #16]	@ (8001ad0 <pwm_stop+0x30>)
 8001abe:	f004 fb27 	bl	8006110 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <pwm_stop+0x30>)
 8001ac6:	f005 fe0d 	bl	80076e4 <HAL_TIMEx_PWMN_Stop>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000340 	.word	0x20000340

08001ad4 <set_pwm_alpha>:

/*
 * TP2
 */

void set_pwm_alpha(int alpha){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	int a1;
	int a2;
	int aTransi=aTemp;
 8001adc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b8c <set_pwm_alpha+0xb8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	617b      	str	r3, [r7, #20]

	if (alpha > aTransi){
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dd22      	ble.n	8001b30 <set_pwm_alpha+0x5c>
		while(aTransi != alpha){
 8001aea:	e01d      	b.n	8001b28 <set_pwm_alpha+0x54>

			aTransi++;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	011a      	lsls	r2, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	011a      	lsls	r2, r3, #4
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <set_pwm_alpha+0xbc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <set_pwm_alpha+0xbc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(100);
 8001b22:	2064      	movs	r0, #100	@ 0x64
 8001b24:	f000 fb20 	bl	8002168 <HAL_Delay>
		while(aTransi != alpha){
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1dd      	bne.n	8001aec <set_pwm_alpha+0x18>
		}
	}

	if (alpha < aTransi){
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	da22      	bge.n	8001b7e <set_pwm_alpha+0xaa>
		while(aTransi != alpha){
 8001b38:	e01d      	b.n	8001b76 <set_pwm_alpha+0xa2>

			aTransi--;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/PWM_MAX;
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	011a      	lsls	r2, r3, #4
 8001b4a:	4413      	add	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(PWM_MAX-aTransi)/PWM_MAX;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	011a      	lsls	r2, r3, #4
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <set_pwm_alpha+0xbc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 8001b68:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <set_pwm_alpha+0xbc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	639a      	str	r2, [r3, #56]	@ 0x38

			HAL_Delay(100);
 8001b70:	2064      	movs	r0, #100	@ 0x64
 8001b72:	f000 faf9 	bl	8002168 <HAL_Delay>
		while(aTransi != alpha){
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d1dd      	bne.n	8001b3a <set_pwm_alpha+0x66>
		}
	}
	aTemp = alpha;
 8001b7e:	4a03      	ldr	r2, [pc, #12]	@ (8001b8c <set_pwm_alpha+0xb8>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200005ac 	.word	0x200005ac
 8001b90:	20000340 	.word	0x20000340

08001b94 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001b98:	2224      	movs	r2, #36	@ 0x24
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4816      	ldr	r0, [pc, #88]	@ (8001bf8 <Shell_Init+0x64>)
 8001b9e:	f008 fab2 	bl	800a106 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8001ba2:	2240      	movs	r2, #64	@ 0x40
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4815      	ldr	r0, [pc, #84]	@ (8001bfc <Shell_Init+0x68>)
 8001ba8:	f008 faad 	bl	800a106 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8001bac:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <Shell_Init+0x6c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8001bb2:	2240      	movs	r2, #64	@ 0x40
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4813      	ldr	r0, [pc, #76]	@ (8001c04 <Shell_Init+0x70>)
 8001bb8:	f008 faa5 	bl	800a106 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4910      	ldr	r1, [pc, #64]	@ (8001c00 <Shell_Init+0x6c>)
 8001bc0:	4811      	ldr	r0, [pc, #68]	@ (8001c08 <Shell_Init+0x74>)
 8001bc2:	f006 f873 	bl	8007cac <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001bc6:	4811      	ldr	r0, [pc, #68]	@ (8001c0c <Shell_Init+0x78>)
 8001bc8:	f7fe fb34 	bl	8000234 <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <Shell_Init+0x78>)
 8001bd6:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <Shell_Init+0x74>)
 8001bd8:	f005 ffda 	bl	8007b90 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001bdc:	480c      	ldr	r0, [pc, #48]	@ (8001c10 <Shell_Init+0x7c>)
 8001bde:	f7fe fb29 	bl	8000234 <strlen>
 8001be2:	4603      	mov	r3, r0
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	4909      	ldr	r1, [pc, #36]	@ (8001c10 <Shell_Init+0x7c>)
 8001bec:	4806      	ldr	r0, [pc, #24]	@ (8001c08 <Shell_Init+0x74>)
 8001bee:	f005 ffcf 	bl	8007b90 <HAL_UART_Transmit>
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000063c 	.word	0x2000063c
 8001bfc:	200005f8 	.word	0x200005f8
 8001c00:	200005b4 	.word	0x200005b4
 8001c04:	200005b8 	.word	0x200005b8
 8001c08:	20000470 	.word	0x20000470
 8001c0c:	20000028 	.word	0x20000028
 8001c10:	2000000c 	.word	0x2000000c

08001c14 <Shell_Loop>:

void Shell_Loop(void){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0

	int uartTxStringLength;

	if(uartRxReceived){
 8001c1a:	4b9d      	ldr	r3, [pc, #628]	@ (8001e90 <Shell_Loop+0x27c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d05b      	beq.n	8001cda <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001c22:	4b9c      	ldr	r3, [pc, #624]	@ (8001e94 <Shell_Loop+0x280>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d034      	beq.n	8001c94 <Shell_Loop+0x80>
 8001c2a:	2b0d      	cmp	r3, #13
 8001c2c:	d142      	bne.n	8001cb4 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	2203      	movs	r2, #3
 8001c34:	4998      	ldr	r1, [pc, #608]	@ (8001e98 <Shell_Loop+0x284>)
 8001c36:	4899      	ldr	r0, [pc, #612]	@ (8001e9c <Shell_Loop+0x288>)
 8001c38:	f005 ffaa 	bl	8007b90 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001c3c:	4b98      	ldr	r3, [pc, #608]	@ (8001ea0 <Shell_Loop+0x28c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a98      	ldr	r2, [pc, #608]	@ (8001ea4 <Shell_Loop+0x290>)
 8001c42:	2100      	movs	r1, #0
 8001c44:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8001c46:	4b98      	ldr	r3, [pc, #608]	@ (8001ea8 <Shell_Loop+0x294>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001c4c:	4997      	ldr	r1, [pc, #604]	@ (8001eac <Shell_Loop+0x298>)
 8001c4e:	4895      	ldr	r0, [pc, #596]	@ (8001ea4 <Shell_Loop+0x290>)
 8001c50:	f008 fa62 	bl	800a118 <strtok>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4a96      	ldr	r2, [pc, #600]	@ (8001eb0 <Shell_Loop+0x29c>)
 8001c58:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001c5a:	e010      	b.n	8001c7e <Shell_Loop+0x6a>
				argv[argc++] = token;
 8001c5c:	4b92      	ldr	r3, [pc, #584]	@ (8001ea8 <Shell_Loop+0x294>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	4991      	ldr	r1, [pc, #580]	@ (8001ea8 <Shell_Loop+0x294>)
 8001c64:	600a      	str	r2, [r1, #0]
 8001c66:	4a92      	ldr	r2, [pc, #584]	@ (8001eb0 <Shell_Loop+0x29c>)
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	4992      	ldr	r1, [pc, #584]	@ (8001eb4 <Shell_Loop+0x2a0>)
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001c70:	498e      	ldr	r1, [pc, #568]	@ (8001eac <Shell_Loop+0x298>)
 8001c72:	2000      	movs	r0, #0
 8001c74:	f008 fa50 	bl	800a118 <strtok>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4a8d      	ldr	r2, [pc, #564]	@ (8001eb0 <Shell_Loop+0x29c>)
 8001c7c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001c7e:	4b8c      	ldr	r3, [pc, #560]	@ (8001eb0 <Shell_Loop+0x29c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ea      	bne.n	8001c5c <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001c86:	4b86      	ldr	r3, [pc, #536]	@ (8001ea0 <Shell_Loop+0x28c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001c8c:	4b8a      	ldr	r3, [pc, #552]	@ (8001eb8 <Shell_Loop+0x2a4>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
			break;
 8001c92:	e01f      	b.n	8001cd4 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001c94:	4b82      	ldr	r3, [pc, #520]	@ (8001ea0 <Shell_Loop+0x28c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	4981      	ldr	r1, [pc, #516]	@ (8001ea0 <Shell_Loop+0x28c>)
 8001c9c:	600a      	str	r2, [r1, #0]
 8001c9e:	4a81      	ldr	r2, [pc, #516]	@ (8001ea4 <Shell_Loop+0x290>)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	2204      	movs	r2, #4
 8001caa:	4984      	ldr	r1, [pc, #528]	@ (8001ebc <Shell_Loop+0x2a8>)
 8001cac:	487b      	ldr	r0, [pc, #492]	@ (8001e9c <Shell_Loop+0x288>)
 8001cae:	f005 ff6f 	bl	8007b90 <HAL_UART_Transmit>
			break;
 8001cb2:	e00f      	b.n	8001cd4 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001cb4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea0 <Shell_Loop+0x28c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	4979      	ldr	r1, [pc, #484]	@ (8001ea0 <Shell_Loop+0x28c>)
 8001cbc:	600a      	str	r2, [r1, #0]
 8001cbe:	4a75      	ldr	r2, [pc, #468]	@ (8001e94 <Shell_Loop+0x280>)
 8001cc0:	7811      	ldrb	r1, [r2, #0]
 8001cc2:	4a78      	ldr	r2, [pc, #480]	@ (8001ea4 <Shell_Loop+0x290>)
 8001cc4:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4971      	ldr	r1, [pc, #452]	@ (8001e94 <Shell_Loop+0x280>)
 8001cce:	4873      	ldr	r0, [pc, #460]	@ (8001e9c <Shell_Loop+0x288>)
 8001cd0:	f005 ff5e 	bl	8007b90 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001cd4:	4b6e      	ldr	r3, [pc, #440]	@ (8001e90 <Shell_Loop+0x27c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8001cda:	4b77      	ldr	r3, [pc, #476]	@ (8001eb8 <Shell_Loop+0x2a4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 81a3 	beq.w	800202a <Shell_Loop+0x416>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8001ce4:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <Shell_Loop+0x2a0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4975      	ldr	r1, [pc, #468]	@ (8001ec0 <Shell_Loop+0x2ac>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fa98 	bl	8000220 <strcmp>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d107      	bne.n	8001d06 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	221a      	movs	r2, #26
 8001cfc:	4971      	ldr	r1, [pc, #452]	@ (8001ec4 <Shell_Loop+0x2b0>)
 8001cfe:	4867      	ldr	r0, [pc, #412]	@ (8001e9c <Shell_Loop+0x288>)
 8001d00:	f005 ff46 	bl	8007b90 <HAL_UART_Transmit>
 8001d04:	e187      	b.n	8002016 <Shell_Loop+0x402>
		}
		else if(strcmp(argv[0],"help")==0){
 8001d06:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb4 <Shell_Loop+0x2a0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	496f      	ldr	r1, [pc, #444]	@ (8001ec8 <Shell_Loop+0x2b4>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fa87 	bl	8000220 <strcmp>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d170      	bne.n	8001dfa <Shell_Loop+0x1e6>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8001d18:	4a6c      	ldr	r2, [pc, #432]	@ (8001ecc <Shell_Loop+0x2b8>)
 8001d1a:	2140      	movs	r1, #64	@ 0x40
 8001d1c:	486c      	ldr	r0, [pc, #432]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001d1e:	f008 f97b 	bl	800a018 <sniprintf>
 8001d22:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2c:	4968      	ldr	r1, [pc, #416]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001d2e:	485b      	ldr	r0, [pc, #364]	@ (8001e9c <Shell_Loop+0x288>)
 8001d30:	f005 ff2e 	bl	8007b90 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "help : Donne les fonctions disponibles\r\n");
 8001d34:	4a67      	ldr	r2, [pc, #412]	@ (8001ed4 <Shell_Loop+0x2c0>)
 8001d36:	2140      	movs	r1, #64	@ 0x40
 8001d38:	4865      	ldr	r0, [pc, #404]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001d3a:	f008 f96d 	bl	800a018 <sniprintf>
 8001d3e:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	4961      	ldr	r1, [pc, #388]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001d4a:	4854      	ldr	r0, [pc, #336]	@ (8001e9c <Shell_Loop+0x288>)
 8001d4c:	f005 ff20 	bl	8007b90 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "WhereisBrian? : dit ou se situe Brian\r\n");
 8001d50:	4a61      	ldr	r2, [pc, #388]	@ (8001ed8 <Shell_Loop+0x2c4>)
 8001d52:	2140      	movs	r1, #64	@ 0x40
 8001d54:	485e      	ldr	r0, [pc, #376]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001d56:	f008 f95f 	bl	800a018 <sniprintf>
 8001d5a:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	495a      	ldr	r1, [pc, #360]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001d66:	484d      	ldr	r0, [pc, #308]	@ (8001e9c <Shell_Loop+0x288>)
 8001d68:	f005 ff12 	bl	8007b90 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speed XXX : Set la speed\r\n");
 8001d6c:	4a5b      	ldr	r2, [pc, #364]	@ (8001edc <Shell_Loop+0x2c8>)
 8001d6e:	2140      	movs	r1, #64	@ 0x40
 8001d70:	4857      	ldr	r0, [pc, #348]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001d72:	f008 f951 	bl	800a018 <sniprintf>
 8001d76:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	4953      	ldr	r1, [pc, #332]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001d82:	4846      	ldr	r0, [pc, #280]	@ (8001e9c <Shell_Loop+0x288>)
 8001d84:	f005 ff04 	bl	8007b90 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speedStart : Start les PWM\r\n");
 8001d88:	4a55      	ldr	r2, [pc, #340]	@ (8001ee0 <Shell_Loop+0x2cc>)
 8001d8a:	2140      	movs	r1, #64	@ 0x40
 8001d8c:	4850      	ldr	r0, [pc, #320]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001d8e:	f008 f943 	bl	800a018 <sniprintf>
 8001d92:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	494c      	ldr	r1, [pc, #304]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001d9e:	483f      	ldr	r0, [pc, #252]	@ (8001e9c <Shell_Loop+0x288>)
 8001da0:	f005 fef6 	bl	8007b90 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "speedStop : Stop les PWM\r\n");
 8001da4:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee4 <Shell_Loop+0x2d0>)
 8001da6:	2140      	movs	r1, #64	@ 0x40
 8001da8:	4849      	ldr	r0, [pc, #292]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001daa:	f008 f935 	bl	800a018 <sniprintf>
 8001dae:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	4945      	ldr	r1, [pc, #276]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001dba:	4838      	ldr	r0, [pc, #224]	@ (8001e9c <Shell_Loop+0x288>)
 8001dbc:	f005 fee8 	bl	8007b90 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "adcValue : Recupere la valeure de l'adc\r\n");
 8001dc0:	4a49      	ldr	r2, [pc, #292]	@ (8001ee8 <Shell_Loop+0x2d4>)
 8001dc2:	2140      	movs	r1, #64	@ 0x40
 8001dc4:	4842      	ldr	r0, [pc, #264]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001dc6:	f008 f927 	bl	800a018 <sniprintf>
 8001dca:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	493e      	ldr	r1, [pc, #248]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001dd6:	4831      	ldr	r0, [pc, #196]	@ (8001e9c <Shell_Loop+0x288>)
 8001dd8:	f005 feda 	bl	8007b90 <HAL_UART_Transmit>
			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "vitesse : Recupere la valeure de vitesse\r\n");
 8001ddc:	4a43      	ldr	r2, [pc, #268]	@ (8001eec <Shell_Loop+0x2d8>)
 8001dde:	2140      	movs	r1, #64	@ 0x40
 8001de0:	483b      	ldr	r0, [pc, #236]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001de2:	f008 f919 	bl	800a018 <sniprintf>
 8001de6:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	4937      	ldr	r1, [pc, #220]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001df2:	482a      	ldr	r0, [pc, #168]	@ (8001e9c <Shell_Loop+0x288>)
 8001df4:	f005 fecc 	bl	8007b90 <HAL_UART_Transmit>
 8001df8:	e10d      	b.n	8002016 <Shell_Loop+0x402>
		}
		else if(strcmp(argv[0],"speed")==0){
 8001dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb4 <Shell_Loop+0x2a0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	493c      	ldr	r1, [pc, #240]	@ (8001ef0 <Shell_Loop+0x2dc>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fa0d 	bl	8000220 <strcmp>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 808c 	bne.w	8001f26 <Shell_Loop+0x312>
			if(atoi(argv[1])>=0){
 8001e0e:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <Shell_Loop+0x2a0>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f007 ffb6 	bl	8009d84 <atoi>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db6e      	blt.n	8001efc <Shell_Loop+0x2e8>
				if(atoi(argv[1])<=100){
 8001e1e:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <Shell_Loop+0x2a0>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f007 ffae 	bl	8009d84 <atoi>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b64      	cmp	r3, #100	@ 0x64
 8001e2c:	dc1d      	bgt.n	8001e6a <Shell_Loop+0x256>
					set_pwm_alpha(atoi(argv[1]));
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <Shell_Loop+0x2a0>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f007 ffa6 	bl	8009d84 <atoi>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fe4a 	bl	8001ad4 <set_pwm_alpha>
					uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = %d\r\n",atoi(argv[1]));
 8001e40:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <Shell_Loop+0x2a0>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f007 ff9d 	bl	8009d84 <atoi>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a29      	ldr	r2, [pc, #164]	@ (8001ef4 <Shell_Loop+0x2e0>)
 8001e4e:	2140      	movs	r1, #64	@ 0x40
 8001e50:	481f      	ldr	r0, [pc, #124]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001e52:	f008 f8e1 	bl	800a018 <sniprintf>
 8001e56:	6078      	str	r0, [r7, #4]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	491b      	ldr	r1, [pc, #108]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001e62:	480e      	ldr	r0, [pc, #56]	@ (8001e9c <Shell_Loop+0x288>)
 8001e64:	f005 fe94 	bl	8007b90 <HAL_UART_Transmit>
 8001e68:	e0d5      	b.n	8002016 <Shell_Loop+0x402>
				}else{
					set_pwm_alpha(100);
 8001e6a:	2064      	movs	r0, #100	@ 0x64
 8001e6c:	f7ff fe32 	bl	8001ad4 <set_pwm_alpha>
					uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = 100\r\n");
 8001e70:	4a21      	ldr	r2, [pc, #132]	@ (8001ef8 <Shell_Loop+0x2e4>)
 8001e72:	2140      	movs	r1, #64	@ 0x40
 8001e74:	4816      	ldr	r0, [pc, #88]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001e76:	f008 f8cf 	bl	800a018 <sniprintf>
 8001e7a:	6078      	str	r0, [r7, #4]
					HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
 8001e84:	4912      	ldr	r1, [pc, #72]	@ (8001ed0 <Shell_Loop+0x2bc>)
 8001e86:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <Shell_Loop+0x288>)
 8001e88:	f005 fe82 	bl	8007b90 <HAL_UART_Transmit>
 8001e8c:	e0c3      	b.n	8002016 <Shell_Loop+0x402>
 8001e8e:	bf00      	nop
 8001e90:	200005b0 	.word	0x200005b0
 8001e94:	200005b4 	.word	0x200005b4
 8001e98:	20000090 	.word	0x20000090
 8001e9c:	20000470 	.word	0x20000470
 8001ea0:	20000638 	.word	0x20000638
 8001ea4:	200005f8 	.word	0x200005f8
 8001ea8:	20000660 	.word	0x20000660
 8001eac:	0800b278 	.word	0x0800b278
 8001eb0:	20000664 	.word	0x20000664
 8001eb4:	2000063c 	.word	0x2000063c
 8001eb8:	20000668 	.word	0x20000668
 8001ebc:	20000094 	.word	0x20000094
 8001ec0:	0800b27c 	.word	0x0800b27c
 8001ec4:	200000ac 	.word	0x200000ac
 8001ec8:	0800b28c 	.word	0x0800b28c
 8001ecc:	0800b294 	.word	0x0800b294
 8001ed0:	200005b8 	.word	0x200005b8
 8001ed4:	0800b2bc 	.word	0x0800b2bc
 8001ed8:	0800b2e8 	.word	0x0800b2e8
 8001edc:	0800b310 	.word	0x0800b310
 8001ee0:	0800b32c 	.word	0x0800b32c
 8001ee4:	0800b34c 	.word	0x0800b34c
 8001ee8:	0800b368 	.word	0x0800b368
 8001eec:	0800b394 	.word	0x0800b394
 8001ef0:	0800b3c0 	.word	0x0800b3c0
 8001ef4:	0800b3c8 	.word	0x0800b3c8
 8001ef8:	0800b3e0 	.word	0x0800b3e0
				}
			}else{
				uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur alpha est pas entre 0 et 100\r\n",atoi(argv[1]));
 8001efc:	4b4d      	ldr	r3, [pc, #308]	@ (8002034 <Shell_Loop+0x420>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f007 ff3f 	bl	8009d84 <atoi>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a4b      	ldr	r2, [pc, #300]	@ (8002038 <Shell_Loop+0x424>)
 8001f0a:	2140      	movs	r1, #64	@ 0x40
 8001f0c:	484b      	ldr	r0, [pc, #300]	@ (800203c <Shell_Loop+0x428>)
 8001f0e:	f008 f883 	bl	800a018 <sniprintf>
 8001f12:	6078      	str	r0, [r7, #4]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1c:	4947      	ldr	r1, [pc, #284]	@ (800203c <Shell_Loop+0x428>)
 8001f1e:	4848      	ldr	r0, [pc, #288]	@ (8002040 <Shell_Loop+0x42c>)
 8001f20:	f005 fe36 	bl	8007b90 <HAL_UART_Transmit>
 8001f24:	e077      	b.n	8002016 <Shell_Loop+0x402>
			}
		}else if(strcmp(argv[0],"speedStart")==0){
 8001f26:	4b43      	ldr	r3, [pc, #268]	@ (8002034 <Shell_Loop+0x420>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4946      	ldr	r1, [pc, #280]	@ (8002044 <Shell_Loop+0x430>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe f977 	bl	8000220 <strcmp>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <Shell_Loop+0x32a>
			pwm_start();
 8001f38:	f7ff fd96 	bl	8001a68 <pwm_start>
 8001f3c:	e06b      	b.n	8002016 <Shell_Loop+0x402>
		}else if(strcmp(argv[0],"speedStop")==0){
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002034 <Shell_Loop+0x420>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4941      	ldr	r1, [pc, #260]	@ (8002048 <Shell_Loop+0x434>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe f96b 	bl	8000220 <strcmp>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <Shell_Loop+0x342>
			pwm_stop();
 8001f50:	f7ff fda6 	bl	8001aa0 <pwm_stop>
 8001f54:	e05f      	b.n	8002016 <Shell_Loop+0x402>

		}else if(strcmp(argv[0],"vitesse")==0){//Fonction permettant d'éteindre les PWM
 8001f56:	4b37      	ldr	r3, [pc, #220]	@ (8002034 <Shell_Loop+0x420>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	493c      	ldr	r1, [pc, #240]	@ (800204c <Shell_Loop+0x438>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe f95f 	bl	8000220 <strcmp>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d115      	bne.n	8001f94 <Shell_Loop+0x380>

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Vitesse : %d\r\n",(int)vitesse[0]);
 8001f68:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <Shell_Loop+0x43c>)
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f72:	ee17 3a90 	vmov	r3, s15
 8001f76:	4a37      	ldr	r2, [pc, #220]	@ (8002054 <Shell_Loop+0x440>)
 8001f78:	2140      	movs	r1, #64	@ 0x40
 8001f7a:	4830      	ldr	r0, [pc, #192]	@ (800203c <Shell_Loop+0x428>)
 8001f7c:	f008 f84c 	bl	800a018 <sniprintf>
 8001f80:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	492c      	ldr	r1, [pc, #176]	@ (800203c <Shell_Loop+0x428>)
 8001f8c:	482c      	ldr	r0, [pc, #176]	@ (8002040 <Shell_Loop+0x42c>)
 8001f8e:	f005 fdff 	bl	8007b90 <HAL_UART_Transmit>
 8001f92:	e040      	b.n	8002016 <Shell_Loop+0x402>


		}else if(strcmp(argv[0],"adcValue")==0){
 8001f94:	4b27      	ldr	r3, [pc, #156]	@ (8002034 <Shell_Loop+0x420>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	492f      	ldr	r1, [pc, #188]	@ (8002058 <Shell_Loop+0x444>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe f940 	bl	8000220 <strcmp>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d130      	bne.n	8002008 <Shell_Loop+0x3f4>

			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur Source: %d \r\n", value_adc1[0]);
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <Shell_Loop+0x448>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	4a2d      	ldr	r2, [pc, #180]	@ (8002060 <Shell_Loop+0x44c>)
 8001fac:	2140      	movs	r1, #64	@ 0x40
 8001fae:	4823      	ldr	r0, [pc, #140]	@ (800203c <Shell_Loop+0x428>)
 8001fb0:	f008 f832 	bl	800a018 <sniprintf>
 8001fb4:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	491f      	ldr	r1, [pc, #124]	@ (800203c <Shell_Loop+0x428>)
 8001fc0:	481f      	ldr	r0, [pc, #124]	@ (8002040 <Shell_Loop+0x42c>)
 8001fc2:	f005 fde5 	bl	8007b90 <HAL_UART_Transmit>

			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur V: %d \r\n", value_adc1[1]);
 8001fc6:	4b25      	ldr	r3, [pc, #148]	@ (800205c <Shell_Loop+0x448>)
 8001fc8:	885b      	ldrh	r3, [r3, #2]
 8001fca:	4a26      	ldr	r2, [pc, #152]	@ (8002064 <Shell_Loop+0x450>)
 8001fcc:	2140      	movs	r1, #64	@ 0x40
 8001fce:	481b      	ldr	r0, [pc, #108]	@ (800203c <Shell_Loop+0x428>)
 8001fd0:	f008 f822 	bl	800a018 <sniprintf>
 8001fd4:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	4917      	ldr	r1, [pc, #92]	@ (800203c <Shell_Loop+0x428>)
 8001fe0:	4817      	ldr	r0, [pc, #92]	@ (8002040 <Shell_Loop+0x42c>)
 8001fe2:	f005 fdd5 	bl	8007b90 <HAL_UART_Transmit>

			uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Valeur de U: %d \r\n", value_adc2);
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <Shell_Loop+0x454>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	4a20      	ldr	r2, [pc, #128]	@ (800206c <Shell_Loop+0x458>)
 8001fec:	2140      	movs	r1, #64	@ 0x40
 8001fee:	4813      	ldr	r0, [pc, #76]	@ (800203c <Shell_Loop+0x428>)
 8001ff0:	f008 f812 	bl	800a018 <sniprintf>
 8001ff4:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	490f      	ldr	r1, [pc, #60]	@ (800203c <Shell_Loop+0x428>)
 8002000:	480f      	ldr	r0, [pc, #60]	@ (8002040 <Shell_Loop+0x42c>)
 8002002:	f005 fdc5 	bl	8007b90 <HAL_UART_Transmit>
 8002006:	e006      	b.n	8002016 <Shell_Loop+0x402>

		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	2214      	movs	r2, #20
 800200e:	4918      	ldr	r1, [pc, #96]	@ (8002070 <Shell_Loop+0x45c>)
 8002010:	480b      	ldr	r0, [pc, #44]	@ (8002040 <Shell_Loop+0x42c>)
 8002012:	f005 fdbd 	bl	8007b90 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	221c      	movs	r2, #28
 800201c:	4915      	ldr	r1, [pc, #84]	@ (8002074 <Shell_Loop+0x460>)
 800201e:	4808      	ldr	r0, [pc, #32]	@ (8002040 <Shell_Loop+0x42c>)
 8002020:	f005 fdb6 	bl	8007b90 <HAL_UART_Transmit>
		newCmdReady = 0;
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <Shell_Loop+0x464>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
	}
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000063c 	.word	0x2000063c
 8002038:	0800b3f8 	.word	0x0800b3f8
 800203c:	200005b8 	.word	0x200005b8
 8002040:	20000470 	.word	0x20000470
 8002044:	0800b420 	.word	0x0800b420
 8002048:	0800b42c 	.word	0x0800b42c
 800204c:	0800b438 	.word	0x0800b438
 8002050:	200005a0 	.word	0x200005a0
 8002054:	0800b440 	.word	0x0800b440
 8002058:	0800b450 	.word	0x0800b450
 800205c:	200002e4 	.word	0x200002e4
 8002060:	0800b45c 	.word	0x0800b45c
 8002064:	0800b474 	.word	0x0800b474
 8002068:	200002e8 	.word	0x200002e8
 800206c:	0800b484 	.word	0x0800b484
 8002070:	20000098 	.word	0x20000098
 8002074:	2000000c 	.word	0x2000000c
 8002078:	20000668 	.word	0x20000668

0800207c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <HAL_UART_RxCpltCallback+0x20>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800208a:	2201      	movs	r2, #1
 800208c:	4904      	ldr	r1, [pc, #16]	@ (80020a0 <HAL_UART_RxCpltCallback+0x24>)
 800208e:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <HAL_UART_RxCpltCallback+0x28>)
 8002090:	f005 fe0c 	bl	8007cac <HAL_UART_Receive_IT>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200005b0 	.word	0x200005b0
 80020a0:	200005b4 	.word	0x200005b4
 80020a4:	20000470 	.word	0x20000470

080020a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020a8:	480d      	ldr	r0, [pc, #52]	@ (80020e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020ac:	480d      	ldr	r0, [pc, #52]	@ (80020e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ae:	490e      	ldr	r1, [pc, #56]	@ (80020e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020b0:	4a0e      	ldr	r2, [pc, #56]	@ (80020ec <LoopForever+0xe>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a0b      	ldr	r2, [pc, #44]	@ (80020f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020c4:	4c0b      	ldr	r4, [pc, #44]	@ (80020f4 <LoopForever+0x16>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020d2:	f7ff f85b 	bl	800118c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d6:	f008 f8c7 	bl	800a268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020da:	f7fe fd9f 	bl	8000c1c <main>

080020de <LoopForever>:

LoopForever:
    b LoopForever
 80020de:	e7fe      	b.n	80020de <LoopForever>
  ldr   r0, =_estack
 80020e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 80020ec:	0800b6cc 	.word	0x0800b6cc
  ldr r2, =_sbss
 80020f0:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 80020f4:	200007bc 	.word	0x200007bc

080020f8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC3_IRQHandler>

080020fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002104:	2003      	movs	r0, #3
 8002106:	f002 f82a 	bl	800415e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800210a:	200f      	movs	r0, #15
 800210c:	f7fe fe58 	bl	8000dc0 <HAL_InitTick>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	e001      	b.n	8002120 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800211c:	f7fe fe2c 	bl	8000d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002120:	79fb      	ldrb	r3, [r7, #7]

}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_IncTick+0x1c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <HAL_IncTick+0x20>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4413      	add	r3, r2
 800213a:	4a03      	ldr	r2, [pc, #12]	@ (8002148 <HAL_IncTick+0x1c>)
 800213c:	6013      	str	r3, [r2, #0]
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	2000066c 	.word	0x2000066c
 800214c:	200000cc 	.word	0x200000cc

08002150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b03      	ldr	r3, [pc, #12]	@ (8002164 <HAL_GetTick+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	2000066c 	.word	0x2000066c

08002168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff ffee 	bl	8002150 <HAL_GetTick>
 8002174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d004      	beq.n	800218c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_Delay+0x40>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4413      	add	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800218c:	bf00      	nop
 800218e:	f7ff ffdf 	bl	8002150 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	429a      	cmp	r2, r3
 800219c:	d8f7      	bhi.n	800218e <HAL_Delay+0x26>
  {
  }
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200000cc 	.word	0x200000cc

080021ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	609a      	str	r2, [r3, #8]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	609a      	str	r2, [r3, #8]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3360      	adds	r3, #96	@ 0x60
 8002226:	461a      	mov	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <LL_ADC_SetOffset+0x44>)
 8002236:	4013      	ands	r3, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	4313      	orrs	r3, r2
 8002244:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	03fff000 	.word	0x03fff000

0800225c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3360      	adds	r3, #96	@ 0x60
 800226a:	461a      	mov	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3360      	adds	r3, #96	@ 0x60
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022be:	b480      	push	{r7}
 80022c0:	b087      	sub	sp, #28
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3360      	adds	r3, #96	@ 0x60
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3360      	adds	r3, #96	@ 0x60
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	615a      	str	r2, [r3, #20]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002376:	b480      	push	{r7}
 8002378:	b087      	sub	sp, #28
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3330      	adds	r3, #48	@ 0x30
 8002386:	461a      	mov	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	4413      	add	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	211f      	movs	r1, #31
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	401a      	ands	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	f003 011f 	and.w	r1, r3, #31
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	431a      	orrs	r2, r3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023c2:	bf00      	nop
 80023c4:	371c      	adds	r7, #28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3314      	adds	r3, #20
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	0e5b      	lsrs	r3, r3, #25
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	4413      	add	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	0d1b      	lsrs	r3, r3, #20
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	2107      	movs	r1, #7
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	401a      	ands	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	0d1b      	lsrs	r3, r3, #20
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	431a      	orrs	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0318 	and.w	r3, r3, #24
 800246e:	4908      	ldr	r1, [pc, #32]	@ (8002490 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002470:	40d9      	lsrs	r1, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	400b      	ands	r3, r1
 8002476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247a:	431a      	orrs	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	0007ffff 	.word	0x0007ffff

08002494 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 031f 	and.w	r3, r3, #31
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6093      	str	r3, [r2, #8]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002504:	d101      	bne.n	800250a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002528:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800252c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002550:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002554:	d101      	bne.n	800255a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002578:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a4:	f043 0202 	orr.w	r2, r3, #2
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <LL_ADC_IsEnabled+0x18>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <LL_ADC_IsEnabled+0x1a>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d101      	bne.n	80025f6 <LL_ADC_IsDisableOngoing+0x18>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_ADC_IsDisableOngoing+0x1a>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002614:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002618:	f043 0204 	orr.w	r2, r3, #4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d101      	bne.n	8002644 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	d101      	bne.n	800266a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b089      	sub	sp, #36	@ 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e1a9      	b.n	80029e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7fe f88f 	bl	80007c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff19 	bl	80024f0 <LL_ADC_IsDeepPowerDownEnabled>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff feff 	bl	80024cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff34 	bl	8002540 <LL_ADC_IsInternalRegulatorEnabled>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d115      	bne.n	800270a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff18 	bl	8002518 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026e8:	4b9c      	ldr	r3, [pc, #624]	@ (800295c <HAL_ADC_Init+0x2e4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	4a9c      	ldr	r2, [pc, #624]	@ (8002960 <HAL_ADC_Init+0x2e8>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026fc:	e002      	b.n	8002704 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3b01      	subs	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff16 	bl	8002540 <LL_ADC_IsInternalRegulatorEnabled>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10d      	bne.n	8002736 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ff76 	bl	800262c <LL_ADC_REG_IsConversionOngoing>
 8002740:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 8142 	bne.w	80029d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 813e 	bne.w	80029d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002760:	f043 0202 	orr.w	r2, r3, #2
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff23 	bl	80025b8 <LL_ADC_IsEnabled>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d141      	bne.n	80027fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002780:	d004      	beq.n	800278c <HAL_ADC_Init+0x114>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a77      	ldr	r2, [pc, #476]	@ (8002964 <HAL_ADC_Init+0x2ec>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d10f      	bne.n	80027ac <HAL_ADC_Init+0x134>
 800278c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002790:	f7ff ff12 	bl	80025b8 <LL_ADC_IsEnabled>
 8002794:	4604      	mov	r4, r0
 8002796:	4873      	ldr	r0, [pc, #460]	@ (8002964 <HAL_ADC_Init+0x2ec>)
 8002798:	f7ff ff0e 	bl	80025b8 <LL_ADC_IsEnabled>
 800279c:	4603      	mov	r3, r0
 800279e:	4323      	orrs	r3, r4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	e012      	b.n	80027d2 <HAL_ADC_Init+0x15a>
 80027ac:	486e      	ldr	r0, [pc, #440]	@ (8002968 <HAL_ADC_Init+0x2f0>)
 80027ae:	f7ff ff03 	bl	80025b8 <LL_ADC_IsEnabled>
 80027b2:	4604      	mov	r4, r0
 80027b4:	486d      	ldr	r0, [pc, #436]	@ (800296c <HAL_ADC_Init+0x2f4>)
 80027b6:	f7ff feff 	bl	80025b8 <LL_ADC_IsEnabled>
 80027ba:	4603      	mov	r3, r0
 80027bc:	431c      	orrs	r4, r3
 80027be:	486c      	ldr	r0, [pc, #432]	@ (8002970 <HAL_ADC_Init+0x2f8>)
 80027c0:	f7ff fefa 	bl	80025b8 <LL_ADC_IsEnabled>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4323      	orrs	r3, r4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d012      	beq.n	80027fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027de:	d004      	beq.n	80027ea <HAL_ADC_Init+0x172>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a5f      	ldr	r2, [pc, #380]	@ (8002964 <HAL_ADC_Init+0x2ec>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_ADC_Init+0x176>
 80027ea:	4a62      	ldr	r2, [pc, #392]	@ (8002974 <HAL_ADC_Init+0x2fc>)
 80027ec:	e000      	b.n	80027f0 <HAL_ADC_Init+0x178>
 80027ee:	4a62      	ldr	r2, [pc, #392]	@ (8002978 <HAL_ADC_Init+0x300>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f7ff fcd8 	bl	80021ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7f5b      	ldrb	r3, [r3, #29]
 8002800:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002806:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800280c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002812:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800281a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002826:	2b01      	cmp	r3, #1
 8002828:	d106      	bne.n	8002838 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282e:	3b01      	subs	r3, #1
 8002830:	045b      	lsls	r3, r3, #17
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	4b48      	ldr	r3, [pc, #288]	@ (800297c <HAL_ADC_Init+0x304>)
 800285c:	4013      	ands	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	430b      	orrs	r3, r1
 8002866:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fee5 	bl	8002652 <LL_ADC_INJ_IsConversionOngoing>
 8002888:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d17f      	bne.n	8002990 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d17c      	bne.n	8002990 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800289a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028b2:	f023 0302 	bic.w	r3, r3, #2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	430b      	orrs	r3, r1
 80028be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80028d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80028e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6911      	ldr	r1, [r2, #16]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80028f6:	e013      	b.n	8002920 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002906:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002918:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800291c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002926:	2b01      	cmp	r3, #1
 8002928:	d12a      	bne.n	8002980 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002946:	4311      	orrs	r1, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800294c:	430a      	orrs	r2, r1
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	611a      	str	r2, [r3, #16]
 800295a:	e019      	b.n	8002990 <HAL_ADC_Init+0x318>
 800295c:	20000000 	.word	0x20000000
 8002960:	053e2d63 	.word	0x053e2d63
 8002964:	50000100 	.word	0x50000100
 8002968:	50000400 	.word	0x50000400
 800296c:	50000500 	.word	0x50000500
 8002970:	50000600 	.word	0x50000600
 8002974:	50000300 	.word	0x50000300
 8002978:	50000700 	.word	0x50000700
 800297c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d10c      	bne.n	80029b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	f023 010f 	bic.w	r1, r3, #15
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	1e5a      	subs	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80029b0:	e007      	b.n	80029c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 020f 	bic.w	r2, r2, #15
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029d2:	e007      	b.n	80029e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d8:	f043 0210 	orr.w	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	@ 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd90      	pop	{r4, r7, pc}
 80029ee:	bf00      	nop

080029f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a04:	d004      	beq.n	8002a10 <HAL_ADC_Start_DMA+0x20>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002b74 <HAL_ADC_Start_DMA+0x184>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_Start_DMA+0x24>
 8002a10:	4b59      	ldr	r3, [pc, #356]	@ (8002b78 <HAL_ADC_Start_DMA+0x188>)
 8002a12:	e000      	b.n	8002a16 <HAL_ADC_Start_DMA+0x26>
 8002a14:	4b59      	ldr	r3, [pc, #356]	@ (8002b7c <HAL_ADC_Start_DMA+0x18c>)
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fd3c 	bl	8002494 <LL_ADC_GetMultimode>
 8002a1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fe02 	bl	800262c <LL_ADC_REG_IsConversionOngoing>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 809b 	bne.w	8002b66 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_Start_DMA+0x4e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e096      	b.n	8002b6c <HAL_ADC_Start_DMA+0x17c>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b80 <HAL_ADC_Start_DMA+0x190>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d008      	beq.n	8002a62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d002      	beq.n	8002a62 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b09      	cmp	r3, #9
 8002a60:	d17a      	bne.n	8002b58 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 ff56 	bl	8003914 <ADC_Enable>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d16d      	bne.n	8002b4e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a76:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b74 <HAL_ADC_Start_DMA+0x184>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d009      	beq.n	8002aa4 <HAL_ADC_Start_DMA+0xb4>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a3b      	ldr	r2, [pc, #236]	@ (8002b84 <HAL_ADC_Start_DMA+0x194>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d002      	beq.n	8002aa0 <HAL_ADC_Start_DMA+0xb0>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e003      	b.n	8002aa8 <HAL_ADC_Start_DMA+0xb8>
 8002aa0:	4b39      	ldr	r3, [pc, #228]	@ (8002b88 <HAL_ADC_Start_DMA+0x198>)
 8002aa2:	e001      	b.n	8002aa8 <HAL_ADC_Start_DMA+0xb8>
 8002aa4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d002      	beq.n	8002ab6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad2:	f023 0206 	bic.w	r2, r3, #6
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ada:	e002      	b.n	8002ae2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae6:	4a29      	ldr	r2, [pc, #164]	@ (8002b8c <HAL_ADC_Start_DMA+0x19c>)
 8002ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aee:	4a28      	ldr	r2, [pc, #160]	@ (8002b90 <HAL_ADC_Start_DMA+0x1a0>)
 8002af0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	4a27      	ldr	r2, [pc, #156]	@ (8002b94 <HAL_ADC_Start_DMA+0x1a4>)
 8002af8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	221c      	movs	r2, #28
 8002b00:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0210 	orr.w	r2, r2, #16
 8002b18:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3340      	adds	r3, #64	@ 0x40
 8002b34:	4619      	mov	r1, r3
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f001 fbeb 	bl	8004314 <HAL_DMA_Start_IT>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fd5c 	bl	8002604 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002b4c:	e00d      	b.n	8002b6a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002b56:	e008      	b.n	8002b6a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002b64:	e001      	b.n	8002b6a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
 8002b68:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	50000100 	.word	0x50000100
 8002b78:	50000300 	.word	0x50000300
 8002b7c:	50000700 	.word	0x50000700
 8002b80:	50000600 	.word	0x50000600
 8002b84:	50000500 	.word	0x50000500
 8002b88:	50000400 	.word	0x50000400
 8002b8c:	08003aff 	.word	0x08003aff
 8002b90:	08003bd7 	.word	0x08003bd7
 8002b94:	08003bf3 	.word	0x08003bf3

08002b98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bbc:	d004      	beq.n	8002bc8 <HAL_ADC_IRQHandler+0x30>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a8e      	ldr	r2, [pc, #568]	@ (8002dfc <HAL_ADC_IRQHandler+0x264>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_IRQHandler+0x34>
 8002bc8:	4b8d      	ldr	r3, [pc, #564]	@ (8002e00 <HAL_ADC_IRQHandler+0x268>)
 8002bca:	e000      	b.n	8002bce <HAL_ADC_IRQHandler+0x36>
 8002bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8002e04 <HAL_ADC_IRQHandler+0x26c>)
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fc60 	bl	8002494 <LL_ADC_GetMultimode>
 8002bd4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d017      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x78>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d012      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f001 f8ec 	bl	8003de0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x8c>
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8094 	beq.w	8002d58 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 808e 	beq.w	8002d58 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d105      	bne.n	8002c54 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fb79 	bl	8002350 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d072      	beq.n	8002d4a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a64      	ldr	r2, [pc, #400]	@ (8002dfc <HAL_ADC_IRQHandler+0x264>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_ADC_IRQHandler+0xea>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a65      	ldr	r2, [pc, #404]	@ (8002e08 <HAL_ADC_IRQHandler+0x270>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d002      	beq.n	8002c7e <HAL_ADC_IRQHandler+0xe6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	e003      	b.n	8002c86 <HAL_ADC_IRQHandler+0xee>
 8002c7e:	4b63      	ldr	r3, [pc, #396]	@ (8002e0c <HAL_ADC_IRQHandler+0x274>)
 8002c80:	e001      	b.n	8002c86 <HAL_ADC_IRQHandler+0xee>
 8002c82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d008      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d002      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	d104      	bne.n	8002caa <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	623b      	str	r3, [r7, #32]
 8002ca8:	e014      	b.n	8002cd4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a53      	ldr	r2, [pc, #332]	@ (8002dfc <HAL_ADC_IRQHandler+0x264>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d009      	beq.n	8002cc8 <HAL_ADC_IRQHandler+0x130>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a53      	ldr	r2, [pc, #332]	@ (8002e08 <HAL_ADC_IRQHandler+0x270>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d002      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x12c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	e003      	b.n	8002ccc <HAL_ADC_IRQHandler+0x134>
 8002cc4:	4b51      	ldr	r3, [pc, #324]	@ (8002e0c <HAL_ADC_IRQHandler+0x274>)
 8002cc6:	e001      	b.n	8002ccc <HAL_ADC_IRQHandler+0x134>
 8002cc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ccc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d135      	bne.n	8002d4a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d12e      	bne.n	8002d4a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fc9b 	bl	800262c <LL_ADC_REG_IsConversionOngoing>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d11a      	bne.n	8002d32 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 020c 	bic.w	r2, r2, #12
 8002d0a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d112      	bne.n	8002d4a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d30:	e00b      	b.n	8002d4a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d36:	f043 0210 	orr.w	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fd fff1 	bl	8000d32 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	220c      	movs	r2, #12
 8002d56:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <HAL_ADC_IRQHandler+0x1d4>
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80b3 	beq.w	8002ede <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80ad 	beq.w	8002ede <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d94:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fb14 	bl	80023ce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002da6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff facf 	bl	8002350 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002db2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a10      	ldr	r2, [pc, #64]	@ (8002dfc <HAL_ADC_IRQHandler+0x264>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x23a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a11      	ldr	r2, [pc, #68]	@ (8002e08 <HAL_ADC_IRQHandler+0x270>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d002      	beq.n	8002dce <HAL_ADC_IRQHandler+0x236>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	e003      	b.n	8002dd6 <HAL_ADC_IRQHandler+0x23e>
 8002dce:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <HAL_ADC_IRQHandler+0x274>)
 8002dd0:	e001      	b.n	8002dd6 <HAL_ADC_IRQHandler+0x23e>
 8002dd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d008      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d002      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b07      	cmp	r3, #7
 8002dee:	d10f      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	e01f      	b.n	8002e3a <HAL_ADC_IRQHandler+0x2a2>
 8002dfa:	bf00      	nop
 8002dfc:	50000100 	.word	0x50000100
 8002e00:	50000300 	.word	0x50000300
 8002e04:	50000700 	.word	0x50000700
 8002e08:	50000500 	.word	0x50000500
 8002e0c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a8b      	ldr	r2, [pc, #556]	@ (8003044 <HAL_ADC_IRQHandler+0x4ac>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_ADC_IRQHandler+0x296>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a8a      	ldr	r2, [pc, #552]	@ (8003048 <HAL_ADC_IRQHandler+0x4b0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d002      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x292>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	e003      	b.n	8002e32 <HAL_ADC_IRQHandler+0x29a>
 8002e2a:	4b88      	ldr	r3, [pc, #544]	@ (800304c <HAL_ADC_IRQHandler+0x4b4>)
 8002e2c:	e001      	b.n	8002e32 <HAL_ADC_IRQHandler+0x29a>
 8002e2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e32:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d047      	beq.n	8002ed0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_ADC_IRQHandler+0x2c2>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d03f      	beq.n	8002ed0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d13a      	bne.n	8002ed0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b40      	cmp	r3, #64	@ 0x40
 8002e66:	d133      	bne.n	8002ed0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d12e      	bne.n	8002ed0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fbeb 	bl	8002652 <LL_ADC_INJ_IsConversionOngoing>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d11a      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e90:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d112      	bne.n	8002ed0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002eb6:	e00b      	b.n	8002ed0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebc:	f043 0210 	orr.w	r2, r3, #16
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 ff5d 	bl	8003d90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2260      	movs	r2, #96	@ 0x60
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d011      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x374>
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00c      	beq.n	8002f0c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8b4 	bl	800306c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2280      	movs	r2, #128	@ 0x80
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d012      	beq.n	8002f3c <HAL_ADC_IRQHandler+0x3a4>
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00d      	beq.n	8002f3c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 ff43 	bl	8003db8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x3d4>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 ff35 	bl	8003dcc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d043      	beq.n	8002ffe <HAL_ADC_IRQHandler+0x466>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d03e      	beq.n	8002ffe <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8c:	e021      	b.n	8002fd2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d015      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f9c:	d004      	beq.n	8002fa8 <HAL_ADC_IRQHandler+0x410>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a28      	ldr	r2, [pc, #160]	@ (8003044 <HAL_ADC_IRQHandler+0x4ac>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_IRQHandler+0x414>
 8002fa8:	4b29      	ldr	r3, [pc, #164]	@ (8003050 <HAL_ADC_IRQHandler+0x4b8>)
 8002faa:	e000      	b.n	8002fae <HAL_ADC_IRQHandler+0x416>
 8002fac:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <HAL_ADC_IRQHandler+0x4bc>)
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fa7e 	bl	80024b0 <LL_ADC_GetMultiDMATransfer>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbe:	e008      	b.n	8002fd2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fdc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe8:	f043 0202 	orr.w	r2, r3, #2
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f845 	bl	8003080 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d018      	beq.n	800303a <HAL_ADC_IRQHandler+0x4a2>
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300e:	2b00      	cmp	r3, #0
 8003010:	d013      	beq.n	800303a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003016:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003022:	f043 0208 	orr.w	r2, r3, #8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003032:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 feb5 	bl	8003da4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800303a:	bf00      	nop
 800303c:	3728      	adds	r7, #40	@ 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	50000100 	.word	0x50000100
 8003048:	50000500 	.word	0x50000500
 800304c:	50000400 	.word	0x50000400
 8003050:	50000300 	.word	0x50000300
 8003054:	50000700 	.word	0x50000700

08003058 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b0b6      	sub	sp, #216	@ 0xd8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x24>
 80030b2:	2302      	movs	r3, #2
 80030b4:	f000 bc13 	b.w	80038de <HAL_ADC_ConfigChannel+0x84a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fab1 	bl	800262c <LL_ADC_REG_IsConversionOngoing>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f040 83f3 	bne.w	80038b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7ff f949 	bl	8002376 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fa9f 	bl	800262c <LL_ADC_REG_IsConversionOngoing>
 80030ee:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff faab 	bl	8002652 <LL_ADC_INJ_IsConversionOngoing>
 80030fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003100:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003104:	2b00      	cmp	r3, #0
 8003106:	f040 81d9 	bne.w	80034bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800310a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 81d4 	bne.w	80034bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800311c:	d10f      	bne.n	800313e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2200      	movs	r2, #0
 8003128:	4619      	mov	r1, r3
 800312a:	f7ff f963 	bl	80023f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f8f7 	bl	800232a <LL_ADC_SetSamplingTimeCommonConfig>
 800313c:	e00e      	b.n	800315c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	461a      	mov	r2, r3
 800314c:	f7ff f952 	bl	80023f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f8e7 	bl	800232a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	08db      	lsrs	r3, r3, #3
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b04      	cmp	r3, #4
 800317c:	d022      	beq.n	80031c4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6919      	ldr	r1, [r3, #16]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800318e:	f7ff f841 	bl	8002214 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6919      	ldr	r1, [r3, #16]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	461a      	mov	r2, r3
 80031a0:	f7ff f88d 	bl	80022be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d102      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x126>
 80031b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031b8:	e000      	b.n	80031bc <HAL_ADC_ConfigChannel+0x128>
 80031ba:	2300      	movs	r3, #0
 80031bc:	461a      	mov	r2, r3
 80031be:	f7ff f899 	bl	80022f4 <LL_ADC_SetOffsetSaturation>
 80031c2:	e17b      	b.n	80034bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff f846 	bl	800225c <LL_ADC_GetOffsetChannel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x15c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f83b 	bl	800225c <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	f003 021f 	and.w	r2, r3, #31
 80031ee:	e01e      	b.n	800322e <HAL_ADC_ConfigChannel+0x19a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff f830 	bl	800225c <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800320e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003216:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800321e:	2320      	movs	r3, #32
 8003220:	e004      	b.n	800322c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x1b2>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0e9b      	lsrs	r3, r3, #26
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	e018      	b.n	8003278 <HAL_ADC_ConfigChannel+0x1e4>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800325a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800325e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800326a:	2320      	movs	r3, #32
 800326c:	e004      	b.n	8003278 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800326e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003278:	429a      	cmp	r2, r3
 800327a:	d106      	bne.n	800328a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2200      	movs	r2, #0
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe ffff 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2101      	movs	r1, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe ffe3 	bl	800225c <LL_ADC_GetOffsetChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x222>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe ffd8 	bl	800225c <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	e01e      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x260>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe ffcd 	bl	800225c <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80032d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e004      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80032e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_ADC_ConfigChannel+0x278>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0e9b      	lsrs	r3, r3, #26
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	e018      	b.n	800333e <HAL_ADC_ConfigChannel+0x2aa>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003320:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003330:	2320      	movs	r3, #32
 8003332:	e004      	b.n	800333e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800333e:	429a      	cmp	r2, r3
 8003340:	d106      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	2101      	movs	r1, #1
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe ff9c 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2102      	movs	r1, #2
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe ff80 	bl	800225c <LL_ADC_GetOffsetChannel>
 800335c:	4603      	mov	r3, r0
 800335e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <HAL_ADC_ConfigChannel+0x2e8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2102      	movs	r1, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe ff75 	bl	800225c <LL_ADC_GetOffsetChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	0e9b      	lsrs	r3, r3, #26
 8003376:	f003 021f 	and.w	r2, r3, #31
 800337a:	e01e      	b.n	80033ba <HAL_ADC_ConfigChannel+0x326>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe ff6a 	bl	800225c <LL_ADC_GetOffsetChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800339a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800339e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80033a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e004      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80033ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x33e>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	0e9b      	lsrs	r3, r3, #26
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	e016      	b.n	8003400 <HAL_ADC_ConfigChannel+0x36c>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80033f2:	2320      	movs	r3, #32
 80033f4:	e004      	b.n	8003400 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80033f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003400:	429a      	cmp	r2, r3
 8003402:	d106      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2200      	movs	r2, #0
 800340a:	2102      	movs	r1, #2
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe ff3b 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2103      	movs	r1, #3
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe ff1f 	bl	800225c <LL_ADC_GetOffsetChannel>
 800341e:	4603      	mov	r3, r0
 8003420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <HAL_ADC_ConfigChannel+0x3aa>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2103      	movs	r1, #3
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe ff14 	bl	800225c <LL_ADC_GetOffsetChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	0e9b      	lsrs	r3, r3, #26
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	e017      	b.n	800346e <HAL_ADC_ConfigChannel+0x3da>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2103      	movs	r1, #3
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe ff09 	bl	800225c <LL_ADC_GetOffsetChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003458:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800345a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003460:	2320      	movs	r3, #32
 8003462:	e003      	b.n	800346c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x3f2>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	0e9b      	lsrs	r3, r3, #26
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	e011      	b.n	80034aa <HAL_ADC_ConfigChannel+0x416>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003496:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800349e:	2320      	movs	r3, #32
 80034a0:	e003      	b.n	80034aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80034a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d106      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	2103      	movs	r1, #3
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fee6 	bl	8002288 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff f879 	bl	80025b8 <LL_ADC_IsEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f040 813d 	bne.w	8003748 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	461a      	mov	r2, r3
 80034dc:	f7fe ffb6 	bl	800244c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4aa2      	ldr	r2, [pc, #648]	@ (8003770 <HAL_ADC_ConfigChannel+0x6dc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	f040 812e 	bne.w	8003748 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x480>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0e9b      	lsrs	r3, r3, #26
 8003502:	3301      	adds	r3, #1
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2b09      	cmp	r3, #9
 800350a:	bf94      	ite	ls
 800350c:	2301      	movls	r3, #1
 800350e:	2300      	movhi	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e019      	b.n	8003548 <HAL_ADC_ConfigChannel+0x4b4>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003522:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003524:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e003      	b.n	8003538 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003530:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	2b09      	cmp	r3, #9
 8003540:	bf94      	ite	ls
 8003542:	2301      	movls	r3, #1
 8003544:	2300      	movhi	r3, #0
 8003546:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003548:	2b00      	cmp	r3, #0
 800354a:	d079      	beq.n	8003640 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x4d4>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	3301      	adds	r3, #1
 8003560:	069b      	lsls	r3, r3, #26
 8003562:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003566:	e015      	b.n	8003594 <HAL_ADC_ConfigChannel+0x500>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003578:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800357a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003580:	2320      	movs	r3, #32
 8003582:	e003      	b.n	800358c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3301      	adds	r3, #1
 800358e:	069b      	lsls	r3, r3, #26
 8003590:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x520>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	3301      	adds	r3, #1
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	e017      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x550>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80035c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80035c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80035cc:	2320      	movs	r3, #32
 80035ce:	e003      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80035d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	ea42 0103 	orr.w	r1, r2, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <HAL_ADC_ConfigChannel+0x576>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0e9b      	lsrs	r3, r3, #26
 80035fa:	3301      	adds	r3, #1
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	051b      	lsls	r3, r3, #20
 8003608:	e018      	b.n	800363c <HAL_ADC_ConfigChannel+0x5a8>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800361c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003622:	2320      	movs	r3, #32
 8003624:	e003      	b.n	800362e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800363c:	430b      	orrs	r3, r1
 800363e:	e07e      	b.n	800373e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d107      	bne.n	800365c <HAL_ADC_ConfigChannel+0x5c8>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	3301      	adds	r3, #1
 8003654:	069b      	lsls	r3, r3, #26
 8003656:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800365a:	e015      	b.n	8003688 <HAL_ADC_ConfigChannel+0x5f4>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800366e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003674:	2320      	movs	r3, #32
 8003676:	e003      	b.n	8003680 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	3301      	adds	r3, #1
 8003682:	069b      	lsls	r3, r3, #26
 8003684:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x614>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	0e9b      	lsrs	r3, r3, #26
 800369a:	3301      	adds	r3, #1
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	e017      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x644>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	fa93 f3a3 	rbit	r3, r3
 80036b4:	61fb      	str	r3, [r7, #28]
  return result;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80036c0:	2320      	movs	r3, #32
 80036c2:	e003      	b.n	80036cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3301      	adds	r3, #1
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	ea42 0103 	orr.w	r1, r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10d      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x670>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0e9b      	lsrs	r3, r3, #26
 80036ee:	3301      	adds	r3, #1
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	3b1e      	subs	r3, #30
 80036fc:	051b      	lsls	r3, r3, #20
 80036fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003702:	e01b      	b.n	800373c <HAL_ADC_ConfigChannel+0x6a8>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	613b      	str	r3, [r7, #16]
  return result;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800371c:	2320      	movs	r3, #32
 800371e:	e003      	b.n	8003728 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3301      	adds	r3, #1
 800372a:	f003 021f 	and.w	r2, r3, #31
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	3b1e      	subs	r3, #30
 8003736:	051b      	lsls	r3, r3, #20
 8003738:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800373c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003742:	4619      	mov	r1, r3
 8003744:	f7fe fe56 	bl	80023f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <HAL_ADC_ConfigChannel+0x6e0>)
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80be 	beq.w	80038d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800375e:	d004      	beq.n	800376a <HAL_ADC_ConfigChannel+0x6d6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a04      	ldr	r2, [pc, #16]	@ (8003778 <HAL_ADC_ConfigChannel+0x6e4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10a      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x6ec>
 800376a:	4b04      	ldr	r3, [pc, #16]	@ (800377c <HAL_ADC_ConfigChannel+0x6e8>)
 800376c:	e009      	b.n	8003782 <HAL_ADC_ConfigChannel+0x6ee>
 800376e:	bf00      	nop
 8003770:	407f0000 	.word	0x407f0000
 8003774:	80080000 	.word	0x80080000
 8003778:	50000100 	.word	0x50000100
 800377c:	50000300 	.word	0x50000300
 8003780:	4b59      	ldr	r3, [pc, #356]	@ (80038e8 <HAL_ADC_ConfigChannel+0x854>)
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fd38 	bl	80021f8 <LL_ADC_GetCommonPathInternalCh>
 8003788:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a56      	ldr	r2, [pc, #344]	@ (80038ec <HAL_ADC_ConfigChannel+0x858>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0x70c>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a55      	ldr	r2, [pc, #340]	@ (80038f0 <HAL_ADC_ConfigChannel+0x85c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d13a      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d134      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b4:	d005      	beq.n	80037c2 <HAL_ADC_ConfigChannel+0x72e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a4e      	ldr	r2, [pc, #312]	@ (80038f4 <HAL_ADC_ConfigChannel+0x860>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	f040 8085 	bne.w	80038cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037ca:	d004      	beq.n	80037d6 <HAL_ADC_ConfigChannel+0x742>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a49      	ldr	r2, [pc, #292]	@ (80038f8 <HAL_ADC_ConfigChannel+0x864>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_ADC_ConfigChannel+0x746>
 80037d6:	4a49      	ldr	r2, [pc, #292]	@ (80038fc <HAL_ADC_ConfigChannel+0x868>)
 80037d8:	e000      	b.n	80037dc <HAL_ADC_ConfigChannel+0x748>
 80037da:	4a43      	ldr	r2, [pc, #268]	@ (80038e8 <HAL_ADC_ConfigChannel+0x854>)
 80037dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f7fe fcf3 	bl	80021d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037ec:	4b44      	ldr	r3, [pc, #272]	@ (8003900 <HAL_ADC_ConfigChannel+0x86c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	4a44      	ldr	r2, [pc, #272]	@ (8003904 <HAL_ADC_ConfigChannel+0x870>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003806:	e002      	b.n	800380e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3b01      	subs	r3, #1
 800380c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f9      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003814:	e05a      	b.n	80038cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a3b      	ldr	r2, [pc, #236]	@ (8003908 <HAL_ADC_ConfigChannel+0x874>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d125      	bne.n	800386c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d11f      	bne.n	800386c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a31      	ldr	r2, [pc, #196]	@ (80038f8 <HAL_ADC_ConfigChannel+0x864>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d104      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x7ac>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a34      	ldr	r2, [pc, #208]	@ (800390c <HAL_ADC_ConfigChannel+0x878>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d047      	beq.n	80038d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003848:	d004      	beq.n	8003854 <HAL_ADC_ConfigChannel+0x7c0>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2a      	ldr	r2, [pc, #168]	@ (80038f8 <HAL_ADC_ConfigChannel+0x864>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x7c4>
 8003854:	4a29      	ldr	r2, [pc, #164]	@ (80038fc <HAL_ADC_ConfigChannel+0x868>)
 8003856:	e000      	b.n	800385a <HAL_ADC_ConfigChannel+0x7c6>
 8003858:	4a23      	ldr	r2, [pc, #140]	@ (80038e8 <HAL_ADC_ConfigChannel+0x854>)
 800385a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800385e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7fe fcb4 	bl	80021d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800386a:	e031      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a27      	ldr	r2, [pc, #156]	@ (8003910 <HAL_ADC_ConfigChannel+0x87c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d12d      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800387a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d127      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1c      	ldr	r2, [pc, #112]	@ (80038f8 <HAL_ADC_ConfigChannel+0x864>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d022      	beq.n	80038d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003894:	d004      	beq.n	80038a0 <HAL_ADC_ConfigChannel+0x80c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a17      	ldr	r2, [pc, #92]	@ (80038f8 <HAL_ADC_ConfigChannel+0x864>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x810>
 80038a0:	4a16      	ldr	r2, [pc, #88]	@ (80038fc <HAL_ADC_ConfigChannel+0x868>)
 80038a2:	e000      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x812>
 80038a4:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <HAL_ADC_ConfigChannel+0x854>)
 80038a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f7fe fc8e 	bl	80021d2 <LL_ADC_SetCommonPathInternalCh>
 80038b6:	e00c      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038bc:	f043 0220 	orr.w	r2, r3, #32
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80038ca:	e002      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038cc:	bf00      	nop
 80038ce:	e000      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80038de:	4618      	mov	r0, r3
 80038e0:	37d8      	adds	r7, #216	@ 0xd8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	50000700 	.word	0x50000700
 80038ec:	c3210000 	.word	0xc3210000
 80038f0:	90c00010 	.word	0x90c00010
 80038f4:	50000600 	.word	0x50000600
 80038f8:	50000100 	.word	0x50000100
 80038fc:	50000300 	.word	0x50000300
 8003900:	20000000 	.word	0x20000000
 8003904:	053e2d63 	.word	0x053e2d63
 8003908:	c7520000 	.word	0xc7520000
 800390c:	50000500 	.word	0x50000500
 8003910:	cb840000 	.word	0xcb840000

08003914 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fe47 	bl	80025b8 <LL_ADC_IsEnabled>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d176      	bne.n	8003a1e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	4b3c      	ldr	r3, [pc, #240]	@ (8003a28 <ADC_Enable+0x114>)
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	f043 0210 	orr.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e062      	b.n	8003a20 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fe02 	bl	8002568 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800396c:	d004      	beq.n	8003978 <ADC_Enable+0x64>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2e      	ldr	r2, [pc, #184]	@ (8003a2c <ADC_Enable+0x118>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <ADC_Enable+0x68>
 8003978:	4b2d      	ldr	r3, [pc, #180]	@ (8003a30 <ADC_Enable+0x11c>)
 800397a:	e000      	b.n	800397e <ADC_Enable+0x6a>
 800397c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a34 <ADC_Enable+0x120>)
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fc3a 	bl	80021f8 <LL_ADC_GetCommonPathInternalCh>
 8003984:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800398a:	2b00      	cmp	r3, #0
 800398c:	d013      	beq.n	80039b6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800398e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a38 <ADC_Enable+0x124>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	099b      	lsrs	r3, r3, #6
 8003994:	4a29      	ldr	r2, [pc, #164]	@ (8003a3c <ADC_Enable+0x128>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	099b      	lsrs	r3, r3, #6
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039a8:	e002      	b.n	80039b0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f9      	bne.n	80039aa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039b6:	f7fe fbcb 	bl	8002150 <HAL_GetTick>
 80039ba:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039bc:	e028      	b.n	8003a10 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fdf8 	bl	80025b8 <LL_ADC_IsEnabled>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d104      	bne.n	80039d8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe fdc8 	bl	8002568 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039d8:	f7fe fbba 	bl	8002150 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d914      	bls.n	8003a10 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d00d      	beq.n	8003a10 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f8:	f043 0210 	orr.w	r2, r3, #16
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a04:	f043 0201 	orr.w	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e007      	b.n	8003a20 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d1cf      	bne.n	80039be <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	8000003f 	.word	0x8000003f
 8003a2c:	50000100 	.word	0x50000100
 8003a30:	50000300 	.word	0x50000300
 8003a34:	50000700 	.word	0x50000700
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	053e2d63 	.word	0x053e2d63

08003a40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe fdc6 	bl	80025de <LL_ADC_IsDisableOngoing>
 8003a52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fdad 	bl	80025b8 <LL_ADC_IsEnabled>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d047      	beq.n	8003af4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d144      	bne.n	8003af4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030d 	and.w	r3, r3, #13
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d10c      	bne.n	8003a92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fd87 	bl	8002590 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2203      	movs	r2, #3
 8003a88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe fb61 	bl	8002150 <HAL_GetTick>
 8003a8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a90:	e029      	b.n	8003ae6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a96:	f043 0210 	orr.w	r2, r3, #16
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa2:	f043 0201 	orr.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e023      	b.n	8003af6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aae:	f7fe fb4f 	bl	8002150 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d914      	bls.n	8003ae6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ace:	f043 0210 	orr.w	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e007      	b.n	8003af6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1dc      	bne.n	8003aae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b10:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d14b      	bne.n	8003bb0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d021      	beq.n	8003b76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe fc0a 	bl	8002350 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d032      	beq.n	8003ba8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d12b      	bne.n	8003ba8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d11f      	bne.n	8003ba8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b74:	e018      	b.n	8003ba8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d111      	bne.n	8003ba8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba0:	f043 0201 	orr.w	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7fd f8c2 	bl	8000d32 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bae:	e00e      	b.n	8003bce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f7ff fa5f 	bl	8003080 <HAL_ADC_ErrorCallback>
}
 8003bc2:	e004      	b.n	8003bce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4798      	blx	r3
}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7ff fa37 	bl	8003058 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c10:	f043 0204 	orr.w	r2, r3, #4
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff fa31 	bl	8003080 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <LL_ADC_IsEnabled>:
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <LL_ADC_IsEnabled+0x18>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_ADC_IsEnabled+0x1a>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_StartCalibration>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003c5e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	609a      	str	r2, [r3, #8]
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <LL_ADC_IsCalibrationOnGoing>:
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c92:	d101      	bne.n	8003c98 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d101      	bne.n	8003cbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e04d      	b.n	8003d84 <HAL_ADCEx_Calibration_Start+0xb8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fea5 	bl	8003a40 <ADC_Disable>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d136      	bne.n	8003d6e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d08:	f023 0302 	bic.w	r3, r3, #2
 8003d0c:	f043 0202 	orr.w	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6839      	ldr	r1, [r7, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff96 	bl	8003c4c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d20:	e014      	b.n	8003d4c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3301      	adds	r3, #1
 8003d26:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4a18      	ldr	r2, [pc, #96]	@ (8003d8c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d90d      	bls.n	8003d4c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	f023 0312 	bic.w	r3, r3, #18
 8003d38:	f043 0210 	orr.w	r2, r3, #16
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e01b      	b.n	8003d84 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ff94 	bl	8003c7e <LL_ADC_IsCalibrationOnGoing>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e2      	bne.n	8003d22 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d60:	f023 0303 	bic.w	r3, r3, #3
 8003d64:	f043 0201 	orr.w	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d6c:	e005      	b.n	8003d7a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d72:	f043 0210 	orr.w	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	0004de01 	.word	0x0004de01

08003d90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b0a1      	sub	sp, #132	@ 0x84
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e0e7      	b.n	8003fe2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e2a:	d102      	bne.n	8003e32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	e009      	b.n	8003e46 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6e      	ldr	r2, [pc, #440]	@ (8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d102      	bne.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003e3c:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	e001      	b.n	8003e46 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0be      	b.n	8003fe2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff ff1d 	bl	8003ca6 <LL_ADC_REG_IsConversionOngoing>
 8003e6c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff17 	bl	8003ca6 <LL_ADC_REG_IsConversionOngoing>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f040 80a0 	bne.w	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 809c 	bne.w	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e90:	d004      	beq.n	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a55      	ldr	r2, [pc, #340]	@ (8003fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003e9c:	4b56      	ldr	r3, [pc, #344]	@ (8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e9e:	e000      	b.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ea0:	4b56      	ldr	r3, [pc, #344]	@ (8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003ea2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d04b      	beq.n	8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ebe:	035b      	lsls	r3, r3, #13
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ec6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ed0:	d004      	beq.n	8003edc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a45      	ldr	r2, [pc, #276]	@ (8003fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10f      	bne.n	8003efc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003edc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ee0:	f7ff fea1 	bl	8003c26 <LL_ADC_IsEnabled>
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	4841      	ldr	r0, [pc, #260]	@ (8003fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ee8:	f7ff fe9d 	bl	8003c26 <LL_ADC_IsEnabled>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4323      	orrs	r3, r4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	e012      	b.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003efc:	483c      	ldr	r0, [pc, #240]	@ (8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003efe:	f7ff fe92 	bl	8003c26 <LL_ADC_IsEnabled>
 8003f02:	4604      	mov	r4, r0
 8003f04:	483b      	ldr	r0, [pc, #236]	@ (8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f06:	f7ff fe8e 	bl	8003c26 <LL_ADC_IsEnabled>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	431c      	orrs	r4, r3
 8003f0e:	483c      	ldr	r0, [pc, #240]	@ (8004000 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f10:	f7ff fe89 	bl	8003c26 <LL_ADC_IsEnabled>
 8003f14:	4603      	mov	r3, r0
 8003f16:	4323      	orrs	r3, r4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d056      	beq.n	8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f2e:	f023 030f 	bic.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	6811      	ldr	r1, [r2, #0]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	6892      	ldr	r2, [r2, #8]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f40:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f42:	e047      	b.n	8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f4e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f58:	d004      	beq.n	8003f64 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a23      	ldr	r2, [pc, #140]	@ (8003fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10f      	bne.n	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003f64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f68:	f7ff fe5d 	bl	8003c26 <LL_ADC_IsEnabled>
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	481f      	ldr	r0, [pc, #124]	@ (8003fec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f70:	f7ff fe59 	bl	8003c26 <LL_ADC_IsEnabled>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4323      	orrs	r3, r4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	e012      	b.n	8003faa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f84:	481a      	ldr	r0, [pc, #104]	@ (8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f86:	f7ff fe4e 	bl	8003c26 <LL_ADC_IsEnabled>
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4819      	ldr	r0, [pc, #100]	@ (8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f8e:	f7ff fe4a 	bl	8003c26 <LL_ADC_IsEnabled>
 8003f92:	4603      	mov	r3, r0
 8003f94:	431c      	orrs	r4, r3
 8003f96:	481a      	ldr	r0, [pc, #104]	@ (8004000 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f98:	f7ff fe45 	bl	8003c26 <LL_ADC_IsEnabled>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4323      	orrs	r3, r4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d012      	beq.n	8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003fb6:	f023 030f 	bic.w	r3, r3, #15
 8003fba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003fbc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fbe:	e009      	b.n	8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003fd2:	e000      	b.n	8003fd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fde:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3784      	adds	r7, #132	@ 0x84
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd90      	pop	{r4, r7, pc}
 8003fea:	bf00      	nop
 8003fec:	50000100 	.word	0x50000100
 8003ff0:	50000400 	.word	0x50000400
 8003ff4:	50000500 	.word	0x50000500
 8003ff8:	50000300 	.word	0x50000300
 8003ffc:	50000700 	.word	0x50000700
 8004000:	50000600 	.word	0x50000600

08004004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004014:	4b0c      	ldr	r3, [pc, #48]	@ (8004048 <__NVIC_SetPriorityGrouping+0x44>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004020:	4013      	ands	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800402c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004036:	4a04      	ldr	r2, [pc, #16]	@ (8004048 <__NVIC_SetPriorityGrouping+0x44>)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	60d3      	str	r3, [r2, #12]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004050:	4b04      	ldr	r3, [pc, #16]	@ (8004064 <__NVIC_GetPriorityGrouping+0x18>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	f003 0307 	and.w	r3, r3, #7
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	2b00      	cmp	r3, #0
 8004078:	db0b      	blt.n	8004092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	f003 021f 	and.w	r2, r3, #31
 8004080:	4907      	ldr	r1, [pc, #28]	@ (80040a0 <__NVIC_EnableIRQ+0x38>)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2001      	movs	r0, #1
 800408a:	fa00 f202 	lsl.w	r2, r0, r2
 800408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e100 	.word	0xe000e100

080040a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	db0a      	blt.n	80040ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	490c      	ldr	r1, [pc, #48]	@ (80040f0 <__NVIC_SetPriority+0x4c>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	0112      	lsls	r2, r2, #4
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	440b      	add	r3, r1
 80040c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040cc:	e00a      	b.n	80040e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4908      	ldr	r1, [pc, #32]	@ (80040f4 <__NVIC_SetPriority+0x50>)
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	3b04      	subs	r3, #4
 80040dc:	0112      	lsls	r2, r2, #4
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	440b      	add	r3, r1
 80040e2:	761a      	strb	r2, [r3, #24]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000e100 	.word	0xe000e100
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	@ 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f1c3 0307 	rsb	r3, r3, #7
 8004112:	2b04      	cmp	r3, #4
 8004114:	bf28      	it	cs
 8004116:	2304      	movcs	r3, #4
 8004118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3304      	adds	r3, #4
 800411e:	2b06      	cmp	r3, #6
 8004120:	d902      	bls.n	8004128 <NVIC_EncodePriority+0x30>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3b03      	subs	r3, #3
 8004126:	e000      	b.n	800412a <NVIC_EncodePriority+0x32>
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800412c:	f04f 32ff 	mov.w	r2, #4294967295
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	401a      	ands	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004140:	f04f 31ff 	mov.w	r1, #4294967295
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	43d9      	mvns	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004150:	4313      	orrs	r3, r2
         );
}
 8004152:	4618      	mov	r0, r3
 8004154:	3724      	adds	r7, #36	@ 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff ff4c 	bl	8004004 <__NVIC_SetPriorityGrouping>
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004182:	f7ff ff63 	bl	800404c <__NVIC_GetPriorityGrouping>
 8004186:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	6978      	ldr	r0, [r7, #20]
 800418e:	f7ff ffb3 	bl	80040f8 <NVIC_EncodePriority>
 8004192:	4602      	mov	r2, r0
 8004194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff ff82 	bl	80040a4 <__NVIC_SetPriority>
}
 80041a0:	bf00      	nop
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ff56 	bl	8004068 <__NVIC_EnableIRQ>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e08d      	b.n	80042f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	4b47      	ldr	r3, [pc, #284]	@ (80042fc <HAL_DMA_Init+0x138>)
 80041de:	429a      	cmp	r2, r3
 80041e0:	d80f      	bhi.n	8004202 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	4b45      	ldr	r3, [pc, #276]	@ (8004300 <HAL_DMA_Init+0x13c>)
 80041ea:	4413      	add	r3, r2
 80041ec:	4a45      	ldr	r2, [pc, #276]	@ (8004304 <HAL_DMA_Init+0x140>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	009a      	lsls	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a42      	ldr	r2, [pc, #264]	@ (8004308 <HAL_DMA_Init+0x144>)
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004200:	e00e      	b.n	8004220 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	4b40      	ldr	r3, [pc, #256]	@ (800430c <HAL_DMA_Init+0x148>)
 800420a:	4413      	add	r3, r2
 800420c:	4a3d      	ldr	r2, [pc, #244]	@ (8004304 <HAL_DMA_Init+0x140>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	009a      	lsls	r2, r3, #2
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a3c      	ldr	r2, [pc, #240]	@ (8004310 <HAL_DMA_Init+0x14c>)
 800421e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800425c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fa76 	bl	8004764 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004280:	d102      	bne.n	8004288 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800429c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d010      	beq.n	80042c8 <HAL_DMA_Init+0x104>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d80c      	bhi.n	80042c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa96 	bl	80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	e008      	b.n	80042da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40020407 	.word	0x40020407
 8004300:	bffdfff8 	.word	0xbffdfff8
 8004304:	cccccccd 	.word	0xcccccccd
 8004308:	40020000 	.word	0x40020000
 800430c:	bffdfbf8 	.word	0xbffdfbf8
 8004310:	40020400 	.word	0x40020400

08004314 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_DMA_Start_IT+0x20>
 8004330:	2302      	movs	r3, #2
 8004332:	e066      	b.n	8004402 <HAL_DMA_Start_IT+0xee>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d155      	bne.n	80043f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f9bb 	bl	80046e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 020e 	orr.w	r2, r2, #14
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e00f      	b.n	80043ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0204 	bic.w	r2, r2, #4
 800439a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 020a 	orr.w	r2, r2, #10
 80043aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e005      	b.n	8004400 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
 80043fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d005      	beq.n	800442e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2204      	movs	r2, #4
 8004426:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	e037      	b.n	800449e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 020e 	bic.w	r2, r2, #14
 800443c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004448:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800444c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004462:	f003 021f 	and.w	r2, r3, #31
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	2101      	movs	r1, #1
 800446c:	fa01 f202 	lsl.w	r2, r1, r2
 8004470:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800447a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00c      	beq.n	800449e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004492:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800449c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d00d      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2204      	movs	r2, #4
 80044d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	e047      	b.n	8004580 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 020e 	bic.w	r2, r2, #14
 80044fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800451e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	2101      	movs	r1, #1
 800452e:	fa01 f202 	lsl.w	r2, r1, r2
 8004532:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800453c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004554:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800455e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
    }
  }
  return status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2204      	movs	r2, #4
 80045ac:	409a      	lsls	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d026      	beq.n	8004604 <HAL_DMA_IRQHandler+0x7a>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d021      	beq.n	8004604 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d107      	bne.n	80045de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0204 	bic.w	r2, r2, #4
 80045dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	f003 021f 	and.w	r2, r3, #31
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	2104      	movs	r1, #4
 80045ec:	fa01 f202 	lsl.w	r2, r1, r2
 80045f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d071      	beq.n	80046de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004602:	e06c      	b.n	80046de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2202      	movs	r2, #2
 800460e:	409a      	lsls	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02e      	beq.n	8004676 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d029      	beq.n	8004676 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 020a 	bic.w	r2, r2, #10
 800463e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464c:	f003 021f 	and.w	r2, r3, #31
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	2102      	movs	r1, #2
 8004656:	fa01 f202 	lsl.w	r2, r1, r2
 800465a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d038      	beq.n	80046de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004674:	e033      	b.n	80046de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f003 031f 	and.w	r3, r3, #31
 800467e:	2208      	movs	r2, #8
 8004680:	409a      	lsls	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d02a      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d025      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 020e 	bic.w	r2, r2, #14
 80046a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a8:	f003 021f 	and.w	r2, r3, #31
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f202 	lsl.w	r2, r1, r2
 80046b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d004      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
}
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004716:	f003 021f 	and.w	r2, r3, #31
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	2101      	movs	r1, #1
 8004720:	fa01 f202 	lsl.w	r2, r1, r2
 8004724:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b10      	cmp	r3, #16
 8004734:	d108      	bne.n	8004748 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004746:	e007      	b.n	8004758 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	60da      	str	r2, [r3, #12]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	4b16      	ldr	r3, [pc, #88]	@ (80047cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004774:	429a      	cmp	r2, r3
 8004776:	d802      	bhi.n	800477e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004778:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e001      	b.n	8004782 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004780:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	3b08      	subs	r3, #8
 800478e:	4a12      	ldr	r2, [pc, #72]	@ (80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	009a      	lsls	r2, r3, #2
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4413      	add	r3, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a0b      	ldr	r2, [pc, #44]	@ (80047dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80047ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2201      	movs	r2, #1
 80047b8:	409a      	lsls	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40020407 	.word	0x40020407
 80047d0:	40020800 	.word	0x40020800
 80047d4:	40020820 	.word	0x40020820
 80047d8:	cccccccd 	.word	0xcccccccd
 80047dc:	40020880 	.word	0x40020880

080047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	461a      	mov	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a08      	ldr	r2, [pc, #32]	@ (8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004802:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3b01      	subs	r3, #1
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2201      	movs	r2, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	1000823f 	.word	0x1000823f
 8004824:	40020940 	.word	0x40020940

08004828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004836:	e15a      	b.n	8004aee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	2101      	movs	r1, #1
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	fa01 f303 	lsl.w	r3, r1, r3
 8004844:	4013      	ands	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 814c 	beq.w	8004ae8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b01      	cmp	r3, #1
 800485a:	d005      	beq.n	8004868 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004864:	2b02      	cmp	r3, #2
 8004866:	d130      	bne.n	80048ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	2203      	movs	r2, #3
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4013      	ands	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800489e:	2201      	movs	r2, #1
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	f003 0201 	and.w	r2, r3, #1
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d017      	beq.n	8004906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	2203      	movs	r2, #3
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d123      	bne.n	800495a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	08da      	lsrs	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3208      	adds	r2, #8
 800491a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	220f      	movs	r2, #15
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	08da      	lsrs	r2, r3, #3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3208      	adds	r2, #8
 8004954:	6939      	ldr	r1, [r7, #16]
 8004956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2203      	movs	r2, #3
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4013      	ands	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0203 	and.w	r2, r3, #3
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80a6 	beq.w	8004ae8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800499c:	4b5b      	ldr	r3, [pc, #364]	@ (8004b0c <HAL_GPIO_Init+0x2e4>)
 800499e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a0:	4a5a      	ldr	r2, [pc, #360]	@ (8004b0c <HAL_GPIO_Init+0x2e4>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80049a8:	4b58      	ldr	r3, [pc, #352]	@ (8004b0c <HAL_GPIO_Init+0x2e4>)
 80049aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049b4:	4a56      	ldr	r2, [pc, #344]	@ (8004b10 <HAL_GPIO_Init+0x2e8>)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	089b      	lsrs	r3, r3, #2
 80049ba:	3302      	adds	r3, #2
 80049bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	220f      	movs	r2, #15
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4013      	ands	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049de:	d01f      	beq.n	8004a20 <HAL_GPIO_Init+0x1f8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004b14 <HAL_GPIO_Init+0x2ec>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d019      	beq.n	8004a1c <HAL_GPIO_Init+0x1f4>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004b18 <HAL_GPIO_Init+0x2f0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d013      	beq.n	8004a18 <HAL_GPIO_Init+0x1f0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a4a      	ldr	r2, [pc, #296]	@ (8004b1c <HAL_GPIO_Init+0x2f4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00d      	beq.n	8004a14 <HAL_GPIO_Init+0x1ec>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a49      	ldr	r2, [pc, #292]	@ (8004b20 <HAL_GPIO_Init+0x2f8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <HAL_GPIO_Init+0x1e8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a48      	ldr	r2, [pc, #288]	@ (8004b24 <HAL_GPIO_Init+0x2fc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d101      	bne.n	8004a0c <HAL_GPIO_Init+0x1e4>
 8004a08:	2305      	movs	r3, #5
 8004a0a:	e00a      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a0c:	2306      	movs	r3, #6
 8004a0e:	e008      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a10:	2304      	movs	r3, #4
 8004a12:	e006      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a14:	2303      	movs	r3, #3
 8004a16:	e004      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e002      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a20:	2300      	movs	r3, #0
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	f002 0203 	and.w	r2, r2, #3
 8004a28:	0092      	lsls	r2, r2, #2
 8004a2a:	4093      	lsls	r3, r2
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a32:	4937      	ldr	r1, [pc, #220]	@ (8004b10 <HAL_GPIO_Init+0x2e8>)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	089b      	lsrs	r3, r3, #2
 8004a38:	3302      	adds	r3, #2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a40:	4b39      	ldr	r3, [pc, #228]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a64:	4a30      	ldr	r2, [pc, #192]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a8e:	4a26      	ldr	r2, [pc, #152]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a94:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004abe:	4b1a      	ldr	r3, [pc, #104]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4013      	ands	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ae2:	4a11      	ldr	r2, [pc, #68]	@ (8004b28 <HAL_GPIO_Init+0x300>)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	3301      	adds	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f47f ae9d 	bne.w	8004838 <HAL_GPIO_Init+0x10>
  }
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40010000 	.word	0x40010000
 8004b14:	48000400 	.word	0x48000400
 8004b18:	48000800 	.word	0x48000800
 8004b1c:	48000c00 	.word	0x48000c00
 8004b20:	48001000 	.word	0x48001000
 8004b24:	48001400 	.word	0x48001400
 8004b28:	40010400 	.word	0x40010400

08004b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b3c:	787b      	ldrb	r3, [r7, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b48:	e002      	b.n	8004b50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b6e:	887a      	ldrh	r2, [r7, #2]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4013      	ands	r3, r2
 8004b74:	041a      	lsls	r2, r3, #16
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	43d9      	mvns	r1, r3
 8004b7a:	887b      	ldrh	r3, [r7, #2]
 8004b7c:	400b      	ands	r3, r1
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	619a      	str	r2, [r3, #24]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b9a:	4b08      	ldr	r3, [pc, #32]	@ (8004bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d006      	beq.n	8004bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ba6:	4a05      	ldr	r2, [pc, #20]	@ (8004bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f806 	bl	8004bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40010400 	.word	0x40010400

08004bc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
	...

08004bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d141      	bne.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004be6:	4b4b      	ldr	r3, [pc, #300]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf2:	d131      	bne.n	8004c58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bf4:	4b47      	ldr	r3, [pc, #284]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bfa:	4a46      	ldr	r2, [pc, #280]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c04:	4b43      	ldr	r3, [pc, #268]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c0c:	4a41      	ldr	r2, [pc, #260]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c14:	4b40      	ldr	r3, [pc, #256]	@ (8004d18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2232      	movs	r2, #50	@ 0x32
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	0c9b      	lsrs	r3, r3, #18
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c2a:	e002      	b.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c32:	4b38      	ldr	r3, [pc, #224]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3e:	d102      	bne.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f2      	bne.n	8004c2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c46:	4b33      	ldr	r3, [pc, #204]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c52:	d158      	bne.n	8004d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e057      	b.n	8004d08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c58:	4b2e      	ldr	r3, [pc, #184]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c68:	e04d      	b.n	8004d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c70:	d141      	bne.n	8004cf6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c72:	4b28      	ldr	r3, [pc, #160]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c7e:	d131      	bne.n	8004ce4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c80:	4b24      	ldr	r3, [pc, #144]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c86:	4a23      	ldr	r2, [pc, #140]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c90:	4b20      	ldr	r3, [pc, #128]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c98:	4a1e      	ldr	r2, [pc, #120]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2232      	movs	r2, #50	@ 0x32
 8004ca6:	fb02 f303 	mul.w	r3, r2, r3
 8004caa:	4a1c      	ldr	r2, [pc, #112]	@ (8004d1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	0c9b      	lsrs	r3, r3, #18
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cb6:	e002      	b.n	8004cbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cbe:	4b15      	ldr	r3, [pc, #84]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cca:	d102      	bne.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f2      	bne.n	8004cb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cde:	d112      	bne.n	8004d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e011      	b.n	8004d08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cea:	4a0a      	ldr	r2, [pc, #40]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004cf4:	e007      	b.n	8004d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cf6:	4b07      	ldr	r3, [pc, #28]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cfe:	4a05      	ldr	r2, [pc, #20]	@ (8004d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	40007000 	.word	0x40007000
 8004d18:	20000000 	.word	0x20000000
 8004d1c:	431bde83 	.word	0x431bde83

08004d20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d24:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a04      	ldr	r2, [pc, #16]	@ (8004d3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d2e:	6093      	str	r3, [r2, #8]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40007000 	.word	0x40007000

08004d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e2fe      	b.n	8005350 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d075      	beq.n	8004e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5e:	4b97      	ldr	r3, [pc, #604]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d68:	4b94      	ldr	r3, [pc, #592]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	d102      	bne.n	8004d7e <HAL_RCC_OscConfig+0x3e>
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d002      	beq.n	8004d84 <HAL_RCC_OscConfig+0x44>
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d10b      	bne.n	8004d9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d84:	4b8d      	ldr	r3, [pc, #564]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05b      	beq.n	8004e48 <HAL_RCC_OscConfig+0x108>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d157      	bne.n	8004e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e2d9      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da4:	d106      	bne.n	8004db4 <HAL_RCC_OscConfig+0x74>
 8004da6:	4b85      	ldr	r3, [pc, #532]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a84      	ldr	r2, [pc, #528]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e01d      	b.n	8004df0 <HAL_RCC_OscConfig+0xb0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x98>
 8004dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4b7c      	ldr	r3, [pc, #496]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a7b      	ldr	r2, [pc, #492]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0xb0>
 8004dd8:	4b78      	ldr	r3, [pc, #480]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a77      	ldr	r2, [pc, #476]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b75      	ldr	r3, [pc, #468]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a74      	ldr	r2, [pc, #464]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d013      	beq.n	8004e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fd f9aa 	bl	8002150 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e00:	f7fd f9a6 	bl	8002150 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	@ 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e29e      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e12:	4b6a      	ldr	r3, [pc, #424]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0xc0>
 8004e1e:	e014      	b.n	8004e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fd f996 	bl	8002150 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fd f992 	bl	8002150 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	@ 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e28a      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e3a:	4b60      	ldr	r3, [pc, #384]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0xe8>
 8004e46:	e000      	b.n	8004e4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d075      	beq.n	8004f42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e56:	4b59      	ldr	r3, [pc, #356]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e60:	4b56      	ldr	r3, [pc, #344]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b0c      	cmp	r3, #12
 8004e6e:	d102      	bne.n	8004e76 <HAL_RCC_OscConfig+0x136>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d002      	beq.n	8004e7c <HAL_RCC_OscConfig+0x13c>
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d11f      	bne.n	8004ebc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_OscConfig+0x154>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e25d      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e94:	4b49      	ldr	r3, [pc, #292]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	061b      	lsls	r3, r3, #24
 8004ea2:	4946      	ldr	r1, [pc, #280]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ea8:	4b45      	ldr	r3, [pc, #276]	@ (8004fc0 <HAL_RCC_OscConfig+0x280>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb ff87 	bl	8000dc0 <HAL_InitTick>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d043      	beq.n	8004f40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e249      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d023      	beq.n	8004f0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ec4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fd f93e 	bl	8002150 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed8:	f7fd f93a 	bl	8002150 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e232      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eea:	4b34      	ldr	r3, [pc, #208]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef6:	4b31      	ldr	r3, [pc, #196]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	061b      	lsls	r3, r3, #24
 8004f04:	492d      	ldr	r1, [pc, #180]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	604b      	str	r3, [r1, #4]
 8004f0a:	e01a      	b.n	8004f42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2a      	ldr	r2, [pc, #168]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004f12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd f91a 	bl	8002150 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f20:	f7fd f916 	bl	8002150 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e20e      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f32:	4b22      	ldr	r3, [pc, #136]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x1e0>
 8004f3e:	e000      	b.n	8004f42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d041      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01c      	beq.n	8004f90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f56:	4b19      	ldr	r3, [pc, #100]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f5c:	4a17      	ldr	r2, [pc, #92]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f66:	f7fd f8f3 	bl	8002150 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7fd f8ef 	bl	8002150 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1e7      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f80:	4b0e      	ldr	r3, [pc, #56]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0ef      	beq.n	8004f6e <HAL_RCC_OscConfig+0x22e>
 8004f8e:	e020      	b.n	8004fd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f90:	4b0a      	ldr	r3, [pc, #40]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f96:	4a09      	ldr	r2, [pc, #36]	@ (8004fbc <HAL_RCC_OscConfig+0x27c>)
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa0:	f7fd f8d6 	bl	8002150 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fa6:	e00d      	b.n	8004fc4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa8:	f7fd f8d2 	bl	8002150 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d906      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e1ca      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	200000c8 	.word	0x200000c8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8004fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1ea      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80a6 	beq.w	800512c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fe4:	4b84      	ldr	r3, [pc, #528]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x2b4>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <HAL_RCC_OscConfig+0x2b6>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00d      	beq.n	8005016 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005004:	6593      	str	r3, [r2, #88]	@ 0x58
 8005006:	4b7c      	ldr	r3, [pc, #496]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8005008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005012:	2301      	movs	r3, #1
 8005014:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005016:	4b79      	ldr	r3, [pc, #484]	@ (80051fc <HAL_RCC_OscConfig+0x4bc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d118      	bne.n	8005054 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005022:	4b76      	ldr	r3, [pc, #472]	@ (80051fc <HAL_RCC_OscConfig+0x4bc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a75      	ldr	r2, [pc, #468]	@ (80051fc <HAL_RCC_OscConfig+0x4bc>)
 8005028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800502c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502e:	f7fd f88f 	bl	8002150 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005036:	f7fd f88b 	bl	8002150 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e183      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005048:	4b6c      	ldr	r3, [pc, #432]	@ (80051fc <HAL_RCC_OscConfig+0x4bc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d108      	bne.n	800506e <HAL_RCC_OscConfig+0x32e>
 800505c:	4b66      	ldr	r3, [pc, #408]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005062:	4a65      	ldr	r2, [pc, #404]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800506c:	e024      	b.n	80050b8 <HAL_RCC_OscConfig+0x378>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b05      	cmp	r3, #5
 8005074:	d110      	bne.n	8005098 <HAL_RCC_OscConfig+0x358>
 8005076:	4b60      	ldr	r3, [pc, #384]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507c:	4a5e      	ldr	r2, [pc, #376]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 800507e:	f043 0304 	orr.w	r3, r3, #4
 8005082:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005086:	4b5c      	ldr	r3, [pc, #368]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508c:	4a5a      	ldr	r2, [pc, #360]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005096:	e00f      	b.n	80050b8 <HAL_RCC_OscConfig+0x378>
 8005098:	4b57      	ldr	r3, [pc, #348]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800509e:	4a56      	ldr	r2, [pc, #344]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050a8:	4b53      	ldr	r3, [pc, #332]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ae:	4a52      	ldr	r2, [pc, #328]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 80050b0:	f023 0304 	bic.w	r3, r3, #4
 80050b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d016      	beq.n	80050ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c0:	f7fd f846 	bl	8002150 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c6:	e00a      	b.n	80050de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c8:	f7fd f842 	bl	8002150 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e138      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050de:	4b46      	ldr	r3, [pc, #280]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ed      	beq.n	80050c8 <HAL_RCC_OscConfig+0x388>
 80050ec:	e015      	b.n	800511a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ee:	f7fd f82f 	bl	8002150 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f4:	e00a      	b.n	800510c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fd f82b 	bl	8002150 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005104:	4293      	cmp	r3, r2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e121      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800510c:	4b3a      	ldr	r3, [pc, #232]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ed      	bne.n	80050f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800511a:	7ffb      	ldrb	r3, [r7, #31]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005120:	4b35      	ldr	r3, [pc, #212]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8005122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005124:	4a34      	ldr	r2, [pc, #208]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8005126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800512a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d03c      	beq.n	80051b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01c      	beq.n	800517a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005140:	4b2d      	ldr	r3, [pc, #180]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8005142:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005146:	4a2c      	ldr	r2, [pc, #176]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fc fffe 	bl	8002150 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005158:	f7fc fffa 	bl	8002150 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e0f2      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800516a:	4b23      	ldr	r3, [pc, #140]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 800516c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ef      	beq.n	8005158 <HAL_RCC_OscConfig+0x418>
 8005178:	e01b      	b.n	80051b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800517a:	4b1f      	ldr	r3, [pc, #124]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 800517c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005180:	4a1d      	ldr	r2, [pc, #116]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518a:	f7fc ffe1 	bl	8002150 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005192:	f7fc ffdd 	bl	8002150 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e0d5      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051a4:	4b14      	ldr	r3, [pc, #80]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 80051a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1ef      	bne.n	8005192 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80c9 	beq.w	800534e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051bc:	4b0e      	ldr	r3, [pc, #56]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 030c 	and.w	r3, r3, #12
 80051c4:	2b0c      	cmp	r3, #12
 80051c6:	f000 8083 	beq.w	80052d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d15e      	bne.n	8005290 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d2:	4b09      	ldr	r3, [pc, #36]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a08      	ldr	r2, [pc, #32]	@ (80051f8 <HAL_RCC_OscConfig+0x4b8>)
 80051d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051de:	f7fc ffb7 	bl	8002150 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051e4:	e00c      	b.n	8005200 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e6:	f7fc ffb3 	bl	8002150 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d905      	bls.n	8005200 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0ab      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005200:	4b55      	ldr	r3, [pc, #340]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1ec      	bne.n	80051e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800520c:	4b52      	ldr	r3, [pc, #328]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	4b52      	ldr	r3, [pc, #328]	@ (800535c <HAL_RCC_OscConfig+0x61c>)
 8005212:	4013      	ands	r3, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6a11      	ldr	r1, [r2, #32]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800521c:	3a01      	subs	r2, #1
 800521e:	0112      	lsls	r2, r2, #4
 8005220:	4311      	orrs	r1, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005226:	0212      	lsls	r2, r2, #8
 8005228:	4311      	orrs	r1, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800522e:	0852      	lsrs	r2, r2, #1
 8005230:	3a01      	subs	r2, #1
 8005232:	0552      	lsls	r2, r2, #21
 8005234:	4311      	orrs	r1, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800523a:	0852      	lsrs	r2, r2, #1
 800523c:	3a01      	subs	r2, #1
 800523e:	0652      	lsls	r2, r2, #25
 8005240:	4311      	orrs	r1, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005246:	06d2      	lsls	r2, r2, #27
 8005248:	430a      	orrs	r2, r1
 800524a:	4943      	ldr	r1, [pc, #268]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 800524c:	4313      	orrs	r3, r2
 800524e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005250:	4b41      	ldr	r3, [pc, #260]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a40      	ldr	r2, [pc, #256]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 8005256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800525a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800525c:	4b3e      	ldr	r3, [pc, #248]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a3d      	ldr	r2, [pc, #244]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005266:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fc ff72 	bl	8002150 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005270:	f7fc ff6e 	bl	8002150 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e066      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005282:	4b35      	ldr	r3, [pc, #212]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x530>
 800528e:	e05e      	b.n	800534e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005290:	4b31      	ldr	r3, [pc, #196]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a30      	ldr	r2, [pc, #192]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 8005296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800529a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fc ff58 	bl	8002150 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a4:	f7fc ff54 	bl	8002150 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e04c      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b6:	4b28      	ldr	r3, [pc, #160]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80052c2:	4b25      	ldr	r3, [pc, #148]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	4924      	ldr	r1, [pc, #144]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 80052c8:	4b25      	ldr	r3, [pc, #148]	@ (8005360 <HAL_RCC_OscConfig+0x620>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	60cb      	str	r3, [r1, #12]
 80052ce:	e03e      	b.n	800534e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e039      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052dc:	4b1e      	ldr	r3, [pc, #120]	@ (8005358 <HAL_RCC_OscConfig+0x618>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f003 0203 	and.w	r2, r3, #3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d12c      	bne.n	800534a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	3b01      	subs	r3, #1
 80052fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fe:	429a      	cmp	r2, r3
 8005300:	d123      	bne.n	800534a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d11b      	bne.n	800534a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d113      	bne.n	800534a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	3b01      	subs	r3, #1
 8005330:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d109      	bne.n	800534a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	3b01      	subs	r3, #1
 8005344:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d001      	beq.n	800534e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40021000 	.word	0x40021000
 800535c:	019f800c 	.word	0x019f800c
 8005360:	feeefffc 	.word	0xfeeefffc

08005364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e11e      	b.n	80055ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800537c:	4b91      	ldr	r3, [pc, #580]	@ (80055c4 <HAL_RCC_ClockConfig+0x260>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d910      	bls.n	80053ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4b8e      	ldr	r3, [pc, #568]	@ (80055c4 <HAL_RCC_ClockConfig+0x260>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 020f 	bic.w	r2, r3, #15
 8005392:	498c      	ldr	r1, [pc, #560]	@ (80055c4 <HAL_RCC_ClockConfig+0x260>)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800539a:	4b8a      	ldr	r3, [pc, #552]	@ (80055c4 <HAL_RCC_ClockConfig+0x260>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e106      	b.n	80055ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d073      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d129      	bne.n	8005414 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053c0:	4b81      	ldr	r3, [pc, #516]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0f4      	b.n	80055ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053d0:	f000 f9d0 	bl	8005774 <RCC_GetSysClockFreqFromPLLSource>
 80053d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4a7c      	ldr	r2, [pc, #496]	@ (80055cc <HAL_RCC_ClockConfig+0x268>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d93f      	bls.n	800545e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053de:	4b7a      	ldr	r3, [pc, #488]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d033      	beq.n	800545e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d12f      	bne.n	800545e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053fe:	4b72      	ldr	r3, [pc, #456]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005406:	4a70      	ldr	r2, [pc, #448]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 8005408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800540c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e024      	b.n	800545e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d107      	bne.n	800542c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800541c:	4b6a      	ldr	r3, [pc, #424]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0c6      	b.n	80055ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800542c:	4b66      	ldr	r3, [pc, #408]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0be      	b.n	80055ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800543c:	f000 f8ce 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8005440:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4a61      	ldr	r2, [pc, #388]	@ (80055cc <HAL_RCC_ClockConfig+0x268>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d909      	bls.n	800545e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800544a:	4b5f      	ldr	r3, [pc, #380]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005452:	4a5d      	ldr	r2, [pc, #372]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 8005454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005458:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800545a:	2380      	movs	r3, #128	@ 0x80
 800545c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b5a      	ldr	r3, [pc, #360]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4957      	ldr	r1, [pc, #348]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005470:	f7fc fe6e 	bl	8002150 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fc fe6a 	bl	8002150 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e095      	b.n	80055ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b4e      	ldr	r3, [pc, #312]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d023      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054b8:	4b43      	ldr	r3, [pc, #268]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4a42      	ldr	r2, [pc, #264]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 80054be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054d0:	4b3d      	ldr	r3, [pc, #244]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054d8:	4a3b      	ldr	r2, [pc, #236]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 80054da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e0:	4b39      	ldr	r3, [pc, #228]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4936      	ldr	r1, [pc, #216]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	608b      	str	r3, [r1, #8]
 80054f2:	e008      	b.n	8005506 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2b80      	cmp	r3, #128	@ 0x80
 80054f8:	d105      	bne.n	8005506 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054fa:	4b33      	ldr	r3, [pc, #204]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	4a32      	ldr	r2, [pc, #200]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 8005500:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005504:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005506:	4b2f      	ldr	r3, [pc, #188]	@ (80055c4 <HAL_RCC_ClockConfig+0x260>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d21d      	bcs.n	8005550 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005514:	4b2b      	ldr	r3, [pc, #172]	@ (80055c4 <HAL_RCC_ClockConfig+0x260>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f023 020f 	bic.w	r2, r3, #15
 800551c:	4929      	ldr	r1, [pc, #164]	@ (80055c4 <HAL_RCC_ClockConfig+0x260>)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	4313      	orrs	r3, r2
 8005522:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005524:	f7fc fe14 	bl	8002150 <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800552a:	e00a      	b.n	8005542 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800552c:	f7fc fe10 	bl	8002150 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e03b      	b.n	80055ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b20      	ldr	r3, [pc, #128]	@ (80055c4 <HAL_RCC_ClockConfig+0x260>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d1ed      	bne.n	800552c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800555c:	4b1a      	ldr	r3, [pc, #104]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4917      	ldr	r1, [pc, #92]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800557a:	4b13      	ldr	r3, [pc, #76]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	490f      	ldr	r1, [pc, #60]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800558e:	f000 f825 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8005592:	4602      	mov	r2, r0
 8005594:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <HAL_RCC_ClockConfig+0x264>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	490c      	ldr	r1, [pc, #48]	@ (80055d0 <HAL_RCC_ClockConfig+0x26c>)
 80055a0:	5ccb      	ldrb	r3, [r1, r3]
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	fa22 f303 	lsr.w	r3, r2, r3
 80055aa:	4a0a      	ldr	r2, [pc, #40]	@ (80055d4 <HAL_RCC_ClockConfig+0x270>)
 80055ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80055ae:	4b0a      	ldr	r3, [pc, #40]	@ (80055d8 <HAL_RCC_ClockConfig+0x274>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fb fc04 	bl	8000dc0 <HAL_InitTick>
 80055b8:	4603      	mov	r3, r0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40022000 	.word	0x40022000
 80055c8:	40021000 	.word	0x40021000
 80055cc:	04c4b400 	.word	0x04c4b400
 80055d0:	0800b498 	.word	0x0800b498
 80055d4:	20000000 	.word	0x20000000
 80055d8:	200000c8 	.word	0x200000c8

080055dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005694 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d102      	bne.n	80055f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005698 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	e047      	b.n	8005684 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055f4:	4b27      	ldr	r3, [pc, #156]	@ (8005694 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d102      	bne.n	8005606 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005600:	4b26      	ldr	r3, [pc, #152]	@ (800569c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	e03e      	b.n	8005684 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005606:	4b23      	ldr	r3, [pc, #140]	@ (8005694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
 800560e:	2b0c      	cmp	r3, #12
 8005610:	d136      	bne.n	8005680 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005612:	4b20      	ldr	r3, [pc, #128]	@ (8005694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800561c:	4b1d      	ldr	r3, [pc, #116]	@ (8005694 <HAL_RCC_GetSysClockFreq+0xb8>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	091b      	lsrs	r3, r3, #4
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	3301      	adds	r3, #1
 8005628:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d10c      	bne.n	800564a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005630:	4a1a      	ldr	r2, [pc, #104]	@ (800569c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	4a16      	ldr	r2, [pc, #88]	@ (8005694 <HAL_RCC_GetSysClockFreq+0xb8>)
 800563a:	68d2      	ldr	r2, [r2, #12]
 800563c:	0a12      	lsrs	r2, r2, #8
 800563e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	617b      	str	r3, [r7, #20]
      break;
 8005648:	e00c      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800564a:	4a13      	ldr	r2, [pc, #76]	@ (8005698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005652:	4a10      	ldr	r2, [pc, #64]	@ (8005694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005654:	68d2      	ldr	r2, [r2, #12]
 8005656:	0a12      	lsrs	r2, r2, #8
 8005658:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800565c:	fb02 f303 	mul.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]
      break;
 8005662:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005664:	4b0b      	ldr	r3, [pc, #44]	@ (8005694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	0e5b      	lsrs	r3, r3, #25
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	3301      	adds	r3, #1
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	fbb2 f3f3 	udiv	r3, r2, r3
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	e001      	b.n	8005684 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005684:	693b      	ldr	r3, [r7, #16]
}
 8005686:	4618      	mov	r0, r3
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40021000 	.word	0x40021000
 8005698:	00f42400 	.word	0x00f42400
 800569c:	016e3600 	.word	0x016e3600

080056a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056a4:	4b03      	ldr	r3, [pc, #12]	@ (80056b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056a6:	681b      	ldr	r3, [r3, #0]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20000000 	.word	0x20000000

080056b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056bc:	f7ff fff0 	bl	80056a0 <HAL_RCC_GetHCLKFreq>
 80056c0:	4602      	mov	r2, r0
 80056c2:	4b06      	ldr	r3, [pc, #24]	@ (80056dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	4904      	ldr	r1, [pc, #16]	@ (80056e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056ce:	5ccb      	ldrb	r3, [r1, r3]
 80056d0:	f003 031f 	and.w	r3, r3, #31
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d8:	4618      	mov	r0, r3
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40021000 	.word	0x40021000
 80056e0:	0800b4a8 	.word	0x0800b4a8

080056e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056e8:	f7ff ffda 	bl	80056a0 <HAL_RCC_GetHCLKFreq>
 80056ec:	4602      	mov	r2, r0
 80056ee:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	0adb      	lsrs	r3, r3, #11
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	4904      	ldr	r1, [pc, #16]	@ (800570c <HAL_RCC_GetPCLK2Freq+0x28>)
 80056fa:	5ccb      	ldrb	r3, [r1, r3]
 80056fc:	f003 031f 	and.w	r3, r3, #31
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40021000 	.word	0x40021000
 800570c:	0800b4a8 	.word	0x0800b4a8

08005710 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	220f      	movs	r2, #15
 800571e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005720:	4b12      	ldr	r3, [pc, #72]	@ (800576c <HAL_RCC_GetClockConfig+0x5c>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0203 	and.w	r2, r3, #3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800572c:	4b0f      	ldr	r3, [pc, #60]	@ (800576c <HAL_RCC_GetClockConfig+0x5c>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005738:	4b0c      	ldr	r3, [pc, #48]	@ (800576c <HAL_RCC_GetClockConfig+0x5c>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005744:	4b09      	ldr	r3, [pc, #36]	@ (800576c <HAL_RCC_GetClockConfig+0x5c>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	08db      	lsrs	r3, r3, #3
 800574a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005752:	4b07      	ldr	r3, [pc, #28]	@ (8005770 <HAL_RCC_GetClockConfig+0x60>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	601a      	str	r2, [r3, #0]
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000
 8005770:	40022000 	.word	0x40022000

08005774 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800577a:	4b1e      	ldr	r3, [pc, #120]	@ (80057f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005784:	4b1b      	ldr	r3, [pc, #108]	@ (80057f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	3301      	adds	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b03      	cmp	r3, #3
 8005796:	d10c      	bne.n	80057b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005798:	4a17      	ldr	r2, [pc, #92]	@ (80057f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	4a14      	ldr	r2, [pc, #80]	@ (80057f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057a2:	68d2      	ldr	r2, [r2, #12]
 80057a4:	0a12      	lsrs	r2, r2, #8
 80057a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	617b      	str	r3, [r7, #20]
    break;
 80057b0:	e00c      	b.n	80057cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057b2:	4a12      	ldr	r2, [pc, #72]	@ (80057fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ba:	4a0e      	ldr	r2, [pc, #56]	@ (80057f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057bc:	68d2      	ldr	r2, [r2, #12]
 80057be:	0a12      	lsrs	r2, r2, #8
 80057c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]
    break;
 80057ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057cc:	4b09      	ldr	r3, [pc, #36]	@ (80057f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	0e5b      	lsrs	r3, r3, #25
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	3301      	adds	r3, #1
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057e6:	687b      	ldr	r3, [r7, #4]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	371c      	adds	r7, #28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40021000 	.word	0x40021000
 80057f8:	016e3600 	.word	0x016e3600
 80057fc:	00f42400 	.word	0x00f42400

08005800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005808:	2300      	movs	r3, #0
 800580a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800580c:	2300      	movs	r3, #0
 800580e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8098 	beq.w	800594e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800581e:	2300      	movs	r3, #0
 8005820:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005822:	4b43      	ldr	r3, [pc, #268]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10d      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582e:	4b40      	ldr	r3, [pc, #256]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005832:	4a3f      	ldr	r2, [pc, #252]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005838:	6593      	str	r3, [r2, #88]	@ 0x58
 800583a:	4b3d      	ldr	r3, [pc, #244]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005846:	2301      	movs	r3, #1
 8005848:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800584a:	4b3a      	ldr	r3, [pc, #232]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a39      	ldr	r2, [pc, #228]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005854:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005856:	f7fc fc7b 	bl	8002150 <HAL_GetTick>
 800585a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800585c:	e009      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585e:	f7fc fc77 	bl	8002150 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d902      	bls.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	74fb      	strb	r3, [r7, #19]
        break;
 8005870:	e005      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005872:	4b30      	ldr	r3, [pc, #192]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0ef      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800587e:	7cfb      	ldrb	r3, [r7, #19]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d159      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005884:	4b2a      	ldr	r3, [pc, #168]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800588a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01e      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	429a      	cmp	r2, r3
 800589e:	d019      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058a0:	4b23      	ldr	r3, [pc, #140]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058ac:	4b20      	ldr	r3, [pc, #128]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058cc:	4a18      	ldr	r2, [pc, #96]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d016      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7fc fc37 	bl	8002150 <HAL_GetTick>
 80058e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e4:	e00b      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fc fc33 	bl	8002150 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d902      	bls.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	74fb      	strb	r3, [r7, #19]
            break;
 80058fc:	e006      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0ec      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800590c:	7cfb      	ldrb	r3, [r7, #19]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005912:	4b07      	ldr	r3, [pc, #28]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005920:	4903      	ldr	r1, [pc, #12]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005928:	e008      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800592a:	7cfb      	ldrb	r3, [r7, #19]
 800592c:	74bb      	strb	r3, [r7, #18]
 800592e:	e005      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005930:	40021000 	.word	0x40021000
 8005934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005938:	7cfb      	ldrb	r3, [r7, #19]
 800593a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800593c:	7c7b      	ldrb	r3, [r7, #17]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d105      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005942:	4ba7      	ldr	r3, [pc, #668]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005946:	4aa6      	ldr	r2, [pc, #664]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005948:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800594c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800595a:	4ba1      	ldr	r3, [pc, #644]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005960:	f023 0203 	bic.w	r2, r3, #3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	499d      	ldr	r1, [pc, #628]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800597c:	4b98      	ldr	r3, [pc, #608]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005982:	f023 020c 	bic.w	r2, r3, #12
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	4995      	ldr	r1, [pc, #596]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800599e:	4b90      	ldr	r3, [pc, #576]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	498c      	ldr	r1, [pc, #560]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059c0:	4b87      	ldr	r3, [pc, #540]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	4984      	ldr	r1, [pc, #528]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059e2:	4b7f      	ldr	r3, [pc, #508]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	497b      	ldr	r1, [pc, #492]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a04:	4b76      	ldr	r3, [pc, #472]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	4973      	ldr	r1, [pc, #460]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a26:	4b6e      	ldr	r3, [pc, #440]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	496a      	ldr	r1, [pc, #424]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a48:	4b65      	ldr	r3, [pc, #404]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	4962      	ldr	r1, [pc, #392]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a6a:	4b5d      	ldr	r3, [pc, #372]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	4959      	ldr	r1, [pc, #356]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a8c:	4b54      	ldr	r3, [pc, #336]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a92:	f023 0203 	bic.w	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	4951      	ldr	r1, [pc, #324]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aae:	4b4c      	ldr	r3, [pc, #304]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	4948      	ldr	r1, [pc, #288]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d015      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ad0:	4b43      	ldr	r3, [pc, #268]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ade:	4940      	ldr	r1, [pc, #256]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aee:	d105      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af0:	4b3b      	ldr	r3, [pc, #236]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4a3a      	ldr	r2, [pc, #232]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005afa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d015      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b08:	4b35      	ldr	r3, [pc, #212]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b16:	4932      	ldr	r1, [pc, #200]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b26:	d105      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b28:	4b2d      	ldr	r3, [pc, #180]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b32:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d015      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b40:	4b27      	ldr	r3, [pc, #156]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4e:	4924      	ldr	r1, [pc, #144]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b60:	4b1f      	ldr	r3, [pc, #124]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a1e      	ldr	r2, [pc, #120]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d015      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b78:	4b19      	ldr	r3, [pc, #100]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b86:	4916      	ldr	r1, [pc, #88]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b96:	d105      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b98:	4b11      	ldr	r3, [pc, #68]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a10      	ldr	r2, [pc, #64]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ba2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d019      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbe:	4908      	ldr	r1, [pc, #32]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bce:	d109      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bd0:	4b03      	ldr	r3, [pc, #12]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a02      	ldr	r2, [pc, #8]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bda:	60d3      	str	r3, [r2, #12]
 8005bdc:	e002      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005bde:	bf00      	nop
 8005be0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d015      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bf0:	4b29      	ldr	r3, [pc, #164]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfe:	4926      	ldr	r1, [pc, #152]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c0e:	d105      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c10:	4b21      	ldr	r3, [pc, #132]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4a20      	ldr	r2, [pc, #128]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c1a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d015      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005c28:	4b1b      	ldr	r3, [pc, #108]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c36:	4918      	ldr	r1, [pc, #96]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c46:	d105      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c48:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	4a12      	ldr	r2, [pc, #72]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c52:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d015      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c60:	4b0d      	ldr	r3, [pc, #52]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c6e:	490a      	ldr	r1, [pc, #40]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c7e:	d105      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c80:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4a04      	ldr	r2, [pc, #16]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40021000 	.word	0x40021000

08005c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e049      	b.n	8005d42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fb fc1a 	bl	80014fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f000 ffa0 	bl	8006c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d001      	beq.n	8005d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e054      	b.n	8005e0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a26      	ldr	r2, [pc, #152]	@ (8005e1c <HAL_TIM_Base_Start_IT+0xd0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d022      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0x80>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d8e:	d01d      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0x80>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a22      	ldr	r2, [pc, #136]	@ (8005e20 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d018      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0x80>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a21      	ldr	r2, [pc, #132]	@ (8005e24 <HAL_TIM_Base_Start_IT+0xd8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d013      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0x80>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e28 <HAL_TIM_Base_Start_IT+0xdc>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00e      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0x80>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a1e      	ldr	r2, [pc, #120]	@ (8005e2c <HAL_TIM_Base_Start_IT+0xe0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d009      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0x80>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e30 <HAL_TIM_Base_Start_IT+0xe4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d004      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0x80>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e34 <HAL_TIM_Base_Start_IT+0xe8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d115      	bne.n	8005df8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	4b19      	ldr	r3, [pc, #100]	@ (8005e38 <HAL_TIM_Base_Start_IT+0xec>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d015      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0xbe>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de4:	d011      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0201 	orr.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df6:	e008      	b.n	8005e0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e000      	b.n	8005e0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40012c00 	.word	0x40012c00
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800
 8005e28:	40000c00 	.word	0x40000c00
 8005e2c:	40013400 	.word	0x40013400
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40015000 	.word	0x40015000
 8005e38:	00010007 	.word	0x00010007

08005e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e049      	b.n	8005ee2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fb fb24 	bl	80014b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	f000 fed0 	bl	8006c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d109      	bne.n	8005f10 <HAL_TIM_PWM_Start+0x24>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	bf14      	ite	ne
 8005f08:	2301      	movne	r3, #1
 8005f0a:	2300      	moveq	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	e03c      	b.n	8005f8a <HAL_TIM_PWM_Start+0x9e>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d109      	bne.n	8005f2a <HAL_TIM_PWM_Start+0x3e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	bf14      	ite	ne
 8005f22:	2301      	movne	r3, #1
 8005f24:	2300      	moveq	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	e02f      	b.n	8005f8a <HAL_TIM_PWM_Start+0x9e>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d109      	bne.n	8005f44 <HAL_TIM_PWM_Start+0x58>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	e022      	b.n	8005f8a <HAL_TIM_PWM_Start+0x9e>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	d109      	bne.n	8005f5e <HAL_TIM_PWM_Start+0x72>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	bf14      	ite	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	2300      	moveq	r3, #0
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	e015      	b.n	8005f8a <HAL_TIM_PWM_Start+0x9e>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d109      	bne.n	8005f78 <HAL_TIM_PWM_Start+0x8c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	e008      	b.n	8005f8a <HAL_TIM_PWM_Start+0x9e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	bf14      	ite	ne
 8005f84:	2301      	movne	r3, #1
 8005f86:	2300      	moveq	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e0a6      	b.n	80060e0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <HAL_TIM_PWM_Start+0xb6>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fa0:	e023      	b.n	8005fea <HAL_TIM_PWM_Start+0xfe>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d104      	bne.n	8005fb2 <HAL_TIM_PWM_Start+0xc6>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fb0:	e01b      	b.n	8005fea <HAL_TIM_PWM_Start+0xfe>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0xd6>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fc0:	e013      	b.n	8005fea <HAL_TIM_PWM_Start+0xfe>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b0c      	cmp	r3, #12
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0xe6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fd0:	e00b      	b.n	8005fea <HAL_TIM_PWM_Start+0xfe>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0xf6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fe0:	e003      	b.n	8005fea <HAL_TIM_PWM_Start+0xfe>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 fa8e 	bl	8007514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a3a      	ldr	r2, [pc, #232]	@ (80060e8 <HAL_TIM_PWM_Start+0x1fc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_TIM_PWM_Start+0x148>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a39      	ldr	r2, [pc, #228]	@ (80060ec <HAL_TIM_PWM_Start+0x200>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_TIM_PWM_Start+0x148>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a37      	ldr	r2, [pc, #220]	@ (80060f0 <HAL_TIM_PWM_Start+0x204>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_TIM_PWM_Start+0x148>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a36      	ldr	r2, [pc, #216]	@ (80060f4 <HAL_TIM_PWM_Start+0x208>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_TIM_PWM_Start+0x148>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a34      	ldr	r2, [pc, #208]	@ (80060f8 <HAL_TIM_PWM_Start+0x20c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_TIM_PWM_Start+0x148>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a33      	ldr	r2, [pc, #204]	@ (80060fc <HAL_TIM_PWM_Start+0x210>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d101      	bne.n	8006038 <HAL_TIM_PWM_Start+0x14c>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <HAL_TIM_PWM_Start+0x14e>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800604c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a25      	ldr	r2, [pc, #148]	@ (80060e8 <HAL_TIM_PWM_Start+0x1fc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d022      	beq.n	800609e <HAL_TIM_PWM_Start+0x1b2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006060:	d01d      	beq.n	800609e <HAL_TIM_PWM_Start+0x1b2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a26      	ldr	r2, [pc, #152]	@ (8006100 <HAL_TIM_PWM_Start+0x214>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d018      	beq.n	800609e <HAL_TIM_PWM_Start+0x1b2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a24      	ldr	r2, [pc, #144]	@ (8006104 <HAL_TIM_PWM_Start+0x218>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <HAL_TIM_PWM_Start+0x1b2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a23      	ldr	r2, [pc, #140]	@ (8006108 <HAL_TIM_PWM_Start+0x21c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_TIM_PWM_Start+0x1b2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a19      	ldr	r2, [pc, #100]	@ (80060ec <HAL_TIM_PWM_Start+0x200>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d009      	beq.n	800609e <HAL_TIM_PWM_Start+0x1b2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <HAL_TIM_PWM_Start+0x204>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_TIM_PWM_Start+0x1b2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a18      	ldr	r2, [pc, #96]	@ (80060fc <HAL_TIM_PWM_Start+0x210>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d115      	bne.n	80060ca <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	4b19      	ldr	r3, [pc, #100]	@ (800610c <HAL_TIM_PWM_Start+0x220>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b06      	cmp	r3, #6
 80060ae:	d015      	beq.n	80060dc <HAL_TIM_PWM_Start+0x1f0>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b6:	d011      	beq.n	80060dc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c8:	e008      	b.n	80060dc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0201 	orr.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e000      	b.n	80060de <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800
 80060fc:	40015000 	.word	0x40015000
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	00010007 	.word	0x00010007

08006110 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f001 f9f6 	bl	8007514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a40      	ldr	r2, [pc, #256]	@ (8006230 <HAL_TIM_PWM_Stop+0x120>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d018      	beq.n	8006164 <HAL_TIM_PWM_Stop+0x54>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a3f      	ldr	r2, [pc, #252]	@ (8006234 <HAL_TIM_PWM_Stop+0x124>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d013      	beq.n	8006164 <HAL_TIM_PWM_Stop+0x54>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a3d      	ldr	r2, [pc, #244]	@ (8006238 <HAL_TIM_PWM_Stop+0x128>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00e      	beq.n	8006164 <HAL_TIM_PWM_Stop+0x54>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a3c      	ldr	r2, [pc, #240]	@ (800623c <HAL_TIM_PWM_Stop+0x12c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d009      	beq.n	8006164 <HAL_TIM_PWM_Stop+0x54>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a3a      	ldr	r2, [pc, #232]	@ (8006240 <HAL_TIM_PWM_Stop+0x130>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d004      	beq.n	8006164 <HAL_TIM_PWM_Stop+0x54>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a39      	ldr	r2, [pc, #228]	@ (8006244 <HAL_TIM_PWM_Stop+0x134>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d101      	bne.n	8006168 <HAL_TIM_PWM_Stop+0x58>
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <HAL_TIM_PWM_Stop+0x5a>
 8006168:	2300      	movs	r3, #0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d017      	beq.n	800619e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a1a      	ldr	r2, [r3, #32]
 8006174:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10f      	bne.n	800619e <HAL_TIM_PWM_Stop+0x8e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d107      	bne.n	800619e <HAL_TIM_PWM_Stop+0x8e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800619c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6a1a      	ldr	r2, [r3, #32]
 80061a4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10f      	bne.n	80061ce <HAL_TIM_PWM_Stop+0xbe>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	f244 4344 	movw	r3, #17476	@ 0x4444
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d107      	bne.n	80061ce <HAL_TIM_PWM_Stop+0xbe>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_Stop+0xce>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061dc:	e023      	b.n	8006226 <HAL_TIM_PWM_Stop+0x116>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Stop+0xde>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061ec:	e01b      	b.n	8006226 <HAL_TIM_PWM_Stop+0x116>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Stop+0xee>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061fc:	e013      	b.n	8006226 <HAL_TIM_PWM_Stop+0x116>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b0c      	cmp	r3, #12
 8006202:	d104      	bne.n	800620e <HAL_TIM_PWM_Stop+0xfe>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800620c:	e00b      	b.n	8006226 <HAL_TIM_PWM_Stop+0x116>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b10      	cmp	r3, #16
 8006212:	d104      	bne.n	800621e <HAL_TIM_PWM_Stop+0x10e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800621c:	e003      	b.n	8006226 <HAL_TIM_PWM_Stop+0x116>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40013400 	.word	0x40013400
 8006238:	40014000 	.word	0x40014000
 800623c:	40014400 	.word	0x40014400
 8006240:	40014800 	.word	0x40014800
 8006244:	40015000 	.word	0x40015000

08006248 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e097      	b.n	800638c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fb f983 	bl	800157c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800628c:	f023 0307 	bic.w	r3, r3, #7
 8006290:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3304      	adds	r3, #4
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f000 fcbf 	bl	8006c20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ca:	f023 0303 	bic.w	r3, r3, #3
 80062ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	4313      	orrs	r3, r2
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80062e8:	f023 030c 	bic.w	r3, r3, #12
 80062ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	4313      	orrs	r3, r2
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	011a      	lsls	r2, r3, #4
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	031b      	lsls	r3, r3, #12
 8006318:	4313      	orrs	r3, r2
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	4313      	orrs	r3, r2
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d110      	bne.n	80063e6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d102      	bne.n	80063d0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80063ca:	7b7b      	ldrb	r3, [r7, #13]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d001      	beq.n	80063d4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e089      	b.n	80064e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063e4:	e031      	b.n	800644a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d110      	bne.n	800640e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ec:	7bbb      	ldrb	r3, [r7, #14]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d102      	bne.n	80063f8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063f2:	7b3b      	ldrb	r3, [r7, #12]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d001      	beq.n	80063fc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e075      	b.n	80064e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800640c:	e01d      	b.n	800644a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d108      	bne.n	8006426 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d105      	bne.n	8006426 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800641a:	7b7b      	ldrb	r3, [r7, #13]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d102      	bne.n	8006426 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006420:	7b3b      	ldrb	r3, [r7, #12]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d001      	beq.n	800642a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e05e      	b.n	80064e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2202      	movs	r2, #2
 800642e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b04      	cmp	r3, #4
 8006454:	d010      	beq.n	8006478 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006456:	e01f      	b.n	8006498 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2201      	movs	r2, #1
 800645e:	2100      	movs	r1, #0
 8006460:	4618      	mov	r0, r3
 8006462:	f001 f857 	bl	8007514 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0202 	orr.w	r2, r2, #2
 8006474:	60da      	str	r2, [r3, #12]
      break;
 8006476:	e02e      	b.n	80064d6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2201      	movs	r2, #1
 800647e:	2104      	movs	r1, #4
 8006480:	4618      	mov	r0, r3
 8006482:	f001 f847 	bl	8007514 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0204 	orr.w	r2, r2, #4
 8006494:	60da      	str	r2, [r3, #12]
      break;
 8006496:	e01e      	b.n	80064d6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2201      	movs	r2, #1
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 f837 	bl	8007514 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2201      	movs	r2, #1
 80064ac:	2104      	movs	r1, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f830 	bl	8007514 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0202 	orr.w	r2, r2, #2
 80064c2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0204 	orr.w	r2, r2, #4
 80064d2:	60da      	str	r2, [r3, #12]
      break;
 80064d4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0201 	orr.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d020      	beq.n	8006554 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01b      	beq.n	8006554 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0202 	mvn.w	r2, #2
 8006524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fb fa3a 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
 8006540:	e005      	b.n	800654e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fb4e 	bl	8006be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fb55 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d020      	beq.n	80065a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01b      	beq.n	80065a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0204 	mvn.w	r2, #4
 8006570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fb fa14 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
 800658c:	e005      	b.n	800659a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fb28 	bl	8006be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fb2f 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d020      	beq.n	80065ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01b      	beq.n	80065ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0208 	mvn.w	r2, #8
 80065bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2204      	movs	r2, #4
 80065c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fb f9ee 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
 80065d8:	e005      	b.n	80065e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fb02 	bl	8006be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fb09 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0310 	and.w	r3, r3, #16
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d020      	beq.n	8006638 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01b      	beq.n	8006638 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0210 	mvn.w	r2, #16
 8006608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2208      	movs	r2, #8
 800660e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fb f9c8 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
 8006624:	e005      	b.n	8006632 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fadc 	bl	8006be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fae3 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0201 	mvn.w	r2, #1
 8006654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fa fb76 	bl	8000d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00c      	beq.n	800668a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 f9d2 	bl	8007a2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00c      	beq.n	80066ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 f9ca 	bl	8007a42 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00c      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d007      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fa9d 	bl	8006c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00c      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f06f 0220 	mvn.w	r2, #32
 80066ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 f992 	bl	8007a1a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00c      	beq.n	800671a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f99e 	bl	8007a56 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00c      	beq.n	800673e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 f996 	bl	8007a6a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800675a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 f98e 	bl	8007a7e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00c      	beq.n	8006786 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800677e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 f986 	bl	8007a92 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067aa:	2302      	movs	r3, #2
 80067ac:	e0ff      	b.n	80069ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b14      	cmp	r3, #20
 80067ba:	f200 80f0 	bhi.w	800699e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067be:	a201      	add	r2, pc, #4	@ (adr r2, 80067c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	08006819 	.word	0x08006819
 80067c8:	0800699f 	.word	0x0800699f
 80067cc:	0800699f 	.word	0x0800699f
 80067d0:	0800699f 	.word	0x0800699f
 80067d4:	08006859 	.word	0x08006859
 80067d8:	0800699f 	.word	0x0800699f
 80067dc:	0800699f 	.word	0x0800699f
 80067e0:	0800699f 	.word	0x0800699f
 80067e4:	0800689b 	.word	0x0800689b
 80067e8:	0800699f 	.word	0x0800699f
 80067ec:	0800699f 	.word	0x0800699f
 80067f0:	0800699f 	.word	0x0800699f
 80067f4:	080068db 	.word	0x080068db
 80067f8:	0800699f 	.word	0x0800699f
 80067fc:	0800699f 	.word	0x0800699f
 8006800:	0800699f 	.word	0x0800699f
 8006804:	0800691d 	.word	0x0800691d
 8006808:	0800699f 	.word	0x0800699f
 800680c:	0800699f 	.word	0x0800699f
 8006810:	0800699f 	.word	0x0800699f
 8006814:	0800695d 	.word	0x0800695d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fab2 	bl	8006d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0208 	orr.w	r2, r2, #8
 8006832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0204 	bic.w	r2, r2, #4
 8006842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6999      	ldr	r1, [r3, #24]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	619a      	str	r2, [r3, #24]
      break;
 8006856:	e0a5      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68b9      	ldr	r1, [r7, #8]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fb2c 	bl	8006ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699a      	ldr	r2, [r3, #24]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6999      	ldr	r1, [r3, #24]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	021a      	lsls	r2, r3, #8
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	619a      	str	r2, [r3, #24]
      break;
 8006898:	e084      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fb9f 	bl	8006fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69da      	ldr	r2, [r3, #28]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0208 	orr.w	r2, r2, #8
 80068b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0204 	bic.w	r2, r2, #4
 80068c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69d9      	ldr	r1, [r3, #28]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	61da      	str	r2, [r3, #28]
      break;
 80068d8:	e064      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fc11 	bl	8007108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69da      	ldr	r2, [r3, #28]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69d9      	ldr	r1, [r3, #28]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	021a      	lsls	r2, r3, #8
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	61da      	str	r2, [r3, #28]
      break;
 800691a:	e043      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fc84 	bl	8007230 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0208 	orr.w	r2, r2, #8
 8006936:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0204 	bic.w	r2, r2, #4
 8006946:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800695a:	e023      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fcce 	bl	8007304 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006976:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006986:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	021a      	lsls	r2, r3, #8
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800699c:	e002      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
      break;
 80069a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop

080069b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_TIM_ConfigClockSource+0x1c>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e0f6      	b.n	8006bc2 <HAL_TIM_ConfigClockSource+0x20a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80069f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a6f      	ldr	r2, [pc, #444]	@ (8006bcc <HAL_TIM_ConfigClockSource+0x214>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	f000 80c1 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006a14:	4a6d      	ldr	r2, [pc, #436]	@ (8006bcc <HAL_TIM_ConfigClockSource+0x214>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	f200 80c6 	bhi.w	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a1c:	4a6c      	ldr	r2, [pc, #432]	@ (8006bd0 <HAL_TIM_ConfigClockSource+0x218>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	f000 80b9 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006a24:	4a6a      	ldr	r2, [pc, #424]	@ (8006bd0 <HAL_TIM_ConfigClockSource+0x218>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	f200 80be 	bhi.w	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a2c:	4a69      	ldr	r2, [pc, #420]	@ (8006bd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	f000 80b1 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006a34:	4a67      	ldr	r2, [pc, #412]	@ (8006bd4 <HAL_TIM_ConfigClockSource+0x21c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	f200 80b6 	bhi.w	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a3c:	4a66      	ldr	r2, [pc, #408]	@ (8006bd8 <HAL_TIM_ConfigClockSource+0x220>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	f000 80a9 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006a44:	4a64      	ldr	r2, [pc, #400]	@ (8006bd8 <HAL_TIM_ConfigClockSource+0x220>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	f200 80ae 	bhi.w	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a4c:	4a63      	ldr	r2, [pc, #396]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x224>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	f000 80a1 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006a54:	4a61      	ldr	r2, [pc, #388]	@ (8006bdc <HAL_TIM_ConfigClockSource+0x224>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	f200 80a6 	bhi.w	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a5c:	4a60      	ldr	r2, [pc, #384]	@ (8006be0 <HAL_TIM_ConfigClockSource+0x228>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	f000 8099 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006a64:	4a5e      	ldr	r2, [pc, #376]	@ (8006be0 <HAL_TIM_ConfigClockSource+0x228>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	f200 809e 	bhi.w	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006a70:	f000 8091 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006a74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006a78:	f200 8096 	bhi.w	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a80:	f000 8089 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006a84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a88:	f200 808e 	bhi.w	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a90:	d03e      	beq.n	8006b10 <HAL_TIM_ConfigClockSource+0x158>
 8006a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a96:	f200 8087 	bhi.w	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a9e:	f000 8086 	beq.w	8006bae <HAL_TIM_ConfigClockSource+0x1f6>
 8006aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa6:	d87f      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006aa8:	2b70      	cmp	r3, #112	@ 0x70
 8006aaa:	d01a      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x12a>
 8006aac:	2b70      	cmp	r3, #112	@ 0x70
 8006aae:	d87b      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ab0:	2b60      	cmp	r3, #96	@ 0x60
 8006ab2:	d050      	beq.n	8006b56 <HAL_TIM_ConfigClockSource+0x19e>
 8006ab4:	2b60      	cmp	r3, #96	@ 0x60
 8006ab6:	d877      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ab8:	2b50      	cmp	r3, #80	@ 0x50
 8006aba:	d03c      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0x17e>
 8006abc:	2b50      	cmp	r3, #80	@ 0x50
 8006abe:	d873      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ac0:	2b40      	cmp	r3, #64	@ 0x40
 8006ac2:	d058      	beq.n	8006b76 <HAL_TIM_ConfigClockSource+0x1be>
 8006ac4:	2b40      	cmp	r3, #64	@ 0x40
 8006ac6:	d86f      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ac8:	2b30      	cmp	r3, #48	@ 0x30
 8006aca:	d064      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006acc:	2b30      	cmp	r3, #48	@ 0x30
 8006ace:	d86b      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d060      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	d867      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d05c      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	d05a      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x1de>
 8006ae0:	e062      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006af2:	f000 fcef 	bl	80074d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	609a      	str	r2, [r3, #8]
      break;
 8006b0e:	e04f      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b20:	f000 fcd8 	bl	80074d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b32:	609a      	str	r2, [r3, #8]
      break;
 8006b34:	e03c      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b42:	461a      	mov	r2, r3
 8006b44:	f000 fc4a 	bl	80073dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2150      	movs	r1, #80	@ 0x50
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fca3 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006b54:	e02c      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b62:	461a      	mov	r2, r3
 8006b64:	f000 fc69 	bl	800743a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2160      	movs	r1, #96	@ 0x60
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fc93 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006b74:	e01c      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b82:	461a      	mov	r2, r3
 8006b84:	f000 fc2a 	bl	80073dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2140      	movs	r1, #64	@ 0x40
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fc83 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006b94:	e00c      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f000 fc7a 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006ba6:	e003      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73fb      	strb	r3, [r7, #15]
      break;
 8006bac:	e000      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	00100070 	.word	0x00100070
 8006bd0:	00100060 	.word	0x00100060
 8006bd4:	00100050 	.word	0x00100050
 8006bd8:	00100040 	.word	0x00100040
 8006bdc:	00100030 	.word	0x00100030
 8006be0:	00100020 	.word	0x00100020

08006be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a4c      	ldr	r2, [pc, #304]	@ (8006d64 <TIM_Base_SetConfig+0x144>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d017      	beq.n	8006c68 <TIM_Base_SetConfig+0x48>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c3e:	d013      	beq.n	8006c68 <TIM_Base_SetConfig+0x48>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a49      	ldr	r2, [pc, #292]	@ (8006d68 <TIM_Base_SetConfig+0x148>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00f      	beq.n	8006c68 <TIM_Base_SetConfig+0x48>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a48      	ldr	r2, [pc, #288]	@ (8006d6c <TIM_Base_SetConfig+0x14c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00b      	beq.n	8006c68 <TIM_Base_SetConfig+0x48>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a47      	ldr	r2, [pc, #284]	@ (8006d70 <TIM_Base_SetConfig+0x150>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d007      	beq.n	8006c68 <TIM_Base_SetConfig+0x48>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a46      	ldr	r2, [pc, #280]	@ (8006d74 <TIM_Base_SetConfig+0x154>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_Base_SetConfig+0x48>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a45      	ldr	r2, [pc, #276]	@ (8006d78 <TIM_Base_SetConfig+0x158>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d108      	bne.n	8006c7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a39      	ldr	r2, [pc, #228]	@ (8006d64 <TIM_Base_SetConfig+0x144>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d023      	beq.n	8006cca <TIM_Base_SetConfig+0xaa>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c88:	d01f      	beq.n	8006cca <TIM_Base_SetConfig+0xaa>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a36      	ldr	r2, [pc, #216]	@ (8006d68 <TIM_Base_SetConfig+0x148>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d01b      	beq.n	8006cca <TIM_Base_SetConfig+0xaa>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a35      	ldr	r2, [pc, #212]	@ (8006d6c <TIM_Base_SetConfig+0x14c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d017      	beq.n	8006cca <TIM_Base_SetConfig+0xaa>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a34      	ldr	r2, [pc, #208]	@ (8006d70 <TIM_Base_SetConfig+0x150>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d013      	beq.n	8006cca <TIM_Base_SetConfig+0xaa>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a33      	ldr	r2, [pc, #204]	@ (8006d74 <TIM_Base_SetConfig+0x154>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00f      	beq.n	8006cca <TIM_Base_SetConfig+0xaa>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a33      	ldr	r2, [pc, #204]	@ (8006d7c <TIM_Base_SetConfig+0x15c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00b      	beq.n	8006cca <TIM_Base_SetConfig+0xaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a32      	ldr	r2, [pc, #200]	@ (8006d80 <TIM_Base_SetConfig+0x160>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d007      	beq.n	8006cca <TIM_Base_SetConfig+0xaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a31      	ldr	r2, [pc, #196]	@ (8006d84 <TIM_Base_SetConfig+0x164>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d003      	beq.n	8006cca <TIM_Base_SetConfig+0xaa>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8006d78 <TIM_Base_SetConfig+0x158>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d108      	bne.n	8006cdc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a18      	ldr	r2, [pc, #96]	@ (8006d64 <TIM_Base_SetConfig+0x144>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <TIM_Base_SetConfig+0x110>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8006d74 <TIM_Base_SetConfig+0x154>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00f      	beq.n	8006d30 <TIM_Base_SetConfig+0x110>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a1a      	ldr	r2, [pc, #104]	@ (8006d7c <TIM_Base_SetConfig+0x15c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00b      	beq.n	8006d30 <TIM_Base_SetConfig+0x110>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a19      	ldr	r2, [pc, #100]	@ (8006d80 <TIM_Base_SetConfig+0x160>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d007      	beq.n	8006d30 <TIM_Base_SetConfig+0x110>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a18      	ldr	r2, [pc, #96]	@ (8006d84 <TIM_Base_SetConfig+0x164>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d003      	beq.n	8006d30 <TIM_Base_SetConfig+0x110>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a13      	ldr	r2, [pc, #76]	@ (8006d78 <TIM_Base_SetConfig+0x158>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d103      	bne.n	8006d38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	691a      	ldr	r2, [r3, #16]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d105      	bne.n	8006d56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f023 0201 	bic.w	r2, r3, #1
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	611a      	str	r2, [r3, #16]
  }
}
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40013400 	.word	0x40013400
 8006d78:	40015000 	.word	0x40015000
 8006d7c:	40014000 	.word	0x40014000
 8006d80:	40014400 	.word	0x40014400
 8006d84:	40014800 	.word	0x40014800

08006d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	f023 0201 	bic.w	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0303 	bic.w	r3, r3, #3
 8006dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f023 0302 	bic.w	r3, r3, #2
 8006dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a30      	ldr	r2, [pc, #192]	@ (8006ea4 <TIM_OC1_SetConfig+0x11c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <TIM_OC1_SetConfig+0x88>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a2f      	ldr	r2, [pc, #188]	@ (8006ea8 <TIM_OC1_SetConfig+0x120>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00f      	beq.n	8006e10 <TIM_OC1_SetConfig+0x88>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a2e      	ldr	r2, [pc, #184]	@ (8006eac <TIM_OC1_SetConfig+0x124>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00b      	beq.n	8006e10 <TIM_OC1_SetConfig+0x88>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb0 <TIM_OC1_SetConfig+0x128>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d007      	beq.n	8006e10 <TIM_OC1_SetConfig+0x88>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a2c      	ldr	r2, [pc, #176]	@ (8006eb4 <TIM_OC1_SetConfig+0x12c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_OC1_SetConfig+0x88>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb8 <TIM_OC1_SetConfig+0x130>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d10c      	bne.n	8006e2a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0308 	bic.w	r3, r3, #8
 8006e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f023 0304 	bic.w	r3, r3, #4
 8006e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea4 <TIM_OC1_SetConfig+0x11c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d013      	beq.n	8006e5a <TIM_OC1_SetConfig+0xd2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea8 <TIM_OC1_SetConfig+0x120>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00f      	beq.n	8006e5a <TIM_OC1_SetConfig+0xd2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006eac <TIM_OC1_SetConfig+0x124>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00b      	beq.n	8006e5a <TIM_OC1_SetConfig+0xd2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1a      	ldr	r2, [pc, #104]	@ (8006eb0 <TIM_OC1_SetConfig+0x128>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d007      	beq.n	8006e5a <TIM_OC1_SetConfig+0xd2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a19      	ldr	r2, [pc, #100]	@ (8006eb4 <TIM_OC1_SetConfig+0x12c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d003      	beq.n	8006e5a <TIM_OC1_SetConfig+0xd2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a18      	ldr	r2, [pc, #96]	@ (8006eb8 <TIM_OC1_SetConfig+0x130>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d111      	bne.n	8006e7e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	621a      	str	r2, [r3, #32]
}
 8006e98:	bf00      	nop
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40012c00 	.word	0x40012c00
 8006ea8:	40013400 	.word	0x40013400
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40014400 	.word	0x40014400
 8006eb4:	40014800 	.word	0x40014800
 8006eb8:	40015000 	.word	0x40015000

08006ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	f023 0210 	bic.w	r2, r3, #16
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0320 	bic.w	r3, r3, #32
 8006f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	011b      	lsls	r3, r3, #4
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006fcc <TIM_OC2_SetConfig+0x110>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d007      	beq.n	8006f30 <TIM_OC2_SetConfig+0x74>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a2b      	ldr	r2, [pc, #172]	@ (8006fd0 <TIM_OC2_SetConfig+0x114>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_OC2_SetConfig+0x74>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006fd4 <TIM_OC2_SetConfig+0x118>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d10d      	bne.n	8006f4c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006fcc <TIM_OC2_SetConfig+0x110>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <TIM_OC2_SetConfig+0xc0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a1e      	ldr	r2, [pc, #120]	@ (8006fd0 <TIM_OC2_SetConfig+0x114>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00f      	beq.n	8006f7c <TIM_OC2_SetConfig+0xc0>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fd8 <TIM_OC2_SetConfig+0x11c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <TIM_OC2_SetConfig+0xc0>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a1d      	ldr	r2, [pc, #116]	@ (8006fdc <TIM_OC2_SetConfig+0x120>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d007      	beq.n	8006f7c <TIM_OC2_SetConfig+0xc0>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006fe0 <TIM_OC2_SetConfig+0x124>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_OC2_SetConfig+0xc0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a17      	ldr	r2, [pc, #92]	@ (8006fd4 <TIM_OC2_SetConfig+0x118>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d113      	bne.n	8006fa4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	621a      	str	r2, [r3, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	371c      	adds	r7, #28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40012c00 	.word	0x40012c00
 8006fd0:	40013400 	.word	0x40013400
 8006fd4:	40015000 	.word	0x40015000
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400
 8006fe0:	40014800 	.word	0x40014800

08006fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0303 	bic.w	r3, r3, #3
 800701e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a2b      	ldr	r2, [pc, #172]	@ (80070f0 <TIM_OC3_SetConfig+0x10c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d007      	beq.n	8007056 <TIM_OC3_SetConfig+0x72>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a2a      	ldr	r2, [pc, #168]	@ (80070f4 <TIM_OC3_SetConfig+0x110>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d003      	beq.n	8007056 <TIM_OC3_SetConfig+0x72>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a29      	ldr	r2, [pc, #164]	@ (80070f8 <TIM_OC3_SetConfig+0x114>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d10d      	bne.n	8007072 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800705c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1e      	ldr	r2, [pc, #120]	@ (80070f0 <TIM_OC3_SetConfig+0x10c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <TIM_OC3_SetConfig+0xbe>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1d      	ldr	r2, [pc, #116]	@ (80070f4 <TIM_OC3_SetConfig+0x110>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00f      	beq.n	80070a2 <TIM_OC3_SetConfig+0xbe>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1d      	ldr	r2, [pc, #116]	@ (80070fc <TIM_OC3_SetConfig+0x118>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00b      	beq.n	80070a2 <TIM_OC3_SetConfig+0xbe>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1c      	ldr	r2, [pc, #112]	@ (8007100 <TIM_OC3_SetConfig+0x11c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d007      	beq.n	80070a2 <TIM_OC3_SetConfig+0xbe>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a1b      	ldr	r2, [pc, #108]	@ (8007104 <TIM_OC3_SetConfig+0x120>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_OC3_SetConfig+0xbe>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a16      	ldr	r2, [pc, #88]	@ (80070f8 <TIM_OC3_SetConfig+0x114>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d113      	bne.n	80070ca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	621a      	str	r2, [r3, #32]
}
 80070e4:	bf00      	nop
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	40013400 	.word	0x40013400
 80070f8:	40015000 	.word	0x40015000
 80070fc:	40014000 	.word	0x40014000
 8007100:	40014400 	.word	0x40014400
 8007104:	40014800 	.word	0x40014800

08007108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800713a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	031b      	lsls	r3, r3, #12
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a2c      	ldr	r2, [pc, #176]	@ (8007218 <TIM_OC4_SetConfig+0x110>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d007      	beq.n	800717c <TIM_OC4_SetConfig+0x74>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a2b      	ldr	r2, [pc, #172]	@ (800721c <TIM_OC4_SetConfig+0x114>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_OC4_SetConfig+0x74>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a2a      	ldr	r2, [pc, #168]	@ (8007220 <TIM_OC4_SetConfig+0x118>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d10d      	bne.n	8007198 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	031b      	lsls	r3, r3, #12
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007196:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a1f      	ldr	r2, [pc, #124]	@ (8007218 <TIM_OC4_SetConfig+0x110>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d013      	beq.n	80071c8 <TIM_OC4_SetConfig+0xc0>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a1e      	ldr	r2, [pc, #120]	@ (800721c <TIM_OC4_SetConfig+0x114>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00f      	beq.n	80071c8 <TIM_OC4_SetConfig+0xc0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007224 <TIM_OC4_SetConfig+0x11c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00b      	beq.n	80071c8 <TIM_OC4_SetConfig+0xc0>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007228 <TIM_OC4_SetConfig+0x120>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d007      	beq.n	80071c8 <TIM_OC4_SetConfig+0xc0>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a1c      	ldr	r2, [pc, #112]	@ (800722c <TIM_OC4_SetConfig+0x124>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC4_SetConfig+0xc0>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a17      	ldr	r2, [pc, #92]	@ (8007220 <TIM_OC4_SetConfig+0x118>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d113      	bne.n	80071f0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	019b      	lsls	r3, r3, #6
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	019b      	lsls	r3, r3, #6
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	621a      	str	r2, [r3, #32]
}
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40012c00 	.word	0x40012c00
 800721c:	40013400 	.word	0x40013400
 8007220:	40015000 	.word	0x40015000
 8007224:	40014000 	.word	0x40014000
 8007228:	40014400 	.word	0x40014400
 800722c:	40014800 	.word	0x40014800

08007230 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800725e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007274:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	041b      	lsls	r3, r3, #16
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a19      	ldr	r2, [pc, #100]	@ (80072ec <TIM_OC5_SetConfig+0xbc>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <TIM_OC5_SetConfig+0x82>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a18      	ldr	r2, [pc, #96]	@ (80072f0 <TIM_OC5_SetConfig+0xc0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00f      	beq.n	80072b2 <TIM_OC5_SetConfig+0x82>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a17      	ldr	r2, [pc, #92]	@ (80072f4 <TIM_OC5_SetConfig+0xc4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00b      	beq.n	80072b2 <TIM_OC5_SetConfig+0x82>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a16      	ldr	r2, [pc, #88]	@ (80072f8 <TIM_OC5_SetConfig+0xc8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <TIM_OC5_SetConfig+0x82>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a15      	ldr	r2, [pc, #84]	@ (80072fc <TIM_OC5_SetConfig+0xcc>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <TIM_OC5_SetConfig+0x82>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a14      	ldr	r2, [pc, #80]	@ (8007300 <TIM_OC5_SetConfig+0xd0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d109      	bne.n	80072c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	621a      	str	r2, [r3, #32]
}
 80072e0:	bf00      	nop
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	40012c00 	.word	0x40012c00
 80072f0:	40013400 	.word	0x40013400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40014400 	.word	0x40014400
 80072fc:	40014800 	.word	0x40014800
 8007300:	40015000 	.word	0x40015000

08007304 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800734a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	051b      	lsls	r3, r3, #20
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a1a      	ldr	r2, [pc, #104]	@ (80073c4 <TIM_OC6_SetConfig+0xc0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d013      	beq.n	8007388 <TIM_OC6_SetConfig+0x84>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a19      	ldr	r2, [pc, #100]	@ (80073c8 <TIM_OC6_SetConfig+0xc4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00f      	beq.n	8007388 <TIM_OC6_SetConfig+0x84>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a18      	ldr	r2, [pc, #96]	@ (80073cc <TIM_OC6_SetConfig+0xc8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00b      	beq.n	8007388 <TIM_OC6_SetConfig+0x84>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a17      	ldr	r2, [pc, #92]	@ (80073d0 <TIM_OC6_SetConfig+0xcc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d007      	beq.n	8007388 <TIM_OC6_SetConfig+0x84>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a16      	ldr	r2, [pc, #88]	@ (80073d4 <TIM_OC6_SetConfig+0xd0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d003      	beq.n	8007388 <TIM_OC6_SetConfig+0x84>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a15      	ldr	r2, [pc, #84]	@ (80073d8 <TIM_OC6_SetConfig+0xd4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d109      	bne.n	800739c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800738e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	029b      	lsls	r3, r3, #10
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	4313      	orrs	r3, r2
 800739a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	bf00      	nop
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40014400 	.word	0x40014400
 80073d4:	40014800 	.word	0x40014800
 80073d8:	40015000 	.word	0x40015000

080073dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	f023 0201 	bic.w	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f023 030a 	bic.w	r3, r3, #10
 8007418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800743a:	b480      	push	{r7}
 800743c:	b087      	sub	sp, #28
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	f023 0210 	bic.w	r2, r3, #16
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	031b      	lsls	r3, r3, #12
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007476:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80074b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f043 0307 	orr.w	r3, r3, #7
 80074c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	609a      	str	r2, [r3, #8]
}
 80074c8:	bf00      	nop
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	021a      	lsls	r2, r3, #8
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	431a      	orrs	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	609a      	str	r2, [r3, #8]
}
 8007508:	bf00      	nop
 800750a:	371c      	adds	r7, #28
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f003 031f 	and.w	r3, r3, #31
 8007526:	2201      	movs	r2, #1
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a1a      	ldr	r2, [r3, #32]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	43db      	mvns	r3, r3
 8007536:	401a      	ands	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a1a      	ldr	r2, [r3, #32]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f003 031f 	and.w	r3, r3, #31
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	fa01 f303 	lsl.w	r3, r1, r3
 800754c:	431a      	orrs	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	621a      	str	r2, [r3, #32]
}
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d109      	bne.n	8007584 <HAL_TIMEx_PWMN_Start+0x24>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b01      	cmp	r3, #1
 800757a:	bf14      	ite	ne
 800757c:	2301      	movne	r3, #1
 800757e:	2300      	moveq	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	e022      	b.n	80075ca <HAL_TIMEx_PWMN_Start+0x6a>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b04      	cmp	r3, #4
 8007588:	d109      	bne.n	800759e <HAL_TIMEx_PWMN_Start+0x3e>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b01      	cmp	r3, #1
 8007594:	bf14      	ite	ne
 8007596:	2301      	movne	r3, #1
 8007598:	2300      	moveq	r3, #0
 800759a:	b2db      	uxtb	r3, r3
 800759c:	e015      	b.n	80075ca <HAL_TIMEx_PWMN_Start+0x6a>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d109      	bne.n	80075b8 <HAL_TIMEx_PWMN_Start+0x58>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	bf14      	ite	ne
 80075b0:	2301      	movne	r3, #1
 80075b2:	2300      	moveq	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	e008      	b.n	80075ca <HAL_TIMEx_PWMN_Start+0x6a>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	bf14      	ite	ne
 80075c4:	2301      	movne	r3, #1
 80075c6:	2300      	moveq	r3, #0
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e073      	b.n	80076ba <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <HAL_TIMEx_PWMN_Start+0x82>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075e0:	e013      	b.n	800760a <HAL_TIMEx_PWMN_Start+0xaa>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d104      	bne.n	80075f2 <HAL_TIMEx_PWMN_Start+0x92>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075f0:	e00b      	b.n	800760a <HAL_TIMEx_PWMN_Start+0xaa>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d104      	bne.n	8007602 <HAL_TIMEx_PWMN_Start+0xa2>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007600:	e003      	b.n	800760a <HAL_TIMEx_PWMN_Start+0xaa>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2202      	movs	r2, #2
 8007606:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2204      	movs	r2, #4
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fa47 	bl	8007aa6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007626:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a25      	ldr	r2, [pc, #148]	@ (80076c4 <HAL_TIMEx_PWMN_Start+0x164>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d022      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x118>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800763a:	d01d      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x118>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a21      	ldr	r2, [pc, #132]	@ (80076c8 <HAL_TIMEx_PWMN_Start+0x168>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d018      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x118>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a20      	ldr	r2, [pc, #128]	@ (80076cc <HAL_TIMEx_PWMN_Start+0x16c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x118>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a1e      	ldr	r2, [pc, #120]	@ (80076d0 <HAL_TIMEx_PWMN_Start+0x170>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00e      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x118>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a1d      	ldr	r2, [pc, #116]	@ (80076d4 <HAL_TIMEx_PWMN_Start+0x174>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d009      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x118>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a1b      	ldr	r2, [pc, #108]	@ (80076d8 <HAL_TIMEx_PWMN_Start+0x178>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <HAL_TIMEx_PWMN_Start+0x118>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1a      	ldr	r2, [pc, #104]	@ (80076dc <HAL_TIMEx_PWMN_Start+0x17c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d115      	bne.n	80076a4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	4b18      	ldr	r3, [pc, #96]	@ (80076e0 <HAL_TIMEx_PWMN_Start+0x180>)
 8007680:	4013      	ands	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b06      	cmp	r3, #6
 8007688:	d015      	beq.n	80076b6 <HAL_TIMEx_PWMN_Start+0x156>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007690:	d011      	beq.n	80076b6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0201 	orr.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a2:	e008      	b.n	80076b6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e000      	b.n	80076b8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40012c00 	.word	0x40012c00
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800
 80076d0:	40000c00 	.word	0x40000c00
 80076d4:	40013400 	.word	0x40013400
 80076d8:	40014000 	.word	0x40014000
 80076dc:	40015000 	.word	0x40015000
 80076e0:	00010007 	.word	0x00010007

080076e4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2200      	movs	r2, #0
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f9d5 	bl	8007aa6 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6a1a      	ldr	r2, [r3, #32]
 8007702:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10f      	bne.n	800772c <HAL_TIMEx_PWMN_Stop+0x48>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6a1a      	ldr	r2, [r3, #32]
 8007712:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007716:	4013      	ands	r3, r2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d107      	bne.n	800772c <HAL_TIMEx_PWMN_Stop+0x48>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800772a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6a1a      	ldr	r2, [r3, #32]
 8007732:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007736:	4013      	ands	r3, r2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10f      	bne.n	800775c <HAL_TIMEx_PWMN_Stop+0x78>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6a1a      	ldr	r2, [r3, #32]
 8007742:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007746:	4013      	ands	r3, r2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <HAL_TIMEx_PWMN_Stop+0x78>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0201 	bic.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <HAL_TIMEx_PWMN_Stop+0x88>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800776a:	e013      	b.n	8007794 <HAL_TIMEx_PWMN_Stop+0xb0>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b04      	cmp	r3, #4
 8007770:	d104      	bne.n	800777c <HAL_TIMEx_PWMN_Stop+0x98>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800777a:	e00b      	b.n	8007794 <HAL_TIMEx_PWMN_Stop+0xb0>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b08      	cmp	r3, #8
 8007780:	d104      	bne.n	800778c <HAL_TIMEx_PWMN_Stop+0xa8>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800778a:	e003      	b.n	8007794 <HAL_TIMEx_PWMN_Stop+0xb0>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e074      	b.n	80078a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a34      	ldr	r2, [pc, #208]	@ (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d009      	beq.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a33      	ldr	r2, [pc, #204]	@ (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d004      	beq.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a31      	ldr	r2, [pc, #196]	@ (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d108      	bne.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80077fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	4313      	orrs	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800780e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a21      	ldr	r2, [pc, #132]	@ (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d022      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007838:	d01d      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1f      	ldr	r2, [pc, #124]	@ (80078bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d018      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a1d      	ldr	r2, [pc, #116]	@ (80078c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a1c      	ldr	r2, [pc, #112]	@ (80078c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a15      	ldr	r2, [pc, #84]	@ (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d009      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a18      	ldr	r2, [pc, #96]	@ (80078c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a11      	ldr	r2, [pc, #68]	@ (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d10c      	bne.n	8007890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800787c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	4313      	orrs	r3, r2
 8007886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40012c00 	.word	0x40012c00
 80078b4:	40013400 	.word	0x40013400
 80078b8:	40015000 	.word	0x40015000
 80078bc:	40000400 	.word	0x40000400
 80078c0:	40000800 	.word	0x40000800
 80078c4:	40000c00 	.word	0x40000c00
 80078c8:	40014000 	.word	0x40014000

080078cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d101      	bne.n	80078e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078e4:	2302      	movs	r3, #2
 80078e6:	e078      	b.n	80079da <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	041b      	lsls	r3, r3, #16
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	4313      	orrs	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1c      	ldr	r2, [pc, #112]	@ (80079e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d009      	beq.n	800798e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a1b      	ldr	r2, [pc, #108]	@ (80079ec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d004      	beq.n	800798e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a19      	ldr	r2, [pc, #100]	@ (80079f0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d11c      	bne.n	80079c8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007998:	051b      	lsls	r3, r3, #20
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40012c00 	.word	0x40012c00
 80079ec:	40013400 	.word	0x40013400
 80079f0:	40015000 	.word	0x40015000

080079f4 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007a0a:	655a      	str	r2, [r3, #84]	@ 0x54
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b087      	sub	sp, #28
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	2204      	movs	r2, #4
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a1a      	ldr	r2, [r3, #32]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	43db      	mvns	r3, r3
 8007ac8:	401a      	ands	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6a1a      	ldr	r2, [r3, #32]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	fa01 f303 	lsl.w	r3, r1, r3
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	621a      	str	r2, [r3, #32]
}
 8007ae4:	bf00      	nop
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e042      	b.n	8007b88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7f9 fe9b 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2224      	movs	r2, #36	@ 0x24
 8007b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 0201 	bic.w	r2, r2, #1
 8007b30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 ff60 	bl	8008a00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fc61 	bl	8008408 <UART_SetConfig>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e01b      	b.n	8007b88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0201 	orr.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 ffdf 	bl	8008b44 <UART_CheckIdleState>
 8007b86:	4603      	mov	r3, r0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	@ 0x28
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d17b      	bne.n	8007ca2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <HAL_UART_Transmit+0x26>
 8007bb0:	88fb      	ldrh	r3, [r7, #6]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e074      	b.n	8007ca4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2221      	movs	r2, #33	@ 0x21
 8007bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bca:	f7fa fac1 	bl	8002150 <HAL_GetTick>
 8007bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	88fa      	ldrh	r2, [r7, #6]
 8007bd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	88fa      	ldrh	r2, [r7, #6]
 8007bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be8:	d108      	bne.n	8007bfc <HAL_UART_Transmit+0x6c>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d104      	bne.n	8007bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	61bb      	str	r3, [r7, #24]
 8007bfa:	e003      	b.n	8007c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c04:	e030      	b.n	8007c68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2180      	movs	r1, #128	@ 0x80
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f001 f841 	bl	8008c98 <UART_WaitOnFlagUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e03d      	b.n	8007ca4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10b      	bne.n	8007c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	3302      	adds	r3, #2
 8007c42:	61bb      	str	r3, [r7, #24]
 8007c44:	e007      	b.n	8007c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	781a      	ldrb	r2, [r3, #0]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	3301      	adds	r3, #1
 8007c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1c8      	bne.n	8007c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2140      	movs	r1, #64	@ 0x40
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f001 f80a 	bl	8008c98 <UART_WaitOnFlagUntilTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e006      	b.n	8007ca4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e000      	b.n	8007ca4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007ca2:	2302      	movs	r3, #2
  }
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3720      	adds	r7, #32
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08a      	sub	sp, #40	@ 0x28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	d137      	bne.n	8007d34 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <HAL_UART_Receive_IT+0x24>
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e030      	b.n	8007d36 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a18      	ldr	r2, [pc, #96]	@ (8007d40 <HAL_UART_Receive_IT+0x94>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d01f      	beq.n	8007d24 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d018      	beq.n	8007d24 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	623b      	str	r3, [r7, #32]
 8007d12:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	69f9      	ldr	r1, [r7, #28]
 8007d16:	6a3a      	ldr	r2, [r7, #32]
 8007d18:	e841 2300 	strex	r3, r2, [r1]
 8007d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e6      	bne.n	8007cf2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d24:	88fb      	ldrh	r3, [r7, #6]
 8007d26:	461a      	mov	r2, r3
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f001 f822 	bl	8008d74 <UART_Start_Receive_IT>
 8007d30:	4603      	mov	r3, r0
 8007d32:	e000      	b.n	8007d36 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d34:	2302      	movs	r3, #2
  }
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3728      	adds	r7, #40	@ 0x28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40008000 	.word	0x40008000

08007d44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b0ba      	sub	sp, #232	@ 0xe8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d6e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d72:	4013      	ands	r3, r2
 8007d74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d11b      	bne.n	8007db8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d84:	f003 0320 	and.w	r3, r3, #32
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d015      	beq.n	8007db8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d105      	bne.n	8007da4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 8300 	beq.w	80083ae <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
      }
      return;
 8007db6:	e2fa      	b.n	80083ae <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 8123 	beq.w	8008008 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007dc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8007ffc <HAL_UART_IRQHandler+0x2b8>)
 8007dc8:	4013      	ands	r3, r2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d106      	bne.n	8007ddc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007dce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8008000 <HAL_UART_IRQHandler+0x2bc>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8116 	beq.w	8008008 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d011      	beq.n	8007e0c <HAL_UART_IRQHandler+0xc8>
 8007de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e02:	f043 0201 	orr.w	r2, r3, #1
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d011      	beq.n	8007e3c <HAL_UART_IRQHandler+0xf8>
 8007e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e32:	f043 0204 	orr.w	r2, r3, #4
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d011      	beq.n	8007e6c <HAL_UART_IRQHandler+0x128>
 8007e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2204      	movs	r2, #4
 8007e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e62:	f043 0202 	orr.w	r2, r3, #2
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e70:	f003 0308 	and.w	r3, r3, #8
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d017      	beq.n	8007ea8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d105      	bne.n	8007e90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e88:	4b5c      	ldr	r3, [pc, #368]	@ (8007ffc <HAL_UART_IRQHandler+0x2b8>)
 8007e8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2208      	movs	r2, #8
 8007e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e9e:	f043 0208 	orr.w	r2, r3, #8
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d012      	beq.n	8007eda <HAL_UART_IRQHandler+0x196>
 8007eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00c      	beq.n	8007eda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed0:	f043 0220 	orr.w	r2, r3, #32
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8266 	beq.w	80083b2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eea:	f003 0320 	and.w	r3, r3, #32
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d013      	beq.n	8007f1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d105      	bne.n	8007f0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d007      	beq.n	8007f1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2e:	2b40      	cmp	r3, #64	@ 0x40
 8007f30:	d005      	beq.n	8007f3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d054      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f001 f83a 	bl	8008fb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4e:	2b40      	cmp	r3, #64	@ 0x40
 8007f50:	d146      	bne.n	8007fe0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3308      	adds	r3, #8
 8007f58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3308      	adds	r3, #8
 8007f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1d9      	bne.n	8007f52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d017      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fae:	4a15      	ldr	r2, [pc, #84]	@ (8008004 <HAL_UART_IRQHandler+0x2c0>)
 8007fb0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fc fa7f 	bl	80044bc <HAL_DMA_Abort_IT>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d019      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd6:	e00f      	b.n	8007ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f9ff 	bl	80083dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fde:	e00b      	b.n	8007ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f9fb 	bl	80083dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe6:	e007      	b.n	8007ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f9f7 	bl	80083dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007ff6:	e1dc      	b.n	80083b2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff8:	bf00      	nop
    return;
 8007ffa:	e1da      	b.n	80083b2 <HAL_UART_IRQHandler+0x66e>
 8007ffc:	10000001 	.word	0x10000001
 8008000:	04000120 	.word	0x04000120
 8008004:	08009085 	.word	0x08009085

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800800c:	2b01      	cmp	r3, #1
 800800e:	f040 8170 	bne.w	80082f2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008016:	f003 0310 	and.w	r3, r3, #16
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 8169 	beq.w	80082f2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 8162 	beq.w	80082f2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2210      	movs	r2, #16
 8008034:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008040:	2b40      	cmp	r3, #64	@ 0x40
 8008042:	f040 80d8 	bne.w	80081f6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 80af 	beq.w	80081bc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008068:	429a      	cmp	r2, r3
 800806a:	f080 80a7 	bcs.w	80081bc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b00      	cmp	r3, #0
 8008088:	f040 8087 	bne.w	800819a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1da      	bne.n	800808c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3308      	adds	r3, #8
 80080dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080e8:	f023 0301 	bic.w	r3, r3, #1
 80080ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3308      	adds	r3, #8
 80080f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008102:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800810c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e1      	bne.n	80080d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3308      	adds	r3, #8
 8008118:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3308      	adds	r3, #8
 8008132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008136:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008138:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800813c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e3      	bne.n	8008112 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008160:	e853 3f00 	ldrex	r3, [r3]
 8008164:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008168:	f023 0310 	bic.w	r3, r3, #16
 800816c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800817a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800817c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e4      	bne.n	8008158 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008194:	4618      	mov	r0, r3
 8008196:	f7fc f938 	bl	800440a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f91b 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80081ba:	e0fc      	b.n	80083b6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081c6:	429a      	cmp	r2, r3
 80081c8:	f040 80f5 	bne.w	80083b6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b20      	cmp	r3, #32
 80081dc:	f040 80eb 	bne.w	80083b6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f8fe 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
      return;
 80081f4:	e0df      	b.n	80083b6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008202:	b29b      	uxth	r3, r3
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80d1 	beq.w	80083ba <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 80cc 	beq.w	80083ba <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822a:	e853 3f00 	ldrex	r3, [r3]
 800822e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	461a      	mov	r2, r3
 8008240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008244:	647b      	str	r3, [r7, #68]	@ 0x44
 8008246:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008248:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800824a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e4      	bne.n	8008222 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3308      	adds	r3, #8
 800825e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	623b      	str	r3, [r7, #32]
   return(result);
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008280:	633a      	str	r2, [r7, #48]	@ 0x30
 8008282:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008288:	e841 2300 	strex	r3, r2, [r1]
 800828c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800828e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e1      	bne.n	8008258 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2220      	movs	r2, #32
 8008298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f023 0310 	bic.w	r3, r3, #16
 80082bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	461a      	mov	r2, r3
 80082c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80082ca:	61fb      	str	r3, [r7, #28]
 80082cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	69b9      	ldr	r1, [r7, #24]
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	617b      	str	r3, [r7, #20]
   return(result);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e4      	bne.n	80082a8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2202      	movs	r2, #2
 80082e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f880 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082f0:	e063      	b.n	80083ba <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00e      	beq.n	800831c <HAL_UART_IRQHandler+0x5d8>
 80082fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d008      	beq.n	800831c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008312:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 fc13 	bl	8009b40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800831a:	e051      	b.n	80083c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800831c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008324:	2b00      	cmp	r3, #0
 8008326:	d014      	beq.n	8008352 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800832c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008330:	2b00      	cmp	r3, #0
 8008332:	d105      	bne.n	8008340 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d008      	beq.n	8008352 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008344:	2b00      	cmp	r3, #0
 8008346:	d03a      	beq.n	80083be <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	4798      	blx	r3
    }
    return;
 8008350:	e035      	b.n	80083be <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	d009      	beq.n	8008372 <HAL_UART_IRQHandler+0x62e>
 800835e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fe9c 	bl	80090a8 <UART_EndTransmit_IT>
    return;
 8008370:	e026      	b.n	80083c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <HAL_UART_IRQHandler+0x64e>
 800837e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008382:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 fbec 	bl	8009b68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008390:	e016      	b.n	80083c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008396:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d010      	beq.n	80083c0 <HAL_UART_IRQHandler+0x67c>
 800839e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	da0c      	bge.n	80083c0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fbd4 	bl	8009b54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083ac:	e008      	b.n	80083c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80083ae:	bf00      	nop
 80083b0:	e006      	b.n	80083c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80083b2:	bf00      	nop
 80083b4:	e004      	b.n	80083c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80083b6:	bf00      	nop
 80083b8:	e002      	b.n	80083c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80083ba:	bf00      	nop
 80083bc:	e000      	b.n	80083c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80083be:	bf00      	nop
  }
}
 80083c0:	37e8      	adds	r7, #232	@ 0xe8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop

080083c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800840c:	b08c      	sub	sp, #48	@ 0x30
 800840e:	af00      	add	r7, sp, #0
 8008410:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	431a      	orrs	r2, r3
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	431a      	orrs	r2, r3
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	4313      	orrs	r3, r2
 800842e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	4baa      	ldr	r3, [pc, #680]	@ (80086e0 <UART_SetConfig+0x2d8>)
 8008438:	4013      	ands	r3, r2
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	6812      	ldr	r2, [r2, #0]
 800843e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008440:	430b      	orrs	r3, r1
 8008442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a9f      	ldr	r2, [pc, #636]	@ (80086e4 <UART_SetConfig+0x2dc>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d004      	beq.n	8008474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008470:	4313      	orrs	r3, r2
 8008472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800847e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008488:	430b      	orrs	r3, r1
 800848a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008492:	f023 010f 	bic.w	r1, r3, #15
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a90      	ldr	r2, [pc, #576]	@ (80086e8 <UART_SetConfig+0x2e0>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d125      	bne.n	80084f8 <UART_SetConfig+0xf0>
 80084ac:	4b8f      	ldr	r3, [pc, #572]	@ (80086ec <UART_SetConfig+0x2e4>)
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b2:	f003 0303 	and.w	r3, r3, #3
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d81a      	bhi.n	80084f0 <UART_SetConfig+0xe8>
 80084ba:	a201      	add	r2, pc, #4	@ (adr r2, 80084c0 <UART_SetConfig+0xb8>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	080084d1 	.word	0x080084d1
 80084c4:	080084e1 	.word	0x080084e1
 80084c8:	080084d9 	.word	0x080084d9
 80084cc:	080084e9 	.word	0x080084e9
 80084d0:	2301      	movs	r3, #1
 80084d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084d6:	e116      	b.n	8008706 <UART_SetConfig+0x2fe>
 80084d8:	2302      	movs	r3, #2
 80084da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084de:	e112      	b.n	8008706 <UART_SetConfig+0x2fe>
 80084e0:	2304      	movs	r3, #4
 80084e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084e6:	e10e      	b.n	8008706 <UART_SetConfig+0x2fe>
 80084e8:	2308      	movs	r3, #8
 80084ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ee:	e10a      	b.n	8008706 <UART_SetConfig+0x2fe>
 80084f0:	2310      	movs	r3, #16
 80084f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084f6:	e106      	b.n	8008706 <UART_SetConfig+0x2fe>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a7c      	ldr	r2, [pc, #496]	@ (80086f0 <UART_SetConfig+0x2e8>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d138      	bne.n	8008574 <UART_SetConfig+0x16c>
 8008502:	4b7a      	ldr	r3, [pc, #488]	@ (80086ec <UART_SetConfig+0x2e4>)
 8008504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008508:	f003 030c 	and.w	r3, r3, #12
 800850c:	2b0c      	cmp	r3, #12
 800850e:	d82d      	bhi.n	800856c <UART_SetConfig+0x164>
 8008510:	a201      	add	r2, pc, #4	@ (adr r2, 8008518 <UART_SetConfig+0x110>)
 8008512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008516:	bf00      	nop
 8008518:	0800854d 	.word	0x0800854d
 800851c:	0800856d 	.word	0x0800856d
 8008520:	0800856d 	.word	0x0800856d
 8008524:	0800856d 	.word	0x0800856d
 8008528:	0800855d 	.word	0x0800855d
 800852c:	0800856d 	.word	0x0800856d
 8008530:	0800856d 	.word	0x0800856d
 8008534:	0800856d 	.word	0x0800856d
 8008538:	08008555 	.word	0x08008555
 800853c:	0800856d 	.word	0x0800856d
 8008540:	0800856d 	.word	0x0800856d
 8008544:	0800856d 	.word	0x0800856d
 8008548:	08008565 	.word	0x08008565
 800854c:	2300      	movs	r3, #0
 800854e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008552:	e0d8      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008554:	2302      	movs	r3, #2
 8008556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800855a:	e0d4      	b.n	8008706 <UART_SetConfig+0x2fe>
 800855c:	2304      	movs	r3, #4
 800855e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008562:	e0d0      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008564:	2308      	movs	r3, #8
 8008566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800856a:	e0cc      	b.n	8008706 <UART_SetConfig+0x2fe>
 800856c:	2310      	movs	r3, #16
 800856e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008572:	e0c8      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a5e      	ldr	r2, [pc, #376]	@ (80086f4 <UART_SetConfig+0x2ec>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d125      	bne.n	80085ca <UART_SetConfig+0x1c2>
 800857e:	4b5b      	ldr	r3, [pc, #364]	@ (80086ec <UART_SetConfig+0x2e4>)
 8008580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008584:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008588:	2b30      	cmp	r3, #48	@ 0x30
 800858a:	d016      	beq.n	80085ba <UART_SetConfig+0x1b2>
 800858c:	2b30      	cmp	r3, #48	@ 0x30
 800858e:	d818      	bhi.n	80085c2 <UART_SetConfig+0x1ba>
 8008590:	2b20      	cmp	r3, #32
 8008592:	d00a      	beq.n	80085aa <UART_SetConfig+0x1a2>
 8008594:	2b20      	cmp	r3, #32
 8008596:	d814      	bhi.n	80085c2 <UART_SetConfig+0x1ba>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <UART_SetConfig+0x19a>
 800859c:	2b10      	cmp	r3, #16
 800859e:	d008      	beq.n	80085b2 <UART_SetConfig+0x1aa>
 80085a0:	e00f      	b.n	80085c2 <UART_SetConfig+0x1ba>
 80085a2:	2300      	movs	r3, #0
 80085a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085a8:	e0ad      	b.n	8008706 <UART_SetConfig+0x2fe>
 80085aa:	2302      	movs	r3, #2
 80085ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085b0:	e0a9      	b.n	8008706 <UART_SetConfig+0x2fe>
 80085b2:	2304      	movs	r3, #4
 80085b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085b8:	e0a5      	b.n	8008706 <UART_SetConfig+0x2fe>
 80085ba:	2308      	movs	r3, #8
 80085bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085c0:	e0a1      	b.n	8008706 <UART_SetConfig+0x2fe>
 80085c2:	2310      	movs	r3, #16
 80085c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085c8:	e09d      	b.n	8008706 <UART_SetConfig+0x2fe>
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a4a      	ldr	r2, [pc, #296]	@ (80086f8 <UART_SetConfig+0x2f0>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d125      	bne.n	8008620 <UART_SetConfig+0x218>
 80085d4:	4b45      	ldr	r3, [pc, #276]	@ (80086ec <UART_SetConfig+0x2e4>)
 80085d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80085de:	2bc0      	cmp	r3, #192	@ 0xc0
 80085e0:	d016      	beq.n	8008610 <UART_SetConfig+0x208>
 80085e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80085e4:	d818      	bhi.n	8008618 <UART_SetConfig+0x210>
 80085e6:	2b80      	cmp	r3, #128	@ 0x80
 80085e8:	d00a      	beq.n	8008600 <UART_SetConfig+0x1f8>
 80085ea:	2b80      	cmp	r3, #128	@ 0x80
 80085ec:	d814      	bhi.n	8008618 <UART_SetConfig+0x210>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <UART_SetConfig+0x1f0>
 80085f2:	2b40      	cmp	r3, #64	@ 0x40
 80085f4:	d008      	beq.n	8008608 <UART_SetConfig+0x200>
 80085f6:	e00f      	b.n	8008618 <UART_SetConfig+0x210>
 80085f8:	2300      	movs	r3, #0
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085fe:	e082      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008600:	2302      	movs	r3, #2
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008606:	e07e      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008608:	2304      	movs	r3, #4
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800860e:	e07a      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008610:	2308      	movs	r3, #8
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008616:	e076      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008618:	2310      	movs	r3, #16
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800861e:	e072      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a35      	ldr	r2, [pc, #212]	@ (80086fc <UART_SetConfig+0x2f4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d12a      	bne.n	8008680 <UART_SetConfig+0x278>
 800862a:	4b30      	ldr	r3, [pc, #192]	@ (80086ec <UART_SetConfig+0x2e4>)
 800862c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008630:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008634:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008638:	d01a      	beq.n	8008670 <UART_SetConfig+0x268>
 800863a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800863e:	d81b      	bhi.n	8008678 <UART_SetConfig+0x270>
 8008640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008644:	d00c      	beq.n	8008660 <UART_SetConfig+0x258>
 8008646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800864a:	d815      	bhi.n	8008678 <UART_SetConfig+0x270>
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <UART_SetConfig+0x250>
 8008650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008654:	d008      	beq.n	8008668 <UART_SetConfig+0x260>
 8008656:	e00f      	b.n	8008678 <UART_SetConfig+0x270>
 8008658:	2300      	movs	r3, #0
 800865a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800865e:	e052      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008660:	2302      	movs	r3, #2
 8008662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008666:	e04e      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008668:	2304      	movs	r3, #4
 800866a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800866e:	e04a      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008670:	2308      	movs	r3, #8
 8008672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008676:	e046      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008678:	2310      	movs	r3, #16
 800867a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800867e:	e042      	b.n	8008706 <UART_SetConfig+0x2fe>
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a17      	ldr	r2, [pc, #92]	@ (80086e4 <UART_SetConfig+0x2dc>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d13a      	bne.n	8008700 <UART_SetConfig+0x2f8>
 800868a:	4b18      	ldr	r3, [pc, #96]	@ (80086ec <UART_SetConfig+0x2e4>)
 800868c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008690:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008694:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008698:	d01a      	beq.n	80086d0 <UART_SetConfig+0x2c8>
 800869a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800869e:	d81b      	bhi.n	80086d8 <UART_SetConfig+0x2d0>
 80086a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086a4:	d00c      	beq.n	80086c0 <UART_SetConfig+0x2b8>
 80086a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086aa:	d815      	bhi.n	80086d8 <UART_SetConfig+0x2d0>
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <UART_SetConfig+0x2b0>
 80086b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b4:	d008      	beq.n	80086c8 <UART_SetConfig+0x2c0>
 80086b6:	e00f      	b.n	80086d8 <UART_SetConfig+0x2d0>
 80086b8:	2300      	movs	r3, #0
 80086ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086be:	e022      	b.n	8008706 <UART_SetConfig+0x2fe>
 80086c0:	2302      	movs	r3, #2
 80086c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086c6:	e01e      	b.n	8008706 <UART_SetConfig+0x2fe>
 80086c8:	2304      	movs	r3, #4
 80086ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ce:	e01a      	b.n	8008706 <UART_SetConfig+0x2fe>
 80086d0:	2308      	movs	r3, #8
 80086d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086d6:	e016      	b.n	8008706 <UART_SetConfig+0x2fe>
 80086d8:	2310      	movs	r3, #16
 80086da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086de:	e012      	b.n	8008706 <UART_SetConfig+0x2fe>
 80086e0:	cfff69f3 	.word	0xcfff69f3
 80086e4:	40008000 	.word	0x40008000
 80086e8:	40013800 	.word	0x40013800
 80086ec:	40021000 	.word	0x40021000
 80086f0:	40004400 	.word	0x40004400
 80086f4:	40004800 	.word	0x40004800
 80086f8:	40004c00 	.word	0x40004c00
 80086fc:	40005000 	.word	0x40005000
 8008700:	2310      	movs	r3, #16
 8008702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4aae      	ldr	r2, [pc, #696]	@ (80089c4 <UART_SetConfig+0x5bc>)
 800870c:	4293      	cmp	r3, r2
 800870e:	f040 8097 	bne.w	8008840 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008712:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008716:	2b08      	cmp	r3, #8
 8008718:	d823      	bhi.n	8008762 <UART_SetConfig+0x35a>
 800871a:	a201      	add	r2, pc, #4	@ (adr r2, 8008720 <UART_SetConfig+0x318>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008745 	.word	0x08008745
 8008724:	08008763 	.word	0x08008763
 8008728:	0800874d 	.word	0x0800874d
 800872c:	08008763 	.word	0x08008763
 8008730:	08008753 	.word	0x08008753
 8008734:	08008763 	.word	0x08008763
 8008738:	08008763 	.word	0x08008763
 800873c:	08008763 	.word	0x08008763
 8008740:	0800875b 	.word	0x0800875b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008744:	f7fc ffb8 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 8008748:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800874a:	e010      	b.n	800876e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800874c:	4b9e      	ldr	r3, [pc, #632]	@ (80089c8 <UART_SetConfig+0x5c0>)
 800874e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008750:	e00d      	b.n	800876e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008752:	f7fc ff43 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8008756:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008758:	e009      	b.n	800876e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800875a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008760:	e005      	b.n	800876e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800876c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8130 	beq.w	80089d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877a:	4a94      	ldr	r2, [pc, #592]	@ (80089cc <UART_SetConfig+0x5c4>)
 800877c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008780:	461a      	mov	r2, r3
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	fbb3 f3f2 	udiv	r3, r3, r2
 8008788:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	4613      	mov	r3, r2
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	4413      	add	r3, r2
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	429a      	cmp	r2, r3
 8008798:	d305      	bcc.n	80087a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d903      	bls.n	80087ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80087ac:	e113      	b.n	80089d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	2200      	movs	r2, #0
 80087b2:	60bb      	str	r3, [r7, #8]
 80087b4:	60fa      	str	r2, [r7, #12]
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ba:	4a84      	ldr	r2, [pc, #528]	@ (80089cc <UART_SetConfig+0x5c4>)
 80087bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2200      	movs	r2, #0
 80087c4:	603b      	str	r3, [r7, #0]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087d0:	f7f7 fd8e 	bl	80002f0 <__aeabi_uldivmod>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4610      	mov	r0, r2
 80087da:	4619      	mov	r1, r3
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	020b      	lsls	r3, r1, #8
 80087e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087ea:	0202      	lsls	r2, r0, #8
 80087ec:	6979      	ldr	r1, [r7, #20]
 80087ee:	6849      	ldr	r1, [r1, #4]
 80087f0:	0849      	lsrs	r1, r1, #1
 80087f2:	2000      	movs	r0, #0
 80087f4:	460c      	mov	r4, r1
 80087f6:	4605      	mov	r5, r0
 80087f8:	eb12 0804 	adds.w	r8, r2, r4
 80087fc:	eb43 0905 	adc.w	r9, r3, r5
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	469a      	mov	sl, r3
 8008808:	4693      	mov	fp, r2
 800880a:	4652      	mov	r2, sl
 800880c:	465b      	mov	r3, fp
 800880e:	4640      	mov	r0, r8
 8008810:	4649      	mov	r1, r9
 8008812:	f7f7 fd6d 	bl	80002f0 <__aeabi_uldivmod>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4613      	mov	r3, r2
 800881c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008824:	d308      	bcc.n	8008838 <UART_SetConfig+0x430>
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800882c:	d204      	bcs.n	8008838 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	60da      	str	r2, [r3, #12]
 8008836:	e0ce      	b.n	80089d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800883e:	e0ca      	b.n	80089d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008848:	d166      	bne.n	8008918 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800884a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800884e:	2b08      	cmp	r3, #8
 8008850:	d827      	bhi.n	80088a2 <UART_SetConfig+0x49a>
 8008852:	a201      	add	r2, pc, #4	@ (adr r2, 8008858 <UART_SetConfig+0x450>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	0800887d 	.word	0x0800887d
 800885c:	08008885 	.word	0x08008885
 8008860:	0800888d 	.word	0x0800888d
 8008864:	080088a3 	.word	0x080088a3
 8008868:	08008893 	.word	0x08008893
 800886c:	080088a3 	.word	0x080088a3
 8008870:	080088a3 	.word	0x080088a3
 8008874:	080088a3 	.word	0x080088a3
 8008878:	0800889b 	.word	0x0800889b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800887c:	f7fc ff1c 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 8008880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008882:	e014      	b.n	80088ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008884:	f7fc ff2e 	bl	80056e4 <HAL_RCC_GetPCLK2Freq>
 8008888:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800888a:	e010      	b.n	80088ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800888c:	4b4e      	ldr	r3, [pc, #312]	@ (80089c8 <UART_SetConfig+0x5c0>)
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008890:	e00d      	b.n	80088ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008892:	f7fc fea3 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8008896:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008898:	e009      	b.n	80088ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800889a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800889e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088a0:	e005      	b.n	80088ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80088ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 8090 	beq.w	80089d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ba:	4a44      	ldr	r2, [pc, #272]	@ (80089cc <UART_SetConfig+0x5c4>)
 80088bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088c0:	461a      	mov	r2, r3
 80088c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088c8:	005a      	lsls	r2, r3, #1
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	085b      	lsrs	r3, r3, #1
 80088d0:	441a      	add	r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	2b0f      	cmp	r3, #15
 80088e0:	d916      	bls.n	8008910 <UART_SetConfig+0x508>
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088e8:	d212      	bcs.n	8008910 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	f023 030f 	bic.w	r3, r3, #15
 80088f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	085b      	lsrs	r3, r3, #1
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	b29a      	uxth	r2, r3
 8008900:	8bfb      	ldrh	r3, [r7, #30]
 8008902:	4313      	orrs	r3, r2
 8008904:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	8bfa      	ldrh	r2, [r7, #30]
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	e062      	b.n	80089d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008916:	e05e      	b.n	80089d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008918:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800891c:	2b08      	cmp	r3, #8
 800891e:	d828      	bhi.n	8008972 <UART_SetConfig+0x56a>
 8008920:	a201      	add	r2, pc, #4	@ (adr r2, 8008928 <UART_SetConfig+0x520>)
 8008922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008926:	bf00      	nop
 8008928:	0800894d 	.word	0x0800894d
 800892c:	08008955 	.word	0x08008955
 8008930:	0800895d 	.word	0x0800895d
 8008934:	08008973 	.word	0x08008973
 8008938:	08008963 	.word	0x08008963
 800893c:	08008973 	.word	0x08008973
 8008940:	08008973 	.word	0x08008973
 8008944:	08008973 	.word	0x08008973
 8008948:	0800896b 	.word	0x0800896b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800894c:	f7fc feb4 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 8008950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008952:	e014      	b.n	800897e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008954:	f7fc fec6 	bl	80056e4 <HAL_RCC_GetPCLK2Freq>
 8008958:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800895a:	e010      	b.n	800897e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800895c:	4b1a      	ldr	r3, [pc, #104]	@ (80089c8 <UART_SetConfig+0x5c0>)
 800895e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008960:	e00d      	b.n	800897e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008962:	f7fc fe3b 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8008966:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008968:	e009      	b.n	800897e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800896a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800896e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008970:	e005      	b.n	800897e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800897c:	bf00      	nop
    }

    if (pclk != 0U)
 800897e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008980:	2b00      	cmp	r3, #0
 8008982:	d028      	beq.n	80089d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008988:	4a10      	ldr	r2, [pc, #64]	@ (80089cc <UART_SetConfig+0x5c4>)
 800898a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800898e:	461a      	mov	r2, r3
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	fbb3 f2f2 	udiv	r2, r3, r2
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	441a      	add	r2, r3
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	2b0f      	cmp	r3, #15
 80089ac:	d910      	bls.n	80089d0 <UART_SetConfig+0x5c8>
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089b4:	d20c      	bcs.n	80089d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60da      	str	r2, [r3, #12]
 80089c0:	e009      	b.n	80089d6 <UART_SetConfig+0x5ce>
 80089c2:	bf00      	nop
 80089c4:	40008000 	.word	0x40008000
 80089c8:	00f42400 	.word	0x00f42400
 80089cc:	0800b4b0 	.word	0x0800b4b0
      }
      else
      {
        ret = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2201      	movs	r2, #1
 80089da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2200      	movs	r2, #0
 80089ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2200      	movs	r2, #0
 80089f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80089f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3730      	adds	r7, #48	@ 0x30
 80089fa:	46bd      	mov	sp, r7
 80089fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0c:	f003 0308 	and.w	r3, r3, #8
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00a      	beq.n	8008a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00a      	beq.n	8008a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a72:	f003 0304 	and.w	r3, r3, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01a      	beq.n	8008b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008afe:	d10a      	bne.n	8008b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00a      	beq.n	8008b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	605a      	str	r2, [r3, #4]
  }
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b098      	sub	sp, #96	@ 0x60
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b54:	f7f9 fafc 	bl	8002150 <HAL_GetTick>
 8008b58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0308 	and.w	r3, r3, #8
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d12f      	bne.n	8008bc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b70:	2200      	movs	r2, #0
 8008b72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f88e 	bl	8008c98 <UART_WaitOnFlagUntilTimeout>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d022      	beq.n	8008bc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8a:	e853 3f00 	ldrex	r3, [r3]
 8008b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ba2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ba8:	e841 2300 	strex	r3, r2, [r1]
 8008bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e6      	bne.n	8008b82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e063      	b.n	8008c90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d149      	bne.n	8008c6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bde:	2200      	movs	r2, #0
 8008be0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f857 	bl	8008c98 <UART_WaitOnFlagUntilTimeout>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d03c      	beq.n	8008c6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf8:	e853 3f00 	ldrex	r3, [r3]
 8008bfc:	623b      	str	r3, [r7, #32]
   return(result);
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c16:	e841 2300 	strex	r3, r2, [r1]
 8008c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e6      	bne.n	8008bf0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3308      	adds	r3, #8
 8008c28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f023 0301 	bic.w	r3, r3, #1
 8008c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c42:	61fa      	str	r2, [r7, #28]
 8008c44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	69b9      	ldr	r1, [r7, #24]
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	617b      	str	r3, [r7, #20]
   return(result);
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e5      	bne.n	8008c22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e012      	b.n	8008c90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3758      	adds	r7, #88	@ 0x58
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	603b      	str	r3, [r7, #0]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ca8:	e04f      	b.n	8008d4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb0:	d04b      	beq.n	8008d4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb2:	f7f9 fa4d 	bl	8002150 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d302      	bcc.n	8008cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d101      	bne.n	8008ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e04e      	b.n	8008d6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0304 	and.w	r3, r3, #4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d037      	beq.n	8008d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b80      	cmp	r3, #128	@ 0x80
 8008cde:	d034      	beq.n	8008d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2b40      	cmp	r3, #64	@ 0x40
 8008ce4:	d031      	beq.n	8008d4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	f003 0308 	and.w	r3, r3, #8
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d110      	bne.n	8008d16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2208      	movs	r2, #8
 8008cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 f95b 	bl	8008fb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2208      	movs	r2, #8
 8008d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e029      	b.n	8008d6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d24:	d111      	bne.n	8008d4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f941 	bl	8008fb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e00f      	b.n	8008d6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69da      	ldr	r2, [r3, #28]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	4013      	ands	r3, r2
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	bf0c      	ite	eq
 8008d5a:	2301      	moveq	r3, #1
 8008d5c:	2300      	movne	r3, #0
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	461a      	mov	r2, r3
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d0a0      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b0a3      	sub	sp, #140	@ 0x8c
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	88fa      	ldrh	r2, [r7, #6]
 8008d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	88fa      	ldrh	r2, [r7, #6]
 8008d94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008da6:	d10e      	bne.n	8008dc6 <UART_Start_Receive_IT+0x52>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d105      	bne.n	8008dbc <UART_Start_Receive_IT+0x48>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008db6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008dba:	e02d      	b.n	8008e18 <UART_Start_Receive_IT+0xa4>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	22ff      	movs	r2, #255	@ 0xff
 8008dc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008dc4:	e028      	b.n	8008e18 <UART_Start_Receive_IT+0xa4>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10d      	bne.n	8008dea <UART_Start_Receive_IT+0x76>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d104      	bne.n	8008de0 <UART_Start_Receive_IT+0x6c>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	22ff      	movs	r2, #255	@ 0xff
 8008dda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008dde:	e01b      	b.n	8008e18 <UART_Start_Receive_IT+0xa4>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	227f      	movs	r2, #127	@ 0x7f
 8008de4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008de8:	e016      	b.n	8008e18 <UART_Start_Receive_IT+0xa4>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008df2:	d10d      	bne.n	8008e10 <UART_Start_Receive_IT+0x9c>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d104      	bne.n	8008e06 <UART_Start_Receive_IT+0x92>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	227f      	movs	r2, #127	@ 0x7f
 8008e00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e04:	e008      	b.n	8008e18 <UART_Start_Receive_IT+0xa4>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	223f      	movs	r2, #63	@ 0x3f
 8008e0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e0e:	e003      	b.n	8008e18 <UART_Start_Receive_IT+0xa4>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2222      	movs	r2, #34	@ 0x22
 8008e24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008e38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e3a:	f043 0301 	orr.w	r3, r3, #1
 8008e3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3308      	adds	r3, #8
 8008e48:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008e4c:	673a      	str	r2, [r7, #112]	@ 0x70
 8008e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008e52:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008e54:	e841 2300 	strex	r3, r2, [r1]
 8008e58:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008e5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e3      	bne.n	8008e28 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e68:	d14f      	bne.n	8008f0a <UART_Start_Receive_IT+0x196>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e70:	88fa      	ldrh	r2, [r7, #6]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d349      	bcc.n	8008f0a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e7e:	d107      	bne.n	8008e90 <UART_Start_Receive_IT+0x11c>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d103      	bne.n	8008e90 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	4a47      	ldr	r2, [pc, #284]	@ (8008fa8 <UART_Start_Receive_IT+0x234>)
 8008e8c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008e8e:	e002      	b.n	8008e96 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4a46      	ldr	r2, [pc, #280]	@ (8008fac <UART_Start_Receive_IT+0x238>)
 8008e94:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d01a      	beq.n	8008ed4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ec2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008ec6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e4      	bne.n	8008e9e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3308      	adds	r3, #8
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ede:	e853 3f00 	ldrex	r3, [r3]
 8008ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008ef4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008ef6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008efa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008efc:	e841 2300 	strex	r3, r2, [r1]
 8008f00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1e5      	bne.n	8008ed4 <UART_Start_Receive_IT+0x160>
 8008f08:	e046      	b.n	8008f98 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f12:	d107      	bne.n	8008f24 <UART_Start_Receive_IT+0x1b0>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d103      	bne.n	8008f24 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4a24      	ldr	r2, [pc, #144]	@ (8008fb0 <UART_Start_Receive_IT+0x23c>)
 8008f20:	675a      	str	r2, [r3, #116]	@ 0x74
 8008f22:	e002      	b.n	8008f2a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4a23      	ldr	r2, [pc, #140]	@ (8008fb4 <UART_Start_Receive_IT+0x240>)
 8008f28:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d019      	beq.n	8008f66 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3a:	e853 3f00 	ldrex	r3, [r3]
 8008f3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f42:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008f46:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f52:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f58:	e841 2300 	strex	r3, r2, [r1]
 8008f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e6      	bne.n	8008f32 <UART_Start_Receive_IT+0x1be>
 8008f64:	e018      	b.n	8008f98 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	613b      	str	r3, [r7, #16]
   return(result);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	f043 0320 	orr.w	r3, r3, #32
 8008f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f84:	623b      	str	r3, [r7, #32]
 8008f86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	69f9      	ldr	r1, [r7, #28]
 8008f8a:	6a3a      	ldr	r2, [r7, #32]
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e6      	bne.n	8008f66 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	378c      	adds	r7, #140	@ 0x8c
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	080097d5 	.word	0x080097d5
 8008fac:	08009471 	.word	0x08009471
 8008fb0:	080092b9 	.word	0x080092b9
 8008fb4:	08009101 	.word	0x08009101

08008fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b095      	sub	sp, #84	@ 0x54
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fe0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fe4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e6      	bne.n	8008fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3308      	adds	r3, #8
 8008ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	61fb      	str	r3, [r7, #28]
   return(result);
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009016:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009018:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800901c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1e3      	bne.n	8008ff2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800902e:	2b01      	cmp	r3, #1
 8009030:	d118      	bne.n	8009064 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f023 0310 	bic.w	r3, r3, #16
 8009046:	647b      	str	r3, [r7, #68]	@ 0x44
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	6979      	ldr	r1, [r7, #20]
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	613b      	str	r3, [r7, #16]
   return(result);
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e6      	bne.n	8009032 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009078:	bf00      	nop
 800907a:	3754      	adds	r7, #84	@ 0x54
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009090:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f7ff f99e 	bl	80083dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090a0:	bf00      	nop
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	61bb      	str	r3, [r7, #24]
 80090d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6979      	ldr	r1, [r7, #20]
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	613b      	str	r3, [r7, #16]
   return(result);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e6      	bne.n	80090b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff f969 	bl	80083c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090f6:	bf00      	nop
 80090f8:	3720      	adds	r7, #32
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b09c      	sub	sp, #112	@ 0x70
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800910e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009118:	2b22      	cmp	r3, #34	@ 0x22
 800911a:	f040 80be 	bne.w	800929a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009124:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009128:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800912c:	b2d9      	uxtb	r1, r3
 800912e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009132:	b2da      	uxtb	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009138:	400a      	ands	r2, r1
 800913a:	b2d2      	uxtb	r2, r2
 800913c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800914e:	b29b      	uxth	r3, r3
 8009150:	3b01      	subs	r3, #1
 8009152:	b29a      	uxth	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009160:	b29b      	uxth	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	f040 80a1 	bne.w	80092aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009178:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800917c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009186:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009188:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800918c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e6      	bne.n	8009168 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3308      	adds	r3, #8
 80091a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ac:	f023 0301 	bic.w	r3, r3, #1
 80091b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3308      	adds	r3, #8
 80091b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80091ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80091bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091c2:	e841 2300 	strex	r3, r2, [r1]
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1e5      	bne.n	800919a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a33      	ldr	r2, [pc, #204]	@ (80092b4 <UART_RxISR_8BIT+0x1b4>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d01f      	beq.n	800922c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d018      	beq.n	800922c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	623b      	str	r3, [r7, #32]
   return(result);
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800920e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009218:	633b      	str	r3, [r7, #48]	@ 0x30
 800921a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800921e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e6      	bne.n	80091fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009230:	2b01      	cmp	r3, #1
 8009232:	d12e      	bne.n	8009292 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	60fb      	str	r3, [r7, #12]
   return(result);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0310 	bic.w	r3, r3, #16
 800924e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009258:	61fb      	str	r3, [r7, #28]
 800925a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	69b9      	ldr	r1, [r7, #24]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	617b      	str	r3, [r7, #20]
   return(result);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e6      	bne.n	800923a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b10      	cmp	r3, #16
 8009278:	d103      	bne.n	8009282 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2210      	movs	r2, #16
 8009280:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff f8b0 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009290:	e00b      	b.n	80092aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7f8 fef2 	bl	800207c <HAL_UART_RxCpltCallback>
}
 8009298:	e007      	b.n	80092aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	699a      	ldr	r2, [r3, #24]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0208 	orr.w	r2, r2, #8
 80092a8:	619a      	str	r2, [r3, #24]
}
 80092aa:	bf00      	nop
 80092ac:	3770      	adds	r7, #112	@ 0x70
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	40008000 	.word	0x40008000

080092b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b09c      	sub	sp, #112	@ 0x70
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092d0:	2b22      	cmp	r3, #34	@ 0x22
 80092d2:	f040 80be 	bne.w	8009452 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80092e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80092ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80092ee:	4013      	ands	r3, r2
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fa:	1c9a      	adds	r2, r3, #2
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009306:	b29b      	uxth	r3, r3
 8009308:	3b01      	subs	r3, #1
 800930a:	b29a      	uxth	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009318:	b29b      	uxth	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	f040 80a1 	bne.w	8009462 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800932e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009334:	667b      	str	r3, [r7, #100]	@ 0x64
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800933e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009340:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009344:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800934c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e6      	bne.n	8009320 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3308      	adds	r3, #8
 8009358:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800935c:	e853 3f00 	ldrex	r3, [r3]
 8009360:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	f023 0301 	bic.w	r3, r3, #1
 8009368:	663b      	str	r3, [r7, #96]	@ 0x60
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009372:	643a      	str	r2, [r7, #64]	@ 0x40
 8009374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009376:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009378:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800937a:	e841 2300 	strex	r3, r2, [r1]
 800937e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1e5      	bne.n	8009352 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a33      	ldr	r2, [pc, #204]	@ (800946c <UART_RxISR_16BIT+0x1b4>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d01f      	beq.n	80093e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d018      	beq.n	80093e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	e853 3f00 	ldrex	r3, [r3]
 80093be:	61fb      	str	r3, [r7, #28]
   return(result);
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	461a      	mov	r2, r3
 80093ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093d8:	e841 2300 	strex	r3, r2, [r1]
 80093dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e6      	bne.n	80093b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d12e      	bne.n	800944a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f023 0310 	bic.w	r3, r3, #16
 8009406:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009410:	61bb      	str	r3, [r7, #24]
 8009412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	6979      	ldr	r1, [r7, #20]
 8009416:	69ba      	ldr	r2, [r7, #24]
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	613b      	str	r3, [r7, #16]
   return(result);
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e6      	bne.n	80093f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	f003 0310 	and.w	r3, r3, #16
 800942e:	2b10      	cmp	r3, #16
 8009430:	d103      	bne.n	800943a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2210      	movs	r2, #16
 8009438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7fe ffd4 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009448:	e00b      	b.n	8009462 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7f8 fe16 	bl	800207c <HAL_UART_RxCpltCallback>
}
 8009450:	e007      	b.n	8009462 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	699a      	ldr	r2, [r3, #24]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f042 0208 	orr.w	r2, r2, #8
 8009460:	619a      	str	r2, [r3, #24]
}
 8009462:	bf00      	nop
 8009464:	3770      	adds	r7, #112	@ 0x70
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	40008000 	.word	0x40008000

08009470 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b0ac      	sub	sp, #176	@ 0xb0
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800947e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094a6:	2b22      	cmp	r3, #34	@ 0x22
 80094a8:	f040 8183 	bne.w	80097b2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80094b2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094b6:	e126      	b.n	8009706 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094be:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80094c6:	b2d9      	uxtb	r1, r3
 80094c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d2:	400a      	ands	r2, r1
 80094d4:	b2d2      	uxtb	r2, r2
 80094d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	2b00      	cmp	r3, #0
 8009508:	d053      	beq.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800950a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d011      	beq.n	800953a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800951a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2201      	movs	r2, #1
 8009528:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009530:	f043 0201 	orr.w	r2, r3, #1
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800953a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d011      	beq.n	800956a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00b      	beq.n	800956a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2202      	movs	r2, #2
 8009558:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009560:	f043 0204 	orr.w	r2, r3, #4
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800956a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d011      	beq.n	800959a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00b      	beq.n	800959a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2204      	movs	r2, #4
 8009588:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009590:	f043 0202 	orr.w	r2, r3, #2
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d006      	beq.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7fe ff19 	bl	80083dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f040 80a3 	bne.w	8009706 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80095ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80095e4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80095e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80095ea:	e841 2300 	strex	r3, r2, [r1]
 80095ee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80095f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1e4      	bne.n	80095c0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3308      	adds	r3, #8
 80095fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800960c:	f023 0301 	bic.w	r3, r3, #1
 8009610:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3308      	adds	r3, #8
 800961a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800961e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009620:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009624:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800962c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e1      	bne.n	80095f6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2220      	movs	r2, #32
 8009636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a60      	ldr	r2, [pc, #384]	@ (80097cc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d021      	beq.n	8009694 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d01a      	beq.n	8009694 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009666:	e853 3f00 	ldrex	r3, [r3]
 800966a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800966c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800966e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009680:	657b      	str	r3, [r7, #84]	@ 0x54
 8009682:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009684:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009686:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009688:	e841 2300 	strex	r3, r2, [r1]
 800968c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800968e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1e4      	bne.n	800965e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009698:	2b01      	cmp	r3, #1
 800969a:	d130      	bne.n	80096fe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b2:	f023 0310 	bic.w	r3, r3, #16
 80096b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80096c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e4      	bne.n	80096a2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	f003 0310 	and.w	r3, r3, #16
 80096e2:	2b10      	cmp	r3, #16
 80096e4:	d103      	bne.n	80096ee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2210      	movs	r2, #16
 80096ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7fe fe7a 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80096fc:	e00e      	b.n	800971c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7f8 fcbc 	bl	800207c <HAL_UART_RxCpltCallback>
        break;
 8009704:	e00a      	b.n	800971c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009706:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800970a:	2b00      	cmp	r3, #0
 800970c:	d006      	beq.n	800971c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800970e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009712:	f003 0320 	and.w	r3, r3, #32
 8009716:	2b00      	cmp	r3, #0
 8009718:	f47f aece 	bne.w	80094b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009722:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009726:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800972a:	2b00      	cmp	r3, #0
 800972c:	d049      	beq.n	80097c2 <UART_RxISR_8BIT_FIFOEN+0x352>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009734:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009738:	429a      	cmp	r2, r3
 800973a:	d242      	bcs.n	80097c2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3308      	adds	r3, #8
 8009742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	61fb      	str	r3, [r7, #28]
   return(result);
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3308      	adds	r3, #8
 800975c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009768:	e841 2300 	strex	r3, r2, [r1]
 800976c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800976e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e3      	bne.n	800973c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a16      	ldr	r2, [pc, #88]	@ (80097d0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009778:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	60bb      	str	r3, [r7, #8]
   return(result);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f043 0320 	orr.w	r3, r3, #32
 800978e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6979      	ldr	r1, [r7, #20]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	613b      	str	r3, [r7, #16]
   return(result);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e4      	bne.n	800977a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097b0:	e007      	b.n	80097c2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	699a      	ldr	r2, [r3, #24]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f042 0208 	orr.w	r2, r2, #8
 80097c0:	619a      	str	r2, [r3, #24]
}
 80097c2:	bf00      	nop
 80097c4:	37b0      	adds	r7, #176	@ 0xb0
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	40008000 	.word	0x40008000
 80097d0:	08009101 	.word	0x08009101

080097d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b0ae      	sub	sp, #184	@ 0xb8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097e2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800980a:	2b22      	cmp	r3, #34	@ 0x22
 800980c:	f040 8187 	bne.w	8009b1e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009816:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800981a:	e12a      	b.n	8009a72 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009822:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800982a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800982e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009832:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009836:	4013      	ands	r3, r2
 8009838:	b29a      	uxth	r2, r3
 800983a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800983e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009844:	1c9a      	adds	r2, r3, #2
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009850:	b29b      	uxth	r3, r3
 8009852:	3b01      	subs	r3, #1
 8009854:	b29a      	uxth	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800986a:	f003 0307 	and.w	r3, r3, #7
 800986e:	2b00      	cmp	r3, #0
 8009870:	d053      	beq.n	800991a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	d011      	beq.n	80098a2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800987e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2201      	movs	r2, #1
 8009890:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009898:	f043 0201 	orr.w	r2, r3, #1
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d011      	beq.n	80098d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80098ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00b      	beq.n	80098d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2202      	movs	r2, #2
 80098c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c8:	f043 0204 	orr.w	r2, r3, #4
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80098d6:	f003 0304 	and.w	r3, r3, #4
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d011      	beq.n	8009902 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80098de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00b      	beq.n	8009902 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2204      	movs	r2, #4
 80098f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098f8:	f043 0202 	orr.w	r2, r3, #2
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009908:	2b00      	cmp	r3, #0
 800990a:	d006      	beq.n	800991a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7fe fd65 	bl	80083dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009920:	b29b      	uxth	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	f040 80a5 	bne.w	8009a72 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800993c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	461a      	mov	r2, r3
 8009946:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800994a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800994e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009956:	e841 2300 	strex	r3, r2, [r1]
 800995a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800995c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1e2      	bne.n	8009928 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3308      	adds	r3, #8
 8009968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009978:	f023 0301 	bic.w	r3, r3, #1
 800997c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800998a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800998c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009990:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009992:	e841 2300 	strex	r3, r2, [r1]
 8009996:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e1      	bne.n	8009962 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a60      	ldr	r2, [pc, #384]	@ (8009b38 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d021      	beq.n	8009a00 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d01a      	beq.n	8009a00 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099d2:	e853 3f00 	ldrex	r3, [r3]
 80099d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80099ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099f4:	e841 2300 	strex	r3, r2, [r1]
 80099f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e4      	bne.n	80099ca <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d130      	bne.n	8009a6a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a1e:	f023 0310 	bic.w	r3, r3, #16
 8009a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a38:	e841 2300 	strex	r3, r2, [r1]
 8009a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e4      	bne.n	8009a0e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	f003 0310 	and.w	r3, r3, #16
 8009a4e:	2b10      	cmp	r3, #16
 8009a50:	d103      	bne.n	8009a5a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2210      	movs	r2, #16
 8009a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7fe fcc4 	bl	80083f0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009a68:	e00e      	b.n	8009a88 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7f8 fb06 	bl	800207c <HAL_UART_RxCpltCallback>
        break;
 8009a70:	e00a      	b.n	8009a88 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a72:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d006      	beq.n	8009a88 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f47f aeca 	bne.w	800981c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a8e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d049      	beq.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009aa0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d242      	bcs.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	623b      	str	r3, [r7, #32]
   return(result);
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009abe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009acc:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ad4:	e841 2300 	strex	r3, r2, [r1]
 8009ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1e3      	bne.n	8009aa8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a16      	ldr	r2, [pc, #88]	@ (8009b3c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009ae4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f043 0320 	orr.w	r3, r3, #32
 8009afa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b08:	61fb      	str	r3, [r7, #28]
 8009b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	69b9      	ldr	r1, [r7, #24]
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	617b      	str	r3, [r7, #20]
   return(result);
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e4      	bne.n	8009ae6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b1c:	e007      	b.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	699a      	ldr	r2, [r3, #24]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f042 0208 	orr.w	r2, r2, #8
 8009b2c:	619a      	str	r2, [r3, #24]
}
 8009b2e:	bf00      	nop
 8009b30:	37b8      	adds	r7, #184	@ 0xb8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	40008000 	.word	0x40008000
 8009b3c:	080092b9 	.word	0x080092b9

08009b40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d101      	bne.n	8009b92 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b8e:	2302      	movs	r3, #2
 8009b90:	e027      	b.n	8009be2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2224      	movs	r2, #36	@ 0x24
 8009b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 0201 	bic.w	r2, r2, #1
 8009bb8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009bc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d101      	bne.n	8009c06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c02:	2302      	movs	r3, #2
 8009c04:	e02d      	b.n	8009c62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2224      	movs	r2, #36	@ 0x24
 8009c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f850 	bl	8009ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2220      	movs	r2, #32
 8009c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d101      	bne.n	8009c82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	e02d      	b.n	8009cde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2224      	movs	r2, #36	@ 0x24
 8009c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f022 0201 	bic.w	r2, r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	430a      	orrs	r2, r1
 8009cbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f812 	bl	8009ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d108      	bne.n	8009d0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d08:	e031      	b.n	8009d6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d0a:	2308      	movs	r3, #8
 8009d0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d0e:	2308      	movs	r3, #8
 8009d10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	0e5b      	lsrs	r3, r3, #25
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	0f5b      	lsrs	r3, r3, #29
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 0307 	and.w	r3, r3, #7
 8009d30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d32:	7bbb      	ldrb	r3, [r7, #14]
 8009d34:	7b3a      	ldrb	r2, [r7, #12]
 8009d36:	4911      	ldr	r1, [pc, #68]	@ (8009d7c <UARTEx_SetNbDataToProcess+0x94>)
 8009d38:	5c8a      	ldrb	r2, [r1, r2]
 8009d3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d3e:	7b3a      	ldrb	r2, [r7, #12]
 8009d40:	490f      	ldr	r1, [pc, #60]	@ (8009d80 <UARTEx_SetNbDataToProcess+0x98>)
 8009d42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	7b7a      	ldrb	r2, [r7, #13]
 8009d54:	4909      	ldr	r1, [pc, #36]	@ (8009d7c <UARTEx_SetNbDataToProcess+0x94>)
 8009d56:	5c8a      	ldrb	r2, [r1, r2]
 8009d58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d5c:	7b7a      	ldrb	r2, [r7, #13]
 8009d5e:	4908      	ldr	r1, [pc, #32]	@ (8009d80 <UARTEx_SetNbDataToProcess+0x98>)
 8009d60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d6e:	bf00      	nop
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	0800b4c8 	.word	0x0800b4c8
 8009d80:	0800b4d0 	.word	0x0800b4d0

08009d84 <atoi>:
 8009d84:	220a      	movs	r2, #10
 8009d86:	2100      	movs	r1, #0
 8009d88:	f000 b87a 	b.w	8009e80 <strtol>

08009d8c <_strtol_l.constprop.0>:
 8009d8c:	2b24      	cmp	r3, #36	@ 0x24
 8009d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d92:	4686      	mov	lr, r0
 8009d94:	4690      	mov	r8, r2
 8009d96:	d801      	bhi.n	8009d9c <_strtol_l.constprop.0+0x10>
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d106      	bne.n	8009daa <_strtol_l.constprop.0+0x1e>
 8009d9c:	f000 fa5e 	bl	800a25c <__errno>
 8009da0:	2316      	movs	r3, #22
 8009da2:	6003      	str	r3, [r0, #0]
 8009da4:	2000      	movs	r0, #0
 8009da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009daa:	4834      	ldr	r0, [pc, #208]	@ (8009e7c <_strtol_l.constprop.0+0xf0>)
 8009dac:	460d      	mov	r5, r1
 8009dae:	462a      	mov	r2, r5
 8009db0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009db4:	5d06      	ldrb	r6, [r0, r4]
 8009db6:	f016 0608 	ands.w	r6, r6, #8
 8009dba:	d1f8      	bne.n	8009dae <_strtol_l.constprop.0+0x22>
 8009dbc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009dbe:	d12d      	bne.n	8009e1c <_strtol_l.constprop.0+0x90>
 8009dc0:	782c      	ldrb	r4, [r5, #0]
 8009dc2:	2601      	movs	r6, #1
 8009dc4:	1c95      	adds	r5, r2, #2
 8009dc6:	f033 0210 	bics.w	r2, r3, #16
 8009dca:	d109      	bne.n	8009de0 <_strtol_l.constprop.0+0x54>
 8009dcc:	2c30      	cmp	r4, #48	@ 0x30
 8009dce:	d12a      	bne.n	8009e26 <_strtol_l.constprop.0+0x9a>
 8009dd0:	782a      	ldrb	r2, [r5, #0]
 8009dd2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dd6:	2a58      	cmp	r2, #88	@ 0x58
 8009dd8:	d125      	bne.n	8009e26 <_strtol_l.constprop.0+0x9a>
 8009dda:	786c      	ldrb	r4, [r5, #1]
 8009ddc:	2310      	movs	r3, #16
 8009dde:	3502      	adds	r5, #2
 8009de0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009de4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009de8:	2200      	movs	r2, #0
 8009dea:	fbbc f9f3 	udiv	r9, ip, r3
 8009dee:	4610      	mov	r0, r2
 8009df0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009df4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009df8:	2f09      	cmp	r7, #9
 8009dfa:	d81b      	bhi.n	8009e34 <_strtol_l.constprop.0+0xa8>
 8009dfc:	463c      	mov	r4, r7
 8009dfe:	42a3      	cmp	r3, r4
 8009e00:	dd27      	ble.n	8009e52 <_strtol_l.constprop.0+0xc6>
 8009e02:	1c57      	adds	r7, r2, #1
 8009e04:	d007      	beq.n	8009e16 <_strtol_l.constprop.0+0x8a>
 8009e06:	4581      	cmp	r9, r0
 8009e08:	d320      	bcc.n	8009e4c <_strtol_l.constprop.0+0xc0>
 8009e0a:	d101      	bne.n	8009e10 <_strtol_l.constprop.0+0x84>
 8009e0c:	45a2      	cmp	sl, r4
 8009e0e:	db1d      	blt.n	8009e4c <_strtol_l.constprop.0+0xc0>
 8009e10:	fb00 4003 	mla	r0, r0, r3, r4
 8009e14:	2201      	movs	r2, #1
 8009e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e1a:	e7eb      	b.n	8009df4 <_strtol_l.constprop.0+0x68>
 8009e1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e1e:	bf04      	itt	eq
 8009e20:	782c      	ldrbeq	r4, [r5, #0]
 8009e22:	1c95      	addeq	r5, r2, #2
 8009e24:	e7cf      	b.n	8009dc6 <_strtol_l.constprop.0+0x3a>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1da      	bne.n	8009de0 <_strtol_l.constprop.0+0x54>
 8009e2a:	2c30      	cmp	r4, #48	@ 0x30
 8009e2c:	bf0c      	ite	eq
 8009e2e:	2308      	moveq	r3, #8
 8009e30:	230a      	movne	r3, #10
 8009e32:	e7d5      	b.n	8009de0 <_strtol_l.constprop.0+0x54>
 8009e34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e38:	2f19      	cmp	r7, #25
 8009e3a:	d801      	bhi.n	8009e40 <_strtol_l.constprop.0+0xb4>
 8009e3c:	3c37      	subs	r4, #55	@ 0x37
 8009e3e:	e7de      	b.n	8009dfe <_strtol_l.constprop.0+0x72>
 8009e40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e44:	2f19      	cmp	r7, #25
 8009e46:	d804      	bhi.n	8009e52 <_strtol_l.constprop.0+0xc6>
 8009e48:	3c57      	subs	r4, #87	@ 0x57
 8009e4a:	e7d8      	b.n	8009dfe <_strtol_l.constprop.0+0x72>
 8009e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e50:	e7e1      	b.n	8009e16 <_strtol_l.constprop.0+0x8a>
 8009e52:	1c53      	adds	r3, r2, #1
 8009e54:	d108      	bne.n	8009e68 <_strtol_l.constprop.0+0xdc>
 8009e56:	2322      	movs	r3, #34	@ 0x22
 8009e58:	f8ce 3000 	str.w	r3, [lr]
 8009e5c:	4660      	mov	r0, ip
 8009e5e:	f1b8 0f00 	cmp.w	r8, #0
 8009e62:	d0a0      	beq.n	8009da6 <_strtol_l.constprop.0+0x1a>
 8009e64:	1e69      	subs	r1, r5, #1
 8009e66:	e006      	b.n	8009e76 <_strtol_l.constprop.0+0xea>
 8009e68:	b106      	cbz	r6, 8009e6c <_strtol_l.constprop.0+0xe0>
 8009e6a:	4240      	negs	r0, r0
 8009e6c:	f1b8 0f00 	cmp.w	r8, #0
 8009e70:	d099      	beq.n	8009da6 <_strtol_l.constprop.0+0x1a>
 8009e72:	2a00      	cmp	r2, #0
 8009e74:	d1f6      	bne.n	8009e64 <_strtol_l.constprop.0+0xd8>
 8009e76:	f8c8 1000 	str.w	r1, [r8]
 8009e7a:	e794      	b.n	8009da6 <_strtol_l.constprop.0+0x1a>
 8009e7c:	0800b4d9 	.word	0x0800b4d9

08009e80 <strtol>:
 8009e80:	4613      	mov	r3, r2
 8009e82:	460a      	mov	r2, r1
 8009e84:	4601      	mov	r1, r0
 8009e86:	4802      	ldr	r0, [pc, #8]	@ (8009e90 <strtol+0x10>)
 8009e88:	6800      	ldr	r0, [r0, #0]
 8009e8a:	f7ff bf7f 	b.w	8009d8c <_strtol_l.constprop.0>
 8009e8e:	bf00      	nop
 8009e90:	200000dc 	.word	0x200000dc

08009e94 <std>:
 8009e94:	2300      	movs	r3, #0
 8009e96:	b510      	push	{r4, lr}
 8009e98:	4604      	mov	r4, r0
 8009e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ea2:	6083      	str	r3, [r0, #8]
 8009ea4:	8181      	strh	r1, [r0, #12]
 8009ea6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ea8:	81c2      	strh	r2, [r0, #14]
 8009eaa:	6183      	str	r3, [r0, #24]
 8009eac:	4619      	mov	r1, r3
 8009eae:	2208      	movs	r2, #8
 8009eb0:	305c      	adds	r0, #92	@ 0x5c
 8009eb2:	f000 f928 	bl	800a106 <memset>
 8009eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009eec <std+0x58>)
 8009eb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009eba:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef0 <std+0x5c>)
 8009ebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef4 <std+0x60>)
 8009ec0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef8 <std+0x64>)
 8009ec4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8009efc <std+0x68>)
 8009ec8:	6224      	str	r4, [r4, #32]
 8009eca:	429c      	cmp	r4, r3
 8009ecc:	d006      	beq.n	8009edc <std+0x48>
 8009ece:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009ed2:	4294      	cmp	r4, r2
 8009ed4:	d002      	beq.n	8009edc <std+0x48>
 8009ed6:	33d0      	adds	r3, #208	@ 0xd0
 8009ed8:	429c      	cmp	r4, r3
 8009eda:	d105      	bne.n	8009ee8 <std+0x54>
 8009edc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee4:	f000 b9e4 	b.w	800a2b0 <__retarget_lock_init_recursive>
 8009ee8:	bd10      	pop	{r4, pc}
 8009eea:	bf00      	nop
 8009eec:	0800a081 	.word	0x0800a081
 8009ef0:	0800a0a3 	.word	0x0800a0a3
 8009ef4:	0800a0db 	.word	0x0800a0db
 8009ef8:	0800a0ff 	.word	0x0800a0ff
 8009efc:	20000670 	.word	0x20000670

08009f00 <stdio_exit_handler>:
 8009f00:	4a02      	ldr	r2, [pc, #8]	@ (8009f0c <stdio_exit_handler+0xc>)
 8009f02:	4903      	ldr	r1, [pc, #12]	@ (8009f10 <stdio_exit_handler+0x10>)
 8009f04:	4803      	ldr	r0, [pc, #12]	@ (8009f14 <stdio_exit_handler+0x14>)
 8009f06:	f000 b869 	b.w	8009fdc <_fwalk_sglue>
 8009f0a:	bf00      	nop
 8009f0c:	200000d0 	.word	0x200000d0
 8009f10:	0800abc9 	.word	0x0800abc9
 8009f14:	200000e0 	.word	0x200000e0

08009f18 <cleanup_stdio>:
 8009f18:	6841      	ldr	r1, [r0, #4]
 8009f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f4c <cleanup_stdio+0x34>)
 8009f1c:	4299      	cmp	r1, r3
 8009f1e:	b510      	push	{r4, lr}
 8009f20:	4604      	mov	r4, r0
 8009f22:	d001      	beq.n	8009f28 <cleanup_stdio+0x10>
 8009f24:	f000 fe50 	bl	800abc8 <_fflush_r>
 8009f28:	68a1      	ldr	r1, [r4, #8]
 8009f2a:	4b09      	ldr	r3, [pc, #36]	@ (8009f50 <cleanup_stdio+0x38>)
 8009f2c:	4299      	cmp	r1, r3
 8009f2e:	d002      	beq.n	8009f36 <cleanup_stdio+0x1e>
 8009f30:	4620      	mov	r0, r4
 8009f32:	f000 fe49 	bl	800abc8 <_fflush_r>
 8009f36:	68e1      	ldr	r1, [r4, #12]
 8009f38:	4b06      	ldr	r3, [pc, #24]	@ (8009f54 <cleanup_stdio+0x3c>)
 8009f3a:	4299      	cmp	r1, r3
 8009f3c:	d004      	beq.n	8009f48 <cleanup_stdio+0x30>
 8009f3e:	4620      	mov	r0, r4
 8009f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f44:	f000 be40 	b.w	800abc8 <_fflush_r>
 8009f48:	bd10      	pop	{r4, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20000670 	.word	0x20000670
 8009f50:	200006d8 	.word	0x200006d8
 8009f54:	20000740 	.word	0x20000740

08009f58 <global_stdio_init.part.0>:
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f88 <global_stdio_init.part.0+0x30>)
 8009f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8009f8c <global_stdio_init.part.0+0x34>)
 8009f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8009f90 <global_stdio_init.part.0+0x38>)
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	4620      	mov	r0, r4
 8009f64:	2200      	movs	r2, #0
 8009f66:	2104      	movs	r1, #4
 8009f68:	f7ff ff94 	bl	8009e94 <std>
 8009f6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009f70:	2201      	movs	r2, #1
 8009f72:	2109      	movs	r1, #9
 8009f74:	f7ff ff8e 	bl	8009e94 <std>
 8009f78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f82:	2112      	movs	r1, #18
 8009f84:	f7ff bf86 	b.w	8009e94 <std>
 8009f88:	200007a8 	.word	0x200007a8
 8009f8c:	20000670 	.word	0x20000670
 8009f90:	08009f01 	.word	0x08009f01

08009f94 <__sfp_lock_acquire>:
 8009f94:	4801      	ldr	r0, [pc, #4]	@ (8009f9c <__sfp_lock_acquire+0x8>)
 8009f96:	f000 b98c 	b.w	800a2b2 <__retarget_lock_acquire_recursive>
 8009f9a:	bf00      	nop
 8009f9c:	200007b1 	.word	0x200007b1

08009fa0 <__sfp_lock_release>:
 8009fa0:	4801      	ldr	r0, [pc, #4]	@ (8009fa8 <__sfp_lock_release+0x8>)
 8009fa2:	f000 b987 	b.w	800a2b4 <__retarget_lock_release_recursive>
 8009fa6:	bf00      	nop
 8009fa8:	200007b1 	.word	0x200007b1

08009fac <__sinit>:
 8009fac:	b510      	push	{r4, lr}
 8009fae:	4604      	mov	r4, r0
 8009fb0:	f7ff fff0 	bl	8009f94 <__sfp_lock_acquire>
 8009fb4:	6a23      	ldr	r3, [r4, #32]
 8009fb6:	b11b      	cbz	r3, 8009fc0 <__sinit+0x14>
 8009fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fbc:	f7ff bff0 	b.w	8009fa0 <__sfp_lock_release>
 8009fc0:	4b04      	ldr	r3, [pc, #16]	@ (8009fd4 <__sinit+0x28>)
 8009fc2:	6223      	str	r3, [r4, #32]
 8009fc4:	4b04      	ldr	r3, [pc, #16]	@ (8009fd8 <__sinit+0x2c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1f5      	bne.n	8009fb8 <__sinit+0xc>
 8009fcc:	f7ff ffc4 	bl	8009f58 <global_stdio_init.part.0>
 8009fd0:	e7f2      	b.n	8009fb8 <__sinit+0xc>
 8009fd2:	bf00      	nop
 8009fd4:	08009f19 	.word	0x08009f19
 8009fd8:	200007a8 	.word	0x200007a8

08009fdc <_fwalk_sglue>:
 8009fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	4688      	mov	r8, r1
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	2600      	movs	r6, #0
 8009fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fec:	f1b9 0901 	subs.w	r9, r9, #1
 8009ff0:	d505      	bpl.n	8009ffe <_fwalk_sglue+0x22>
 8009ff2:	6824      	ldr	r4, [r4, #0]
 8009ff4:	2c00      	cmp	r4, #0
 8009ff6:	d1f7      	bne.n	8009fe8 <_fwalk_sglue+0xc>
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d907      	bls.n	800a014 <_fwalk_sglue+0x38>
 800a004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a008:	3301      	adds	r3, #1
 800a00a:	d003      	beq.n	800a014 <_fwalk_sglue+0x38>
 800a00c:	4629      	mov	r1, r5
 800a00e:	4638      	mov	r0, r7
 800a010:	47c0      	blx	r8
 800a012:	4306      	orrs	r6, r0
 800a014:	3568      	adds	r5, #104	@ 0x68
 800a016:	e7e9      	b.n	8009fec <_fwalk_sglue+0x10>

0800a018 <sniprintf>:
 800a018:	b40c      	push	{r2, r3}
 800a01a:	b530      	push	{r4, r5, lr}
 800a01c:	4b17      	ldr	r3, [pc, #92]	@ (800a07c <sniprintf+0x64>)
 800a01e:	1e0c      	subs	r4, r1, #0
 800a020:	681d      	ldr	r5, [r3, #0]
 800a022:	b09d      	sub	sp, #116	@ 0x74
 800a024:	da08      	bge.n	800a038 <sniprintf+0x20>
 800a026:	238b      	movs	r3, #139	@ 0x8b
 800a028:	602b      	str	r3, [r5, #0]
 800a02a:	f04f 30ff 	mov.w	r0, #4294967295
 800a02e:	b01d      	add	sp, #116	@ 0x74
 800a030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a034:	b002      	add	sp, #8
 800a036:	4770      	bx	lr
 800a038:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a03c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a040:	bf14      	ite	ne
 800a042:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a046:	4623      	moveq	r3, r4
 800a048:	9304      	str	r3, [sp, #16]
 800a04a:	9307      	str	r3, [sp, #28]
 800a04c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a050:	9002      	str	r0, [sp, #8]
 800a052:	9006      	str	r0, [sp, #24]
 800a054:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a058:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a05a:	ab21      	add	r3, sp, #132	@ 0x84
 800a05c:	a902      	add	r1, sp, #8
 800a05e:	4628      	mov	r0, r5
 800a060:	9301      	str	r3, [sp, #4]
 800a062:	f000 faa3 	bl	800a5ac <_svfiprintf_r>
 800a066:	1c43      	adds	r3, r0, #1
 800a068:	bfbc      	itt	lt
 800a06a:	238b      	movlt	r3, #139	@ 0x8b
 800a06c:	602b      	strlt	r3, [r5, #0]
 800a06e:	2c00      	cmp	r4, #0
 800a070:	d0dd      	beq.n	800a02e <sniprintf+0x16>
 800a072:	9b02      	ldr	r3, [sp, #8]
 800a074:	2200      	movs	r2, #0
 800a076:	701a      	strb	r2, [r3, #0]
 800a078:	e7d9      	b.n	800a02e <sniprintf+0x16>
 800a07a:	bf00      	nop
 800a07c:	200000dc 	.word	0x200000dc

0800a080 <__sread>:
 800a080:	b510      	push	{r4, lr}
 800a082:	460c      	mov	r4, r1
 800a084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a088:	f000 f8c4 	bl	800a214 <_read_r>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	bfab      	itete	ge
 800a090:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a092:	89a3      	ldrhlt	r3, [r4, #12]
 800a094:	181b      	addge	r3, r3, r0
 800a096:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a09a:	bfac      	ite	ge
 800a09c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a09e:	81a3      	strhlt	r3, [r4, #12]
 800a0a0:	bd10      	pop	{r4, pc}

0800a0a2 <__swrite>:
 800a0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a6:	461f      	mov	r7, r3
 800a0a8:	898b      	ldrh	r3, [r1, #12]
 800a0aa:	05db      	lsls	r3, r3, #23
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	4616      	mov	r6, r2
 800a0b2:	d505      	bpl.n	800a0c0 <__swrite+0x1e>
 800a0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f000 f898 	bl	800a1f0 <_lseek_r>
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0ca:	81a3      	strh	r3, [r4, #12]
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	463b      	mov	r3, r7
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d6:	f000 b8af 	b.w	800a238 <_write_r>

0800a0da <__sseek>:
 800a0da:	b510      	push	{r4, lr}
 800a0dc:	460c      	mov	r4, r1
 800a0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e2:	f000 f885 	bl	800a1f0 <_lseek_r>
 800a0e6:	1c43      	adds	r3, r0, #1
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	bf15      	itete	ne
 800a0ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a0ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a0f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a0f6:	81a3      	strheq	r3, [r4, #12]
 800a0f8:	bf18      	it	ne
 800a0fa:	81a3      	strhne	r3, [r4, #12]
 800a0fc:	bd10      	pop	{r4, pc}

0800a0fe <__sclose>:
 800a0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a102:	f000 b865 	b.w	800a1d0 <_close_r>

0800a106 <memset>:
 800a106:	4402      	add	r2, r0
 800a108:	4603      	mov	r3, r0
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d100      	bne.n	800a110 <memset+0xa>
 800a10e:	4770      	bx	lr
 800a110:	f803 1b01 	strb.w	r1, [r3], #1
 800a114:	e7f9      	b.n	800a10a <memset+0x4>
	...

0800a118 <strtok>:
 800a118:	4b16      	ldr	r3, [pc, #88]	@ (800a174 <strtok+0x5c>)
 800a11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11e:	681f      	ldr	r7, [r3, #0]
 800a120:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a122:	4605      	mov	r5, r0
 800a124:	460e      	mov	r6, r1
 800a126:	b9ec      	cbnz	r4, 800a164 <strtok+0x4c>
 800a128:	2050      	movs	r0, #80	@ 0x50
 800a12a:	f000 f92d 	bl	800a388 <malloc>
 800a12e:	4602      	mov	r2, r0
 800a130:	6478      	str	r0, [r7, #68]	@ 0x44
 800a132:	b920      	cbnz	r0, 800a13e <strtok+0x26>
 800a134:	4b10      	ldr	r3, [pc, #64]	@ (800a178 <strtok+0x60>)
 800a136:	4811      	ldr	r0, [pc, #68]	@ (800a17c <strtok+0x64>)
 800a138:	215b      	movs	r1, #91	@ 0x5b
 800a13a:	f000 f8bd 	bl	800a2b8 <__assert_func>
 800a13e:	e9c0 4400 	strd	r4, r4, [r0]
 800a142:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a146:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a14a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a14e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a152:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a156:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a15a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a15e:	6184      	str	r4, [r0, #24]
 800a160:	7704      	strb	r4, [r0, #28]
 800a162:	6244      	str	r4, [r0, #36]	@ 0x24
 800a164:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a166:	4631      	mov	r1, r6
 800a168:	4628      	mov	r0, r5
 800a16a:	2301      	movs	r3, #1
 800a16c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a170:	f000 b806 	b.w	800a180 <__strtok_r>
 800a174:	200000dc 	.word	0x200000dc
 800a178:	0800b5d9 	.word	0x0800b5d9
 800a17c:	0800b5f0 	.word	0x0800b5f0

0800a180 <__strtok_r>:
 800a180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a182:	4604      	mov	r4, r0
 800a184:	b908      	cbnz	r0, 800a18a <__strtok_r+0xa>
 800a186:	6814      	ldr	r4, [r2, #0]
 800a188:	b144      	cbz	r4, 800a19c <__strtok_r+0x1c>
 800a18a:	4620      	mov	r0, r4
 800a18c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a190:	460f      	mov	r7, r1
 800a192:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a196:	b91e      	cbnz	r6, 800a1a0 <__strtok_r+0x20>
 800a198:	b965      	cbnz	r5, 800a1b4 <__strtok_r+0x34>
 800a19a:	6015      	str	r5, [r2, #0]
 800a19c:	2000      	movs	r0, #0
 800a19e:	e005      	b.n	800a1ac <__strtok_r+0x2c>
 800a1a0:	42b5      	cmp	r5, r6
 800a1a2:	d1f6      	bne.n	800a192 <__strtok_r+0x12>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1f0      	bne.n	800a18a <__strtok_r+0xa>
 800a1a8:	6014      	str	r4, [r2, #0]
 800a1aa:	7003      	strb	r3, [r0, #0]
 800a1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1ae:	461c      	mov	r4, r3
 800a1b0:	e00c      	b.n	800a1cc <__strtok_r+0x4c>
 800a1b2:	b915      	cbnz	r5, 800a1ba <__strtok_r+0x3a>
 800a1b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1b8:	460e      	mov	r6, r1
 800a1ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a1be:	42ab      	cmp	r3, r5
 800a1c0:	d1f7      	bne.n	800a1b2 <__strtok_r+0x32>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0f3      	beq.n	800a1ae <__strtok_r+0x2e>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a1cc:	6014      	str	r4, [r2, #0]
 800a1ce:	e7ed      	b.n	800a1ac <__strtok_r+0x2c>

0800a1d0 <_close_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d06      	ldr	r5, [pc, #24]	@ (800a1ec <_close_r+0x1c>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	f7f6 ff6c 	bl	80010b8 <_close>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_close_r+0x1a>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_close_r+0x1a>
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	200007ac 	.word	0x200007ac

0800a1f0 <_lseek_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4d07      	ldr	r5, [pc, #28]	@ (800a210 <_lseek_r+0x20>)
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	602a      	str	r2, [r5, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	f7f6 ff81 	bl	8001106 <_lseek>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_lseek_r+0x1e>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_lseek_r+0x1e>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	200007ac 	.word	0x200007ac

0800a214 <_read_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d07      	ldr	r5, [pc, #28]	@ (800a234 <_read_r+0x20>)
 800a218:	4604      	mov	r4, r0
 800a21a:	4608      	mov	r0, r1
 800a21c:	4611      	mov	r1, r2
 800a21e:	2200      	movs	r2, #0
 800a220:	602a      	str	r2, [r5, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	f7f6 ff0f 	bl	8001046 <_read>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_read_r+0x1e>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_read_r+0x1e>
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	200007ac 	.word	0x200007ac

0800a238 <_write_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d07      	ldr	r5, [pc, #28]	@ (800a258 <_write_r+0x20>)
 800a23c:	4604      	mov	r4, r0
 800a23e:	4608      	mov	r0, r1
 800a240:	4611      	mov	r1, r2
 800a242:	2200      	movs	r2, #0
 800a244:	602a      	str	r2, [r5, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	f7f6 ff1a 	bl	8001080 <_write>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_write_r+0x1e>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_write_r+0x1e>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	200007ac 	.word	0x200007ac

0800a25c <__errno>:
 800a25c:	4b01      	ldr	r3, [pc, #4]	@ (800a264 <__errno+0x8>)
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	200000dc 	.word	0x200000dc

0800a268 <__libc_init_array>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	4d0d      	ldr	r5, [pc, #52]	@ (800a2a0 <__libc_init_array+0x38>)
 800a26c:	4c0d      	ldr	r4, [pc, #52]	@ (800a2a4 <__libc_init_array+0x3c>)
 800a26e:	1b64      	subs	r4, r4, r5
 800a270:	10a4      	asrs	r4, r4, #2
 800a272:	2600      	movs	r6, #0
 800a274:	42a6      	cmp	r6, r4
 800a276:	d109      	bne.n	800a28c <__libc_init_array+0x24>
 800a278:	4d0b      	ldr	r5, [pc, #44]	@ (800a2a8 <__libc_init_array+0x40>)
 800a27a:	4c0c      	ldr	r4, [pc, #48]	@ (800a2ac <__libc_init_array+0x44>)
 800a27c:	f000 fff0 	bl	800b260 <_init>
 800a280:	1b64      	subs	r4, r4, r5
 800a282:	10a4      	asrs	r4, r4, #2
 800a284:	2600      	movs	r6, #0
 800a286:	42a6      	cmp	r6, r4
 800a288:	d105      	bne.n	800a296 <__libc_init_array+0x2e>
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a290:	4798      	blx	r3
 800a292:	3601      	adds	r6, #1
 800a294:	e7ee      	b.n	800a274 <__libc_init_array+0xc>
 800a296:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29a:	4798      	blx	r3
 800a29c:	3601      	adds	r6, #1
 800a29e:	e7f2      	b.n	800a286 <__libc_init_array+0x1e>
 800a2a0:	0800b6c4 	.word	0x0800b6c4
 800a2a4:	0800b6c4 	.word	0x0800b6c4
 800a2a8:	0800b6c4 	.word	0x0800b6c4
 800a2ac:	0800b6c8 	.word	0x0800b6c8

0800a2b0 <__retarget_lock_init_recursive>:
 800a2b0:	4770      	bx	lr

0800a2b2 <__retarget_lock_acquire_recursive>:
 800a2b2:	4770      	bx	lr

0800a2b4 <__retarget_lock_release_recursive>:
 800a2b4:	4770      	bx	lr
	...

0800a2b8 <__assert_func>:
 800a2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ba:	4614      	mov	r4, r2
 800a2bc:	461a      	mov	r2, r3
 800a2be:	4b09      	ldr	r3, [pc, #36]	@ (800a2e4 <__assert_func+0x2c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	68d8      	ldr	r0, [r3, #12]
 800a2c6:	b954      	cbnz	r4, 800a2de <__assert_func+0x26>
 800a2c8:	4b07      	ldr	r3, [pc, #28]	@ (800a2e8 <__assert_func+0x30>)
 800a2ca:	461c      	mov	r4, r3
 800a2cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2d0:	9100      	str	r1, [sp, #0]
 800a2d2:	462b      	mov	r3, r5
 800a2d4:	4905      	ldr	r1, [pc, #20]	@ (800a2ec <__assert_func+0x34>)
 800a2d6:	f000 fc9f 	bl	800ac18 <fiprintf>
 800a2da:	f000 fce7 	bl	800acac <abort>
 800a2de:	4b04      	ldr	r3, [pc, #16]	@ (800a2f0 <__assert_func+0x38>)
 800a2e0:	e7f4      	b.n	800a2cc <__assert_func+0x14>
 800a2e2:	bf00      	nop
 800a2e4:	200000dc 	.word	0x200000dc
 800a2e8:	0800b685 	.word	0x0800b685
 800a2ec:	0800b657 	.word	0x0800b657
 800a2f0:	0800b64a 	.word	0x0800b64a

0800a2f4 <_free_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	2900      	cmp	r1, #0
 800a2fa:	d041      	beq.n	800a380 <_free_r+0x8c>
 800a2fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a300:	1f0c      	subs	r4, r1, #4
 800a302:	2b00      	cmp	r3, #0
 800a304:	bfb8      	it	lt
 800a306:	18e4      	addlt	r4, r4, r3
 800a308:	f000 f8e8 	bl	800a4dc <__malloc_lock>
 800a30c:	4a1d      	ldr	r2, [pc, #116]	@ (800a384 <_free_r+0x90>)
 800a30e:	6813      	ldr	r3, [r2, #0]
 800a310:	b933      	cbnz	r3, 800a320 <_free_r+0x2c>
 800a312:	6063      	str	r3, [r4, #4]
 800a314:	6014      	str	r4, [r2, #0]
 800a316:	4628      	mov	r0, r5
 800a318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a31c:	f000 b8e4 	b.w	800a4e8 <__malloc_unlock>
 800a320:	42a3      	cmp	r3, r4
 800a322:	d908      	bls.n	800a336 <_free_r+0x42>
 800a324:	6820      	ldr	r0, [r4, #0]
 800a326:	1821      	adds	r1, r4, r0
 800a328:	428b      	cmp	r3, r1
 800a32a:	bf01      	itttt	eq
 800a32c:	6819      	ldreq	r1, [r3, #0]
 800a32e:	685b      	ldreq	r3, [r3, #4]
 800a330:	1809      	addeq	r1, r1, r0
 800a332:	6021      	streq	r1, [r4, #0]
 800a334:	e7ed      	b.n	800a312 <_free_r+0x1e>
 800a336:	461a      	mov	r2, r3
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	b10b      	cbz	r3, 800a340 <_free_r+0x4c>
 800a33c:	42a3      	cmp	r3, r4
 800a33e:	d9fa      	bls.n	800a336 <_free_r+0x42>
 800a340:	6811      	ldr	r1, [r2, #0]
 800a342:	1850      	adds	r0, r2, r1
 800a344:	42a0      	cmp	r0, r4
 800a346:	d10b      	bne.n	800a360 <_free_r+0x6c>
 800a348:	6820      	ldr	r0, [r4, #0]
 800a34a:	4401      	add	r1, r0
 800a34c:	1850      	adds	r0, r2, r1
 800a34e:	4283      	cmp	r3, r0
 800a350:	6011      	str	r1, [r2, #0]
 800a352:	d1e0      	bne.n	800a316 <_free_r+0x22>
 800a354:	6818      	ldr	r0, [r3, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	6053      	str	r3, [r2, #4]
 800a35a:	4408      	add	r0, r1
 800a35c:	6010      	str	r0, [r2, #0]
 800a35e:	e7da      	b.n	800a316 <_free_r+0x22>
 800a360:	d902      	bls.n	800a368 <_free_r+0x74>
 800a362:	230c      	movs	r3, #12
 800a364:	602b      	str	r3, [r5, #0]
 800a366:	e7d6      	b.n	800a316 <_free_r+0x22>
 800a368:	6820      	ldr	r0, [r4, #0]
 800a36a:	1821      	adds	r1, r4, r0
 800a36c:	428b      	cmp	r3, r1
 800a36e:	bf04      	itt	eq
 800a370:	6819      	ldreq	r1, [r3, #0]
 800a372:	685b      	ldreq	r3, [r3, #4]
 800a374:	6063      	str	r3, [r4, #4]
 800a376:	bf04      	itt	eq
 800a378:	1809      	addeq	r1, r1, r0
 800a37a:	6021      	streq	r1, [r4, #0]
 800a37c:	6054      	str	r4, [r2, #4]
 800a37e:	e7ca      	b.n	800a316 <_free_r+0x22>
 800a380:	bd38      	pop	{r3, r4, r5, pc}
 800a382:	bf00      	nop
 800a384:	200007b8 	.word	0x200007b8

0800a388 <malloc>:
 800a388:	4b02      	ldr	r3, [pc, #8]	@ (800a394 <malloc+0xc>)
 800a38a:	4601      	mov	r1, r0
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	f000 b825 	b.w	800a3dc <_malloc_r>
 800a392:	bf00      	nop
 800a394:	200000dc 	.word	0x200000dc

0800a398 <sbrk_aligned>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	4e0f      	ldr	r6, [pc, #60]	@ (800a3d8 <sbrk_aligned+0x40>)
 800a39c:	460c      	mov	r4, r1
 800a39e:	6831      	ldr	r1, [r6, #0]
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	b911      	cbnz	r1, 800a3aa <sbrk_aligned+0x12>
 800a3a4:	f000 fc64 	bl	800ac70 <_sbrk_r>
 800a3a8:	6030      	str	r0, [r6, #0]
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 fc5f 	bl	800ac70 <_sbrk_r>
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	d103      	bne.n	800a3be <sbrk_aligned+0x26>
 800a3b6:	f04f 34ff 	mov.w	r4, #4294967295
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	1cc4      	adds	r4, r0, #3
 800a3c0:	f024 0403 	bic.w	r4, r4, #3
 800a3c4:	42a0      	cmp	r0, r4
 800a3c6:	d0f8      	beq.n	800a3ba <sbrk_aligned+0x22>
 800a3c8:	1a21      	subs	r1, r4, r0
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 fc50 	bl	800ac70 <_sbrk_r>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d1f2      	bne.n	800a3ba <sbrk_aligned+0x22>
 800a3d4:	e7ef      	b.n	800a3b6 <sbrk_aligned+0x1e>
 800a3d6:	bf00      	nop
 800a3d8:	200007b4 	.word	0x200007b4

0800a3dc <_malloc_r>:
 800a3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e0:	1ccd      	adds	r5, r1, #3
 800a3e2:	f025 0503 	bic.w	r5, r5, #3
 800a3e6:	3508      	adds	r5, #8
 800a3e8:	2d0c      	cmp	r5, #12
 800a3ea:	bf38      	it	cc
 800a3ec:	250c      	movcc	r5, #12
 800a3ee:	2d00      	cmp	r5, #0
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	db01      	blt.n	800a3f8 <_malloc_r+0x1c>
 800a3f4:	42a9      	cmp	r1, r5
 800a3f6:	d904      	bls.n	800a402 <_malloc_r+0x26>
 800a3f8:	230c      	movs	r3, #12
 800a3fa:	6033      	str	r3, [r6, #0]
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a402:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4d8 <_malloc_r+0xfc>
 800a406:	f000 f869 	bl	800a4dc <__malloc_lock>
 800a40a:	f8d8 3000 	ldr.w	r3, [r8]
 800a40e:	461c      	mov	r4, r3
 800a410:	bb44      	cbnz	r4, 800a464 <_malloc_r+0x88>
 800a412:	4629      	mov	r1, r5
 800a414:	4630      	mov	r0, r6
 800a416:	f7ff ffbf 	bl	800a398 <sbrk_aligned>
 800a41a:	1c43      	adds	r3, r0, #1
 800a41c:	4604      	mov	r4, r0
 800a41e:	d158      	bne.n	800a4d2 <_malloc_r+0xf6>
 800a420:	f8d8 4000 	ldr.w	r4, [r8]
 800a424:	4627      	mov	r7, r4
 800a426:	2f00      	cmp	r7, #0
 800a428:	d143      	bne.n	800a4b2 <_malloc_r+0xd6>
 800a42a:	2c00      	cmp	r4, #0
 800a42c:	d04b      	beq.n	800a4c6 <_malloc_r+0xea>
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	4639      	mov	r1, r7
 800a432:	4630      	mov	r0, r6
 800a434:	eb04 0903 	add.w	r9, r4, r3
 800a438:	f000 fc1a 	bl	800ac70 <_sbrk_r>
 800a43c:	4581      	cmp	r9, r0
 800a43e:	d142      	bne.n	800a4c6 <_malloc_r+0xea>
 800a440:	6821      	ldr	r1, [r4, #0]
 800a442:	1a6d      	subs	r5, r5, r1
 800a444:	4629      	mov	r1, r5
 800a446:	4630      	mov	r0, r6
 800a448:	f7ff ffa6 	bl	800a398 <sbrk_aligned>
 800a44c:	3001      	adds	r0, #1
 800a44e:	d03a      	beq.n	800a4c6 <_malloc_r+0xea>
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	442b      	add	r3, r5
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	f8d8 3000 	ldr.w	r3, [r8]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	bb62      	cbnz	r2, 800a4b8 <_malloc_r+0xdc>
 800a45e:	f8c8 7000 	str.w	r7, [r8]
 800a462:	e00f      	b.n	800a484 <_malloc_r+0xa8>
 800a464:	6822      	ldr	r2, [r4, #0]
 800a466:	1b52      	subs	r2, r2, r5
 800a468:	d420      	bmi.n	800a4ac <_malloc_r+0xd0>
 800a46a:	2a0b      	cmp	r2, #11
 800a46c:	d917      	bls.n	800a49e <_malloc_r+0xc2>
 800a46e:	1961      	adds	r1, r4, r5
 800a470:	42a3      	cmp	r3, r4
 800a472:	6025      	str	r5, [r4, #0]
 800a474:	bf18      	it	ne
 800a476:	6059      	strne	r1, [r3, #4]
 800a478:	6863      	ldr	r3, [r4, #4]
 800a47a:	bf08      	it	eq
 800a47c:	f8c8 1000 	streq.w	r1, [r8]
 800a480:	5162      	str	r2, [r4, r5]
 800a482:	604b      	str	r3, [r1, #4]
 800a484:	4630      	mov	r0, r6
 800a486:	f000 f82f 	bl	800a4e8 <__malloc_unlock>
 800a48a:	f104 000b 	add.w	r0, r4, #11
 800a48e:	1d23      	adds	r3, r4, #4
 800a490:	f020 0007 	bic.w	r0, r0, #7
 800a494:	1ac2      	subs	r2, r0, r3
 800a496:	bf1c      	itt	ne
 800a498:	1a1b      	subne	r3, r3, r0
 800a49a:	50a3      	strne	r3, [r4, r2]
 800a49c:	e7af      	b.n	800a3fe <_malloc_r+0x22>
 800a49e:	6862      	ldr	r2, [r4, #4]
 800a4a0:	42a3      	cmp	r3, r4
 800a4a2:	bf0c      	ite	eq
 800a4a4:	f8c8 2000 	streq.w	r2, [r8]
 800a4a8:	605a      	strne	r2, [r3, #4]
 800a4aa:	e7eb      	b.n	800a484 <_malloc_r+0xa8>
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	6864      	ldr	r4, [r4, #4]
 800a4b0:	e7ae      	b.n	800a410 <_malloc_r+0x34>
 800a4b2:	463c      	mov	r4, r7
 800a4b4:	687f      	ldr	r7, [r7, #4]
 800a4b6:	e7b6      	b.n	800a426 <_malloc_r+0x4a>
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	d1fb      	bne.n	800a4b8 <_malloc_r+0xdc>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	6053      	str	r3, [r2, #4]
 800a4c4:	e7de      	b.n	800a484 <_malloc_r+0xa8>
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	6033      	str	r3, [r6, #0]
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f000 f80c 	bl	800a4e8 <__malloc_unlock>
 800a4d0:	e794      	b.n	800a3fc <_malloc_r+0x20>
 800a4d2:	6005      	str	r5, [r0, #0]
 800a4d4:	e7d6      	b.n	800a484 <_malloc_r+0xa8>
 800a4d6:	bf00      	nop
 800a4d8:	200007b8 	.word	0x200007b8

0800a4dc <__malloc_lock>:
 800a4dc:	4801      	ldr	r0, [pc, #4]	@ (800a4e4 <__malloc_lock+0x8>)
 800a4de:	f7ff bee8 	b.w	800a2b2 <__retarget_lock_acquire_recursive>
 800a4e2:	bf00      	nop
 800a4e4:	200007b0 	.word	0x200007b0

0800a4e8 <__malloc_unlock>:
 800a4e8:	4801      	ldr	r0, [pc, #4]	@ (800a4f0 <__malloc_unlock+0x8>)
 800a4ea:	f7ff bee3 	b.w	800a2b4 <__retarget_lock_release_recursive>
 800a4ee:	bf00      	nop
 800a4f0:	200007b0 	.word	0x200007b0

0800a4f4 <__ssputs_r>:
 800a4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f8:	688e      	ldr	r6, [r1, #8]
 800a4fa:	461f      	mov	r7, r3
 800a4fc:	42be      	cmp	r6, r7
 800a4fe:	680b      	ldr	r3, [r1, #0]
 800a500:	4682      	mov	sl, r0
 800a502:	460c      	mov	r4, r1
 800a504:	4690      	mov	r8, r2
 800a506:	d82d      	bhi.n	800a564 <__ssputs_r+0x70>
 800a508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a50c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a510:	d026      	beq.n	800a560 <__ssputs_r+0x6c>
 800a512:	6965      	ldr	r5, [r4, #20]
 800a514:	6909      	ldr	r1, [r1, #16]
 800a516:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a51a:	eba3 0901 	sub.w	r9, r3, r1
 800a51e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a522:	1c7b      	adds	r3, r7, #1
 800a524:	444b      	add	r3, r9
 800a526:	106d      	asrs	r5, r5, #1
 800a528:	429d      	cmp	r5, r3
 800a52a:	bf38      	it	cc
 800a52c:	461d      	movcc	r5, r3
 800a52e:	0553      	lsls	r3, r2, #21
 800a530:	d527      	bpl.n	800a582 <__ssputs_r+0x8e>
 800a532:	4629      	mov	r1, r5
 800a534:	f7ff ff52 	bl	800a3dc <_malloc_r>
 800a538:	4606      	mov	r6, r0
 800a53a:	b360      	cbz	r0, 800a596 <__ssputs_r+0xa2>
 800a53c:	6921      	ldr	r1, [r4, #16]
 800a53e:	464a      	mov	r2, r9
 800a540:	f000 fba6 	bl	800ac90 <memcpy>
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a54a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a54e:	81a3      	strh	r3, [r4, #12]
 800a550:	6126      	str	r6, [r4, #16]
 800a552:	6165      	str	r5, [r4, #20]
 800a554:	444e      	add	r6, r9
 800a556:	eba5 0509 	sub.w	r5, r5, r9
 800a55a:	6026      	str	r6, [r4, #0]
 800a55c:	60a5      	str	r5, [r4, #8]
 800a55e:	463e      	mov	r6, r7
 800a560:	42be      	cmp	r6, r7
 800a562:	d900      	bls.n	800a566 <__ssputs_r+0x72>
 800a564:	463e      	mov	r6, r7
 800a566:	6820      	ldr	r0, [r4, #0]
 800a568:	4632      	mov	r2, r6
 800a56a:	4641      	mov	r1, r8
 800a56c:	f000 fb66 	bl	800ac3c <memmove>
 800a570:	68a3      	ldr	r3, [r4, #8]
 800a572:	1b9b      	subs	r3, r3, r6
 800a574:	60a3      	str	r3, [r4, #8]
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	4433      	add	r3, r6
 800a57a:	6023      	str	r3, [r4, #0]
 800a57c:	2000      	movs	r0, #0
 800a57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a582:	462a      	mov	r2, r5
 800a584:	f000 fb99 	bl	800acba <_realloc_r>
 800a588:	4606      	mov	r6, r0
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d1e0      	bne.n	800a550 <__ssputs_r+0x5c>
 800a58e:	6921      	ldr	r1, [r4, #16]
 800a590:	4650      	mov	r0, sl
 800a592:	f7ff feaf 	bl	800a2f4 <_free_r>
 800a596:	230c      	movs	r3, #12
 800a598:	f8ca 3000 	str.w	r3, [sl]
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a8:	e7e9      	b.n	800a57e <__ssputs_r+0x8a>
	...

0800a5ac <_svfiprintf_r>:
 800a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b0:	4698      	mov	r8, r3
 800a5b2:	898b      	ldrh	r3, [r1, #12]
 800a5b4:	061b      	lsls	r3, r3, #24
 800a5b6:	b09d      	sub	sp, #116	@ 0x74
 800a5b8:	4607      	mov	r7, r0
 800a5ba:	460d      	mov	r5, r1
 800a5bc:	4614      	mov	r4, r2
 800a5be:	d510      	bpl.n	800a5e2 <_svfiprintf_r+0x36>
 800a5c0:	690b      	ldr	r3, [r1, #16]
 800a5c2:	b973      	cbnz	r3, 800a5e2 <_svfiprintf_r+0x36>
 800a5c4:	2140      	movs	r1, #64	@ 0x40
 800a5c6:	f7ff ff09 	bl	800a3dc <_malloc_r>
 800a5ca:	6028      	str	r0, [r5, #0]
 800a5cc:	6128      	str	r0, [r5, #16]
 800a5ce:	b930      	cbnz	r0, 800a5de <_svfiprintf_r+0x32>
 800a5d0:	230c      	movs	r3, #12
 800a5d2:	603b      	str	r3, [r7, #0]
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d8:	b01d      	add	sp, #116	@ 0x74
 800a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5de:	2340      	movs	r3, #64	@ 0x40
 800a5e0:	616b      	str	r3, [r5, #20]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5e6:	2320      	movs	r3, #32
 800a5e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5f0:	2330      	movs	r3, #48	@ 0x30
 800a5f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a790 <_svfiprintf_r+0x1e4>
 800a5f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5fa:	f04f 0901 	mov.w	r9, #1
 800a5fe:	4623      	mov	r3, r4
 800a600:	469a      	mov	sl, r3
 800a602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a606:	b10a      	cbz	r2, 800a60c <_svfiprintf_r+0x60>
 800a608:	2a25      	cmp	r2, #37	@ 0x25
 800a60a:	d1f9      	bne.n	800a600 <_svfiprintf_r+0x54>
 800a60c:	ebba 0b04 	subs.w	fp, sl, r4
 800a610:	d00b      	beq.n	800a62a <_svfiprintf_r+0x7e>
 800a612:	465b      	mov	r3, fp
 800a614:	4622      	mov	r2, r4
 800a616:	4629      	mov	r1, r5
 800a618:	4638      	mov	r0, r7
 800a61a:	f7ff ff6b 	bl	800a4f4 <__ssputs_r>
 800a61e:	3001      	adds	r0, #1
 800a620:	f000 80a7 	beq.w	800a772 <_svfiprintf_r+0x1c6>
 800a624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a626:	445a      	add	r2, fp
 800a628:	9209      	str	r2, [sp, #36]	@ 0x24
 800a62a:	f89a 3000 	ldrb.w	r3, [sl]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f000 809f 	beq.w	800a772 <_svfiprintf_r+0x1c6>
 800a634:	2300      	movs	r3, #0
 800a636:	f04f 32ff 	mov.w	r2, #4294967295
 800a63a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a63e:	f10a 0a01 	add.w	sl, sl, #1
 800a642:	9304      	str	r3, [sp, #16]
 800a644:	9307      	str	r3, [sp, #28]
 800a646:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a64a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a64c:	4654      	mov	r4, sl
 800a64e:	2205      	movs	r2, #5
 800a650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a654:	484e      	ldr	r0, [pc, #312]	@ (800a790 <_svfiprintf_r+0x1e4>)
 800a656:	f7f5 fdfb 	bl	8000250 <memchr>
 800a65a:	9a04      	ldr	r2, [sp, #16]
 800a65c:	b9d8      	cbnz	r0, 800a696 <_svfiprintf_r+0xea>
 800a65e:	06d0      	lsls	r0, r2, #27
 800a660:	bf44      	itt	mi
 800a662:	2320      	movmi	r3, #32
 800a664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a668:	0711      	lsls	r1, r2, #28
 800a66a:	bf44      	itt	mi
 800a66c:	232b      	movmi	r3, #43	@ 0x2b
 800a66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a672:	f89a 3000 	ldrb.w	r3, [sl]
 800a676:	2b2a      	cmp	r3, #42	@ 0x2a
 800a678:	d015      	beq.n	800a6a6 <_svfiprintf_r+0xfa>
 800a67a:	9a07      	ldr	r2, [sp, #28]
 800a67c:	4654      	mov	r4, sl
 800a67e:	2000      	movs	r0, #0
 800a680:	f04f 0c0a 	mov.w	ip, #10
 800a684:	4621      	mov	r1, r4
 800a686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a68a:	3b30      	subs	r3, #48	@ 0x30
 800a68c:	2b09      	cmp	r3, #9
 800a68e:	d94b      	bls.n	800a728 <_svfiprintf_r+0x17c>
 800a690:	b1b0      	cbz	r0, 800a6c0 <_svfiprintf_r+0x114>
 800a692:	9207      	str	r2, [sp, #28]
 800a694:	e014      	b.n	800a6c0 <_svfiprintf_r+0x114>
 800a696:	eba0 0308 	sub.w	r3, r0, r8
 800a69a:	fa09 f303 	lsl.w	r3, r9, r3
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	46a2      	mov	sl, r4
 800a6a4:	e7d2      	b.n	800a64c <_svfiprintf_r+0xa0>
 800a6a6:	9b03      	ldr	r3, [sp, #12]
 800a6a8:	1d19      	adds	r1, r3, #4
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	9103      	str	r1, [sp, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	bfbb      	ittet	lt
 800a6b2:	425b      	neglt	r3, r3
 800a6b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6b8:	9307      	strge	r3, [sp, #28]
 800a6ba:	9307      	strlt	r3, [sp, #28]
 800a6bc:	bfb8      	it	lt
 800a6be:	9204      	strlt	r2, [sp, #16]
 800a6c0:	7823      	ldrb	r3, [r4, #0]
 800a6c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6c4:	d10a      	bne.n	800a6dc <_svfiprintf_r+0x130>
 800a6c6:	7863      	ldrb	r3, [r4, #1]
 800a6c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6ca:	d132      	bne.n	800a732 <_svfiprintf_r+0x186>
 800a6cc:	9b03      	ldr	r3, [sp, #12]
 800a6ce:	1d1a      	adds	r2, r3, #4
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	9203      	str	r2, [sp, #12]
 800a6d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6d8:	3402      	adds	r4, #2
 800a6da:	9305      	str	r3, [sp, #20]
 800a6dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a7a0 <_svfiprintf_r+0x1f4>
 800a6e0:	7821      	ldrb	r1, [r4, #0]
 800a6e2:	2203      	movs	r2, #3
 800a6e4:	4650      	mov	r0, sl
 800a6e6:	f7f5 fdb3 	bl	8000250 <memchr>
 800a6ea:	b138      	cbz	r0, 800a6fc <_svfiprintf_r+0x150>
 800a6ec:	9b04      	ldr	r3, [sp, #16]
 800a6ee:	eba0 000a 	sub.w	r0, r0, sl
 800a6f2:	2240      	movs	r2, #64	@ 0x40
 800a6f4:	4082      	lsls	r2, r0
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	3401      	adds	r4, #1
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a700:	4824      	ldr	r0, [pc, #144]	@ (800a794 <_svfiprintf_r+0x1e8>)
 800a702:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a706:	2206      	movs	r2, #6
 800a708:	f7f5 fda2 	bl	8000250 <memchr>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d036      	beq.n	800a77e <_svfiprintf_r+0x1d2>
 800a710:	4b21      	ldr	r3, [pc, #132]	@ (800a798 <_svfiprintf_r+0x1ec>)
 800a712:	bb1b      	cbnz	r3, 800a75c <_svfiprintf_r+0x1b0>
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	3307      	adds	r3, #7
 800a718:	f023 0307 	bic.w	r3, r3, #7
 800a71c:	3308      	adds	r3, #8
 800a71e:	9303      	str	r3, [sp, #12]
 800a720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a722:	4433      	add	r3, r6
 800a724:	9309      	str	r3, [sp, #36]	@ 0x24
 800a726:	e76a      	b.n	800a5fe <_svfiprintf_r+0x52>
 800a728:	fb0c 3202 	mla	r2, ip, r2, r3
 800a72c:	460c      	mov	r4, r1
 800a72e:	2001      	movs	r0, #1
 800a730:	e7a8      	b.n	800a684 <_svfiprintf_r+0xd8>
 800a732:	2300      	movs	r3, #0
 800a734:	3401      	adds	r4, #1
 800a736:	9305      	str	r3, [sp, #20]
 800a738:	4619      	mov	r1, r3
 800a73a:	f04f 0c0a 	mov.w	ip, #10
 800a73e:	4620      	mov	r0, r4
 800a740:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a744:	3a30      	subs	r2, #48	@ 0x30
 800a746:	2a09      	cmp	r2, #9
 800a748:	d903      	bls.n	800a752 <_svfiprintf_r+0x1a6>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d0c6      	beq.n	800a6dc <_svfiprintf_r+0x130>
 800a74e:	9105      	str	r1, [sp, #20]
 800a750:	e7c4      	b.n	800a6dc <_svfiprintf_r+0x130>
 800a752:	fb0c 2101 	mla	r1, ip, r1, r2
 800a756:	4604      	mov	r4, r0
 800a758:	2301      	movs	r3, #1
 800a75a:	e7f0      	b.n	800a73e <_svfiprintf_r+0x192>
 800a75c:	ab03      	add	r3, sp, #12
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	462a      	mov	r2, r5
 800a762:	4b0e      	ldr	r3, [pc, #56]	@ (800a79c <_svfiprintf_r+0x1f0>)
 800a764:	a904      	add	r1, sp, #16
 800a766:	4638      	mov	r0, r7
 800a768:	f3af 8000 	nop.w
 800a76c:	1c42      	adds	r2, r0, #1
 800a76e:	4606      	mov	r6, r0
 800a770:	d1d6      	bne.n	800a720 <_svfiprintf_r+0x174>
 800a772:	89ab      	ldrh	r3, [r5, #12]
 800a774:	065b      	lsls	r3, r3, #25
 800a776:	f53f af2d 	bmi.w	800a5d4 <_svfiprintf_r+0x28>
 800a77a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a77c:	e72c      	b.n	800a5d8 <_svfiprintf_r+0x2c>
 800a77e:	ab03      	add	r3, sp, #12
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	462a      	mov	r2, r5
 800a784:	4b05      	ldr	r3, [pc, #20]	@ (800a79c <_svfiprintf_r+0x1f0>)
 800a786:	a904      	add	r1, sp, #16
 800a788:	4638      	mov	r0, r7
 800a78a:	f000 f879 	bl	800a880 <_printf_i>
 800a78e:	e7ed      	b.n	800a76c <_svfiprintf_r+0x1c0>
 800a790:	0800b686 	.word	0x0800b686
 800a794:	0800b690 	.word	0x0800b690
 800a798:	00000000 	.word	0x00000000
 800a79c:	0800a4f5 	.word	0x0800a4f5
 800a7a0:	0800b68c 	.word	0x0800b68c

0800a7a4 <_printf_common>:
 800a7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a8:	4616      	mov	r6, r2
 800a7aa:	4698      	mov	r8, r3
 800a7ac:	688a      	ldr	r2, [r1, #8]
 800a7ae:	690b      	ldr	r3, [r1, #16]
 800a7b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	bfb8      	it	lt
 800a7b8:	4613      	movlt	r3, r2
 800a7ba:	6033      	str	r3, [r6, #0]
 800a7bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7c0:	4607      	mov	r7, r0
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	b10a      	cbz	r2, 800a7ca <_printf_common+0x26>
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	6033      	str	r3, [r6, #0]
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	0699      	lsls	r1, r3, #26
 800a7ce:	bf42      	ittt	mi
 800a7d0:	6833      	ldrmi	r3, [r6, #0]
 800a7d2:	3302      	addmi	r3, #2
 800a7d4:	6033      	strmi	r3, [r6, #0]
 800a7d6:	6825      	ldr	r5, [r4, #0]
 800a7d8:	f015 0506 	ands.w	r5, r5, #6
 800a7dc:	d106      	bne.n	800a7ec <_printf_common+0x48>
 800a7de:	f104 0a19 	add.w	sl, r4, #25
 800a7e2:	68e3      	ldr	r3, [r4, #12]
 800a7e4:	6832      	ldr	r2, [r6, #0]
 800a7e6:	1a9b      	subs	r3, r3, r2
 800a7e8:	42ab      	cmp	r3, r5
 800a7ea:	dc26      	bgt.n	800a83a <_printf_common+0x96>
 800a7ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a7f0:	6822      	ldr	r2, [r4, #0]
 800a7f2:	3b00      	subs	r3, #0
 800a7f4:	bf18      	it	ne
 800a7f6:	2301      	movne	r3, #1
 800a7f8:	0692      	lsls	r2, r2, #26
 800a7fa:	d42b      	bmi.n	800a854 <_printf_common+0xb0>
 800a7fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a800:	4641      	mov	r1, r8
 800a802:	4638      	mov	r0, r7
 800a804:	47c8      	blx	r9
 800a806:	3001      	adds	r0, #1
 800a808:	d01e      	beq.n	800a848 <_printf_common+0xa4>
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	6922      	ldr	r2, [r4, #16]
 800a80e:	f003 0306 	and.w	r3, r3, #6
 800a812:	2b04      	cmp	r3, #4
 800a814:	bf02      	ittt	eq
 800a816:	68e5      	ldreq	r5, [r4, #12]
 800a818:	6833      	ldreq	r3, [r6, #0]
 800a81a:	1aed      	subeq	r5, r5, r3
 800a81c:	68a3      	ldr	r3, [r4, #8]
 800a81e:	bf0c      	ite	eq
 800a820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a824:	2500      	movne	r5, #0
 800a826:	4293      	cmp	r3, r2
 800a828:	bfc4      	itt	gt
 800a82a:	1a9b      	subgt	r3, r3, r2
 800a82c:	18ed      	addgt	r5, r5, r3
 800a82e:	2600      	movs	r6, #0
 800a830:	341a      	adds	r4, #26
 800a832:	42b5      	cmp	r5, r6
 800a834:	d11a      	bne.n	800a86c <_printf_common+0xc8>
 800a836:	2000      	movs	r0, #0
 800a838:	e008      	b.n	800a84c <_printf_common+0xa8>
 800a83a:	2301      	movs	r3, #1
 800a83c:	4652      	mov	r2, sl
 800a83e:	4641      	mov	r1, r8
 800a840:	4638      	mov	r0, r7
 800a842:	47c8      	blx	r9
 800a844:	3001      	adds	r0, #1
 800a846:	d103      	bne.n	800a850 <_printf_common+0xac>
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
 800a84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a850:	3501      	adds	r5, #1
 800a852:	e7c6      	b.n	800a7e2 <_printf_common+0x3e>
 800a854:	18e1      	adds	r1, r4, r3
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	2030      	movs	r0, #48	@ 0x30
 800a85a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a85e:	4422      	add	r2, r4
 800a860:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a864:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a868:	3302      	adds	r3, #2
 800a86a:	e7c7      	b.n	800a7fc <_printf_common+0x58>
 800a86c:	2301      	movs	r3, #1
 800a86e:	4622      	mov	r2, r4
 800a870:	4641      	mov	r1, r8
 800a872:	4638      	mov	r0, r7
 800a874:	47c8      	blx	r9
 800a876:	3001      	adds	r0, #1
 800a878:	d0e6      	beq.n	800a848 <_printf_common+0xa4>
 800a87a:	3601      	adds	r6, #1
 800a87c:	e7d9      	b.n	800a832 <_printf_common+0x8e>
	...

0800a880 <_printf_i>:
 800a880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a884:	7e0f      	ldrb	r7, [r1, #24]
 800a886:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a888:	2f78      	cmp	r7, #120	@ 0x78
 800a88a:	4691      	mov	r9, r2
 800a88c:	4680      	mov	r8, r0
 800a88e:	460c      	mov	r4, r1
 800a890:	469a      	mov	sl, r3
 800a892:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a896:	d807      	bhi.n	800a8a8 <_printf_i+0x28>
 800a898:	2f62      	cmp	r7, #98	@ 0x62
 800a89a:	d80a      	bhi.n	800a8b2 <_printf_i+0x32>
 800a89c:	2f00      	cmp	r7, #0
 800a89e:	f000 80d2 	beq.w	800aa46 <_printf_i+0x1c6>
 800a8a2:	2f58      	cmp	r7, #88	@ 0x58
 800a8a4:	f000 80b9 	beq.w	800aa1a <_printf_i+0x19a>
 800a8a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8b0:	e03a      	b.n	800a928 <_printf_i+0xa8>
 800a8b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8b6:	2b15      	cmp	r3, #21
 800a8b8:	d8f6      	bhi.n	800a8a8 <_printf_i+0x28>
 800a8ba:	a101      	add	r1, pc, #4	@ (adr r1, 800a8c0 <_printf_i+0x40>)
 800a8bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8c0:	0800a919 	.word	0x0800a919
 800a8c4:	0800a92d 	.word	0x0800a92d
 800a8c8:	0800a8a9 	.word	0x0800a8a9
 800a8cc:	0800a8a9 	.word	0x0800a8a9
 800a8d0:	0800a8a9 	.word	0x0800a8a9
 800a8d4:	0800a8a9 	.word	0x0800a8a9
 800a8d8:	0800a92d 	.word	0x0800a92d
 800a8dc:	0800a8a9 	.word	0x0800a8a9
 800a8e0:	0800a8a9 	.word	0x0800a8a9
 800a8e4:	0800a8a9 	.word	0x0800a8a9
 800a8e8:	0800a8a9 	.word	0x0800a8a9
 800a8ec:	0800aa2d 	.word	0x0800aa2d
 800a8f0:	0800a957 	.word	0x0800a957
 800a8f4:	0800a9e7 	.word	0x0800a9e7
 800a8f8:	0800a8a9 	.word	0x0800a8a9
 800a8fc:	0800a8a9 	.word	0x0800a8a9
 800a900:	0800aa4f 	.word	0x0800aa4f
 800a904:	0800a8a9 	.word	0x0800a8a9
 800a908:	0800a957 	.word	0x0800a957
 800a90c:	0800a8a9 	.word	0x0800a8a9
 800a910:	0800a8a9 	.word	0x0800a8a9
 800a914:	0800a9ef 	.word	0x0800a9ef
 800a918:	6833      	ldr	r3, [r6, #0]
 800a91a:	1d1a      	adds	r2, r3, #4
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	6032      	str	r2, [r6, #0]
 800a920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a924:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a928:	2301      	movs	r3, #1
 800a92a:	e09d      	b.n	800aa68 <_printf_i+0x1e8>
 800a92c:	6833      	ldr	r3, [r6, #0]
 800a92e:	6820      	ldr	r0, [r4, #0]
 800a930:	1d19      	adds	r1, r3, #4
 800a932:	6031      	str	r1, [r6, #0]
 800a934:	0606      	lsls	r6, r0, #24
 800a936:	d501      	bpl.n	800a93c <_printf_i+0xbc>
 800a938:	681d      	ldr	r5, [r3, #0]
 800a93a:	e003      	b.n	800a944 <_printf_i+0xc4>
 800a93c:	0645      	lsls	r5, r0, #25
 800a93e:	d5fb      	bpl.n	800a938 <_printf_i+0xb8>
 800a940:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a944:	2d00      	cmp	r5, #0
 800a946:	da03      	bge.n	800a950 <_printf_i+0xd0>
 800a948:	232d      	movs	r3, #45	@ 0x2d
 800a94a:	426d      	negs	r5, r5
 800a94c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a950:	4859      	ldr	r0, [pc, #356]	@ (800aab8 <_printf_i+0x238>)
 800a952:	230a      	movs	r3, #10
 800a954:	e011      	b.n	800a97a <_printf_i+0xfa>
 800a956:	6821      	ldr	r1, [r4, #0]
 800a958:	6833      	ldr	r3, [r6, #0]
 800a95a:	0608      	lsls	r0, r1, #24
 800a95c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a960:	d402      	bmi.n	800a968 <_printf_i+0xe8>
 800a962:	0649      	lsls	r1, r1, #25
 800a964:	bf48      	it	mi
 800a966:	b2ad      	uxthmi	r5, r5
 800a968:	2f6f      	cmp	r7, #111	@ 0x6f
 800a96a:	4853      	ldr	r0, [pc, #332]	@ (800aab8 <_printf_i+0x238>)
 800a96c:	6033      	str	r3, [r6, #0]
 800a96e:	bf14      	ite	ne
 800a970:	230a      	movne	r3, #10
 800a972:	2308      	moveq	r3, #8
 800a974:	2100      	movs	r1, #0
 800a976:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a97a:	6866      	ldr	r6, [r4, #4]
 800a97c:	60a6      	str	r6, [r4, #8]
 800a97e:	2e00      	cmp	r6, #0
 800a980:	bfa2      	ittt	ge
 800a982:	6821      	ldrge	r1, [r4, #0]
 800a984:	f021 0104 	bicge.w	r1, r1, #4
 800a988:	6021      	strge	r1, [r4, #0]
 800a98a:	b90d      	cbnz	r5, 800a990 <_printf_i+0x110>
 800a98c:	2e00      	cmp	r6, #0
 800a98e:	d04b      	beq.n	800aa28 <_printf_i+0x1a8>
 800a990:	4616      	mov	r6, r2
 800a992:	fbb5 f1f3 	udiv	r1, r5, r3
 800a996:	fb03 5711 	mls	r7, r3, r1, r5
 800a99a:	5dc7      	ldrb	r7, [r0, r7]
 800a99c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9a0:	462f      	mov	r7, r5
 800a9a2:	42bb      	cmp	r3, r7
 800a9a4:	460d      	mov	r5, r1
 800a9a6:	d9f4      	bls.n	800a992 <_printf_i+0x112>
 800a9a8:	2b08      	cmp	r3, #8
 800a9aa:	d10b      	bne.n	800a9c4 <_printf_i+0x144>
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	07df      	lsls	r7, r3, #31
 800a9b0:	d508      	bpl.n	800a9c4 <_printf_i+0x144>
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	6861      	ldr	r1, [r4, #4]
 800a9b6:	4299      	cmp	r1, r3
 800a9b8:	bfde      	ittt	le
 800a9ba:	2330      	movle	r3, #48	@ 0x30
 800a9bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9c4:	1b92      	subs	r2, r2, r6
 800a9c6:	6122      	str	r2, [r4, #16]
 800a9c8:	f8cd a000 	str.w	sl, [sp]
 800a9cc:	464b      	mov	r3, r9
 800a9ce:	aa03      	add	r2, sp, #12
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	f7ff fee6 	bl	800a7a4 <_printf_common>
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d14a      	bne.n	800aa72 <_printf_i+0x1f2>
 800a9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e0:	b004      	add	sp, #16
 800a9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	f043 0320 	orr.w	r3, r3, #32
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	4833      	ldr	r0, [pc, #204]	@ (800aabc <_printf_i+0x23c>)
 800a9f0:	2778      	movs	r7, #120	@ 0x78
 800a9f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	6831      	ldr	r1, [r6, #0]
 800a9fa:	061f      	lsls	r7, r3, #24
 800a9fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa00:	d402      	bmi.n	800aa08 <_printf_i+0x188>
 800aa02:	065f      	lsls	r7, r3, #25
 800aa04:	bf48      	it	mi
 800aa06:	b2ad      	uxthmi	r5, r5
 800aa08:	6031      	str	r1, [r6, #0]
 800aa0a:	07d9      	lsls	r1, r3, #31
 800aa0c:	bf44      	itt	mi
 800aa0e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa12:	6023      	strmi	r3, [r4, #0]
 800aa14:	b11d      	cbz	r5, 800aa1e <_printf_i+0x19e>
 800aa16:	2310      	movs	r3, #16
 800aa18:	e7ac      	b.n	800a974 <_printf_i+0xf4>
 800aa1a:	4827      	ldr	r0, [pc, #156]	@ (800aab8 <_printf_i+0x238>)
 800aa1c:	e7e9      	b.n	800a9f2 <_printf_i+0x172>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	f023 0320 	bic.w	r3, r3, #32
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	e7f6      	b.n	800aa16 <_printf_i+0x196>
 800aa28:	4616      	mov	r6, r2
 800aa2a:	e7bd      	b.n	800a9a8 <_printf_i+0x128>
 800aa2c:	6833      	ldr	r3, [r6, #0]
 800aa2e:	6825      	ldr	r5, [r4, #0]
 800aa30:	6961      	ldr	r1, [r4, #20]
 800aa32:	1d18      	adds	r0, r3, #4
 800aa34:	6030      	str	r0, [r6, #0]
 800aa36:	062e      	lsls	r6, r5, #24
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	d501      	bpl.n	800aa40 <_printf_i+0x1c0>
 800aa3c:	6019      	str	r1, [r3, #0]
 800aa3e:	e002      	b.n	800aa46 <_printf_i+0x1c6>
 800aa40:	0668      	lsls	r0, r5, #25
 800aa42:	d5fb      	bpl.n	800aa3c <_printf_i+0x1bc>
 800aa44:	8019      	strh	r1, [r3, #0]
 800aa46:	2300      	movs	r3, #0
 800aa48:	6123      	str	r3, [r4, #16]
 800aa4a:	4616      	mov	r6, r2
 800aa4c:	e7bc      	b.n	800a9c8 <_printf_i+0x148>
 800aa4e:	6833      	ldr	r3, [r6, #0]
 800aa50:	1d1a      	adds	r2, r3, #4
 800aa52:	6032      	str	r2, [r6, #0]
 800aa54:	681e      	ldr	r6, [r3, #0]
 800aa56:	6862      	ldr	r2, [r4, #4]
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f7f5 fbf8 	bl	8000250 <memchr>
 800aa60:	b108      	cbz	r0, 800aa66 <_printf_i+0x1e6>
 800aa62:	1b80      	subs	r0, r0, r6
 800aa64:	6060      	str	r0, [r4, #4]
 800aa66:	6863      	ldr	r3, [r4, #4]
 800aa68:	6123      	str	r3, [r4, #16]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa70:	e7aa      	b.n	800a9c8 <_printf_i+0x148>
 800aa72:	6923      	ldr	r3, [r4, #16]
 800aa74:	4632      	mov	r2, r6
 800aa76:	4649      	mov	r1, r9
 800aa78:	4640      	mov	r0, r8
 800aa7a:	47d0      	blx	sl
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d0ad      	beq.n	800a9dc <_printf_i+0x15c>
 800aa80:	6823      	ldr	r3, [r4, #0]
 800aa82:	079b      	lsls	r3, r3, #30
 800aa84:	d413      	bmi.n	800aaae <_printf_i+0x22e>
 800aa86:	68e0      	ldr	r0, [r4, #12]
 800aa88:	9b03      	ldr	r3, [sp, #12]
 800aa8a:	4298      	cmp	r0, r3
 800aa8c:	bfb8      	it	lt
 800aa8e:	4618      	movlt	r0, r3
 800aa90:	e7a6      	b.n	800a9e0 <_printf_i+0x160>
 800aa92:	2301      	movs	r3, #1
 800aa94:	4632      	mov	r2, r6
 800aa96:	4649      	mov	r1, r9
 800aa98:	4640      	mov	r0, r8
 800aa9a:	47d0      	blx	sl
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	d09d      	beq.n	800a9dc <_printf_i+0x15c>
 800aaa0:	3501      	adds	r5, #1
 800aaa2:	68e3      	ldr	r3, [r4, #12]
 800aaa4:	9903      	ldr	r1, [sp, #12]
 800aaa6:	1a5b      	subs	r3, r3, r1
 800aaa8:	42ab      	cmp	r3, r5
 800aaaa:	dcf2      	bgt.n	800aa92 <_printf_i+0x212>
 800aaac:	e7eb      	b.n	800aa86 <_printf_i+0x206>
 800aaae:	2500      	movs	r5, #0
 800aab0:	f104 0619 	add.w	r6, r4, #25
 800aab4:	e7f5      	b.n	800aaa2 <_printf_i+0x222>
 800aab6:	bf00      	nop
 800aab8:	0800b697 	.word	0x0800b697
 800aabc:	0800b6a8 	.word	0x0800b6a8

0800aac0 <__sflush_r>:
 800aac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac8:	0716      	lsls	r6, r2, #28
 800aaca:	4605      	mov	r5, r0
 800aacc:	460c      	mov	r4, r1
 800aace:	d454      	bmi.n	800ab7a <__sflush_r+0xba>
 800aad0:	684b      	ldr	r3, [r1, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	dc02      	bgt.n	800aadc <__sflush_r+0x1c>
 800aad6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dd48      	ble.n	800ab6e <__sflush_r+0xae>
 800aadc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aade:	2e00      	cmp	r6, #0
 800aae0:	d045      	beq.n	800ab6e <__sflush_r+0xae>
 800aae2:	2300      	movs	r3, #0
 800aae4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aae8:	682f      	ldr	r7, [r5, #0]
 800aaea:	6a21      	ldr	r1, [r4, #32]
 800aaec:	602b      	str	r3, [r5, #0]
 800aaee:	d030      	beq.n	800ab52 <__sflush_r+0x92>
 800aaf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	0759      	lsls	r1, r3, #29
 800aaf6:	d505      	bpl.n	800ab04 <__sflush_r+0x44>
 800aaf8:	6863      	ldr	r3, [r4, #4]
 800aafa:	1ad2      	subs	r2, r2, r3
 800aafc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aafe:	b10b      	cbz	r3, 800ab04 <__sflush_r+0x44>
 800ab00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab02:	1ad2      	subs	r2, r2, r3
 800ab04:	2300      	movs	r3, #0
 800ab06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab08:	6a21      	ldr	r1, [r4, #32]
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	47b0      	blx	r6
 800ab0e:	1c43      	adds	r3, r0, #1
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	d106      	bne.n	800ab22 <__sflush_r+0x62>
 800ab14:	6829      	ldr	r1, [r5, #0]
 800ab16:	291d      	cmp	r1, #29
 800ab18:	d82b      	bhi.n	800ab72 <__sflush_r+0xb2>
 800ab1a:	4a2a      	ldr	r2, [pc, #168]	@ (800abc4 <__sflush_r+0x104>)
 800ab1c:	410a      	asrs	r2, r1
 800ab1e:	07d6      	lsls	r6, r2, #31
 800ab20:	d427      	bmi.n	800ab72 <__sflush_r+0xb2>
 800ab22:	2200      	movs	r2, #0
 800ab24:	6062      	str	r2, [r4, #4]
 800ab26:	04d9      	lsls	r1, r3, #19
 800ab28:	6922      	ldr	r2, [r4, #16]
 800ab2a:	6022      	str	r2, [r4, #0]
 800ab2c:	d504      	bpl.n	800ab38 <__sflush_r+0x78>
 800ab2e:	1c42      	adds	r2, r0, #1
 800ab30:	d101      	bne.n	800ab36 <__sflush_r+0x76>
 800ab32:	682b      	ldr	r3, [r5, #0]
 800ab34:	b903      	cbnz	r3, 800ab38 <__sflush_r+0x78>
 800ab36:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab3a:	602f      	str	r7, [r5, #0]
 800ab3c:	b1b9      	cbz	r1, 800ab6e <__sflush_r+0xae>
 800ab3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab42:	4299      	cmp	r1, r3
 800ab44:	d002      	beq.n	800ab4c <__sflush_r+0x8c>
 800ab46:	4628      	mov	r0, r5
 800ab48:	f7ff fbd4 	bl	800a2f4 <_free_r>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab50:	e00d      	b.n	800ab6e <__sflush_r+0xae>
 800ab52:	2301      	movs	r3, #1
 800ab54:	4628      	mov	r0, r5
 800ab56:	47b0      	blx	r6
 800ab58:	4602      	mov	r2, r0
 800ab5a:	1c50      	adds	r0, r2, #1
 800ab5c:	d1c9      	bne.n	800aaf2 <__sflush_r+0x32>
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d0c6      	beq.n	800aaf2 <__sflush_r+0x32>
 800ab64:	2b1d      	cmp	r3, #29
 800ab66:	d001      	beq.n	800ab6c <__sflush_r+0xac>
 800ab68:	2b16      	cmp	r3, #22
 800ab6a:	d11e      	bne.n	800abaa <__sflush_r+0xea>
 800ab6c:	602f      	str	r7, [r5, #0]
 800ab6e:	2000      	movs	r0, #0
 800ab70:	e022      	b.n	800abb8 <__sflush_r+0xf8>
 800ab72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab76:	b21b      	sxth	r3, r3
 800ab78:	e01b      	b.n	800abb2 <__sflush_r+0xf2>
 800ab7a:	690f      	ldr	r7, [r1, #16]
 800ab7c:	2f00      	cmp	r7, #0
 800ab7e:	d0f6      	beq.n	800ab6e <__sflush_r+0xae>
 800ab80:	0793      	lsls	r3, r2, #30
 800ab82:	680e      	ldr	r6, [r1, #0]
 800ab84:	bf08      	it	eq
 800ab86:	694b      	ldreq	r3, [r1, #20]
 800ab88:	600f      	str	r7, [r1, #0]
 800ab8a:	bf18      	it	ne
 800ab8c:	2300      	movne	r3, #0
 800ab8e:	eba6 0807 	sub.w	r8, r6, r7
 800ab92:	608b      	str	r3, [r1, #8]
 800ab94:	f1b8 0f00 	cmp.w	r8, #0
 800ab98:	dde9      	ble.n	800ab6e <__sflush_r+0xae>
 800ab9a:	6a21      	ldr	r1, [r4, #32]
 800ab9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab9e:	4643      	mov	r3, r8
 800aba0:	463a      	mov	r2, r7
 800aba2:	4628      	mov	r0, r5
 800aba4:	47b0      	blx	r6
 800aba6:	2800      	cmp	r0, #0
 800aba8:	dc08      	bgt.n	800abbc <__sflush_r+0xfc>
 800abaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abb2:	81a3      	strh	r3, [r4, #12]
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295
 800abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abbc:	4407      	add	r7, r0
 800abbe:	eba8 0800 	sub.w	r8, r8, r0
 800abc2:	e7e7      	b.n	800ab94 <__sflush_r+0xd4>
 800abc4:	dfbffffe 	.word	0xdfbffffe

0800abc8 <_fflush_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	690b      	ldr	r3, [r1, #16]
 800abcc:	4605      	mov	r5, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	b913      	cbnz	r3, 800abd8 <_fflush_r+0x10>
 800abd2:	2500      	movs	r5, #0
 800abd4:	4628      	mov	r0, r5
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	b118      	cbz	r0, 800abe2 <_fflush_r+0x1a>
 800abda:	6a03      	ldr	r3, [r0, #32]
 800abdc:	b90b      	cbnz	r3, 800abe2 <_fflush_r+0x1a>
 800abde:	f7ff f9e5 	bl	8009fac <__sinit>
 800abe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0f3      	beq.n	800abd2 <_fflush_r+0xa>
 800abea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abec:	07d0      	lsls	r0, r2, #31
 800abee:	d404      	bmi.n	800abfa <_fflush_r+0x32>
 800abf0:	0599      	lsls	r1, r3, #22
 800abf2:	d402      	bmi.n	800abfa <_fflush_r+0x32>
 800abf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abf6:	f7ff fb5c 	bl	800a2b2 <__retarget_lock_acquire_recursive>
 800abfa:	4628      	mov	r0, r5
 800abfc:	4621      	mov	r1, r4
 800abfe:	f7ff ff5f 	bl	800aac0 <__sflush_r>
 800ac02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac04:	07da      	lsls	r2, r3, #31
 800ac06:	4605      	mov	r5, r0
 800ac08:	d4e4      	bmi.n	800abd4 <_fflush_r+0xc>
 800ac0a:	89a3      	ldrh	r3, [r4, #12]
 800ac0c:	059b      	lsls	r3, r3, #22
 800ac0e:	d4e1      	bmi.n	800abd4 <_fflush_r+0xc>
 800ac10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac12:	f7ff fb4f 	bl	800a2b4 <__retarget_lock_release_recursive>
 800ac16:	e7dd      	b.n	800abd4 <_fflush_r+0xc>

0800ac18 <fiprintf>:
 800ac18:	b40e      	push	{r1, r2, r3}
 800ac1a:	b503      	push	{r0, r1, lr}
 800ac1c:	4601      	mov	r1, r0
 800ac1e:	ab03      	add	r3, sp, #12
 800ac20:	4805      	ldr	r0, [pc, #20]	@ (800ac38 <fiprintf+0x20>)
 800ac22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac26:	6800      	ldr	r0, [r0, #0]
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	f000 f89d 	bl	800ad68 <_vfiprintf_r>
 800ac2e:	b002      	add	sp, #8
 800ac30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac34:	b003      	add	sp, #12
 800ac36:	4770      	bx	lr
 800ac38:	200000dc 	.word	0x200000dc

0800ac3c <memmove>:
 800ac3c:	4288      	cmp	r0, r1
 800ac3e:	b510      	push	{r4, lr}
 800ac40:	eb01 0402 	add.w	r4, r1, r2
 800ac44:	d902      	bls.n	800ac4c <memmove+0x10>
 800ac46:	4284      	cmp	r4, r0
 800ac48:	4623      	mov	r3, r4
 800ac4a:	d807      	bhi.n	800ac5c <memmove+0x20>
 800ac4c:	1e43      	subs	r3, r0, #1
 800ac4e:	42a1      	cmp	r1, r4
 800ac50:	d008      	beq.n	800ac64 <memmove+0x28>
 800ac52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac5a:	e7f8      	b.n	800ac4e <memmove+0x12>
 800ac5c:	4402      	add	r2, r0
 800ac5e:	4601      	mov	r1, r0
 800ac60:	428a      	cmp	r2, r1
 800ac62:	d100      	bne.n	800ac66 <memmove+0x2a>
 800ac64:	bd10      	pop	{r4, pc}
 800ac66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac6e:	e7f7      	b.n	800ac60 <memmove+0x24>

0800ac70 <_sbrk_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4d06      	ldr	r5, [pc, #24]	@ (800ac8c <_sbrk_r+0x1c>)
 800ac74:	2300      	movs	r3, #0
 800ac76:	4604      	mov	r4, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	602b      	str	r3, [r5, #0]
 800ac7c:	f7f6 fa50 	bl	8001120 <_sbrk>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d102      	bne.n	800ac8a <_sbrk_r+0x1a>
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	b103      	cbz	r3, 800ac8a <_sbrk_r+0x1a>
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	200007ac 	.word	0x200007ac

0800ac90 <memcpy>:
 800ac90:	440a      	add	r2, r1
 800ac92:	4291      	cmp	r1, r2
 800ac94:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac98:	d100      	bne.n	800ac9c <memcpy+0xc>
 800ac9a:	4770      	bx	lr
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aca6:	4291      	cmp	r1, r2
 800aca8:	d1f9      	bne.n	800ac9e <memcpy+0xe>
 800acaa:	bd10      	pop	{r4, pc}

0800acac <abort>:
 800acac:	b508      	push	{r3, lr}
 800acae:	2006      	movs	r0, #6
 800acb0:	f000 fa2e 	bl	800b110 <raise>
 800acb4:	2001      	movs	r0, #1
 800acb6:	f7f6 f9bb 	bl	8001030 <_exit>

0800acba <_realloc_r>:
 800acba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbe:	4680      	mov	r8, r0
 800acc0:	4615      	mov	r5, r2
 800acc2:	460c      	mov	r4, r1
 800acc4:	b921      	cbnz	r1, 800acd0 <_realloc_r+0x16>
 800acc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acca:	4611      	mov	r1, r2
 800accc:	f7ff bb86 	b.w	800a3dc <_malloc_r>
 800acd0:	b92a      	cbnz	r2, 800acde <_realloc_r+0x24>
 800acd2:	f7ff fb0f 	bl	800a2f4 <_free_r>
 800acd6:	2400      	movs	r4, #0
 800acd8:	4620      	mov	r0, r4
 800acda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acde:	f000 fa33 	bl	800b148 <_malloc_usable_size_r>
 800ace2:	4285      	cmp	r5, r0
 800ace4:	4606      	mov	r6, r0
 800ace6:	d802      	bhi.n	800acee <_realloc_r+0x34>
 800ace8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800acec:	d8f4      	bhi.n	800acd8 <_realloc_r+0x1e>
 800acee:	4629      	mov	r1, r5
 800acf0:	4640      	mov	r0, r8
 800acf2:	f7ff fb73 	bl	800a3dc <_malloc_r>
 800acf6:	4607      	mov	r7, r0
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d0ec      	beq.n	800acd6 <_realloc_r+0x1c>
 800acfc:	42b5      	cmp	r5, r6
 800acfe:	462a      	mov	r2, r5
 800ad00:	4621      	mov	r1, r4
 800ad02:	bf28      	it	cs
 800ad04:	4632      	movcs	r2, r6
 800ad06:	f7ff ffc3 	bl	800ac90 <memcpy>
 800ad0a:	4621      	mov	r1, r4
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	f7ff faf1 	bl	800a2f4 <_free_r>
 800ad12:	463c      	mov	r4, r7
 800ad14:	e7e0      	b.n	800acd8 <_realloc_r+0x1e>

0800ad16 <__sfputc_r>:
 800ad16:	6893      	ldr	r3, [r2, #8]
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	b410      	push	{r4}
 800ad1e:	6093      	str	r3, [r2, #8]
 800ad20:	da08      	bge.n	800ad34 <__sfputc_r+0x1e>
 800ad22:	6994      	ldr	r4, [r2, #24]
 800ad24:	42a3      	cmp	r3, r4
 800ad26:	db01      	blt.n	800ad2c <__sfputc_r+0x16>
 800ad28:	290a      	cmp	r1, #10
 800ad2a:	d103      	bne.n	800ad34 <__sfputc_r+0x1e>
 800ad2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad30:	f000 b932 	b.w	800af98 <__swbuf_r>
 800ad34:	6813      	ldr	r3, [r2, #0]
 800ad36:	1c58      	adds	r0, r3, #1
 800ad38:	6010      	str	r0, [r2, #0]
 800ad3a:	7019      	strb	r1, [r3, #0]
 800ad3c:	4608      	mov	r0, r1
 800ad3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <__sfputs_r>:
 800ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad46:	4606      	mov	r6, r0
 800ad48:	460f      	mov	r7, r1
 800ad4a:	4614      	mov	r4, r2
 800ad4c:	18d5      	adds	r5, r2, r3
 800ad4e:	42ac      	cmp	r4, r5
 800ad50:	d101      	bne.n	800ad56 <__sfputs_r+0x12>
 800ad52:	2000      	movs	r0, #0
 800ad54:	e007      	b.n	800ad66 <__sfputs_r+0x22>
 800ad56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5a:	463a      	mov	r2, r7
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	f7ff ffda 	bl	800ad16 <__sfputc_r>
 800ad62:	1c43      	adds	r3, r0, #1
 800ad64:	d1f3      	bne.n	800ad4e <__sfputs_r+0xa>
 800ad66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad68 <_vfiprintf_r>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	460d      	mov	r5, r1
 800ad6e:	b09d      	sub	sp, #116	@ 0x74
 800ad70:	4614      	mov	r4, r2
 800ad72:	4698      	mov	r8, r3
 800ad74:	4606      	mov	r6, r0
 800ad76:	b118      	cbz	r0, 800ad80 <_vfiprintf_r+0x18>
 800ad78:	6a03      	ldr	r3, [r0, #32]
 800ad7a:	b90b      	cbnz	r3, 800ad80 <_vfiprintf_r+0x18>
 800ad7c:	f7ff f916 	bl	8009fac <__sinit>
 800ad80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad82:	07d9      	lsls	r1, r3, #31
 800ad84:	d405      	bmi.n	800ad92 <_vfiprintf_r+0x2a>
 800ad86:	89ab      	ldrh	r3, [r5, #12]
 800ad88:	059a      	lsls	r2, r3, #22
 800ad8a:	d402      	bmi.n	800ad92 <_vfiprintf_r+0x2a>
 800ad8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad8e:	f7ff fa90 	bl	800a2b2 <__retarget_lock_acquire_recursive>
 800ad92:	89ab      	ldrh	r3, [r5, #12]
 800ad94:	071b      	lsls	r3, r3, #28
 800ad96:	d501      	bpl.n	800ad9c <_vfiprintf_r+0x34>
 800ad98:	692b      	ldr	r3, [r5, #16]
 800ad9a:	b99b      	cbnz	r3, 800adc4 <_vfiprintf_r+0x5c>
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f000 f938 	bl	800b014 <__swsetup_r>
 800ada4:	b170      	cbz	r0, 800adc4 <_vfiprintf_r+0x5c>
 800ada6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ada8:	07dc      	lsls	r4, r3, #31
 800adaa:	d504      	bpl.n	800adb6 <_vfiprintf_r+0x4e>
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	b01d      	add	sp, #116	@ 0x74
 800adb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb6:	89ab      	ldrh	r3, [r5, #12]
 800adb8:	0598      	lsls	r0, r3, #22
 800adba:	d4f7      	bmi.n	800adac <_vfiprintf_r+0x44>
 800adbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adbe:	f7ff fa79 	bl	800a2b4 <__retarget_lock_release_recursive>
 800adc2:	e7f3      	b.n	800adac <_vfiprintf_r+0x44>
 800adc4:	2300      	movs	r3, #0
 800adc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800adc8:	2320      	movs	r3, #32
 800adca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adce:	f8cd 800c 	str.w	r8, [sp, #12]
 800add2:	2330      	movs	r3, #48	@ 0x30
 800add4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af84 <_vfiprintf_r+0x21c>
 800add8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800addc:	f04f 0901 	mov.w	r9, #1
 800ade0:	4623      	mov	r3, r4
 800ade2:	469a      	mov	sl, r3
 800ade4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ade8:	b10a      	cbz	r2, 800adee <_vfiprintf_r+0x86>
 800adea:	2a25      	cmp	r2, #37	@ 0x25
 800adec:	d1f9      	bne.n	800ade2 <_vfiprintf_r+0x7a>
 800adee:	ebba 0b04 	subs.w	fp, sl, r4
 800adf2:	d00b      	beq.n	800ae0c <_vfiprintf_r+0xa4>
 800adf4:	465b      	mov	r3, fp
 800adf6:	4622      	mov	r2, r4
 800adf8:	4629      	mov	r1, r5
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7ff ffa2 	bl	800ad44 <__sfputs_r>
 800ae00:	3001      	adds	r0, #1
 800ae02:	f000 80a7 	beq.w	800af54 <_vfiprintf_r+0x1ec>
 800ae06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae08:	445a      	add	r2, fp
 800ae0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 809f 	beq.w	800af54 <_vfiprintf_r+0x1ec>
 800ae16:	2300      	movs	r3, #0
 800ae18:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae20:	f10a 0a01 	add.w	sl, sl, #1
 800ae24:	9304      	str	r3, [sp, #16]
 800ae26:	9307      	str	r3, [sp, #28]
 800ae28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae2e:	4654      	mov	r4, sl
 800ae30:	2205      	movs	r2, #5
 800ae32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae36:	4853      	ldr	r0, [pc, #332]	@ (800af84 <_vfiprintf_r+0x21c>)
 800ae38:	f7f5 fa0a 	bl	8000250 <memchr>
 800ae3c:	9a04      	ldr	r2, [sp, #16]
 800ae3e:	b9d8      	cbnz	r0, 800ae78 <_vfiprintf_r+0x110>
 800ae40:	06d1      	lsls	r1, r2, #27
 800ae42:	bf44      	itt	mi
 800ae44:	2320      	movmi	r3, #32
 800ae46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae4a:	0713      	lsls	r3, r2, #28
 800ae4c:	bf44      	itt	mi
 800ae4e:	232b      	movmi	r3, #43	@ 0x2b
 800ae50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae54:	f89a 3000 	ldrb.w	r3, [sl]
 800ae58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae5a:	d015      	beq.n	800ae88 <_vfiprintf_r+0x120>
 800ae5c:	9a07      	ldr	r2, [sp, #28]
 800ae5e:	4654      	mov	r4, sl
 800ae60:	2000      	movs	r0, #0
 800ae62:	f04f 0c0a 	mov.w	ip, #10
 800ae66:	4621      	mov	r1, r4
 800ae68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae6c:	3b30      	subs	r3, #48	@ 0x30
 800ae6e:	2b09      	cmp	r3, #9
 800ae70:	d94b      	bls.n	800af0a <_vfiprintf_r+0x1a2>
 800ae72:	b1b0      	cbz	r0, 800aea2 <_vfiprintf_r+0x13a>
 800ae74:	9207      	str	r2, [sp, #28]
 800ae76:	e014      	b.n	800aea2 <_vfiprintf_r+0x13a>
 800ae78:	eba0 0308 	sub.w	r3, r0, r8
 800ae7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae80:	4313      	orrs	r3, r2
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	46a2      	mov	sl, r4
 800ae86:	e7d2      	b.n	800ae2e <_vfiprintf_r+0xc6>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	1d19      	adds	r1, r3, #4
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	9103      	str	r1, [sp, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	bfbb      	ittet	lt
 800ae94:	425b      	neglt	r3, r3
 800ae96:	f042 0202 	orrlt.w	r2, r2, #2
 800ae9a:	9307      	strge	r3, [sp, #28]
 800ae9c:	9307      	strlt	r3, [sp, #28]
 800ae9e:	bfb8      	it	lt
 800aea0:	9204      	strlt	r2, [sp, #16]
 800aea2:	7823      	ldrb	r3, [r4, #0]
 800aea4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aea6:	d10a      	bne.n	800aebe <_vfiprintf_r+0x156>
 800aea8:	7863      	ldrb	r3, [r4, #1]
 800aeaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeac:	d132      	bne.n	800af14 <_vfiprintf_r+0x1ac>
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	1d1a      	adds	r2, r3, #4
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	9203      	str	r2, [sp, #12]
 800aeb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeba:	3402      	adds	r4, #2
 800aebc:	9305      	str	r3, [sp, #20]
 800aebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af94 <_vfiprintf_r+0x22c>
 800aec2:	7821      	ldrb	r1, [r4, #0]
 800aec4:	2203      	movs	r2, #3
 800aec6:	4650      	mov	r0, sl
 800aec8:	f7f5 f9c2 	bl	8000250 <memchr>
 800aecc:	b138      	cbz	r0, 800aede <_vfiprintf_r+0x176>
 800aece:	9b04      	ldr	r3, [sp, #16]
 800aed0:	eba0 000a 	sub.w	r0, r0, sl
 800aed4:	2240      	movs	r2, #64	@ 0x40
 800aed6:	4082      	lsls	r2, r0
 800aed8:	4313      	orrs	r3, r2
 800aeda:	3401      	adds	r4, #1
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee2:	4829      	ldr	r0, [pc, #164]	@ (800af88 <_vfiprintf_r+0x220>)
 800aee4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aee8:	2206      	movs	r2, #6
 800aeea:	f7f5 f9b1 	bl	8000250 <memchr>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d03f      	beq.n	800af72 <_vfiprintf_r+0x20a>
 800aef2:	4b26      	ldr	r3, [pc, #152]	@ (800af8c <_vfiprintf_r+0x224>)
 800aef4:	bb1b      	cbnz	r3, 800af3e <_vfiprintf_r+0x1d6>
 800aef6:	9b03      	ldr	r3, [sp, #12]
 800aef8:	3307      	adds	r3, #7
 800aefa:	f023 0307 	bic.w	r3, r3, #7
 800aefe:	3308      	adds	r3, #8
 800af00:	9303      	str	r3, [sp, #12]
 800af02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af04:	443b      	add	r3, r7
 800af06:	9309      	str	r3, [sp, #36]	@ 0x24
 800af08:	e76a      	b.n	800ade0 <_vfiprintf_r+0x78>
 800af0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af0e:	460c      	mov	r4, r1
 800af10:	2001      	movs	r0, #1
 800af12:	e7a8      	b.n	800ae66 <_vfiprintf_r+0xfe>
 800af14:	2300      	movs	r3, #0
 800af16:	3401      	adds	r4, #1
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	4619      	mov	r1, r3
 800af1c:	f04f 0c0a 	mov.w	ip, #10
 800af20:	4620      	mov	r0, r4
 800af22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af26:	3a30      	subs	r2, #48	@ 0x30
 800af28:	2a09      	cmp	r2, #9
 800af2a:	d903      	bls.n	800af34 <_vfiprintf_r+0x1cc>
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0c6      	beq.n	800aebe <_vfiprintf_r+0x156>
 800af30:	9105      	str	r1, [sp, #20]
 800af32:	e7c4      	b.n	800aebe <_vfiprintf_r+0x156>
 800af34:	fb0c 2101 	mla	r1, ip, r1, r2
 800af38:	4604      	mov	r4, r0
 800af3a:	2301      	movs	r3, #1
 800af3c:	e7f0      	b.n	800af20 <_vfiprintf_r+0x1b8>
 800af3e:	ab03      	add	r3, sp, #12
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	462a      	mov	r2, r5
 800af44:	4b12      	ldr	r3, [pc, #72]	@ (800af90 <_vfiprintf_r+0x228>)
 800af46:	a904      	add	r1, sp, #16
 800af48:	4630      	mov	r0, r6
 800af4a:	f3af 8000 	nop.w
 800af4e:	4607      	mov	r7, r0
 800af50:	1c78      	adds	r0, r7, #1
 800af52:	d1d6      	bne.n	800af02 <_vfiprintf_r+0x19a>
 800af54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af56:	07d9      	lsls	r1, r3, #31
 800af58:	d405      	bmi.n	800af66 <_vfiprintf_r+0x1fe>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	059a      	lsls	r2, r3, #22
 800af5e:	d402      	bmi.n	800af66 <_vfiprintf_r+0x1fe>
 800af60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af62:	f7ff f9a7 	bl	800a2b4 <__retarget_lock_release_recursive>
 800af66:	89ab      	ldrh	r3, [r5, #12]
 800af68:	065b      	lsls	r3, r3, #25
 800af6a:	f53f af1f 	bmi.w	800adac <_vfiprintf_r+0x44>
 800af6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af70:	e71e      	b.n	800adb0 <_vfiprintf_r+0x48>
 800af72:	ab03      	add	r3, sp, #12
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	462a      	mov	r2, r5
 800af78:	4b05      	ldr	r3, [pc, #20]	@ (800af90 <_vfiprintf_r+0x228>)
 800af7a:	a904      	add	r1, sp, #16
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7ff fc7f 	bl	800a880 <_printf_i>
 800af82:	e7e4      	b.n	800af4e <_vfiprintf_r+0x1e6>
 800af84:	0800b686 	.word	0x0800b686
 800af88:	0800b690 	.word	0x0800b690
 800af8c:	00000000 	.word	0x00000000
 800af90:	0800ad45 	.word	0x0800ad45
 800af94:	0800b68c 	.word	0x0800b68c

0800af98 <__swbuf_r>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	460e      	mov	r6, r1
 800af9c:	4614      	mov	r4, r2
 800af9e:	4605      	mov	r5, r0
 800afa0:	b118      	cbz	r0, 800afaa <__swbuf_r+0x12>
 800afa2:	6a03      	ldr	r3, [r0, #32]
 800afa4:	b90b      	cbnz	r3, 800afaa <__swbuf_r+0x12>
 800afa6:	f7ff f801 	bl	8009fac <__sinit>
 800afaa:	69a3      	ldr	r3, [r4, #24]
 800afac:	60a3      	str	r3, [r4, #8]
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	071a      	lsls	r2, r3, #28
 800afb2:	d501      	bpl.n	800afb8 <__swbuf_r+0x20>
 800afb4:	6923      	ldr	r3, [r4, #16]
 800afb6:	b943      	cbnz	r3, 800afca <__swbuf_r+0x32>
 800afb8:	4621      	mov	r1, r4
 800afba:	4628      	mov	r0, r5
 800afbc:	f000 f82a 	bl	800b014 <__swsetup_r>
 800afc0:	b118      	cbz	r0, 800afca <__swbuf_r+0x32>
 800afc2:	f04f 37ff 	mov.w	r7, #4294967295
 800afc6:	4638      	mov	r0, r7
 800afc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	6922      	ldr	r2, [r4, #16]
 800afce:	1a98      	subs	r0, r3, r2
 800afd0:	6963      	ldr	r3, [r4, #20]
 800afd2:	b2f6      	uxtb	r6, r6
 800afd4:	4283      	cmp	r3, r0
 800afd6:	4637      	mov	r7, r6
 800afd8:	dc05      	bgt.n	800afe6 <__swbuf_r+0x4e>
 800afda:	4621      	mov	r1, r4
 800afdc:	4628      	mov	r0, r5
 800afde:	f7ff fdf3 	bl	800abc8 <_fflush_r>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d1ed      	bne.n	800afc2 <__swbuf_r+0x2a>
 800afe6:	68a3      	ldr	r3, [r4, #8]
 800afe8:	3b01      	subs	r3, #1
 800afea:	60a3      	str	r3, [r4, #8]
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	6022      	str	r2, [r4, #0]
 800aff2:	701e      	strb	r6, [r3, #0]
 800aff4:	6962      	ldr	r2, [r4, #20]
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	429a      	cmp	r2, r3
 800affa:	d004      	beq.n	800b006 <__swbuf_r+0x6e>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	07db      	lsls	r3, r3, #31
 800b000:	d5e1      	bpl.n	800afc6 <__swbuf_r+0x2e>
 800b002:	2e0a      	cmp	r6, #10
 800b004:	d1df      	bne.n	800afc6 <__swbuf_r+0x2e>
 800b006:	4621      	mov	r1, r4
 800b008:	4628      	mov	r0, r5
 800b00a:	f7ff fddd 	bl	800abc8 <_fflush_r>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d0d9      	beq.n	800afc6 <__swbuf_r+0x2e>
 800b012:	e7d6      	b.n	800afc2 <__swbuf_r+0x2a>

0800b014 <__swsetup_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4b29      	ldr	r3, [pc, #164]	@ (800b0bc <__swsetup_r+0xa8>)
 800b018:	4605      	mov	r5, r0
 800b01a:	6818      	ldr	r0, [r3, #0]
 800b01c:	460c      	mov	r4, r1
 800b01e:	b118      	cbz	r0, 800b028 <__swsetup_r+0x14>
 800b020:	6a03      	ldr	r3, [r0, #32]
 800b022:	b90b      	cbnz	r3, 800b028 <__swsetup_r+0x14>
 800b024:	f7fe ffc2 	bl	8009fac <__sinit>
 800b028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b02c:	0719      	lsls	r1, r3, #28
 800b02e:	d422      	bmi.n	800b076 <__swsetup_r+0x62>
 800b030:	06da      	lsls	r2, r3, #27
 800b032:	d407      	bmi.n	800b044 <__swsetup_r+0x30>
 800b034:	2209      	movs	r2, #9
 800b036:	602a      	str	r2, [r5, #0]
 800b038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	f04f 30ff 	mov.w	r0, #4294967295
 800b042:	e033      	b.n	800b0ac <__swsetup_r+0x98>
 800b044:	0758      	lsls	r0, r3, #29
 800b046:	d512      	bpl.n	800b06e <__swsetup_r+0x5a>
 800b048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b04a:	b141      	cbz	r1, 800b05e <__swsetup_r+0x4a>
 800b04c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b050:	4299      	cmp	r1, r3
 800b052:	d002      	beq.n	800b05a <__swsetup_r+0x46>
 800b054:	4628      	mov	r0, r5
 800b056:	f7ff f94d 	bl	800a2f4 <_free_r>
 800b05a:	2300      	movs	r3, #0
 800b05c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	2300      	movs	r3, #0
 800b068:	6063      	str	r3, [r4, #4]
 800b06a:	6923      	ldr	r3, [r4, #16]
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	89a3      	ldrh	r3, [r4, #12]
 800b070:	f043 0308 	orr.w	r3, r3, #8
 800b074:	81a3      	strh	r3, [r4, #12]
 800b076:	6923      	ldr	r3, [r4, #16]
 800b078:	b94b      	cbnz	r3, 800b08e <__swsetup_r+0x7a>
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b084:	d003      	beq.n	800b08e <__swsetup_r+0x7a>
 800b086:	4621      	mov	r1, r4
 800b088:	4628      	mov	r0, r5
 800b08a:	f000 f88b 	bl	800b1a4 <__smakebuf_r>
 800b08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b092:	f013 0201 	ands.w	r2, r3, #1
 800b096:	d00a      	beq.n	800b0ae <__swsetup_r+0x9a>
 800b098:	2200      	movs	r2, #0
 800b09a:	60a2      	str	r2, [r4, #8]
 800b09c:	6962      	ldr	r2, [r4, #20]
 800b09e:	4252      	negs	r2, r2
 800b0a0:	61a2      	str	r2, [r4, #24]
 800b0a2:	6922      	ldr	r2, [r4, #16]
 800b0a4:	b942      	cbnz	r2, 800b0b8 <__swsetup_r+0xa4>
 800b0a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0aa:	d1c5      	bne.n	800b038 <__swsetup_r+0x24>
 800b0ac:	bd38      	pop	{r3, r4, r5, pc}
 800b0ae:	0799      	lsls	r1, r3, #30
 800b0b0:	bf58      	it	pl
 800b0b2:	6962      	ldrpl	r2, [r4, #20]
 800b0b4:	60a2      	str	r2, [r4, #8]
 800b0b6:	e7f4      	b.n	800b0a2 <__swsetup_r+0x8e>
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	e7f7      	b.n	800b0ac <__swsetup_r+0x98>
 800b0bc:	200000dc 	.word	0x200000dc

0800b0c0 <_raise_r>:
 800b0c0:	291f      	cmp	r1, #31
 800b0c2:	b538      	push	{r3, r4, r5, lr}
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	d904      	bls.n	800b0d4 <_raise_r+0x14>
 800b0ca:	2316      	movs	r3, #22
 800b0cc:	6003      	str	r3, [r0, #0]
 800b0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0d6:	b112      	cbz	r2, 800b0de <_raise_r+0x1e>
 800b0d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0dc:	b94b      	cbnz	r3, 800b0f2 <_raise_r+0x32>
 800b0de:	4628      	mov	r0, r5
 800b0e0:	f000 f830 	bl	800b144 <_getpid_r>
 800b0e4:	4622      	mov	r2, r4
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ee:	f000 b817 	b.w	800b120 <_kill_r>
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d00a      	beq.n	800b10c <_raise_r+0x4c>
 800b0f6:	1c59      	adds	r1, r3, #1
 800b0f8:	d103      	bne.n	800b102 <_raise_r+0x42>
 800b0fa:	2316      	movs	r3, #22
 800b0fc:	6003      	str	r3, [r0, #0]
 800b0fe:	2001      	movs	r0, #1
 800b100:	e7e7      	b.n	800b0d2 <_raise_r+0x12>
 800b102:	2100      	movs	r1, #0
 800b104:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b108:	4620      	mov	r0, r4
 800b10a:	4798      	blx	r3
 800b10c:	2000      	movs	r0, #0
 800b10e:	e7e0      	b.n	800b0d2 <_raise_r+0x12>

0800b110 <raise>:
 800b110:	4b02      	ldr	r3, [pc, #8]	@ (800b11c <raise+0xc>)
 800b112:	4601      	mov	r1, r0
 800b114:	6818      	ldr	r0, [r3, #0]
 800b116:	f7ff bfd3 	b.w	800b0c0 <_raise_r>
 800b11a:	bf00      	nop
 800b11c:	200000dc 	.word	0x200000dc

0800b120 <_kill_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d07      	ldr	r5, [pc, #28]	@ (800b140 <_kill_r+0x20>)
 800b124:	2300      	movs	r3, #0
 800b126:	4604      	mov	r4, r0
 800b128:	4608      	mov	r0, r1
 800b12a:	4611      	mov	r1, r2
 800b12c:	602b      	str	r3, [r5, #0]
 800b12e:	f7f5 ff6f 	bl	8001010 <_kill>
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	d102      	bne.n	800b13c <_kill_r+0x1c>
 800b136:	682b      	ldr	r3, [r5, #0]
 800b138:	b103      	cbz	r3, 800b13c <_kill_r+0x1c>
 800b13a:	6023      	str	r3, [r4, #0]
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	bf00      	nop
 800b140:	200007ac 	.word	0x200007ac

0800b144 <_getpid_r>:
 800b144:	f7f5 bf5c 	b.w	8001000 <_getpid>

0800b148 <_malloc_usable_size_r>:
 800b148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b14c:	1f18      	subs	r0, r3, #4
 800b14e:	2b00      	cmp	r3, #0
 800b150:	bfbc      	itt	lt
 800b152:	580b      	ldrlt	r3, [r1, r0]
 800b154:	18c0      	addlt	r0, r0, r3
 800b156:	4770      	bx	lr

0800b158 <__swhatbuf_r>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	460c      	mov	r4, r1
 800b15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b160:	2900      	cmp	r1, #0
 800b162:	b096      	sub	sp, #88	@ 0x58
 800b164:	4615      	mov	r5, r2
 800b166:	461e      	mov	r6, r3
 800b168:	da0d      	bge.n	800b186 <__swhatbuf_r+0x2e>
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b170:	f04f 0100 	mov.w	r1, #0
 800b174:	bf14      	ite	ne
 800b176:	2340      	movne	r3, #64	@ 0x40
 800b178:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b17c:	2000      	movs	r0, #0
 800b17e:	6031      	str	r1, [r6, #0]
 800b180:	602b      	str	r3, [r5, #0]
 800b182:	b016      	add	sp, #88	@ 0x58
 800b184:	bd70      	pop	{r4, r5, r6, pc}
 800b186:	466a      	mov	r2, sp
 800b188:	f000 f848 	bl	800b21c <_fstat_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	dbec      	blt.n	800b16a <__swhatbuf_r+0x12>
 800b190:	9901      	ldr	r1, [sp, #4]
 800b192:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b196:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b19a:	4259      	negs	r1, r3
 800b19c:	4159      	adcs	r1, r3
 800b19e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1a2:	e7eb      	b.n	800b17c <__swhatbuf_r+0x24>

0800b1a4 <__smakebuf_r>:
 800b1a4:	898b      	ldrh	r3, [r1, #12]
 800b1a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1a8:	079d      	lsls	r5, r3, #30
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	d507      	bpl.n	800b1c0 <__smakebuf_r+0x1c>
 800b1b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	6123      	str	r3, [r4, #16]
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	6163      	str	r3, [r4, #20]
 800b1bc:	b003      	add	sp, #12
 800b1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1c0:	ab01      	add	r3, sp, #4
 800b1c2:	466a      	mov	r2, sp
 800b1c4:	f7ff ffc8 	bl	800b158 <__swhatbuf_r>
 800b1c8:	9f00      	ldr	r7, [sp, #0]
 800b1ca:	4605      	mov	r5, r0
 800b1cc:	4639      	mov	r1, r7
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f7ff f904 	bl	800a3dc <_malloc_r>
 800b1d4:	b948      	cbnz	r0, 800b1ea <__smakebuf_r+0x46>
 800b1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1da:	059a      	lsls	r2, r3, #22
 800b1dc:	d4ee      	bmi.n	800b1bc <__smakebuf_r+0x18>
 800b1de:	f023 0303 	bic.w	r3, r3, #3
 800b1e2:	f043 0302 	orr.w	r3, r3, #2
 800b1e6:	81a3      	strh	r3, [r4, #12]
 800b1e8:	e7e2      	b.n	800b1b0 <__smakebuf_r+0xc>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	6020      	str	r0, [r4, #0]
 800b1ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	9b01      	ldr	r3, [sp, #4]
 800b1f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1fa:	b15b      	cbz	r3, 800b214 <__smakebuf_r+0x70>
 800b1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b200:	4630      	mov	r0, r6
 800b202:	f000 f81d 	bl	800b240 <_isatty_r>
 800b206:	b128      	cbz	r0, 800b214 <__smakebuf_r+0x70>
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	f023 0303 	bic.w	r3, r3, #3
 800b20e:	f043 0301 	orr.w	r3, r3, #1
 800b212:	81a3      	strh	r3, [r4, #12]
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	431d      	orrs	r5, r3
 800b218:	81a5      	strh	r5, [r4, #12]
 800b21a:	e7cf      	b.n	800b1bc <__smakebuf_r+0x18>

0800b21c <_fstat_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4d07      	ldr	r5, [pc, #28]	@ (800b23c <_fstat_r+0x20>)
 800b220:	2300      	movs	r3, #0
 800b222:	4604      	mov	r4, r0
 800b224:	4608      	mov	r0, r1
 800b226:	4611      	mov	r1, r2
 800b228:	602b      	str	r3, [r5, #0]
 800b22a:	f7f5 ff51 	bl	80010d0 <_fstat>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d102      	bne.n	800b238 <_fstat_r+0x1c>
 800b232:	682b      	ldr	r3, [r5, #0]
 800b234:	b103      	cbz	r3, 800b238 <_fstat_r+0x1c>
 800b236:	6023      	str	r3, [r4, #0]
 800b238:	bd38      	pop	{r3, r4, r5, pc}
 800b23a:	bf00      	nop
 800b23c:	200007ac 	.word	0x200007ac

0800b240 <_isatty_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4d06      	ldr	r5, [pc, #24]	@ (800b25c <_isatty_r+0x1c>)
 800b244:	2300      	movs	r3, #0
 800b246:	4604      	mov	r4, r0
 800b248:	4608      	mov	r0, r1
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	f7f5 ff50 	bl	80010f0 <_isatty>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_isatty_r+0x1a>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_isatty_r+0x1a>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	200007ac 	.word	0x200007ac

0800b260 <_init>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr

0800b26c <_fini>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr
